[
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/android_webview/browser/metrics/aw_metrics_service_client.h#L48-L111",
    "ascii": "// AwMetricsServiceClient is a singleton which manages WebView metrics\n// collection.\n//\n// Metrics should be enabled iff all these conditions are met:\n//  - The user has not opted out (controlled by GMS).\n//  - The app has not opted out (controlled by manifest tag).\n//  - This client is in the 2% sample (controlled by client ID hash).\n// The first two are recorded in |user_consent_| and |app_consent_|, which are\n// set by SetHaveMetricsConsent(). The last is recorded in |is_in_sample_|.\n//\n// Metrics are pseudonymously identified by a randomly-generated \"client ID\".\n// WebView stores this in prefs, written to the app's data directory. There's a\n// different such directory for each user, for each app, on each device. So the\n// ID should be unique per (device, app, user) tuple.\n//\n// To avoid the appearance that we're doing anything sneaky, the client ID\n// should only be created and retained when neither the user nor the app have\n// opted out. Otherwise, the presence of the ID could give the impression that\n// metrics were being collected.\n//\n// WebView metrics set up happens like so:\n//\n//   startup\n//      │\n//      ├────────────┐\n//      │            ▼\n//      │         query GMS for consent\n//      ▼            │\n//   Initialize()    │\n//      │            ▼\n//      │         SetHaveMetricsConsent()\n//      │            │\n//      │ ┌──────────┘\n//      ▼ ▼\n//   MaybeStartMetrics()\n//      │\n//      ▼\n//   MetricsService::Start()\n//\n// All the named functions in this diagram happen on the UI thread. Querying GMS\n// happens in the background, and the result is posted back to the UI thread, to\n// SetHaveMetricsConsent(). Querying GMS is slow, so SetHaveMetricsConsent()\n// typically happens after Initialize(), but it may happen before.\n//\n// Each path sets a flag, |init_finished_| or |set_consent_finished_|, to show\n// that path has finished, and then calls MaybeStartMetrics(). When\n// MaybeStartMetrics() is called the first time, it sees only one flag is true,\n// and does nothing. When MaybeStartMetrics() is called the second time, it\n// decides whether to start metrics.\n//\n// If consent was granted, MaybeStartMetrics() determines sampling by hashing\n// the client ID (generating a new ID if there was none). If this client is in\n// the sample, it then calls MetricsService::Start(). If consent was not\n// granted, MaybeStartMetrics() instead clears the client ID, if any.\n//\n// Similarly, when\n// `android_webview::features::kWebViewAppsPackageNamesAllowlist` is enabled,\n// WebView will try to lookup the embedding app's package name in a list of apps\n// whose package names are allowed to be recorded. This operation takes place on\n// a background thread. The result of the lookup is then posted back on the UI\n// thread and SetAppPackageNameLoggingRule() will be called. Unlike user's\n// consent, the metrics service doesn't currently block on the allowlist lookup\n// result. If the result isn't present at the moment of creating a metrics log,\n// it assumes that the app package name isn't allowed to be logged.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/android_webview/browser/metrics/aw_metrics_service_client.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/android_webview/browser/safe_browsing/aw_safe_browsing_allowlist_manager.cc#L24-L51",
    "ascii": "// This is a simple trie structure designed for handling host/domain matches\n// for Safebrowsing allowlisting. For the match rules, see the class header.\n//\n// It is easy to visualize the trie edges as hostname components of a url in\n// reverse order. For example an allowlist of google.com will have a tree\n// tree structure as below.\n//                       root\n//                         | com\n//                       Node1\n//                google/    \\ example\n//                   Node2   Node3\n//\n// Normally, a search in the tree should end in a leaf node for a positive\n// match. For example in the tree above com.google and com.example are matches.\n// However, the allowlisting also allows matching subdomains if there is a\n// leading dot,  for example, see .\"google.com\" and a.google.com below:\n//                       root\n//                         | com\n//                       Node1\n//                         | google\n//                       Node2\n//                         | a\n//                       Node3\n// Here, both Node2 and Node3 are valid terminal nodes to terminate a match.\n// The boolean is_terminal indicates whether a node can successfully terminate\n// a search (aka. whether this rule was entered to the allowlist) and\n// match_prefix indicate if this should match exactly, or just do a prefix\n// match.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/android_webview/browser/safe_browsing/aw_safe_browsing_allowlist_manager.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/components/arc/mojom/payment_app.mojom#L123-L137",
    "ascii": "// The service that runs in ARC and allows the browser to invoke the TWA payment\n// app that is installed in ARC, if it implements payment intents as described\n// in https://web.dev/android-payment-apps-overview/. At first, only\n// \"https://play.google.com/billing\" payment method is supported.\n//\n// --------------------      --------------------------------------------------\n// |     Browser      |      |                      ARC                       |\n// |                  |      |                                                |\n// | ---------------  |      |  --------------    -------    ---------------- |\n// | | Web Payment |<-|------|->| PaymentApp |<-->| TWA |<-->| Play Billing | |\n// | ---------------  |      |  --------------    -------    ---------------- |\n// |                  |      |                                                |\n// --------------------      --------------------------------------------------\n//\n// Next method ID: 3\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/components/arc/mojom/payment_app.mojom"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/views/try_chrome_dialog_win/try_chrome_dialog.h#L28-L41",
    "ascii": "// This class displays a modal dialog using the views system. The dialog asks\n// the user to give Chrome another try. This class only handles the UI so the\n// resulting actions are up to the caller.\n//\n// The layout is as follows:\n//\n//   +-----------------------------------------------+\n//   | |icon| Header text.                       [x] |\n//   |                                               |\n//   |        Body text.                             |\n//   |        [ Open Chrome ] [No Thanks]            |\n//   +-----------------------------------------------+\n//\n// Some variants do not have body text, or only have one button.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/views/try_chrome_dialog_win/try_chrome_dialog.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/vr/speech_recognizer.h#L26-L41",
    "ascii": "// Note that speech recognition is activated on VR UI thread. This means it\n// usually involves 3 threads. In the simplest case, the thread communication\n// looks like the following:\n//     VR UI thread        Browser thread         IO thread\n//          |                    |                    |\n//          |----ActivateVS----->|                    |\n//          |                    |------Start------>  |\n//          |                    |                    |\n//          |                    |<-NotifyStateChange-|\n//          |<--OnSRStateChanged-|                    |\n//          |                    |                    |\n//          |                    |<--OnSpeechResult---|\n//          |<--OnSRStateChanged-|                    |\n//          |                 navigate                |\n//          |                    |                    |\n// VS = voice search, SR = speech recognition\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/vr/speech_recognizer.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/vr/renderers/textured_quad_renderer.cc#L14-L61",
    "ascii": "// clang-format off\n//\n// A rounded rect is subdivided into a number of triangles.\n// _______________\n// | /    _,-' \\ |\n// |/_,,-'______\\|\n// |            /|\n// |           / |\n// |          /  |\n// |         /   |\n// |        /    |\n// |       /     |\n// |      /      |\n// |     /       |\n// |    /        |\n// |   /         |\n// |  /          |\n// | /           |\n// |/____________|\n// |\\     _,-'' /|\n// |_\\ ,-'____ /_|\n//\n// Most of these do not contain an arc. To simplify the rendering of those\n// that do, we include a \"corner position\" attribute. The corner position is\n// the distance from the center of the nearest \"corner circle\". Only those\n// triangles containing arcs have a non-zero corner position set. The result\n// is that for interior triangles, their corner position is uniformly (0, 0).\n// I.e., they are always deemed \"inside\".\n//\n// A further complication is that different corner radii will require these\n// various triangles to be sized differently relative to one another. We\n// would prefer not no continually recreate our vertex buffer, so we include\n// another attribute, the \"offset scalars\". These scalars are only ever 1.0,\n// 0.0, or -1.0 and control the addition or subtraction of the horizontal\n// and vertical corner offset. This lets the corners of the triangles be\n// computed in the vertex shader dynamically. It also happens that the\n// texture coordinates can also be easily computed in the vertex shader.\n//\n// So if the the corner offsets are vr and hr where\n//     vr = corner_radius / height;\n//     hr = corner_radius / width;\n//\n// Then the full position is then given by\n//   p = (x + osx * hr, y + osy * vr, 0.0, 1.0)\n//\n// And the full texture coordinate is given by\n//   (0.5 + p[0], 0.5 - p[1])\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/vr/renderers/textured_quad_renderer.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/updater/policy/mac/managed_preference_policy_manager_impl.mm#L56-L71",
    "ascii": "// For historical reasons, \"update\" policy has different enum values in Manage\n// Preferences from the Device Management. This function converts the former\n// to latter.\n// +----------------+---------------------+--------------------+\n// | Update policy  | Managed Preferences |  Device Management |\n// +----------------+---------------------+--------------------+\n// | Enabled        |          0          |         1          |\n// +----------------+---------------------+--------------------+\n// | Automatic only |          1          |         3          |\n// +----------------+---------------------+--------------------+\n// | Manual only    |          2          |         2          |\n// +----------------+---------------------+--------------------+\n// | Disabled       |          3          |         0          |\n// +----------------+---------------------+--------------------+\n// | Machine only   |          4          |         4          |\n// +----------------+---------------------+--------------------+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/updater/policy/mac/managed_preference_policy_manager_impl.mm"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/display/touch_calibrator_view.cc#L254-L269",
    "ascii": "//   Circular      _________________________________\n//   Throbber     |                                 |\n//     View       |                                 |\n//  ___________   |                                 |\n// |           |  |                                 |\n// |           |  |                                 |\n// |     .     |  |            Hint Box             |\n// |           |  |                                 |\n// |___________|  |                                 |\n//                |                                 |\n//                |                                 |\n//                |_________________________________|\n//\n// This view is set next to the throbber circle view such that their centers\n// align. The hint box has a label text and a sublabel text to assist the\n// user by informing them about the next step in the calibration process.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/display/touch_calibrator_view.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/autofill/content/browser/content_autofill_router.h#L28-L137",
    "ascii": "// ContentAutofillRouter routes events between ContentAutofillDriver objects in\n// order to handle frame-transcending forms.\n//\n// A *frame-transcending* form is a form whose fields live in different frames.\n// For example, credit card forms often have the credit card number field in an\n// iframe hosted by a payment service provider.\n//\n// A frame-transcending form therefore consists of multiple *renderer forms*.\n// ContentAutofillRouter *flattens* these forms into a single *browser form*,\n// and maps all events concerning the renderer forms to that browser form, and\n// vice versa.\n//\n// That way, the collection of renderer forms appears as one ordinary form to\n// the browser.\n//\n// For example, consider the following pseudo HTML code:\n//   <html>\n//   <form id=\"Form-1\">\n//     <input id=\"Field-1\">\n//     <iframe id=\"Frame-1\">\n//       <input id=\"Field-2\">\n//     </iframe>\n//     <iframe id=\"Frame-2\">\n//       <iframe id=\"Frame-3\">\n//         <form id=\"Form-2\">\n//           <input id=\"Field-3\">\n//         </form>\n//         <form id=\"Form-3\">\n//           <input id=\"Field-4\">\n//         </form>\n//       </iframe>\n//     </iframe>\n//     <input id=\"Field-5\">\n//   </form>\n//\n// Forms can be actual <form> elements or synthetic forms: <input>, <select>,\n// and <iframe> elements that are not in the scope of any <form> belong to the\n// enclosing frame's synthetic form.\n//\n// The five renderer forms are therefore, in pseudo C++ code:\n//   FormData{\n//     .host_frame = \"Frame-0\",  // The main frame.\n//     .name = \"Form-1\",\n//     .fields = { \"Field-1\", \"Field-5\" },\n//     .child_frames = { \"Frame-1\", \"Frame-2\" }\n//   }\n//   FormData{\n//     .host_frame = \"Frame-1\",\n//     .name = \"synthetic\",\n//     .fields = { \"Field-2\" },\n//     .child_frames = { }\n//   }\n//   FormData{\n//     .host_frame = \"Frame-2\",\n//     .name = \"synthetic\",\n//     .fields = { },\n//     .child_frames = { \"Frame-3\" }\n//   }\n//   FormData{\n//     .host_frame = \"Frame-3\",\n//     .name = \"Form-2\",\n//     .fields = { \"Field-3\" },\n//     .child_frames = { }\n//   }\n//   FormData{\n//     .host_frame = \"Frame-3\",\n//     .name = \"Form-3\",\n//     .fields = { \"Field-4\" },\n//     .child_frames = { }\n//   }\n//\n// The browser form of these renderer forms is obtained by flattening the fields\n// into the root form:\n//   FormData{\n//     .name = \"Form-1\",\n//     .fields = { \"Field-1\", \"Field-2\", \"Field-3\", \"Field-4\", \"Field-5\" }\n//   }\n//\n// Let AutofillAgent-N, ContentAutofillRouter-N, and AutofillManager-N\n// correspond to the Frame-N. ContentAutofillRouter would route an event\n// concerning any of the forms in Frame-3 from ContentAutofillDriver-3 to\n// ContentAutofillDriver-0:\n//\n//   +---Tab---+            +---Tab----+            +----Tab----+\n//   | Agent-0 |      +---> | Driver-0 | ---------> | Manager-0 |\n//   |         |      |     |          |            |           |\n//   | Agent-1 |      |     | Driver-1 |            | Manager-1 |\n//   |         |      |     |          |            |           |\n//   | Agent-2 |      |     | Driver-2 |            | Manager-2 |\n//   |         |      |     |          |            |           |\n//   | Agent-3 | -----|---> | Driver-3 | -----+     | Manager-3 |\n//   +---------+      |     +----------+      |     +-----------+\n//                    |                       |\n//                    |      +--Tab---+       |\n//                    +----- | Router | <-----+\n//                           +--------+\n//\n// If the event name is `f`, the control flow is as follows:\n//   Driver-3's ContentAutofillDriver::f(args...) calls\n//   Router's   ContentAutofillRouter::f(this, args..., callback) calls\n//   Driver-0's ContentAutofillDriver::callback(args...).\n//\n// Every function in ContentAutofillRouter takes a |source| parameter, which\n// points to the ContentAutofillDriver that triggered the event. In events\n// triggered by the renderer, the source driver is the driver the associated\n// renderer form originates from.\n//\n// See ContentAutofillDriver for details on the naming pattern and an example.\n//\n// See FormForest for details on (un)flattening.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/autofill/content/browser/content_autofill_router.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/fast_ink/laser/laser_pointer_view.cc#L45-L63",
    "ascii": "// The laser segment calcuates the path needed to draw a laser segment. A laser\n// segment is used instead of just a regular line segments to avoid overlapping.\n// A laser segment looks as follows:\n//    _______         _________       _________        _________\n//   /       \\        \\       /      /         /      /         \\       |\n//   |   A   |       2|.  B  .|1    2|.   C   .|1    2|.   D     \\.1    |\n//   |       |        |       |      |         |      |          /      |\n//    \\_____/         /_______\\      \\_________\\      \\_________/       |\n//\n//\n// Given a start and end point (represented by the periods in the above\n// diagrams), we create each segment by projecting each point along the normal\n// to the line segment formed by the start(1) and end(2) points. We then\n// create a path using arcs and lines. There are three types of laser segments:\n// head(B), regular(C) and tail(D). A typical laser is created by rendering one\n// tail(D), zero or more regular segments(C), one head(B) and a circle at the\n// end(A). They are meant to fit perfectly with the previous and next segments,\n// so that no whitespace/overlap is shown.\n// A more detailed version of this is located at https://goo.gl/qixdux.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/fast_ink/laser/laser_pointer_view.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/cast/message_port/blink_message_port_adapter.cc#L14-L48",
    "ascii": "// MessagePortAdapters are used to adapt between two different implementations\n// of cast_api_bindings::MessagePort.\n//\n// PostMessageWithTransferables flow including adaptation:\n//+---+     +-------+    +---------+        +---------+   +-------+   +---+\n//| A |     | PortA |    | AdptrA  |        | AdptrB  |   | PortB |   | B |\n//+---+     +-------+    +---------+        +---------+   +-------+   +---+\n//  | Post      |             |                  |            |         |\n//  |---------->|             |                  |            |         |\n//  |           | OnMsg       |                  |            |         |\n//  |           |------------>|                  |            |         |\n//  |           |             | Adapt Ports      |            |         |\n//  |           |             |-----------|      |            |         |\n//  |           |             |<----------|      |            |         |\n//  |           |             | Post             |            |         |\n//  |           |             |----------------->|            |         |\n//  |           |             |                  | OnMsg      |         |\n//  |           |             |                  |----------->|         |\n//  |           |             |                  |            | OnMsg   |\n//  |           |             |                  |            |-------->|\n//\n// Error flow including deletion, for example when OnMessage fails\n//  |           |             |                  |            |   false |\n//  |           |             |                  |            |<--------|\n//  |           |             |                  |      OnErr |         |\n//  |           |             |                  |<-----------|         |\n//  |           |             |           delete |            |         |\n//  |           |             |<-----------------|            |         |\n//  |           |      delete |                  |            |         |\n//  |           |<------------|                  |            |         |\n//  |     OnErr |             |                  |            |         |\n//  |<----------|             |                  |            |         |\n//  |           |             |                  | delete     |         |\n//  |           |             |                  |------|     |         |\n//  |           |             |                  |<-----|     |         |\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/cast/message_port/blink_message_port_adapter.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/embedder_support/android/metrics/android_metrics_service_client.h#L38-L94",
    "ascii": "// AndroidMetricsServiceClient is a singleton which manages metrics collection\n// intended for use by WebView & WebLayer.\n//\n// Metrics should be enabled iff all these conditions are met:\n//  - The user has not opted out.\n//  - The app has not opted out.\n//  - This client is in the 10% sample (controlled by client ID hash).\n// The first two are recorded in |user_consent_| and |app_consent_|, which are\n// set by SetHaveMetricsConsent(). The last is recorded in |is_in_sample_|.\n//\n// Metrics are pseudonymously identified by a randomly-generated \"client ID\".\n// AndroidMetricsServiceClient stores this in prefs, written to the app's data\n// directory. There's a different such directory for each user, for each app,\n// on each device. So the ID should be unique per (device, app, user) tuple.\n//\n// In order to be transparent about not associating an ID with an opted out user\n// or app, the client ID should only be created and retained when neither the\n// user nor the app have opted out. Otherwise, the presence of the ID could give\n// the impression that metrics were being collected.\n//\n// AndroidMetricsServiceClient metrics set up happens like so:\n//\n//   startup\n//      │\n//      ├────────────┐\n//      │            ▼\n//      │         query for consent\n//      ▼            │\n//   Initialize()    │\n//      │            ▼\n//      │         SetHaveMetricsConsent()\n//      │            │\n//      │ ┌──────────┘\n//      ▼ ▼\n//   MaybeStartMetrics()\n//      │\n//      ▼\n//   MetricsService::Start()\n//\n// All the named functions in this diagram happen on the UI thread. Querying GMS\n// happens in the background, and the result is posted back to the UI thread, to\n// SetHaveMetricsConsent(). Querying GMS is slow, so SetHaveMetricsConsent()\n// typically happens after Initialize(), but it may happen before.\n//\n// Each path sets a flag, |init_finished_| or |set_consent_finished_|, to show\n// that path has finished, and then calls MaybeStartMetrics(). When\n// MaybeStartMetrics() is called the first time, it sees only one flag is true,\n// and does nothing. When MaybeStartMetrics() is called the second time, it\n// decides whether to start metrics.\n//\n// If consent was granted, MaybeStartMetrics() determines sampling by hashing\n// the client ID (generating a new ID if there was none). If this client is in\n// the sample, it then calls MetricsService::Start(). If consent was not\n// granted, MaybeStartMetrics() instead clears the client ID, if any.\n//\n// To match chrome on other platforms (including android), the MetricsService is\n// always created.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/embedder_support/android/metrics/android_metrics_service_client.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/omnibox/browser/history_url_provider.h#L38-L93",
    "ascii": "// How history autocomplete works\n// ==============================\n//\n// Read down this diagram for temporal ordering.\n//\n//   Main thread                History thread\n//   -----------                --------------\n//   AutocompleteController::Start\n//     -> HistoryURLProvider::Start\n//       -> VerbatimMatchForInput\n//       [params_ allocated]\n//       -> DoAutocomplete (for inline autocomplete)\n//         -> URLDatabase::AutocompleteForPrefix (on in-memory DB)\n//       -> HistoryService::ScheduleAutocomplete\n//       (return to controller) ----\n//                                 /\n//                            HistoryBackend::ScheduleAutocomplete\n//                              -> HistoryURLProvider::ExecuteWithDB\n//                                -> DoAutocomplete\n//                                  -> URLDatabase::AutocompleteForPrefix\n//                              /\n//   HistoryService::QueryComplete\n//     [params_ destroyed]\n//     -> AutocompleteProviderListener::OnProviderUpdate\n//\n// The autocomplete controller calls us, and must be called back, on the main\n// thread.  When called, we run two autocomplete passes.  The first pass runs\n// synchronously on the main thread and queries the in-memory URL database.\n// This pass promotes matches for inline autocomplete if applicable.  We do\n// this synchronously so that users get consistent behavior when they type\n// quickly and hit enter, no matter how loaded the main history database is.\n// Doing this synchronously also prevents inline autocomplete from being\n// \"flickery\" in the AutocompleteEdit.  Because the in-memory DB does not have\n// redirect data, results other than the top match might change between the\n// two passes, so we can't just decide to use this pass' matches as the final\n// results.\n//\n// The second autocomplete pass uses the full history database, which must be\n// queried on the history thread.  Start() asks the history service schedule to\n// callback on the history thread with a pointer to the main database.  When we\n// are done doing queries, we schedule a task on the main thread that notifies\n// the AutocompleteController that we're done.\n//\n// The communication between these threads is done using a\n// HistoryURLProviderParams object.  This is allocated in the main thread, and\n// normally deleted in QueryComplete().  So that both autocomplete passes can\n// use the same code, we also use this to hold results during the first\n// autocomplete pass.\n//\n// While the second pass is running, the AutocompleteController may cancel the\n// request.  This can happen frequently when the user is typing quickly.  In\n// this case, the main thread sets params_->cancel, which the background thread\n// checks periodically.  If it finds the flag set, it stops what it's doing\n// immediately and calls back to the main thread.  (We don't delete the params\n// on the history thread, because we should only do that when we can safely\n// NULL out params_, and that must be done on the main thread.)\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/omnibox/browser/history_url_provider.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/page_load_metrics/browser/metrics_web_contents_observer_unittest.cc#L1139-L1145",
    "ascii": "// -----------------------------------------------------------------------------\n//     |                          |                          |\n//     1s                         2s                         3s\n//     Subframe1                  Main Frame                 Subframe2\n//     LID (15ms)                 LID (100ms)                LID (200ms)\n//\n// Delivery order: Main Frame -> Subframe1 -> Subframe2.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/components/page_load_metrics/browser/metrics_web_contents_observer_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/password_manager/core/browser/affiliation/facet_manager_unittest.cc#L542-L576",
    "ascii": "// The following tests verify both typical and edge case behavior of Prefetch()\n// requests: they should prevent the FacetManager from being discarded, and keep\n// the data fresh by initial fetches and refetches (scheduled as described in\n// facet_manager.cc).\n//\n// Legend:\n//   [---): Interval representing a finite Prefetch request (open from right).\n//          The data should be kept fresh, the FacetManager not discarded.\n//   [--->: Interval representing a indefinite Prefetch request.\n//          The data should be kept fresh, the FacetManager not discarded.\n//   F:     Fetch (initial or refetch) should take place here.\n//   Fn:    The time of the n-th fetch (starting from 1).\n//   D:     Time interval equal to GetShortTestPeriod().\n//   N:     Fetch is signaled to be needed here.\n//   X:     A corresponding CancelPrefetch call is placed here.\n//   S:     |kCacheSoftExpiryInHours| hours\n//   H:     |kCacheHardExpiryInHours| hours\n//\n// Note: It is guaranteed that S < H and that H < 2*S.\n//\n// Prefetches with the cache is initially stale/empty:\n//\n//      t=0                        S       H               F2+S   F2+H\n//      /                          /       /               /      /\n//  ---o--------------------------o-------o---------------o-------o---------> t\n//     :                          :       :               :       :\n//     [)                         :       :               :       :\n//     [F--)                      :       :               :       :\n//     [F------------------------):       :               :       :\n//     [F--------------------------------):               :       :\n//     [F-------------------------F----------)            :       :\n//     [F-------------------------F----------------------):       :\n//     [F-------------------------F------------------------------):\n//     [F-------------------------F-----------------------F------------------>\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/password_manager/core/browser/affiliation/facet_manager_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/public/cpp/window_properties.h#L120-L128",
    "ascii": "// A property key to store the PIP snap fraction for this window.\n// The fraction is defined in a clockwise fashion against the PIP movement area.\n//\n//            0   1\n//          4 +---+ 1\n//            |   |\n//          3 +---+ 2\n//            3   2\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/public/cpp/window_properties.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/payments/content/android/payment_handler_host.h#L18-L43",
    "ascii": "// The native bridge for Java to interact with the payment handler host.\n// Object relationship diagram:\n//\n// ChromePaymentRequestService.java --- implements --->\n// PaymentRequestUpdateEventListener\n//       |        ^\n//      owns      |________________________\n//       |                                |\n//       v                                |\n// PaymentHandlerHost.java                |\n//       |                                |\n//      owns                              |\n//       |                             listener\n//       v                                |\n// android/payment_handler_host.h         |\n//       |        |                       |\n//      owns      |                       |\n//       |       owns                     |\n//       |        |                       |\n//       |        v                       |\n//       |    android/payment_request_update_event_listener.h\n//       |        ^        \\ ---- implements ---> PaymentHandlerHost::Delegate\n//       |        |\n//       |     delegate\n//       v        |\n// payment_handler_host.h\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/payments/content/android/payment_handler_host.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/payments/content/android/payment_request_spec.h#L17-L30",
    "ascii": "// A bridge for Android to own a C++ PaymentRequestSpec object.\n//\n// Object ownership diagram:\n//\n// ChromePaymentRequestService.java\n//       |\n//       v\n// PaymentRequestSpec.java\n//       |\n//       v\n// android/payment_request_spec.h\n//       |\n//       v\n// payment_request_spec.h\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/payments/content/android/payment_request_spec.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/performance_manager/test_support/mock_graphs.h#L119-L132",
    "ascii": "// The following graph topology is created to emulate a scenario where a page\n// contains a single frame that creates a single dedicated worker.\n//\n// Pg  Pr_\n//  \\ /   |\n//   F    |\n//    \\   |\n//     W__|\n//\n// Where:\n// Pg: page\n// F: frame(frame_tree_id:0)\n// W: worker\n// Pr: process(pid:1)\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/performance_manager/test_support/mock_graphs.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/subresource_filter/content/browser/ruleset_service.h#L5-L28",
    "ascii": "// This file contains the top-level class for the RulesetService.  There are\n// associated classes that tie this into the dealer as well as the filter\n// agents.  The distribution pipeline looks like this:\n//\n//                      RulesetService\n//                           |\n//                           v                  Browser\n//                 RulesetPublisher(Impl)\n//                     |              |\n//        - - - - - - -|- - - - - - - |- - - - - - - - - -\n//                     |       |      |\n//                     v              v\n//          *RulesetDealer     |  *RulesetDealer\n//                 |                |       |\n//                 |           |    |       v\n//                 v                |      SubresourceFilterAgent\n//    SubresourceFilterAgent   |    v\n//                                SubresourceFilterAgent\n//                             |\n//\n//         Renderer #1         |          Renderer #n\n//\n// Note: UnverifiedRulesetDealer is shortened to *RulesetDealer above. There is\n// also a VerifiedRulesetDealer which is used similarly on the browser side.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/subresource_filter/content/browser/ruleset_service.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/update_client/background_downloader_win.cc#L39-L103",
    "ascii": "// The class BackgroundDownloader in this module is an adapter between\n// the CrxDownloader interface and the BITS service interfaces.\n// The interface exposed on the CrxDownloader code runs on the main sequence,\n// while the BITS specific code runs in a separate sequence bound to a\n// COM apartment. For every url to download, a BITS job is created, unless\n// there is already an existing job for that url, in which case, the downloader\n// connects to it. Once a job is associated with the url, the code looks for\n// changes in the BITS job state. The checks are triggered by a timer.\n// The BITS job contains just one file to download. There could only be one\n// download in progress at a time. If Chrome closes down before the download is\n// complete, the BITS job remains active and finishes in the background, without\n// any intervention. The job can be completed next time the code runs, if the\n// file is still needed, otherwise it will be cleaned up on a periodic basis.\n//\n// To list the BITS jobs for a user, use the |bitsadmin| tool. The command line\n// to do that is: \"bitsadmin /list /verbose\". Another useful command is\n// \"bitsadmin /info\" and provide the job id returned by the previous /list\n// command.\n//\n// Ignoring the suspend/resume issues since this code is not using them, the\n// job state machine implemented by BITS is something like this:\n//\n//  Suspended--->Queued--->Connecting---->Transferring--->Transferred\n//       |          ^         |                 |               |\n//       |          |         V                 V               | (complete)\n//       +----------|---------+-----------------+-----+         V\n//                  |         |                 |     |    Acknowledged\n//                  |         V                 V     |\n//                  |  Transient Error------->Error   |\n//                  |         |                 |     |(cancel)\n//                  |         +-------+---------+--->-+\n//                  |                 V               |\n//                  |   (resume)      |               |\n//                  +------<----------+               +---->Cancelled\n//\n// The job is created in the \"suspended\" state. Once |Resume| is called,\n// BITS queues up the job, then tries to connect, begins transferring the\n// job bytes, and moves the job to the \"transferred state, after the job files\n// have been transferred. When calling |Complete| for a job, the job files are\n// made available to the caller, and the job is moved to the \"acknowledged\"\n// state.\n// At any point, the job can be cancelled, in which case, the job is moved\n// to the \"cancelled state\" and the job object is removed from the BITS queue.\n// Along the way, the job can encounter recoverable and non-recoverable errors.\n// BITS moves the job to \"transient error\" or \"error\", depending on which kind\n// of error has occured.\n// If  the job has reached the \"transient error\" state, BITS retries the\n// job after a certain programmable delay. If the job can't be completed in a\n// certain time interval, BITS stops retrying and errors the job out. This time\n// interval is also programmable.\n// If the job is in either of the error states, the job parameters can be\n// adjusted to handle the error, after which the job can be resumed, and the\n// whole cycle starts again.\n// Jobs that are not touched in 90 days (or a value set by group policy) are\n// automatically disposed off by BITS. This concludes the brief description of\n// a job lifetime, according to BITS.\n//\n// In addition to how BITS is managing the life time of the job, there are a\n// couple of special cases defined by the BackgroundDownloader.\n// First, if the job encounters any of the 5xx HTTP responses, the job is\n// not retried, in order to avoid DDOS-ing the servers.\n// Second, there is a simple mechanism to detect stuck jobs, and allow the rest\n// of the code to move on to trying other urls or trying other components.\n// Last, after completing a job, irrespective of the outcome, the jobs older\n// than a week are proactively cleaned up.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/update_client/background_downloader_win.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/update_client/component.cc#L45-L75",
    "ascii": "// The state machine representing how a CRX component changes during an update.\n//\n//     +------------------------- kNew\n//     |                            |\n//     |                            V\n//     |                        kChecking\n//     |                            |\n//     V                error       V     no           no\n//  kUpdateError <------------- [update?] -> [action?] -> kUpToDate  kUpdated\n//     ^                            |           |            ^        ^\n//     |                        yes |           | yes        |        |\n//     |     update disabled        V           |            |        |\n//     +-<--------------------- kCanUpdate      +--------> kRun       |\n//     |                            |                                 |\n//     |                no          V                                 |\n//     |               +-<- [differential update?]                    |\n//     |               |               |                              |\n//     |               |           yes |                              |\n//     |               | error         V                              |\n//     |               +-<----- kDownloadingDiff            kRun---->-+\n//     |               |               |                     ^        |\n//     |               |               |                 yes |        |\n//     |               | error         V                     |        |\n//     |               +-<----- kUpdatingDiff ---------> [action?] ->-+\n//     |               |                                     ^     no\n//     |    error      V                                     |\n//     +-<-------- kDownloading                              |\n//     |               |                                     |\n//     |               |                                     |\n//     |    error      V                                     |\n//     +-<-------- kUpdating --------------------------------+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/update_client/component.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/update_client/component_unpacker.h#L33-L69",
    "ascii": "// In charge of unpacking the component CRX package and verifying that it is\n// well formed and the cryptographic signature is correct.\n//\n// This class should be used only by the component updater. It is inspired by\n// and overlaps with code in the extension's SandboxedUnpacker.\n// The main differences are:\n// - The public key hash is full SHA256.\n// - Does not use a sandboxed unpacker. A valid component is fully trusted.\n// - The manifest can have different attributes and resources are not\n//   transcoded.\n//\n// If the CRX is a delta CRX, the flow is:\n//   [ComponentUpdater]      [ComponentPatcher]\n//   Unpack\n//     \\_ Verify\n//     \\_ Unzip\n//     \\_ BeginPatching ---> DifferentialUpdatePatch\n//                             ...\n//   EndPatching <------------ ...\n//     \\_ EndUnpacking\n//\n// For a full CRX, the flow is:\n//   [ComponentUpdater]\n//   Unpack\n//     \\_ Verify\n//     \\_ Unzip\n//     \\_ BeginPatching\n//          |\n//          V\n//   EndPatching\n//     \\_ EndUnpacking\n//\n// During unzip step we also check for verified_contents.json in the header\n// of crx file and unpack it to metadata_ folder if it doesn't already contain\n// verified_contents file.\n// In both cases, if there is an error at any point, the remaining steps will\n// be skipped and EndUnpacking will be called.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/update_client/component_unpacker.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/viz/host/hit_test/hit_test_query_unittest.cc#L37-L44",
    "ascii": "// One surface.\n//\n//  +e---------+\n//  |          |\n//  |          |\n//  |          |\n//  +----------+\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/viz/host/hit_test/hit_test_query_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/viz/service/display/display_unittest.cc#L1975-L1979",
    "ascii": "// Check if draw occlusion works well with rotation transform.\n//\n//  +-----+                                  +----+\n//  |     |   rotation (by 45 on y-axis) ->  |    |     same height\n//  +-----+                                  +----+     reduced weight\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/viz/service/display/display_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/viz/service/frame_sinks/video_capture/video_capture_overlay_unittest.cc#L600-L611",
    "ascii": "// Tests that the overlay will be partially rendered (clipped) when any part of\n// it extends outside the video frame's content region.\n//\n// For this test, the content region is a rectangle, centered within the frame\n// (e.g., the content is being letterboxed), and the test attempts to locate the\n// overlay such that part of it should be clipped. The test succeeds if the\n// overlay is clipped to the content region in the center. For example:\n//\n//    +-------------------------------+\n//    |                               |\n//    |     ......                    |\n//    |     ..****////////////        |  **** the drawn part of the overlay\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/viz/service/frame_sinks/video_capture/video_capture_overlay_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/viz/service/hit_test/hit_test_aggregator_unittest.cc#L245-L252",
    "ascii": "// One surface.\n//\n//  +----------+\n//  |          |\n//  |          |\n//  |          |\n//  +----------+\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/viz/service/hit_test/hit_test_aggregator_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/back_forward_cache_internal_browsertest.cc#L835-L858",
    "ascii": "// Test the race condition where a document is evicted from the BackForwardCache\n// while it is in the middle of being restored and before URL loader starts a\n// response.\n//\n// ┌───────┐                 ┌────────┐\n// │Browser│                 │Renderer│\n// └───┬───┘                 └───┬────┘\n// (Freeze & store the cache)    │\n//     │────────────────────────>│\n//     │                         │\n// (Navigate to cached document) │\n//     │──┐                      │\n//     │  │                      │\n//     │EvictFromBackForwardCache│\n//     │<────────────────────────│\n//     │  │                      │\n//     │  x Navigation cancelled │\n//     │    and reissued         │\n// ┌───┴───┐                 ┌───┴────┐\n// │Browser│                 │Renderer│\n// └───────┘                 └────────┘\n//\n// When the eviction occurs, the in flight NavigationRequest to the cached\n// document should be reissued (cancelled and replaced by a normal navigation).\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/content/browser/back_forward_cache_internal_browsertest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/site_per_process_unload_browsertest.cc#L395-L406",
    "ascii": "// Test that unload handlers in iframes are run, even when the removed subtree\n// is complicated with nested iframes in different processes.\n//     A1                         A1\n//    / \\                        / \\\n//   B1  D  --- Navigate --->   E   D\n//  / \\\n// C1  C2\n// |   |\n// B2  A2\n//     |\n//     C3\n// TODO(crbug.com/1012185): Flaky timeouts on Linux and Mac.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/site_per_process_unload_browsertest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/system/night_light/night_light_controller_unittest.cc#L1745-L1754",
    "ascii": "// Now is at 11 PM.\n//\n//      20:00               23:00                      5:00\n// <----- + ----------------- + ----------------------- + ------->\n//        |                   |                         |\n//      sunset               now                     sunrise\n//\n// Tests that when the user logs in for the first time between sunset and\n// sunrise with Auto Night Light enabled, and the notification has never been\n// dismissed before, the notification should be shown.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/system/night_light/night_light_controller_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/android/synchronous_compositor_sync_call_bridge.h#L23-L71",
    "ascii": "// For the synchronous compositor feature of webview it is necessary\n// that the UI thread to block until the renderer process has processed\n// certain messages entirely. (beginframe and resulting compositor frames).\n// This object is used to manage the waiting and signaling behavior on the UI\n// thread. The UI thread will wait on a WaitableEvent (via FrameFuture class)\n// or condition variable which is then signal by handlers in this class.\n// This object is a cross thread object accessed both on the UI and IO threads.\n//\n// Examples of call graphs are:\n//    Browser UI Thread         Browser IO Thread       Renderer\n//\n//  ->VSync Java\n//      ----------------------------------------------->BeginFrame\n//      CV Wait\n//                                BeginFrameRes<----------\n//                                CVSignal\n//      WakeUp\n//\n//\n//  ->DrawHwAsync\n//      RegisterFrameFuture\n//      ----------------------------------------------->DrawHwAsync\n//      Do some stuff\n//      FrameFuture::GetFrame()\n//        WaitableEvent::Wait()\n//                             ReceiveFrame<---------------\n//                             WaitableEvent::Signal()\n//      WakeUp\n//\n// This may seem simple but it gets a little more complicated when\n// multiple views are involved. Each view will have it's own SyncCallBridge.\n//\n//   Once example is:\n//\n//    Browser UI Thread         Browser IO Thread       Renderer1    Renderer2\n//\n//  ->VSync Java\n//      ----------------------------------------------->BeginFrame\n//                                BeginFrameRes<----------\n//                                CVSignal\n//      ------------------------------------------------------------>BeginFrame\n//      CV Wait\n//                                BeginFrameRes<----------------------------\n//                                CVSignal\n//      WakeUp\n//\n// Notice that it is possible that before we wait on a CV variable a renderer\n// may have already responded to the BeginFrame request.\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/android/synchronous_compositor_sync_call_bridge.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/renderer_host/display_feature.h#L17-L37",
    "ascii": "// Information about a physical attribute of the screen which that creates a\n// Logical separator or divider (e.g. a fold or mask).\n// This is a visual example of a vertically oriented display feature that masks\n// content underneath\n//\n//    Orientation: vertical\n//\n//                 offset\n//                   |\n//         +---------|===|---------+\n//         |         |   |         |\n//         |         |   |         |\n//         |         |   |         |\n//         |         |   |         |\n//         |         |   |         |\n//         +---------|===|---------+\n//                      \\\n//                      mask_length\n//\n// Note that the implicit height of the display feature is the entire height of\n// the screen on which it exists.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/renderer_host/display_feature.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/renderer_host/render_frame_host_manager_unittest.cc#L2449-L2462",
    "ascii": "// Build the following frame opener graph and see that it can be properly\n// traversed when creating opener proxies:\n//\n//     +-> root4 <--+   root3 <---- root2    +--- root1\n//     |     /      |     ^         /  \\     |    /  \\     .\n//     |    42      +-----|------- 22  23 <--+   12  13\n//     |     +------------+            |             | ^\n//     +-------------------------------+             +-+\n//\n// The test starts traversing openers from root1 and expects to discover all\n// four FrameTrees.  Nodes 13 (with cycle to itself) and 42 (with back link to\n// root3) should be put on the list of nodes that will need their frame openers\n// set separately in a second pass, since their opener routing IDs won't be\n// available during the first pass of CreateOpenerProxies.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/renderer_host/render_frame_host_manager_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/renderer_host/media/render_frame_audio_output_stream_factory.h#L24-L36",
    "ascii": "// This class is related to ForwardingAudioStreamFactory as follows:\n//\n//     WebContentsImpl       <--        RenderFrameHostImpl\n//           ^                                  ^\n//           |                                  |\n//  ForwardingAudioStreamFactory   RenderFrameAudioOutputStreamFactory\n//           ^                                  ^\n//           |                                  |\n//      FASF::Core           <--          RFAOSF::Core\n//\n// Both FASF::Core and RFAOSF::Core live on (and are destructed on) the IO\n// thread. A weak pointer to ForwardingAudioStreamFactory is used since\n// WebContentsImpl is sometimes destructed shortly before RenderFrameHostImpl.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/renderer_host/media/render_frame_audio_output_stream_factory.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/webid/idp_network_request_manager.h#L36-L63",
    "ascii": "// Manages network requests and maintains relevant state for interaction with\n// the Identity Provider across a FedCM transaction. Owned by\n// FederatedAuthRequestImpl and has a lifetime limited to a single identity\n// transaction between an RP and an IDP.\n//\n// Diagram of the permission-based data flows between the browser and the IDP:\n//  .-------.                           .---.\n//  |Browser|                           |IDP|\n//  '-------'                           '---'\n//      |                                 |\n//      |     GET /fedcm.json             |\n//      |-------------------------------->|\n//      |                                 |\n//      |        JSON{idp_url}            |\n//      |<--------------------------------|\n//      |                                 |\n//      | POST /idp_url with OIDC request |\n//      |-------------------------------->|\n//      |                                 |\n//      |       token or signin_url       |\n//      |<--------------------------------|\n//  .-------.                           .---.\n//  |Browser|                           |IDP|\n//  '-------'                           '---'\n//\n// If the IDP returns an token, the sequence finishes. If it returns a\n// signin_url, that URL is loaded as a rendered Document into a new window for\n// the user to interact with the IDP.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/webid/idp_network_request_manager.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/test/content_browser_test_utils_internal.h#L109-L128",
    "ascii": "// Creates compact textual representations of the state of the frame tree that\n// is appropriate for use in assertions.\n//\n// The diagrams show frame tree structure, the SiteInstance of current frames,\n// presence of pending frames, and the SiteInstances of any and all proxies.\n// They look like this:\n//\n//        Site A (D pending) -- proxies for B C\n//          |--Site B --------- proxies for A C\n//          +--Site C --------- proxies for B A\n//               |--Site A ---- proxies for B\n//               +--Site A ---- proxies for B\n//                    +--Site A -- proxies for B\n//       Where A = http://127.0.0.1/\n//             B = http://foo.com/ (no process)\n//             C = http://bar.com/\n//             D = http://next.com/\n//\n// SiteInstances are assigned single-letter names (A, B, C) which are remembered\n// across invocations of the pretty-printer.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/test/content_browser_test_utils_internal.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/device/vr/windows/vertex_shader.h#L10-L41",
    "ascii": "//\n// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384\n//\n//\n//\n// Input signature:\n//\n// Name                 Index   Mask Register SysValue  Format   Used\n// -------------------- ----- ------ -------- -------- ------- ------\n// POSITION                 0   xy          0     NONE   float   xy\n// TEXCOORD                 0   xy          1     NONE   float   xy\n// TEXCOORD                 1   x           2     NONE    uint   x\n//\n//\n// Output signature:\n//\n// Name                 Index   Mask Register SysValue  Format   Used\n// -------------------- ----- ------ -------- -------- ------- ------\n// SV_POSITION              0   xyzw        0      POS   float   xyzw\n// TEXCOORD                 0   xy          1     NONE   float   xy\n// TEXCOORD                 1   x           2     NONE    uint   x\n//\n//\n// Runtime generated constant mappings:\n//\n// Target Reg                               Constant Description\n// ---------- --------------------------------------------------\n// c0                              Vertex Shader position offset\n//\n//\n// Level9 shader bytecode:\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/device/vr/windows/vertex_shader.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ios/chrome/browser/ui/settings/cells/settings_check_cell.h#L12-L20",
    "ascii": "// Cell representation for SettingsCheckItem.\n//  +---------------------------------------------------------+\n//  \u0010| +--------+                                +---------+   |\n//  | |        |  One line title                |trailing |   |\n//  | | leading|                                |image    |   |\n//  | | image  |  Multiline detail text         |spinner  |   |\n//  | |        |  Multiline detail text         |or button|   |\n//  | +--------+                                +---------+   |\n//  +---------------------------------------------------------+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ios/chrome/browser/ui/settings/cells/settings_check_cell.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ios/chrome/browser/ui/tab_switcher/tab_grid/tab_grid_bottom_toolbar.h#L14-L27",
    "ascii": "// Bottom toolbar for TabGrid. The appearance of the toolbar is decided by\n// screen size, current TabGrid page and mode:\n//\n// Horizontal-compact and vertical-regular screen size:\n//   Small newTabButton, translucent background.\n//   Incognito & Regular page: [CloseAllButton  newTabButton  DoneButton]\n//   Remote page:              [                              DoneButton]\n//   Selection mode:           [CloseTabButton  shareButton  AddToButton]\n//\n// Other screen size:\n//   Large newTabButton, floating layout without UIToolbar.\n//   Normal mode:    [                                      newTabButton]\n//   Remote page:    [                                                  ]\n//   Selection mode: [CloseTabButton       shareButton       AddToButton]\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ios/chrome/browser/ui/tab_switcher/tab_grid/tab_grid_bottom_toolbar.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ios/chrome/browser/ui/tab_switcher/tab_grid/tab_grid_top_toolbar.h#L14-L24",
    "ascii": "// Top toolbar for TabGrid. The appearance of the toolbar is decided by screen\n// size, current TabGrid page and mode:\n//\n// Horizontal-compact and vertical-regular screen size:\n//   Normal mode:    [               PageControl      Select]\n//   Remote page:    [               PageControl            ]\n//   Selection mode: [SelectAll    SelectedTabsCount    Done]\n// Other screen size:\n//   Normal mode:    [CloseAll           PageControl      Select Done]\n//   Remote page:    [                   PageControl             Done]\n//   Selection mode: [SelectAll        SelectedTabsCount         Done]\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ios/chrome/browser/ui/tab_switcher/tab_grid/tab_grid_top_toolbar.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/audio/audio_debug_recording_manager.h#L26-L53",
    "ascii": "// A manager for audio debug recording that handles registration of data\n// sources and hands them a recorder (AudioDebugRecordingHelper) to feed data\n// to. The recorder will unregister with the manager automatically when deleted.\n// When debug recording is enabled, it is enabled on all recorders and\n// constructs a unique file name for each recorder by using a running ID.\n// A somewhat simplified diagram of the the debug recording infrastructure,\n// interfaces omitted:\n//\n//                                AudioDebugFileWriter\n//                                        ^\n//                                        | owns\n//                        owns            |                     owns\n//   OnMoreDataConverter  ---->  AudioDebugRecordingHelper <---------\n//            ^                           ^                          |\n//            | owns several              | raw pointer to several   |\n//            |                   AudioDebugRecordingManager         |\n//   AudioOutputResampler                 ^                          |\n//            ^                           |      AudioInputStreamDataInterceptor\n//            |                           |                          ^\n//            | owns several              | owns        owns several |\n//             ------------------  AudioManagerBase  ----------------\n//\n// AudioDebugRecordingManager is created when\n// AudioManager::InitializeDebugRecording() is called. That is done in\n// AudioManager::Create() in WebRTC enabled builds, but not in non WebRTC\n// enabled builds. If AudioDebugRecordingManager is not created, neither is\n// AudioDebugRecordingHelper or AudioDebugFileWriter. In this case the pointers\n// to AudioDebugRecordingManager and AudioDebugRecordingHelper are null.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/audio/audio_debug_recording_manager.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/audio/cras/cras_unified.cc#L64-L101",
    "ascii": "// Overview of operation:\n// 1) An object of CrasUnifiedStream is created by the AudioManager\n// factory: audio_man->MakeAudioStream().\n// 2) Next some thread will call Open(), at that point a client is created and\n// configured for the correct format and sample rate.\n// 3) Then Start(source) is called and a stream is added to the CRAS client\n// which will create its own thread that periodically calls the source for more\n// data as buffers are being consumed.\n// 4) When finished Stop() is called, which is handled by stopping the stream.\n// 5) Finally Close() is called. It cleans up and notifies the audio manager,\n// which likely will destroy this object.\n//\n// Simplified data flow for output only streams:\n//\n//   +-------------+                  +------------------+\n//   | CRAS Server |                  | Chrome Client    |\n//   +------+------+    Add Stream    +---------+--------+\n//          |<----------------------------------|\n//          |                                   |\n//          | Near out of samples, request more |\n//          |---------------------------------->|\n//          |                                   |  UnifiedCallback()\n//          |                                   |  WriteAudio()\n//          |                                   |\n//          |  buffer_frames written to shm     |\n//          |<----------------------------------|\n//          |                                   |\n//         ...  Repeats for each block.        ...\n//          |                                   |\n//          |                                   |\n//          |  Remove stream                    |\n//          |<----------------------------------|\n//          |                                   |\n//\n// For Unified streams the Chrome client is notified whenever buffer_frames have\n// been captured.  For Output streams the client is notified a few milliseconds\n// before the hardware buffer underruns and fills the buffer with another block\n// of audio.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/audio/cras/cras_unified.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/utility/cropping_util.h#L17-L71",
    "ascii": "// Crops an image such that its aspect ratio matches that of a target size, but\n// does not perform any \"scaling\". The cropping is calculated with the image\n// and the target rect \"center-aligned\". The image dimension with the smaller\n// (target_size / original_size) ratio gets cropped.\n//\n// A visual example with a portrait image whose dimensions exceeds a landscape\n// target size:\n//\n// Before:\n//\n//         Portrait Image\n// +---------------------------+\n// |                           |\n// |                           |\n// |                           |\n// |                           |\n// |      Landscape Target     |\n// |    +-----------------+    |\n// |    |                 |    |\n// |    |                 |    |\n// |    |                 |    |\n// |    |                 |    |\n// |    |                 |    |\n// |    +-----------------+    |\n// |                           |\n// |                           |\n// |                           |\n// |                           |\n// |                           |\n// +---------------------------+\n//\n// After (ok, maybe it's not the exact same aspect ratio, but you get the idea):\n//\n//         Cropped Image\n// +---------------------------+\n// |                           |\n// |      Landscape Target     |\n// |    +-----------------+    |\n// |    |                 |    |\n// |    |                 |    |\n// |    |                 |    |\n// |    |                 |    |\n// |    |                 |    |\n// |    +-----------------+    |\n// |                           |\n// |                           |\n// +---------------------------+\n//\n// The ultimate result is always a cropped image whose aspect ratio matches that\n// of the target size. Therefore, the cropped image can subsequently be scaled\n// up or down to match the dimensions of the target size.\n//\n// There are no requirements for the image and target dimensions other than that\n// they're non-empty. This function cannot fail; the returned SkBitmap is always\n// non-null and points to ref-counted pixel memory shared with |image|.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/utility/cropping_util.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/cast/sender/performance_metrics_overlay.h#L11-L49",
    "ascii": "// This module provides a display of frame-level performance metrics, rendered\n// in the lower-right corner of a VideoFrame.  It looks like this:\n//\n// +---------------------------------------------------------------------+\n// |                         @@@@@@@@@@@@@@@@@@@@@@@                     |\n// |                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     |\n// |              @@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@                   |\n// |             @@@@@@@@@@@@@                    @@@@                   |\n// |            @@@@@@@@@@                        @@@@                   |\n// |           @@@@@  @@@               @@@       @@@@                   |\n// |           @@@     @    @@@         @@@@      @@@@                   |\n// |          @@@@          @@@@                  @@@@                   |\n// |          @@@@                  @@@           @@@                    |\n// |            @@@@                 @@           @@@                    |\n// |             @@@@@      @@@            @@@   @@@                     |\n// |              @@@@@     @@@@@        @@@@   @@@@                     |\n// |               @@@@@      @@@@@@@@@@@@@    @@@@                      |\n// |                @@@@@@                    @@@@           1  45%  75% |\n// |                    @@@@@@@@         @@@@@@            22  400. 4000 |\n// |                         @@@@@@@@@@@@@@@@      16.7 1280x720 0:15.12 |\n// +---------------------------------------------------------------------+\n//\n// Line 1: Reads as, \"1 frame ago, the encoder utilization for the frame was 45%\n// and the lossy utilization was 75%.\"  For CPU-bound encoders, encoder\n// utilization is usually measured as the amount of real-world time it took to\n// encode the frame, divided by the maximum amount of time allowed.  Lossy\n// utilization is the amount of \"complexity\" in the frame's content versus the\n// target encoded byte size, where a value over 100% means the frame's content\n// is too complex to encode within the target number of bytes.\n//\n// Line 2: Reads as, \"Capture of this frame took 22 ms.  The current target\n// playout delay is 400 ms and low-latency adjustment mode is not active.  The\n// target bitrate for this frame is 4000 kbps.\"  If there were an exclamation\n// mark (!) after the playout delay number instead of a period (.), it would\n// indicate low-latency adjustment mode is active.  See VideoSender for more\n// details.\n//\n// Line 3: Contains the frame's duration (16.7 milliseconds), resolution, and\n// media timestamp in minutes:seconds.hundredths format.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": true
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/cast/sender/performance_metrics_overlay.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/cast/test/utility/barcode.cc#L5-L22",
    "ascii": "// Routines for encoding and decoding a small number of bits into an image\n// in a way that is decodable even after scaling/encoding/cropping.\n//\n// The encoding is very simple:\n//\n//   ####    ####    ########    ####        ####    ####\n//   ####    ####    ########    ####        ####    ####\n//   ####    ####    ########    ####        ####    ####\n//   ####    ####    ########    ####        ####    ####\n//   1   2   3   4   5   6   7   8   9   10  11  12  13  14\n//   <-----start----><--one-bit-><-zero bit-><----stop---->\n//\n// We use a basic unit, depicted here as four characters wide.\n// We start with 1u black 1u white 1u black 1u white. (1-4 above)\n// From there on, a \"one\" bit is encoded as 2u black and 1u white,\n// and a zero bit is encoded as 1u black and 2u white. After\n// all the bits we end the pattern with the same pattern as the\n// start of the pattern.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/cast/test/utility/barcode.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/filters/source_buffer_stream_unittest.cc#L844-L849",
    "ascii": "// Using position based test API:\n// DTS  :  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n// PTS  :  0  4  1  2  3  5  9  6  7  8 10 14 11 12 13 15 19 16 17 18 20\n// old  :                                A  a  a  a  a  A  a  a  a  a\n// new  :                 B  b  b  b  b  B  b  b\n// after:                 B  b  b  b  b  B  b  b        A  a  a  a  a\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/filters/source_buffer_stream_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/utility/rounded_window_targeter_unittest.cc#L47-L57",
    "ascii": "/*\nWindow shape (global coordinates)\n(0,0)_____________\n    |.   * | *    | <- mouse move (1,1)\n    | *    |    * |\n    |*_____|     *|\n    |*     (r,r) *|\n    | *        *  |\n    |____*___*____|\n                  (2r, 2r)\nThis mouse event hits the square but not the circular window targeter.*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/utility/rounded_window_targeter_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/filters/android/media_codec_audio_decoder.h#L29-L69",
    "ascii": "// Implementation notes.\n//\n// This class provides audio decoding via MediaCodec.  It allocates the\n// MediaCodecBridge instance, and hands ownership to MediaCodecLoop to drive I/O\n// with the codec.  For encrypted streams, we also talk to the DRM bridge.\n//\n// Because both dequeuing and enqueuing of an input buffer can fail, the\n// implementation puts the input |DecoderBuffer|s and the corresponding decode\n// callbacks into an input queue. The decoder has a timer that periodically\n// fires the decoding cycle that has two steps. The first step tries to send the\n// front buffer from the input queue to MediaCodecLoop. In the case of success\n// the element is removed from the queue, the decode callback is fired and the\n// decoding process advances. The second step tries to dequeue an output buffer,\n// and uses it in the case of success.\n//\n// An EOS buffer is handled differently.  Success is not signalled to the decode\n// callback until the EOS is received at the output.  So, for EOS, the decode\n// callback indicates that all previous decodes have completed.\n//\n// The failures in both steps are normal and they happen periodically since\n// both input and output buffers become available at unpredictable moments. The\n// timer is here to repeat the dequeueing attempts.\n//\n// State diagram.\n//\n//   [Uninitialized] <-> (init failed)\n//     |         |\n//   (no enc.)  (encrypted)\n//     |         |\n//     |        [WaitingForMediaCrypto] -- (OMCR failure) --> [Uninitialized]\n//     |               | (OnMediaCryptoReady success)\n//     v               v\n//   (Create Codec and MediaCodecLoop)\n//     |\n//     \\--> [Ready] -(any error)-> [Error]\n//\n//     -[Any state]-\n//    |             |\n// (Reset ok) (Reset fails)\n//    |             |\n// [Ready]       [Error]\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/filters/android/media_codec_audio_decoder.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/gpu/vaapi/va_surface.h#L19-L84",
    "ascii": "// A VA-API-specific decode surface used by VaapiH264Decoder to decode into\n// and use as reference for decoding other surfaces. It is also handed by the\n// decoder to VaapiVideoDecodeAccelerator when the contents of the surface are\n// ready and should be displayed. VAVDA converts the surface contents into an\n// X/Drm Pixmap bound to a texture for display and releases its reference to it.\n// Decoder releases its references to the surface when it's done decoding and\n// using it as reference. Note that a surface may still be used for reference\n// after it's been sent to output and also after it is no longer used by VAVDA.\n// Thus, the surface can be in use by both VAVDA and the Decoder at the same\n// time, or by either of them, with the restriction that VAVDA will never get\n// the surface until the contents are ready, and it is guaranteed that the\n// contents will not change after that.\n// When both the decoder and VAVDA release their references to the surface,\n// it is freed and the release callback is executed to put the surface back\n// into available surfaces pool, which is managed externally.\n//\n//   VASurfaceID is allocated in VaapiWrapper.\n//        |\n// +----->|\n// |      v\n// | VASurfaceID is put onto VaapiVideoDecodeAccelerator::available_va_surfaces_\n// |      |      list.\n// |      v\n// | VASurfaceID is taken off of the VVDA:available_va_surfaces_ when\n// |      |      VaapiH264Decoder requests more output surfaces, is wrapped into\n// |      |      a VASurface and passed to VaapiH264Decoder.\n// |      v\n// | VASurface is put onto VaapiH264Decoder::available_va_surfaces_, keeping\n// |      |      the only reference to it until it's needed for decoding.\n// |      v\n// | VaapiH264Decoder starts decoding a new frame. It takes a VASurface off of\n// |      |      VHD::available_va_surfaces_ and assigns it to a DecodeSurface,\n// |      |      which now keeps the only reference.\n// |      v\n// | DecodeSurface is used for decoding, putting data into associated VASurface.\n// |      |\n// |      |--------------------------------------------------+\n// |      |                                                  |\n// |      v                                                  v\n// | DecodeSurface is to be output.              VaapiH264Decoder uses the\n// | VaapiH264Decoder passes the associated      DecodeSurface and associated\n// | VASurface to VaapiVideoDecodeAccelerator,   VASurface as reference for\n// | which stores it (taking a ref) on           decoding more frames.\n// | pending_output_cbs_ queue until an output               |\n// | VaapiPicture becomes available.                         v\n// |                 |                           Once the DecodeSurface is not\n// |                 |                           needed as reference anymore,\n// |                 v                           it is released, releasing the\n// | A VaapiPicture becomes available after      associated VASurface reference.\n// | the client of VVDA returns                              |\n// | a PictureBuffer associated with it. VVDA                |\n// | puts the contents of the VASurface into                 |\n// | it and releases the reference to VASurface.             |\n// |                 |                                       |\n// |                 '---------------------------------------'\n// |                                     |\n// |                                     v\n// | Neither VVDA nor VHD hold a reference to VASurface. VASurface is released,\n// | ReleaseCB gets called in its destructor, which puts the associated\n// | VASurfaceID back onto VVDA::available_va_surfaces_.\n// |                                     |\n// '-------------------------------------|\n//                                       |\n//                                       v\n//                       VaapiWrapper frees VASurfaceID.\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "chromium/media/gpu/vaapi/va_surface.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/mojo/mojom/video_encode_accelerator.mojom#L15-L37",
    "ascii": "// This file is the Mojo version of the media::VideoEncodeAccelerator interface\n// and describes the communication between a Client and a remote \"service\"\n// VideoEncodeAccelerator (VEA) with the purpose of encoding Video Frames by\n// means of hardware accelerated features.\n//\n//   Client                                    VideoEncodeAccelerator\n//      | ---> Initialize                                       |\n//      |                     RequireBitstreamBuffers(N) <---   |\n//      | ---> UseOutputBitstreamBuffer(0)                      |\n//      | ---> UseOutputBitstreamBuffer(1)                      |\n//      |  ...                                                  |\n//      =                                                       =\n// The Client requests a remote Encode() and eventually the VEA will leave the\n// encoded results in a pre-shared BitstreamBuffer, that is then restored to the\n// VEA when the Client is finished with it. Note that there might not be a 1:1\n// relationship between Encode() and BitstreamBufferReady() calls.\n//      | ---> Encode()                                         |\n//      |                        BitstreamBufferReady(k) <---   |\n//      | ---> UseOutputBitstreamBuffer(k)                      |\n//      =                                                       =\n// At any time the VEA can send a NotifyError() to the Client. Similarly at any\n// time the Client can send a RequestEncodingParametersChange() to the VEA. None\n// of these messages are acknowledged.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/mojo/mojom/video_encode_accelerator.mojom"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/mojo/core/ipcz_driver/mojo_message.cc#L24-L45",
    "ascii": "// Data pipe attachments come in two parts within a message's handle list: the\n// DataPipe object wherever it was placed by the sender, and its control portal\n// as a separate attachment at the end of the handle list. For a message with\n// two data pipes endpoints (X and Y) and two message pipe endpoints(A and B),\n// sent in the order AXBY, a well-formed message will have 6 total handles\n// attached:\n//\n// Message Pipe A   Message Pipe B   DataPipe X's portal\n//      |               |              |\n//     0:A     1:X     2:B     3:Y    4:x    5:y\n//              |               |             |\n//          DataPipe X       DataPipe Y      DataPipe Y's portal\n//\n// This function validates that each DataPipe in `handles` has an associated\n// portal, and it fixes up `handles` by stripping those portals off the end of\n// the list and passing ownership to their corresponding DataPipe object.\n//\n// Returns true if and only if the handle list is well-formed in this regard.\n//\n// TODO(https://crbug.com/1382170): Since boxes now support application objects,\n// DataPipe can be migrated out of the driver and we can avoid this whole\n// serialization hack.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/mojo/core/ipcz_driver/mojo_message.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ppapi/proxy/dispatcher.h#L33-L46",
    "ascii": "// An interface proxy can represent either end of a cross-process interface\n// call. The \"source\" side is where the call is invoked, and the \"target\" side\n// is where the call ends up being executed.\n//\n// Plugin side                          | Browser side\n// -------------------------------------|--------------------------------------\n//                                      |\n//    \"Source\"                          |    \"Target\"\n//    InterfaceProxy ----------------------> InterfaceProxy\n//                                      |\n//                                      |\n//    \"Target\"                          |    \"Source\"\n//    InterfaceProxy <---------------------- InterfaceProxy\n//                                      |\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ppapi/proxy/dispatcher.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/client/display/gl_math.h#L13-L19",
    "ascii": "// Transposes matrix [ m0, m1, m2, m3, m4, m5, m6, m7, m8 ]:\n//\n// | m0, m1, m2, |   | x |\n// | m3, m4, m5, | * | y |\n// | m6, m7, m8  |   | 1 |\n//\n// Into [ m0, m3, m6, m1, m4, m7, m2, m5, m8 ].\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/client/display/gl_math.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/client/ui/view_matrix.h#L12-L15",
    "ascii": "// A 2D non-skew equally scaled transformation matrix.\n// | SCALE, 0,     OFFSET_X, |\n// | 0,     SCALE, OFFSET_Y, |\n// | 0,     0,     1         |\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/client/ui/view_matrix.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/host/client_session_unittest.cc#L387-L393",
    "ascii": "// Set up multiple displays:\n// +-----------+\n// |  800x600  |---------------+\n// |     0     |   1024x768    |\n// +-----------+       1       |\n//             |               |\n//             +---------------+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/host/client_session_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/host/desktop_display_info.cc#L81-L102",
    "ascii": "// Calculate the offset from the origin of the desktop to the origin of the\n// specified display.\n//\n// For Mac and ChromeOS, the origin of the desktop is the origin of the default\n// display.\n//\n// For Windows/Linux, the origin of the desktop is the upper-left of the\n// entire desktop region.\n//\n// x         b-----------+            ---\n//           |           |             |  y-offset to c\n// a---------+           |             |\n// |         +-------c---+-------+    ---\n// |         |       |           |\n// +---------+       |           |\n//                   +-----------+\n//\n// |-----------------|\n//    x-offset to c\n//\n// x = upper left of desktop\n// a,b,c = origin of display A,B,C\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/host/desktop_display_info.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/host/desktop_display_info_unittest.cc#L46-L50",
    "ascii": "// o---------+\n// | 0       |\n// | 300x200 |\n// +---------+\n// o = desktop origin\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/host/desktop_display_info_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/wm/desks/desk_preview_view.h#L27-L69",
    "ascii": "// A view that shows the contents of the corresponding desk in its mini_view.\n// This view has the following layer hierarchy:\n//\n//                +---------------------------+\n//                |             <-------------+------  This view's layer.\n//                +---------------------------+\n//              /    |          |               \\  ----->>>>> Higher in Z-order.\n//             /     |          |                \\\n//     +-----+    +-----+    +-----+               +-----+\n//     |     |    |     |    |     |               |     |\n//     +-----+    +-----+    +-----+               +-----+\n//        ^          ^          ^    \\                ^\n//        |          |          |     \\ +-----+       |\n//        |          |          |       |     |       |\n//        |          |          |       +-----+       |\n//        |          |          |          ^          |\n//        |          |          |          |   `highlight_overlay_`'s layer:\n//        |          |          |          |   A solid color layer that is\n//        |          |          |          |   visible when `mini_view_`'s\n//        |          |          |          |   `DeskActionContextMenu` is open.\n//        |          |          |          |\n//        |          |          |          |\n//        |          |          |    The root layer of the desk's mirrored\n//        |          |          |    contents layer tree. This tree is owned by\n//        |          |          |    `desk_mirrored_contents_layer_tree_owner_`.\n//        |          |          |\n//        |          |          |\n//        |          |     `desk_mirrored_contents_view_`'s layer: Will be the\n//        |          |      parent layer of the desk's contents mirrored layer\n//        |          |      tree.\n//        |          |\n//        |          |\n//        |     `wallpaper_preview_`'s layer: On which the wallpaper is painted\n//        |      without the dimming and blur that overview mode adds.\n//        |\n//        |\n//     `shadow_layer_`: A layer that paints a shadow behind this view.\n//\n// Note that `desk_mirrored_contents_view_`, `wallpaper_preview_`, and\n// `highlight_overlay_` paint to layers with rounded corners. In order to use\n// the fast rounded corners implementation we must make them sibling layers,\n// rather than one being a descendant of the other. Otherwise, this will trigger\n// a render surface.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/wm/desks/desk_preview_view.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/protocol/mouse_input_filter_unittest.cc#L200-L207",
    "ascii": "// Default display = Left (A)\n// o-------------+-----------------+\n// | A           | B               |\n// | 2560x1440   | 3840x2160       |\n// |             |                 |\n// |-------------+                 |\n//               +-----------------+\n// o = desktop origin\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/protocol/mouse_input_filter_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/protocol/video_frame_pump.h#L33-L67",
    "ascii": "// Class responsible for scheduling frame captures from a screen capturer,\n// delivering them to a VideoEncoder to encode, and finally passing the encoded\n// video packets to the specified VideoStub to send on the network.\n//\n// THREADING\n//\n// This class is supplied TaskRunners to use for capture, encode and network\n// operations.  Capture, encode and network transmission tasks are interleaved\n// as illustrated below:\n//\n// |       CAPTURE       ENCODE     NETWORK\n// |    .............\n// |    .  Capture  .\n// |    .............\n// |                  ............\n// |                  .          .\n// |    ............. .          .\n// |    .  Capture  . .  Encode  .\n// |    ............. .          .\n// |                  .          .\n// |                  ............\n// |    ............. ............ ..........\n// |    .  Capture  . .          . .  Send  .\n// |    ............. .          . ..........\n// |                  .  Encode  .\n// |                  .          .\n// |                  .          .\n// |                  ............\n// | Time\n// v\n//\n// VideoFramePump would ideally schedule captures so as to saturate the slowest\n// of the capture, encode and network processes.  However, it also needs to\n// rate-limit captures to avoid overloading the host system, either by consuming\n// too much CPU, or hogging the host's graphics subsystem.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/protocol/video_frame_pump.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/sandbox/linux/syscall_broker/remote_syscall_arg_handler_unittest.cc#L117-L117",
    "ascii": "// | path + null_byte |\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/sandbox/linux/syscall_broker/remote_syscall_arg_handler_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/sandbox/win/src/crosscall_server.h#L18-L46",
    "ascii": "// This is the IPC server interface for CrossCall: The  IPC for the Sandbox\n// On the server, CrossCall needs two things:\n// 1) threads: Or better said, someone to provide them, that is what the\n//             ThreadPool is for. These thread(s) are\n//             the ones that will actually execute the IPC data retrieval.\n//\n// 2) a dispatcher: This interface represents the way to route and process\n//                  an  IPC call given the  IPC tag.\n//\n// The other class included here CrossCallParamsEx is the server side version\n// of the CrossCallParams class of /sandbox/crosscall_params.h The difference\n// is that the sever version is paranoid about the correctness of the IPC\n// message and will do all sorts of verifications.\n//\n// A general diagram of the interaction is as follows:\n//\n//                                 ------------\n//                                 |          |\n//  ThreadPool<-------(1)Register--|  IPC     |\n//      |                          | Implemen |\n//      |                          | -tation  |\n//     (2)                         |          |  OnMessage\n//     IPC fired --callback ------>|          |--(3)---> Dispatcher\n//                                 |          |\n//                                 ------------\n//\n//  The  IPC implementation sits as a middleman between the handling of the\n//  specifics of scheduling a thread to service the  IPC and the multiple\n//  entities that can potentially serve each particular IPC.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/sandbox/win/src/crosscall_server.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/wm/desks/root_window_desk_switch_animator.h#L30-L179",
    "ascii": "// Performs the desk switch animation on a root window (i.e. display). Since a\n// desk spans all displays, one instance of this object will be created for each\n// display when a new desk is activated.\n//\n// Screenshots of the starting and ending desks are taken, and we animate\n// between them such that the starting desk can appear sliding out of the\n// screen, while the ending desk is sliding in. We take screenshots to make the\n// visible state of the desks seem constant to the user (e.g. if the starting\n// desk is in overview, it appears to remain in overview while sliding out).\n// This approach makes it possible to show an empty black space separating both\n// desks while we animate them (See |kDesksSpacing|). The ending desk may change\n// after the animation has started. In this case, a new animation will replace\n// the current one and animate to the new ending desk, requesting a new\n// screenshot if necessary.\n// - `starting` desk: is the currently activated desk which will be deactivated\n//    shortly.\n// - `ending` desk: is the desk desired to be activated with this animation.\n// These can be changed if the enhanced desk animations feature is enabled using\n// ReplaceAnimation() or UpdateSwipeAnimation().\n//\n// The animation goes through the following phases:\n//\n// - Phase (1) begins by calling TakeStartingDeskScreenshot(), which should be\n//   called before the ending desk is activated.\n//   * Once the screenshot is taken, it is placed in a layer that covers\n//     everything on the screen, so that desk activation can happen without\n//     being seen.\n//   * Delegate::OnStartingDeskScreenshotTaken() is called, and the owner of\n//     this object can check that all animators of all root windows have\n//     finished taking the starting desk screenshots (through checking\n//     starting_desk_screenshot_taken()), upon which the actual ending desk\n//     activation can take place, and phase (2) of the animation can be\n//     triggered.\n//\n// - Phase (2) should begin after the ending desk had been activated,\n//   by calling TakeEndingDeskScreenshot().\n//   * Once the screenshot is taken, it is placed in a sibling layer to the\n//     starting desk screenshot layer, with an offset of |kDesksSpacing| between\n//     the two layers.\n//   * Delegate::OnEndingDeskScreenshotTaken() will be called, upon which the\n//     owner of this object can check if all ending desks screenshots on all\n//     roots are taken by all animators (through checking\n//     ending_desk_screenshot_taken()), so that it can start phase (3) on all of\n//     them at the same time.\n//   * Phase (2) can be rentered after starting phase (3) by calling\n//     ReplaceAnimation() or UpdateSwipeAnimation(). The new ending desk will\n//     change, and if it does not have an associated screenshot layer, the\n//     caller will be responsible for requesting one using\n//     TakeEndingDeskScreenshot(). The screenshots are taken as needed since\n//     their layers are fullscreen and require activating a desk which may be a\n//     large operation for something that the user may not see. Once the\n//     screenshot is taken, it is kept until |this| is destroyed. If an\n//     associated screenshot layer exists already, ReplaceAnimation() and\n//     UpdateSwipeAnimation() can proceed without returning to phase (2).\n//\n// - Phase (3) begins when StartAnimation() is called.\n//   * The parent layer of both screenshot layers is animated, either:\n//     - To the left (starting_desk_index_ < ending_desk_index_); when the\n//       starting desk is on the left.\n//\n//              <<<<<-------------------------- move left.\n//                       +-----------+\n//                       | Animation |\n//                       |  layer    |\n//                       +-----------+\n//                         /        \\\n//              +------------+      +------------+\n//              | start desk |      | end desk   |\n//              | screenshot |      | screenshot |\n//              |  layer     |      |  layer     |\n//              +------------+      +------------+\n//                    ^\n//                start here\n//\n//       Animation layer transforms:\n//       * Begin transform: The transform that will make the starting desk\n//         screenshot visible. In this case it is a transform with translation\n//         (edge_padding_width_dp_, 0).\n//       * End transform: The transform that will make the ending desk\n//         screenshot visible. In this case it is a transform with translation\n//         (-|edge_padding_width_dp_| - |x_translation_offset_| -\n//         |kDesksSpacing|, 0).\n//\n//     - Or to the right (starting_desk_index_ > ending_desk_index_), when the\n//       starting desk is on the right.\n//\n//          move right. -------------------------->>>>>\n//                       +-----------+\n//                       | Animation |\n//                       |  layer    |\n//                       +-----------+\n//                         /        \\\n//              +------------+      +------------+\n//              | end desk   |      | start desk |\n//              | screenshot |      | screenshot |\n//              |  layer     |      |  layer     |\n//              +------------+      +------------+\n//                                        ^\n//                                    start here\n//\n//       Animation layer transforms:\n//       * Begin transform: The transform that will make the starting desk\n//         screenshot visible. In this case it is a transform with translation\n//         (-|edge_padding_width_dp_| - |x_translation_offset_| -\n//         |kDesksSpacing|, 0).\n//       * End transform: The transform that will make the ending desk\n//         screenshot visible. In this case it is a transform with translation\n//         (edge_padding_width_dp_, 0).\n//\n//   * The animation always begins such that the starting desk screenshot layer\n//     is the one visible on the screen, and the parent (animation layer) always\n//     moves in the direction such that the ending desk screenshot becomes\n//     visible on the screen.\n//   * The children (screenshot layers) are always placed left to right to match\n//     desk order. For example, if there are three desks and this class has been\n//     instructed to create a screenshot for all three desks, desk 1's\n//     screenshot will be on the left, desk 2's screenshot will be in the middle\n//     and desk 3's screenshot will be on the right.\n//   * Once the animation finishes, Delegate::OnDeskSwitchAnimationFinished() is\n//     triggered. The owner of this object can then check that all animators on\n//     all roots have finished their animations (by checking\n//     animation_finished()), upon which it can delete these animators which\n//     will destroy all the screenshot layers and the real screen contents will\n//     be visible again.\n//\n// This cooperative interaction between the animators and their owner\n// (DesksController::AbstractDeskSwitchAnimation) is needed for the following\n// reasons:\n// 1- The new desk is only activated after all starting desk screenshots on all\n//    roots have been taken and placed on top of everything (between phase (1)\n//    and (2)), so that the effects of desk activation (windows hiding and\n//    showing, overview exiting .. etc.) are not visible to the user.\n// 2- The animation doesn't start until all ending desk screenshots on all\n//    root windows are ready (between phase (2) and (3)). This is needed to\n//    synchronize the animations on all displays together (otherwise the\n//    animations will lag behind each other).\n//\n// When this animator is used to implement the remove-active-desk animation\n// (which also involves switching desks; from the to-be-removed desk to another\n// desk), `for_remove` is set to true in the constructor. The animation is\n// slightly tweaked to do the following:\n// - Instead of taking a screenshot of the starting desk, we replace it by a\n//   black solid color layer, to indicate the desk is being removed.\n// - The layer tree of the active-desk container is recreated, and the old\n//   layers are detached and animated vertically by\n//   `kRemovedDeskWindowYTranslation`.\n// - That old layer tree is then translated back down by the same amount while\n//   the desks screenshots are animating horizontally.\n// This gives the effect that the removed desk windows are jumping from their\n// desk to the target desk.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/wm/desks/root_window_desk_switch_animator.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/services/audio/output_controller.h#L30-L57",
    "ascii": "// An OutputController controls an AudioOutputStream and provides data to this\n// output stream. It executes audio operations like play, pause, stop, etc. on\n// the audio manager thread, while the audio data flow occurs on the platform's\n// realtime audio thread.\n//\n// Here is a state transition diagram for the OutputController:\n//\n//   *[ Empty ]  -->  [ Created ]  -->  [ Playing ]  -------.\n//        |                |               |    ^           |\n//        |                |               |    |           |\n//        |                |               |    |           v\n//        |                |               |    `-----  [ Paused ]\n//        |                |               |                |\n//        |                v               v                |\n//        `----------->  [      Closed       ]  <-----------'\n//\n// * Initial state\n//\n// At any time after reaching the Created state but before Closed, the\n// OutputController may be notified of a device change via OnDeviceChange().  As\n// the OnDeviceChange() is processed, state transitions will occur, ultimately\n// ending up in an equivalent pre-call state.  E.g., if the state was Paused,\n// the new state will be Created, since these states are all functionally\n// equivalent and require a Play() call to continue to the next state.\n//\n// The AudioOutputStream can request data from the OutputController via the\n// AudioSourceCallback interface. OutputController uses the SyncReader passed to\n// it via construction to synchronously fulfill this read request.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/services/audio/output_controller.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/services/tracing/public/cpp/perfetto/perfetto_tracing_backend.h#L24-L39",
    "ascii": "// The Perfetto tracing backend mediates between the Perfetto client library and\n// the mojo-based tracing service. It allows any process to emit trace data\n// through Perfetto and privileged processes (i.e., the browser) to start\n// tracing sessions and read back the resulting data.\n//\n//      Perfetto         :   Tracing backend     :    Tracing service\n//                       :                       :\n//                       :                      mojo\n//                calls  : .------------------.  :  .--------------.\n//             .---------->| ConsumerEndpoint |<--->| ConsumerHost |\n//  .--------------.     : `------------------'  :  `--------------'\n//  | TracingMuxer |     :                       :\n//  `--------------'     : .------------------.  :  .--------------.\n//             `---------->| ProducerEndpoint |<--->| ProducerHost |\n//                       : `------------------'  :  `--------------'\n//                       :                       :\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/services/tracing/public/cpp/perfetto/perfetto_tracing_backend.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/android_opengl/etc1/etc1.cpp#L31-L120",
    "ascii": "\n/* From http://www.khronos.org/registry/gles/extensions/OES/OES_compressed_ETC1_RGB8_texture.txt\n\n The number of bits that represent a 4x4 texel block is 64 bits if\n <internalformat> is given by ETC1_RGB8_OES.\n\n The data for a block is a number of bytes,\n\n {q0, q1, q2, q3, q4, q5, q6, q7}\n\n where byte q0 is located at the lowest memory address and q7 at\n the highest. The 64 bits specifying the block is then represented\n by the following 64 bit integer:\n\n int64bit = 256*(256*(256*(256*(256*(256*(256*q0+q1)+q2)+q3)+q4)+q5)+q6)+q7;\n\n ETC1_RGB8_OES:\n a) bit layout in bits 63 through 32 if diffbit = 0\n\n 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48\n -----------------------------------------------\n | base col1 | base col2 | base col1 | base col2 |\n | R1 (4bits)| R2 (4bits)| G1 (4bits)| G2 (4bits)|\n -----------------------------------------------\n\n 47 46 45 44 43 42 41 40 39 38 37 36 35 34  33  32\n ---------------------------------------------------\n | base col1 | base col2 | table  | table  |diff|flip|\n | B1 (4bits)| B2 (4bits)| cw 1   | cw 2   |bit |bit |\n ---------------------------------------------------\n\n\n b) bit layout in bits 63 through 32 if diffbit = 1\n\n 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48\n -----------------------------------------------\n | base col1    | dcol 2 | base col1    | dcol 2 |\n | R1' (5 bits) | dR2    | G1' (5 bits) | dG2    |\n -----------------------------------------------\n\n 47 46 45 44 43 42 41 40 39 38 37 36 35 34  33  32\n ---------------------------------------------------\n | base col 1   | dcol 2 | table  | table  |diff|flip|\n | B1' (5 bits) | dB2    | cw 1   | cw 2   |bit |bit |\n ---------------------------------------------------\n\n\n c) bit layout in bits 31 through 0 (in both cases)\n\n 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16\n -----------------------------------------------\n |       most significant pixel index bits       |\n | p| o| n| m| l| k| j| i| h| g| f| e| d| c| b| a|\n -----------------------------------------------\n\n 15 14 13 12 11 10  9  8  7  6  5  4  3   2   1  0\n --------------------------------------------------\n |         least significant pixel index bits       |\n | p| o| n| m| l| k| j| i| h| g| f| e| d| c | b | a |\n --------------------------------------------------\n\n\n Add table 3.17.2: Intensity modifier sets for ETC1 compressed textures:\n\n table codeword                modifier table\n ------------------        ----------------------\n 0                     -8  -2  2   8\n 1                    -17  -5  5  17\n 2                    -29  -9  9  29\n 3                    -42 -13 13  42\n 4                    -60 -18 18  60\n 5                    -80 -24 24  80\n 6                   -106 -33 33 106\n 7                   -183 -47 47 183\n\n\n Add table 3.17.3 Mapping from pixel index values to modifier values for\n ETC1 compressed textures:\n\n pixel index value\n ---------------\n msb     lsb           resulting modifier value\n -----   -----          -------------------------\n 1       1            -b (large negative value)\n 1       0            -a (small negative value)\n 0       0             a (small positive value)\n 0       1             b (large positive value)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/android_opengl/etc1/etc1.cpp"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/perf_tests/speedometer/resources/todomvc/labs/architecture-examples/react/bower_components/react/react.js#L3899-L3924",
    "ascii": "/**\n * `ReactCompositeComponent` maintains an auxiliary life cycle state in\n * `this._compositeLifeCycleState` (which can be null).\n *\n * This is different from the life cycle state maintained by `ReactComponent` in\n * `this._lifeCycleState`. The following diagram shows how the states overlap in\n * time. There are times when the CompositeLifeCycle is null - at those times it\n * is only meaningful to look at ComponentLifeCycle alone.\n *\n * Top Row: ReactComponent.ComponentLifeCycle\n * Low Row: ReactComponent.CompositeLifeCycle\n *\n * +-------+------------------------------------------------------+--------+\n * |  UN   |                    MOUNTED                           |   UN   |\n * |MOUNTED|                                                      | MOUNTED|\n * +-------+------------------------------------------------------+--------+\n * |       ^--------+   +------+   +------+   +------+   +--------^        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |\n * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       +--------+   +------+   +------+   +------+   +--------+        |\n * |       |                                                      |        |\n * +-------+------------------------------------------------------+--------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/perf_tests/speedometer/resources/todomvc/labs/architecture-examples/react/bower_components/react/react.js"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/fragment_directive/text_fragment_anchor.h#L28-L76",
    "ascii": "// TextFragmentAnchor is the coordinator class for applying text directives\n// from the URL (also known as \"scroll-to-text\") to a document. This class'\n// purpose is to integrate with Blink's loading and lifecycle states. The\n// actual logic of performing the text search and applying highlights is\n// delegated out to the core annotation API.\n//\n// A frame will try to create a TextFragmentAnchor when parsing in a document\n// completes. If the URL has a valid text directive an instance of\n// TextFragmentAnchor will be created and stored on the LocalFrameView.\n//\n// The anchor performs its operations via the InvokeSelector method which is\n// invoked repeatedly, each time layout finishes in the document. Thus, the\n// anchor is guaranteed that layout is clean in InvokeSelector; however,\n// end-of-layout is a script-forbidden section so no actions that can result in\n// script being run can be invoked from there. Scriptable actions will instead\n// cause a BeginMainFrame to be scheduled and run in that frame before the\n// lifecycle, where script is allowed.\n//\n// TextFragmentAnchor is a state machine that transitions state via\n// InvokeSelector (and some external events). Here are the state transitions:\n//\n//           ┌──────┐\n//           │   ┌──┴────────────────────────┐\n//           └───►       kSearching          ├────────────┐\n//               └─────────────┬─────────────┘            │\n//                             │                          │\n//         ┌─────┬─────────────▼─────────────┐            │\n//         └────►│ kBeforeMatchEventQueued   │            │\n//               └─────────────┬─────────────┘            │\n//                             │                          │\n//               ┌─────────────▼─────────────┐            │\n//               │  kBeforeMatchEventFired   ├────────────┤\n//               └─────────────┬─────────────┘            │\n//                             │                          │\n//         ┌─────┬─────────────▼─────────────┐            │\n//         └────►│ kEffectsAppliedKeepInView │            │\n//               └─────────────┬─────────────┘            │\n//                             │                          │\n//               ┌------------─▼-------------┐            │\n//         ┌─────┤     [[SearchFinished]]    |◄───────────┘\n//         │     └-------------┬-------------┘\n//         │                   │\n//         │     ┌─────────────▼─────────────┬─────┐\n//         │     │    kScriptableActions     │◄────┘\n//         │     └───────────────────────────┘\n//         │                   │\n//         │     ┌─────────────▼─────────────┐\n//         └─────►           kDone           │\n//               └───────────────────────────┘\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/fragment_directive/text_fragment_anchor.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/inspector/inspector_diff.cc#L21-L57",
    "ascii": "// Implements Myer's Algorithm from\n// \"An O(ND) Difference Algorithm and Its Variations\", particularly the\n// linear space refinement mentioned in section 4b.\n//\n// The differ is input agnostic.\n//\n// The algorithm works by finding the shortest edit string (SES) in the edit\n// graph. The SES describes how to get from a string A of length N to a string\n// B of length M via deleting from A and inserting from B.\n//\n// Example: A = \"abbaa\", B = \"abab\"\n//\n//                  A\n//\n//          a   b   b   a    a\n//        o---o---o---o---o---o\n//      a | \\ |   |   | \\ | \\ |\n//        o---o---o---o---o---o\n//      b |   | \\ | \\ |   |   |\n//  B     o---o---o---o---o---o\n//      a | \\ |   |   | \\ | \\ |\n//        o---o---o---o---o---o\n//      b |   | \\ | \\ |   |   |\n//        o---o---o---o---o---o\n//\n// The edit graph is constructed with the characters from string A on the x-axis\n// and the characters from string B on the y-axis. Starting from (0, 0) we can:\n//\n//     - Move right, which is equivalent to deleting from A\n//     - Move downwards, which is equivalent to inserting from B\n//     - Move diagonally if the characters from string A and B match, which\n//       means no insertion or deletion.\n//\n// Any path from (0, 0) to (N, M) describes a valid edit string, but we try to\n// find the path with the most diagonals, conversely that is the path with the\n// least insertions or deletions.\n// Note that a path with \"D\" insertions/deletions is called a D-path.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/inspector/inspector_diff.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/layout/layout_box.h#L154-L227",
    "ascii": "//     width: 10px;\n//     height: 20px;\n// }\n// </style>\n// <div style=\"overflow:scroll; width: 100px; height: 100px\">\n//\n// The <div>'s content box is not 100x100 as specified in the style but 90x80 as\n// we remove the scrollbars from the box.\n//\n// The presence of scrollbars is determined by the 'overflow' property and can\n// be conditioned on having layout overflow (see OverflowModel for more details\n// on how we track overflow).\n//\n// There are 2 types of scrollbars:\n// - non-overlay scrollbars take space from the content box.\n// - overlay scrollbars don't and just overlay hang off from the border box,\n//   potentially overlapping with the padding box's content.\n// For more details on scrollbars, see PaintLayerScrollableArea.\n//\n//\n// ***** THE BOX MODEL *****\n// The CSS box model is based on a series of nested boxes:\n// http://www.w3.org/TR/CSS21/box.html\n//\n//       |----------------------------------------------------|\n//       |                                                    |\n//       |                   margin-top                       |\n//       |                                                    |\n//       |     |-----------------------------------------|    |\n//       |     |                                         |    |\n//       |     |             border-top                  |    |\n//       |     |                                         |    |\n//       |     |    |--------------------------|----|    |    |\n//       |     |    |                          |    |    |    |\n//       |     |    |       padding-top        |####|    |    |\n//       |     |    |                          |####|    |    |\n//       |     |    |    |----------------|    |####|    |    |\n//       |     |    |    |                |    |    |    |    |\n//       | ML  | BL | PL |  content box   | PR | SW | BR | MR |\n//       |     |    |    |                |    |    |    |    |\n//       |     |    |    |----------------|    |    |    |    |\n//       |     |    |                          |    |    |    |\n//       |     |    |      padding-bottom      |    |    |    |\n//       |     |    |--------------------------|----|    |    |\n//       |     |    |                      ####|    |    |    |\n//       |     |    |     scrollbar height ####| SC |    |    |\n//       |     |    |                      ####|    |    |    |\n//       |     |    |-------------------------------|    |    |\n//       |     |                                         |    |\n//       |     |           border-bottom                 |    |\n//       |     |                                         |    |\n//       |     |-----------------------------------------|    |\n//       |                                                    |\n//       |                 margin-bottom                      |\n//       |                                                    |\n//       |----------------------------------------------------|\n//\n// BL = border-left\n// BR = border-right\n// ML = margin-left\n// MR = margin-right\n// PL = padding-left\n// PR = padding-right\n// SC = scroll corner (contains UI for resizing (see the 'resize' property)\n// SW = scrollbar width\n//\n// Note that the vertical scrollbar (if existing) will be on the left in\n// right-to-left direction and horizontal writing-mode. The horizontal scrollbar\n// (if existing) is always at the bottom.\n//\n// Those are just the boxes from the CSS model. Extra boxes are tracked by Blink\n// (e.g. the overflows). Thus it is paramount to know which box a function is\n// manipulating. Also of critical importance is the coordinate system used (see\n// the COORDINATE SYSTEMS section in LayoutBoxModelObject).\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/layout/layout_box.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/layout/layout_shift_region_test.cc#L106-L113",
    "ascii": "// Creates a region like this:\n//   █ █ █\n//  ███████\n//   █ █ █\n//  ███████\n//   █ █ █\n//  ███████\n//   █ █ █\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/layout/layout_shift_region_test.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/layout/layout_table_cell.h#L49-L90",
    "ascii": "// LayoutTableCell is used to represent a table cell (display: table-cell).\n//\n// Because rows are as tall as the tallest cell, cells need to be aligned into\n// the enclosing row space. To achieve this, LayoutTableCell introduces the\n// concept of 'intrinsic padding'. Those 2 paddings are used to shift the box\n// into the row as follows:\n//\n//        --------------------------------\n//        ^  ^\n//        |  |\n//        |  |    cell's border before\n//        |  |\n//        |  v\n//        |  ^\n//        |  |\n//        |  | m_intrinsicPaddingBefore\n//        |  |\n//        |  v\n//        |  -----------------------------\n//        |  |                           |\n// row    |  |   cell's padding box      |\n// height |  |                           |\n//        |  -----------------------------\n//        |  ^\n//        |  |\n//        |  | m_intrinsicPaddingAfter\n//        |  |\n//        |  v\n//        |  ^\n//        |  |\n//        |  |    cell's border after\n//        |  |\n//        v  v\n//        ---------------------------------\n//\n// Note that this diagram is not impacted by collapsing or separate borders\n// (see 'border-collapse').\n// Also there is no margin on table cell (or any internal table element).\n//\n// LayoutTableCell is positioned with respect to the enclosing\n// LayoutTableSection. See callers of\n// LayoutTableSection::setLogicalPositionForCell() for when it is placed.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/layout/layout_table_cell.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/layout/ng/table/ng_table_borders.h#L26-L60",
    "ascii": "// When table has collapsed borders, computing borders for table parts is\n// complex, and costly.\n// NGTableBorders precomputes collapsed borders. It exposes the API for\n// border access. If borders are not collapsed, the API returns regular\n// borders.\n//\n// NGTableBorders methods often take rowspan/colspan arguments.\n// Rowspan must never be taller than the section.\n// Colspan must never be wider than the table.\n// To enforce this, NGTableBorders keeps track of section dimensions,\n// and table's last column.\n//\n// Collapsed borders are stored as edges.\n// Edges are stored in a 1D array. The array does not grow if borders are\n// not set.\n// Each edge represents a cell border.\n// Mapping between edges and cells is best understood like this:\n// - each cell stores only two edges, left edge, and a top edge.\n// - cell's right edge is the left edge of the next cell.\n// - cell's bottom edge is the top edge of the cell in the next row.\n//\n// To store all last row/col edges, an extra imaginary cell is used.\n//\n// A grid with R rows and C columns has |2 * (R+1) * (C+1)| edges.\n// Example; R=1, C=3, 2*(1+1)*(3+1) = 16 edges.\n// Edges 7, 9, 11, 13, 14, 15 are unused.\n//\n//     1    3   5   7\n//   ------------------    <= edges for 3 cols X 1 row\n//   |0  |2  |4   |6\n//   |   |   |    |\n//   ------------------\n//   | 8 | 10| 12 | 14\n//   |   |   |    |\n//   |9  |11 |13  |15\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/layout/ng/table/ng_table_borders.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/layout/shapes/box_shape_test.cc#L68-L77",
    "ascii": "/* The BoxShape is based on a 100x50 rectangle at 0,0. The shape-margin value is\n * 10, so the shape is a rectangle (120x70 at -10,-10) with rounded corners\n * (radius=10):\n *\n *   -10,-10   110,-10\n *       (--------)\n *       |        |\n *       (--------)\n *   -10,60    110,60\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/layout/shapes/box_shape_test.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/wm/desks/templates/saved_desk_unittest.cc#L1649-L1656",
    "ascii": "// Tests that apps with multiple window are counted correctly.\n//  ______________________________________________________\n//  |  ________   ________   ________________   ________ |\n//  | |       |  |       |  |       |       |  |       | |\n//  | |   I   |  |   I   |  |   I      + 1  |  |  + 5  | |\n//  | |_______|  |_______|  |_______|_______|  |_______| |\n//  |____________________________________________________|\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/wm/desks/templates/saved_desk_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/paint/nine_piece_image_grid.h#L42-L62",
    "ascii": "// The NinePieceImageGrid class is responsible for computing drawing information\n// for the nine piece image.\n//\n// https://drafts.csswg.org/css-backgrounds/#border-image-process\n//\n// Given an image, a set of slices and a border area:\n//\n//       |         |\n//   +---+---------+---+          +------------------+\n//   | 1 |    7    | 4 |          |      border      |\n// --+---+---------+---+---       |  +------------+  |\n//   |   |         |   |          |  |            |  |\n//   | 3 |    9    | 6 |          |  |    css     |  |\n//   |   |  image  |   |          |  |    box     |  |\n//   |   |         |   |          |  |            |  |\n// --+---+---------+---+---       |  |            |  |\n//   | 2 |    8    | 5 |          |  +------------+  |\n//   +---+---------+---+          |                  |\n//       |         |              +------------------+\n//\n// it generates drawing information for the nine border pieces.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/paint/nine_piece_image_grid.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/paint/text_decoration_info.cc#L183-L209",
    "ascii": "// Prepares a path for a cubic Bezier curve repeated three times, yielding a\n// wavy pattern that we can cut into a tiling shader (PrepareWavyTileRecord).\n//\n// The result ignores the local origin, line offset, and (wavy) double offset,\n// so the midpoints are always at y=0.5, while the phase is shifted for either\n// wavy or spelling/grammar decorations so the desired pattern starts at x=0.\n//\n// The start point, control points (cp1 and cp2), and end point of each curve\n// form a diamond shape:\n//\n//            cp2                      cp2                      cp2\n// ---         +                        +                        +\n// |               x=0\n// | control         |--- spelling/grammar ---|\n// | point          . .                      . .                      . .\n// | distance     .     .                  .     .                  .     .\n// |            .         .              .         .              .         .\n// +-- y=0.5   .            +           .            +           .            +\n//  .         .              .         .              .         .\n//    .     .                  .     .                  .     .\n//      . .                      . .                      . .\n//                          |-------- other ---------|\n//                        x=0\n//             +                        +                        +\n//            cp1                      cp1                      cp1\n// |-----------|------------|\n//     step         step\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/paint/text_decoration_info.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/modules/canvas/canvas2d/canvas_path.cc#L283-L315",
    "ascii": "/*\n * degenerateEllipse() handles a degenerated ellipse using several lines.\n *\n * Let's see a following example: line to ellipse to line.\n *        _--^\\\n *       (     )\n * -----(      )\n *            )\n *           /--------\n *\n * If radiusX becomes zero, the ellipse of the example is degenerated.\n *         _\n *        // P\n *       //\n * -----//\n *      /\n *     /--------\n *\n * To draw the above example, need to get P that is a local maximum point.\n * Angles for P are 0.5Pi and 1.5Pi in the ellipse coordinates.\n *\n * If radiusY becomes zero, the result is as follows.\n * -----__\n *        --_\n *          ----------\n *            ``P\n * Angles for P are 0 and Pi in the ellipse coordinates.\n *\n * To handle both cases, degenerateEllipse() lines to start angle, local maximum\n * points(every 0.5Pi), and end angle.\n * NOTE: Before ellipse() calls this function, adjustEndAngle() is called, so\n * endAngle - startAngle must be equal to or less than 2Pi.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/modules/canvas/canvas2d/canvas_path.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/modules/peerconnection/adapters/ice_transport_host.h#L20-L41",
    "ascii": "// This class is the host side correspondent to the IceTransportProxy. See the\n// IceTransportProxy documentation for background. This class lives on the host\n// thread and proxies calls between the IceTransportProxy and the\n// P2PTransportChannel (which is single-threaded).\n//\n//     proxy thread                               host thread\n// +------------------+   unique_ptr   +------------------------------+\n// |                  |   =========>   |                              |\n// | client <-> Proxy |                | Host <-> P2PTransportChannel |\n// |                  |   <---------   |                              |\n// +------------------+    WeakPtr     +------------------------------+\n//\n// Since the client code controls the Proxy lifetime, the Proxy has a unique_ptr\n// to the Host that lives on the host thread. The unique_ptr has an\n// OnTaskRunnerDeleter so that when the Proxy is destroyed a task will be queued\n// to delete the Host as well (and the P2PTransportChannel with it). The Host\n// needs a pointer back to the Proxy to post callbacks, and by using a WeakPtr\n// any callbacks run on the proxy thread after the proxy has been deleted will\n// be safely dropped.\n//\n// The Host can be constructed on any thread but after that point all methods\n// must be called on the host thread.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/modules/peerconnection/adapters/ice_transport_host.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/modules/service_worker/service_worker_event_queue_test.cc#L229-L238",
    "ascii": "// Tests whether idle_time_ won't be updated in Start() when there was an\n// event. The timeline is something like:\n// [StartEvent] [EndEvent]\n//       +----------+\n//                  ^\n//                  +-- idle_time_ --+\n//                                   v\n//                           [TimerStart]         [UpdateStatus]\n//                                 +-- kUpdateInterval --+\n// In the first UpdateStatus() the idle callback should be triggered.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/modules/service_worker/service_worker_event_queue_test.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/wm/overview/overview_highlight_controller.h#L20-L41",
    "ascii": "// Manages highlighting items while in overview. Responsible for telling\n// highlightable items to show or hide their focus ring borders, when tabbing\n// through highlightable items with arrow keys and trackpad swipes, or when tab\n// dragging. In this context, an highlightable item can represent anything\n// focusable in overview mode such as a desk textfield, saved desk button and an\n// `OverviewItem`. The idea behind the movement strategy is that it should be\n// possible to access any highlightable view via keyboard by pressing the tab or\n// arrow keys repeatedly.\n// +-------+  +-------+  +-------+\n// |   0   |  |   1   |  |   2   |\n// +-------+  +-------+  +-------+\n// +-------+  +-------+  +-------+\n// |   3   |  |   4   |  |   5   |\n// +-------+  +-------+  +-------+\n// +-------+\n// |   6   |\n// +-------+\n// Example sequences:\n//  - Going right to left\n//    0, 1, 2, 3, 4, 5, 6\n// The highlight is switched to the next window grid (if available) or wrapped\n// if it reaches the end of its movement sequence.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/wm/overview/overview_highlight_controller.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/audio/sinc_resampler.cc#L40-L54",
    "ascii": "// Input buffer layout, dividing the total buffer into regions (r0 - r5):\n//\n// |----------------|-----------------------------------------|----------------|\n//\n//                                     blockSize + kernelSize / 2\n//                   <--------------------------------------------------------->\n//                                                r0\n//\n//   kernelSize / 2   kernelSize / 2          kernelSize / 2     kernelSize / 2\n// <---------------> <--------------->       <---------------> <--------------->\n//         r1                r2                      r3               r4\n//\n//                                                     blockSize\n//                                    <---------------------------------------->\n//                                                         r5\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/audio/sinc_resampler.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/fonts/simple_font_data.cc#L311-L322",
    "ascii": "// Internal leadings can be distributed to ascent and descent.\n// -------------------------------------------\n//           | - Internal Leading (in ascent)\n//           |--------------------------------\n//  Ascent - |              |\n//           |              |\n//           |              | - Em height\n// ----------|--------------|\n//           |              |\n// Descent - |--------------------------------\n//           | - Internal Leading (in descent)\n// -------------------------------------------\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/fonts/simple_font_data.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_font_cache.h#L23-L36",
    "ascii": "// The HarfBuzzFontCache is thread specific cache for mapping\n//  from |FontPlatformData| to |HarfBuzzFace|, and\n//  from |FontPlatformData::UniqueID()| to |HarfBuzzFontData|.\n//\n//  |HarfBuzzFace| holds shared |HarfBuzzData| per unique id.\n//\n//  |FontPlatformData-1| |FontPlatformData-2|\n//         |                    |\n//    |HarfBuzzFace-1|     |HarfBuzzFace-2|\n//         |                    |\n//         +----------+---------+\n//                    |\n//               |HarfBuzzFontData|\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_font_cache.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/geometry/float_polygon_test.cc#L76-L86",
    "ascii": "/**\n * Checks a right triangle. This test covers all of the trivial FloatPolygon\n * accessors.\n *\n *                        200,100\n *                          /|\n *                         / |\n *                        /  |\n *                       -----\n *                 100,200   200,200\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/geometry/float_polygon_test.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/geometry/float_rounded_rect_test.cc#L116-L129",
    "ascii": "/*\n * FloatRoundedRect geometry for this test. Corner radii are in parens, x and y\n * intercepts for the elliptical corners are noted. The rectangle itself is at\n * 0,0 with width and height 100.\n *\n *         (10, 15)  x=10      x=90 (10, 20)\n *                (--+---------+--)\n *           y=15 +--|         |-+ y=20\n *                |               |\n *                |               |\n *           y=85 + -|         |- + y=70\n *                (--+---------+--)\n *       (25, 15)  x=25      x=80  (20, 30)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/geometry/float_rounded_rect_test.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/graphics/dark_mode_lab_color_space.h#L20-L25",
    "ascii": "// All matrices here are 3x3 matrices.\n// They are stored in SkM44 which is 4x4 matrix in the following form.\n// |a b c 0|\n// |d e f 0|\n// |g h i 0|\n// |0 0 0 1|\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/graphics/dark_mode_lab_color_space.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/p2p/socket_dispatcher.h#L5-L19",
    "ascii": "// P2PSocketDispatcher is a per-renderer object that dispatchers all\n// P2P messages received from the browser and relays all P2P messages\n// sent to the browser. P2PSocketClient instances register themselves\n// with the dispatcher using RegisterClient() and UnregisterClient().\n//\n// Relationship of classes.\n//\n//       P2PSocketHost                     P2PSocketClient\n//            ^                                   ^\n//            |                                   |\n//            v                  IPC              v\n//  P2PSocketDispatcherHost  <--------->  P2PSocketDispatcher\n//\n// P2PSocketDispatcher receives and dispatches messages on the\n// IO thread.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/p2p/socket_dispatcher.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/widget/input/main_thread_event_queue.h#L61-L96",
    "ascii": "// MainThreadEventQueue implements a queue for events that need to be\n// queued between the compositor and main threads. This queue is managed\n// by a lock where events are enqueued by the compositor thread\n// and dequeued by the main thread.\n//\n// Below some example flows are how the code behaves.\n// Legend: B=Browser, C=Compositor, M=Main Thread, NB=Non-blocking\n//         BL=Blocking, PT=Post Task, ACK=Acknowledgement\n//\n// Normal blocking event sent to main thread.\n//   B        C        M\n//   ---(BL)-->\n//         (queue)\n//            ---(PT)-->\n//                  (deque)\n//   <-------(ACK)------\n//\n// Non-blocking event sent to main thread.\n//   B        C        M\n//   ---(NB)-->\n//         (queue)\n//            ---(PT)-->\n//                  (deque)\n//\n// Non-blocking followed by blocking event sent to main thread.\n//   B        C        M\n//   ---(NB)-->\n//         (queue)\n//            ---(PT)-->\n//   ---(BL)-->\n//         (queue)\n//            ---(PT)-->\n//                  (deque)\n//                  (deque)\n//   <-------(ACK)------\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/widget/input/main_thread_event_queue.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/base/allocator/partition_allocator/gwp_asan_support.h#L19-L109",
    "ascii": "// This class allows GWP-ASan allocations to be backed by PartitionAlloc and,\n// consequently, protected by MiraclePtr.\n//\n// GWP-ASan mainly operates at the system memory page granularity. During\n// process startup, it reserves a certain number of consecutive system pages.\n//\n// The standard layout is as follows:\n//\n//   +-------------------+--------\n//   |                   | ▲   ▲\n//   |   system page 0   |(a) (c)\n//   |                   | ▼   ▼\n//   +-------------------+--------\n//   |                   | ▲   ▲\n//   |   system page 1   |(b)  |\n//   |                   | ▼   |\n//   +-------------------+--- (d)    (a) inaccessible\n//   |                   | ▲   |     (b) accessible\n//   |   system page 2   |(a)  |     (c) initial guard page\n//   |                   | ▼   ▼     (d) allocation slot\n//   +-------------------+--------\n//   |                   | ▲   ▲\n//   |   system page 3   |(b)  |\n//   |                   | ▼   |\n//   +-------------------+--- (d)\n//   |                   | ▲   |\n//   |   system page 4   |(a)  |\n//   |                   | ▼   ▼\n//   |-------------------|--------\n//   |                   | ▲   ▲\n//   |        ...        |(a) (d)\n//\n// Unfortunately, PartitionAlloc can't provide GWP-ASan an arbitrary number of\n// consecutive allocation slots. Allocations need to be grouped into 2MB super\n// pages so that the allocation metadata can be easily located.\n//\n// Below is the new layout:\n//\n//   +-----------------------------------\n//   |                   |         ▲   ▲\n//   |   system page 0   |         |   |\n//   |                   |         |   |\n//   +-------------------+         |   |\n//   |                   |         |   |\n//   |        ...        |        (e)  |\n//   |                   |         |   |\n//   +-------------------+-------  |   |\n//   |                   | ▲   ▲   |   |\n//   |  system page k-1  |(a) (c)  |   |\n//   |                   | ▼   ▼   ▼   |\n//   +-------------------+----------- (f)\n//   |                   | ▲   ▲       |\n//   |   system page k   |(b)  |       |\n//   |                   | ▼   |       |\n//   +-------------------+--- (d)      |\n//   |                   | ▲   |       |\n//   |  system page k+1  |(a)  |       |\n//   |                   | ▼   ▼       |\n//   +-------------------+-----------  |\n//   |                   |             |    (a) inaccessible\n//   |        ...        |             |    (b) accessible\n//   |                   |             ▼    (c) initial guard page\n//   +-----------------------------------   (d) allocation slot\n//   |                   |         ▲   ▲    (e) super page metadata\n//   |   system page m   |         |   |    (f) super page\n//   |                   |         |   |    (g) pseudo allocation slot\n//   +-------------------+-------  |   |\n//   |                   |     ▲   |   |\n//   |        ...        |     |  (e)  |\n//   |                   |     |   |   |\n//   +-------------------+--- (g)  |   |\n//   |                   | ▲   |   |   |\n//   | system page m+k-1 |(a)  |   |   |\n//   |                   | ▼   ▼   ▼   |\n//   +-------------------+----------- (f)\n//   |                   | ▲   ▲       |\n//   |  system page m+k  |(b)  |       |\n//   |                   | ▼   |       |\n//   +-------------------+--- (d)      |\n//   |                   | ▲   |       |\n//   | system page m+k+1 |(a)  |       |\n//   |                   | ▼   ▼       |\n//   +-------------------+-----------  |\n//   |                   |             |\n//   |        ...        |             |\n//   |                   |             ▼\n//   +-------------------+---------------\n//\n// This means some allocation slots will be reserved to hold PA\n// metadata. We exclude these pseudo slots from the GWP-ASan free list so that\n// they are never used for anything other that storing the metadata.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/base/allocator/partition_allocator/gwp_asan_support.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/web_tests/external/wpt/css/css-transforms/animation/transform-interpolation-005.html#L44-L53",
    "ascii": "// 2D matrix transforms:\n//\n// [m11 m21 0 m41]   [1 0 0 Tx] [cos(R) -sin(R) 0 0] [1 K 0 0] [Sx 0  0 0]\n// [m12 m22 0 m42] = [0 1 0 Ty] [sin(R)  cos(R) 0 0] [0 1 0 0] [0  Sy 0 0]\n// [ 0   0  1  0 ]   [0 0 1 0 ] [  0       0    1 0] [0 0 1 0] [0  0  1 0]\n// [ 0   0  0  1 ]   [0 0 0 1 ] [  0       0    0 1] [0 0 0 1] [0  0  0 1]\n//\n// M = translate * rotate * skew * scale\n// See also webkit-transform-interpolation-005.html\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/web_tests/external/wpt/css/css-transforms/animation/transform-interpolation-005.html"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/web_tests/external/wpt/IndexedDB/resources/interleaved-cursors-common.js#L78-L93",
    "ascii": "// Reads cursors in an interleaved fashion, as shown below.\n//\n// Given N cursors, each of which points to the beginning of a K-item sequence,\n// the following accesses will be made.\n//\n// OC(i)    = open cursor i\n// RD(i, j) = read result of cursor i, which should be at item j\n// CC(i)    = continue cursor i\n// |        = wait for onsuccess on the previous OC or CC\n//\n// OC(1)            | RD(1, 1) OC(2) | RD(2, 1) OC(3) | ... | RD(n-1, 1) CC(n) |\n// RD(n, 1)   CC(1) | RD(1, 2) CC(2) | RD(2, 2) CC(3) | ... | RD(n-1, 2) CC(n) |\n// RD(n, 2)   CC(1) | RD(1, 3) CC(2) | RD(2, 3) CC(3) | ... | RD(n-1, 3) CC(n) |\n// ...\n// RD(n, k-1) CC(1) | RD(1, k) CC(2) | RD(2, k) CC(3) | ... | RD(n-1, k) CC(n) |\n// RD(n, k)           done\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/third_party/blink/web_tests/external/wpt/IndexedDB/resources/interleaved-cursors-common.js"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/web_tests/fast/layout/common-ancestor-relayout-boundary.html#L35-L40",
    "ascii": "// The tree appears as following, with the starred nodes dirty:\n//       div [relayout-common-ancestor]\n//      /   \\\n//   *div  *div\n//    /      /\n// *div   *div\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/web_tests/fast/layout/common-ancestor-relayout-boundary.html"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/fdlibm/ieee754.cc#L268-L300",
    "ascii": "/* __kernel_cos( x,  y )\n * kernel cos function on [-pi/4, pi/4], pi/4 ~ 0.785398164\n * Input x is assumed to be bounded by ~pi/4 in magnitude.\n * Input y is the tail of x.\n *\n * Algorithm\n *      1. Since cos(-x) = cos(x), we need only to consider positive x.\n *      2. if x < 2^-27 (hx<0x3E400000 0), return 1 with inexact if x!=0.\n *      3. cos(x) is approximated by a polynomial of degree 14 on\n *         [0,pi/4]\n *                                       4            14\n *              cos(x) ~ 1 - x*x/2 + C1*x + ... + C6*x\n *         where the remez error is\n *\n *      |              2     4     6     8     10    12     14 |     -58\n *      |cos(x)-(1-.5*x +C1*x +C2*x +C3*x +C4*x +C5*x  +C6*x  )| <= 2\n *      |                                                      |\n *\n *                     4     6     8     10    12     14\n *      4. let r = C1*x +C2*x +C3*x +C4*x +C5*x  +C6*x  , then\n *             cos(x) = 1 - x*x/2 + r\n *         since cos(x+y) ~ cos(x) - sin(x)*y\n *                        ~ cos(x) - x*y,\n *         a correction term is necessary in cos(x) and hence\n *              cos(x+y) = 1 - (x*x/2 - (r - x*y))\n *         For better accuracy when x > 0.3, let qx = |x|/4 with\n *         the last 32 bits mask off, and if x > 0.78125, let qx = 0.28125.\n *         Then\n *              cos(x+y) = (1-qx) - ((x*x/2-qx) - (r-x*y)).\n *         Note that 1-qx and (x*x/2-qx) is EXACT here, and the\n *         magnitude of the latter is at least a quarter of x*x/2,\n *         thus, reducing the rounding error in the subtraction.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/fdlibm/ieee754.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/fx/abstractdragdrop.js#L983-L1040",
    "ascii": "/**\n * Creates a dummy target for the given cursor position. The assumption is to\n * create as big dummy target box as possible, the only constraints are:\n * - The dummy target box cannot overlap any of real target boxes.\n * - The dummy target has to contain a point with current mouse coordinates.\n *\n * NOTE: For performance reasons the box construction algorithm is kept simple\n * and it is not optimal (see example below). Currently it is O(n) in regard to\n * the number of real drop target boxes, but its result depends on the order\n * of those boxes being processed (the order in which they're added to the\n * targetList_ collection).\n *\n * The algorithm.\n * a) Assumptions\n * - Mouse pointer is in the bounding box of real target boxes.\n * - None of the boxes have negative coordinate values.\n * - Mouse pointer is not contained by any of \"real target\" boxes.\n * - For targets inside a scrollable container, the box used is the\n *   intersection of the scrollable container's box and the target's box.\n *   This is because the part of the target that extends outside the scrollable\n *   container should not be used in the clipping calculations.\n *\n * b) Outline\n * - Initialize the fake target to the bounding box of real targets.\n * - For each real target box - clip the fake target box so it does not contain\n *   that target box, but does contain the mouse pointer.\n *   -- Project the real target box, mouse pointer and fake target box onto\n *      both axes and calculate the clipping coordinates.\n *   -- Only one coordinate is used to clip the fake target box to keep the\n *      fake target as big as possible.\n *   -- If the projection of the real target box contains the mouse pointer,\n *      clipping for a given axis is not possible.\n *   -- If both clippings are possible, the clipping more distant from the\n *      mouse pointer is selected to keep bigger fake target area.\n * - Save the created fake target only if it has a big enough area.\n *\n *\n * c) Example\n * <pre>\n *        Input:           Algorithm created box:        Maximum box:\n * +---------------------+ +---------------------+ +---------------------+\n * | B1      |        B2 | | B1               B2 | | B1               B2 |\n * |         |           | |   +-------------+   | |+-------------------+|\n * |---------x-----------| |   |             |   | ||                   ||\n * |         |           | |   |             |   | ||                   ||\n * |         |           | |   |             |   | ||                   ||\n * |         |           | |   |             |   | ||                   ||\n * |         |           | |   |             |   | ||                   ||\n * |         |           | |   +-------------+   | |+-------------------+|\n * | B4      |        B3 | | B4               B3 | | B4               B3 |\n * +---------------------+ +---------------------+ +---------------------+\n * </pre>\n *\n * @param {number} x Cursor position on the x-axis.\n * @param {number} y Cursor position on the y-axis.\n * @return {goog.fx.ActiveDropTarget_} Dummy drop target.\n * @private\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/fx/abstractdragdrop.js"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/graphics/affinetransform.js#L18-L46",
    "ascii": "/**\n * Creates a 2D affine transform. An affine transform performs a linear\n * mapping from 2D coordinates to other 2D coordinates that preserves the\n * \"straightness\" and \"parallelness\" of lines.\n *\n * Such a coordinate transformation can be represented by a 3 row by 3 column\n * matrix with an implied last row of [ 0 0 1 ]. This matrix transforms source\n * coordinates (x,y) into destination coordinates (x',y') by considering them\n * to be a column vector and multiplying the coordinate vector by the matrix\n * according to the following process:\n * <pre>\n *      [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]\n *      [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]\n *      [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]\n * </pre>\n *\n * This class is optimized for speed and minimizes calculations based on its\n * knowledge of the underlying matrix (as opposed to say simply performing\n * matrix multiplication).\n *\n * @param {number=} opt_m00 The m00 coordinate of the transform.\n * @param {number=} opt_m10 The m10 coordinate of the transform.\n * @param {number=} opt_m01 The m01 coordinate of the transform.\n * @param {number=} opt_m11 The m11 coordinate of the transform.\n * @param {number=} opt_m02 The m02 coordinate of the transform.\n * @param {number=} opt_m12 The m12 coordinate of the transform.\n * @constructor\n * @final\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/graphics/affinetransform.js"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/math/affinetransform.js#L152-L165",
    "ascii": "/**\n * Pre-concatenates this transform with a scaling transformation,\n * i.e. calculates the following matrix product:\n *\n * <pre>\n * [sx  0 0] [m00 m01 m02]\n * [ 0 sy 0] [m10 m11 m12]\n * [ 0  0 1] [  0   0   1]\n * </pre>\n *\n * @param {number} sx The x-axis scaling factor.\n * @param {number} sy The y-axis scaling factor.\n * @return {!goog.math.AffineTransform} This affine transform.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/math/affinetransform.js"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/math/matrix.js#L21-L48",
    "ascii": "/**\n * Class for representing and manipulating matrices.\n *\n * The entry that lies in the i-th row and the j-th column of a matrix is\n * typically referred to as the i,j entry of the matrix.\n *\n * The m-by-n matrix A would have its entries referred to as:\n *   [ a0,0   a0,1   a0,2   ...   a0,j  ...  a0,n ]\n *   [ a1,0   a1,1   a1,2   ...   a1,j  ...  a1,n ]\n *   [ a2,0   a2,1   a2,2   ...   a2,j  ...  a2,n ]\n *   [  .      .      .            .          .   ]\n *   [  .      .      .            .          .   ]\n *   [  .      .      .            .          .   ]\n *   [ ai,0   ai,1   ai,2   ...   ai,j  ...  ai,n ]\n *   [  .      .      .            .          .   ]\n *   [  .      .      .            .          .   ]\n *   [  .      .      .            .          .   ]\n *   [ am,0   am,1   am,2   ...   am,j  ...  am,n ]\n *\n * @param {!goog.math.Matrix|!Array<!Array<number>>|!goog.math.Size|number} m\n *     A matrix to copy, a 2D-array to take as a template, a size object for\n *     dimensions, or the number of rows.\n * @param {number=} opt_n Number of columns of the matrix (only applicable if\n *     the first argument is also numeric).\n * @struct\n * @constructor\n * @final\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/math/matrix.js"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/math/tdma.js#L17-L39",
    "ascii": "/**\n * Solves a linear system where the matrix is square tri-diagonal. That is,\n * given a system of equations:\n *\n * A * result = vecRight,\n *\n * this class computes result = inv(A) * vecRight, where A has the special form\n * of a tri-diagonal matrix:\n *\n *    |dia(0) sup(0)   0    0     ...   0|\n *    |sub(0) dia(1) sup(1) 0     ...   0|\n * A =|                ...               |\n *    |0 ... 0 sub(n-2) dia(n-1) sup(n-1)|\n *    |0 ... 0    0     sub(n-1)   dia(n)|\n *\n * @param {!Array<number>} subDiag The sub diagonal of the matrix.\n * @param {!Array<number>} mainDiag The main diagonal of the matrix.\n * @param {!Array<number>} supDiag The super diagonal of the matrix.\n * @param {!Array<number>} vecRight The right vector of the system\n *     of equations.\n * @param {Array<number>=} opt_result The optional array to store the result.\n * @return {!Array<number>} The vector that is the solution to the system.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/math/tdma.js"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/uri/utils.js#L124-L188",
    "ascii": "/**\n * A regular expression for breaking a URI into its component parts.\n *\n * {@link http://www.ietf.org/rfc/rfc3986.txt} says in Appendix B\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n *\n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n *\n * <pre>\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * </pre>\n *\n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n * For example, matching the above expression to\n * <pre>\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n * </pre>\n * results in the following subexpression matches:\n * <pre>\n *    $1 = http:\n *    $2 = http\n *    $3 = //www.ics.uci.edu\n *    $4 = www.ics.uci.edu\n *    $5 = /pub/ietf/uri/\n *    $6 = <undefined>\n *    $7 = <undefined>\n *    $8 = #Related\n *    $9 = Related\n * </pre>\n * where <undefined> indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * <pre>\n *    scheme    = $2\n *    authority = $4\n *    path      = $5\n *    query     = $7\n *    fragment  = $9\n * </pre>\n *\n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * <pre>\n *    $1 = http              scheme\n *    $2 = <undefined>       userInfo -\\\n *    $3 = www.ics.uci.edu   domain     | authority\n *    $4 = <undefined>       port     -/\n *    $5 = /pub/ietf/uri/    path\n *    $6 = <undefined>       query without ?\n *    $7 = Related           fragment without #\n * </pre>\n *\n * TODO(user): separate out the authority terminating characters once this\n * file is moved to ES6.\n * @type {!RegExp}\n * @private\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/uri/utils.js"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/ipcz/include/ipcz/ipcz.h#L8-L123",
    "ascii": "// ipcz is a cross-platform C library for interprocess communication (IPC) which\n// supports efficient routing and data transfer over a large number of\n// dynamically relocatable messaging endpoints.\n//\n// ipcz operates in terms of a small handful of abstractions encapsulated in\n// this header: nodes, portals, parcels, drivers, boxes, and traps.\n//\n// NOTE: This header is intended to compile under C++11 or newer, and C99 or\n// newer. The ABI defined here can be considered stable.\n//\n// Glossary\n// --------\n// *Nodes* are used by ipcz to model isolated units of an application. A typical\n// application will create one ipcz node within each OS process it controls.\n//\n// *Portals* are messaging endpoints which belong to a specific node. Portals\n// are created in entangled pairs: whatever goes into one portal comes out the\n// other (its \"peer\"). Pairs may be created local to a single node, or they may\n// be created to span two nodes. Portals may also be transferred freely through\n// other portals.\n//\n// *Parcels* are the unit of communication between portals. Parcels can contain\n// arbitrary application data as well as ipcz handles. Handles within a parcel\n// are used to transfer objects (namely other portals, or driver-defined\n// objects) from one portal to another, potentially on a different node.\n//\n// *Traps* provide a flexible mechanism to observe interesting portal state\n// changes such as new parcels arriving or a portal's peer being closed.\n//\n// *Drivers* are provided by applications to implement platform-specific IPC\n// details. They may also define new types of objects to be transmitted in\n// parcels via boxes.\n//\n// *Boxes* are opaque objects used to wrap driver- or application-defined\n// objects for seamless transmission across portals. Applications use the Box()\n// and Unbox() APIs to go between concrete objects and transferrable box\n// handles, and ipcz delegates to the driver or application to serialize boxed\n// objects as needed for transmission.\n//\n// Overview\n// --------\n// To use ipcz effectively, an application must create multiple nodes to be\n// interconnected. One node must be designated as the \"broker\" by the\n// application (see CreateNode() flags). The broker is used by ipcz to\n// coordinate certain types of internal transactions which demand a heightened\n// level of trust and capability, so a broker node should always live in a more\n// trustworthy process. For example in Chrome, the browser process is\n// designated as the broker.\n//\n// In order for a node to communicate with other nodes in the system, the\n// application must explicitly connect it to ONE other node using the\n// ConnectNode() API. Once this is done, ipcz can automatically connect the node\n// to additional other nodes as needed for efficient portal operation.\n//\n// In the example below, assume node A is designated as the broker. Nodes A and\n// B have been connected directly by ConnectNode() calls in the application.\n// Nodes A and C have been similarly connected:\n//\n//                    ┌───────┐\n//     ConnectNode()  │       │  ConnectNode()\n//        ┌──────────>O   A   O<───────────┐\n//        │           │       │            │\n//        │           └───────┘            │\n//        │                                │\n//        v ConnectNode()                  v ConnectNode()\n//    ┌───O───┐                        ┌───O───┐\n//    │       │                        │       │\n//    │   B   │                        │   C   │\n//    │       │                        │       │\n//    └───────┘                        └───────┘\n//\n// ConnectNode() establishes initial portal pairs to link the two nodes\n// together, illustrated above as \"O\"s. Once ConnectNode() returns, the\n// application may immediately begin transmitting parcels through these portals.\n//\n// Now suppose node B creates a new local pair of portals (using OpenPortals())\n// and sends one of those new portals in a parcel through its\n// already-established portal to node A. The sent portal is effectively\n// transferred to node A, and because its entangled peer still lives on node B\n// there are now TWO portal pairs between nodes A and B:\n//\n//                    ┌───────┐\n//                    │       │\n//        ┌──────────>O   A   O<───────────┐\n//        │ ┌────────>O       │            │\n//        │ │         └───────┘            │\n//        │ │                              │\n//        v v                              v\n//    ┌───O─O─┐                        ┌───O───┐\n//    │       │                        │       │\n//    │   B   │                        │   C   │\n//    │       │                        │       │\n//    └───────┘                        └───────┘\n//\n// Finally, suppose now the application takes this new portal on node A and\n// sends it further along, through node A's already-established portal to node\n// C. Because the transferred portal's peer still lives on node B, there is now\n// a portal pair spanning nodes B and C:\n//\n//                    ┌───────┐\n//                    │       │\n//        ┌──────────>O   A   O<───────────┐\n//        │           │       │            │\n//        │           └───────┘            │\n//        │                                │\n//        v                                v\n//    ┌───O───┐                        ┌───O───┐\n//    │       │                        │       │\n//    │   B   O────────────────────────O   C   │\n//    │       │                        │       │\n//    └───────┘                        └───────┘\n//\n// These two nodes were never explicitly connected by the application, but ipcz\n// ensures that the portals will operate as expected. Behind the scenes, ipcz\n// achieves this by establishing a direct, secure, and efficient communication\n// channel between nodes B and C.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/ipcz/include/ipcz/ipcz.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/base/third_party/symbolize/demangle.h#L35-L68",
    "ascii": "// The demangler is implemented to be used in async signal handlers to\n// symbolize stack traces.  We cannot use libstdc++'s\n// abi::__cxa_demangle() in such signal handlers since it's not async\n// signal safe (it uses malloc() internally).\n//\n// Note that this demangler doesn't support full demangling.  More\n// specifically, it doesn't print types of function parameters and\n// types of template arguments.  It just skips them.  However, it's\n// still very useful to extract basic information such as class,\n// function, constructor, destructor, and operator names.\n//\n// See the implementation note in demangle.cc if you are interested.\n//\n// Example:\n//\n// | Mangled Name  | The Demangler | abi::__cxa_demangle()\n// |---------------|---------------|-----------------------\n// | _Z1fv         | f()           | f()\n// | _Z1fi         | f()           | f(int)\n// | _Z3foo3bar    | foo()         | foo(bar)\n// | _Z1fIiEvi     | f<>()         | void f<int>(int)\n// | _ZN1N1fE      | N::f          | N::f\n// | _ZN3Foo3BarEv | Foo::Bar()    | Foo::Bar()\n// | _Zrm1XS_\"     | operator%()   | operator%(X, X)\n// | _ZN3FooC1Ev   | Foo::Foo()    | Foo::Foo()\n// | _Z1fSs        | f()           | f(std::basic_string<char,\n// |               |               |   std::char_traits<char>,\n// |               |               |   std::allocator<char> >)\n//\n// See the unit test for more examples.\n//\n// Note: we might want to write demanglers for ABIs other than Itanium\n// C++ ABI in the future.\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/base/third_party/symbolize/demangle.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/ipcz/src/ipcz/node_messages_generator.h#L412-L431",
    "ascii": "// Provides a router with a new outward link to replace its existing outward\n// link to some other node. Given routers X and Y on the central link, and a\n// router Z as Y's inward peer:\n//\n//     X ==== (central) ==== Y ======== Z\n//\n// Z sends this message to X's node to establish a new direct link to X. Both\n// X's and Z's existing links to Y are left intact in a decaying state:\n//\n//         - - - Y - - -\n//       /               \\\n//     X === (central) === Z\n//\n// The recipient of this message must send a StopProxying message to Y, as well\n// as a ProxyWillStop message to Z, in order for those decaying links to be\n// phased out.\n//\n// Z must send this message to X only after receiving a BypassPeer request from\n// Y. That request signifies that X's node has been adequately prepared by Y to\n// authenticate this request from Z.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/ipcz/src/ipcz/node_messages_generator.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/opus/src/silk/resampler.c#L32-L48",
    "ascii": "/*\n * Matrix of resampling methods used:\n *                                 Fs_out (kHz)\n *                        8      12     16     24     48\n *\n *               8        C      UF     U      UF     UF\n *              12        AF     C      UF     U      UF\n * Fs_in (kHz)  16        D      AF     C      UF     UF\n *              24        AF     D      AF     C      U\n *              48        AF     AF     AF     D      C\n *\n * C   -> Copy (no resampling)\n * D   -> Allpass-based 2x downsampling\n * U   -> Allpass-based 2x upsampling\n * UF  -> Allpass-based 2x upsampling followed by FIR interpolation\n * AF  -> AR2 filter followed by FIR interpolation\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/opus/src/silk/resampler.c"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/protobuf/src/google/protobuf/compiler/csharp/csharp_helpers.cc#L190-L196",
    "ascii": "// Previous input character      Current character         Case\n// Any                           Non-alphanumeric          Skipped\n// None - first char of input    Alphanumeric              Upper\n// Non-letter (e.g. _ or 1)      Alphanumeric              Upper\n// Numeric                       Alphanumeric              Upper\n// Lower letter                  Alphanumeric              Same as current\n// Upper letter                  Alphanumeric              Lower\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/protobuf/src/google/protobuf/compiler/csharp/csharp_helpers.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/rust/bindgen/v0_60/crate/src/ir/derive.rs#L81-L94",
    "ascii": "/// Whether it is possible or not to automatically derive trait for an item.\n///\n/// ```ignore\n///         No\n///          ^\n///          |\n///      Manually\n///          ^\n///          |\n///         Yes\n/// ```\n///\n/// Initially we assume that we can derive trait for all types and then\n/// update our understanding as we learn more about each type.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/rust/bindgen/v0_60/crate/src/ir/derive.rs"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/rust/bindgen/v0_60/crate/src/ir/analysis/mod.rs#L1-L38",
    "ascii": "//! Fix-point analyses on the IR using the \"monotone framework\".\n//!\n//! A lattice is a set with a partial ordering between elements, where there is\n//! a single least upper bound and a single greatest least bound for every\n//! subset. We are dealing with finite lattices, which means that it has a\n//! finite number of elements, and it follows that there exists a single top and\n//! a single bottom member of the lattice. For example, the power set of a\n//! finite set forms a finite lattice where partial ordering is defined by set\n//! inclusion, that is `a <= b` if `a` is a subset of `b`. Here is the finite\n//! lattice constructed from the set {0,1,2}:\n//!\n//! ```text\n//!                    .----- Top = {0,1,2} -----.\n//!                   /            |              \\\n//!                  /             |               \\\n//!                 /              |                \\\n//!              {0,1} -------.  {0,2}  .--------- {1,2}\n//!                |           \\ /   \\ /             |\n//!                |            /     \\              |\n//!                |           / \\   / \\             |\n//!               {0} --------'   {1}   `---------- {2}\n//!                 \\              |                /\n//!                  \\             |               /\n//!                   \\            |              /\n//!                    `------ Bottom = {} ------'\n//! ```\n//!\n//! A monotone function `f` is a function where if `x <= y`, then it holds that\n//! `f(x) <= f(y)`. It should be clear that running a monotone function to a\n//! fix-point on a finite lattice will always terminate: `f` can only \"move\"\n//! along the lattice in a single direction, and therefore can only either find\n//! a fix-point in the middle of the lattice or continue to the top or bottom\n//! depending if it is ascending or descending the lattice respectively.\n//!\n//! For a deeper introduction to the general form of this kind of analysis, see\n//! [Static Program Analysis by Anders Møller and Michael I. Schwartzbach][spa].\n//!\n//! [spa]: https://cs.au.dk/~amoeller/spa/spa.pdf\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/third_party/rust/bindgen/v0_60/crate/src/ir/analysis/mod.rs"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/rust/bindgen/v0_60/crate/src/ir/analysis/sizedness.rs#L13-L26",
    "ascii": "/// The result of the `Sizedness` analysis for an individual item.\n///\n/// This is a chain lattice of the form:\n///\n/// ```ignore\n///                   NonZeroSized\n///                        |\n///                DependsOnTypeParam\n///                        |\n///                     ZeroSized\n/// ```\n///\n/// We initially assume that all types are `ZeroSized` and then update our\n/// understanding as we learn more about each type.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/rust/bindgen/v0_60/crate/src/ir/analysis/sizedness.rs"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/accessibility/ui/accessibility_focus_ring.h#L14-L71",
    "ascii": "// An AccessibilityFocusRing is a special type of shape designed to\n// outline the focused object on the screen for users with visual\n// impairments. It's specifically designed to outline text ranges that\n// span multiple lines (we'll call this a \"paragraph\" shape from here on,\n// but it works for any text range), so it can outline a shape defined by a\n// few words from the first line, the complete contents of more lines,\n// followed by a few words from the last line. See the figure below.\n// When highlighting any other object, it outlines a rectangular shape.\n//\n// The outline is outset from the object it's highlighting by a few pixels;\n// this margin distance also determines its border radius for rounded\n// corners.\n//\n// An AccessibilityFocusRing can be initialized with either a rectangle\n// defining the bounds of an object, or a paragraph-shape with three\n// rectangles defining a top line, a body, and a bottom line, which are\n// assumed to be adjacent to one another.\n//\n// Initializing an AccessibilityFocusRing computes the following 36 points\n// that completely define the shape's outline. This shape can be traced\n// using Skia or any other drawing utility just by drawing alternating\n// straight lines and quadratic curves (e.g. a line from 0 to 1, a curve\n// from 1 to 3 with 2 as a control point, then a line from 3 to 4, and so on.\n//\n// The same path should be used even if the focus ring was initialized with\n// a rectangle and not a paragraph shape - this makes it possible to\n// smoothly animate between one object and the next simply by interpolating\n// points.\n//\n// Noncontiguous shapes should be handled by drawing multiple focus rings.\n//\n// The 36 points are defined as follows:\n//\n//          2 3------------------------------4 5\n//           /                                |\n//          1                                  6\n//          |      First line of paragraph     |\n//          0                                  7\n//         /                                    |\n// 32 33-34 35                                 8 9---------------10 11\n//   /                                                             |\n// 31      Middle line of paragraph..........................       12\n// |                                                                |\n// |                                                                |\n// |       Middle line of paragraph..........................       |\n// |                                                                |\n// |                                                                |\n// 30      Middle line of paragraph..........................       13\n//   |                                                             |\n// 29 28---------27 26                             17 16---------15 14\n//                 |                                 |\n//                  25                             18\n//                  |    Last line of paragraph    |\n//                  24                             19\n//                    |                           |\n//                  23 22-----------------------21 20\n//\n// Exported for tests.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/accessibility/ui/accessibility_focus_ring.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/cc/base/index_rect.h#L14-L60",
    "ascii": "// This class encapsulates the index boundaries for region on co-ordinate system\n// (used for tiling). The delimiting boundaries |left_|, |right_|, |top_| and\n// |bottom_| are basically leftmost, rightmost, topmost and bottommost indices\n// of the region. These delimiters can span in any quadrants.\n//\n// If |left_| <= |right_| and |top_| <= |bottom_|, IndexRect is considered to\n// hold valid indices and this can be checked using is_valid().\n//\n// If IndexRect is valid, it has a coverage of all the indices from |left_| to\n// |right_| both inclusive and |top_| to |bottom_| both inclusive. So for\n// |left_| == |right_|, num_indices_x() is 1, meaning |left_| and |right_| point\n// to the same index.\n//\n// The following diagram shows how indices span in different quadrants and the\n// positive quadrant. In the positive quadrant all indices are >= 0. The first\n// index in this quadrant is (0, 0). The indices in positive quadrant represent\n// the visible region and is_in_positive_quadrant() can be used to check whether\n// all indices lie within this quadrant or not.\n//\n//              │\n//              │\n//  -ve index_x │  +ve index_x\n//  -ve index_y │  -ve index_y\n//              │\n//  ────────────┼────────────\n//              │\n//  -ve index_x │  +ve index_x\n//  +ve index_y │  +ve index_y\n//              │\n//              │  (+ve Quadrant)\n//\n// In the following example, region has |left_| = 0, |right_| = 4, |top_| = 0\n// and |bottom_| = 4. Here x indices are 0, 1, 2, 3, 4 and y indices are\n// 0, 1, 2, 3, 4.\n//\n//    x 0   1   2   3   4\n//  y ┌───┬───┬───┬───┬───┐\n//  0 │   │   │   │   │   │\n//    ├───┼───┼───┼───┼───┤\n//  1 │   │   │   │   │   │\n//    ├───┼───┼───┼───┼───┤\n//  2 │   │   │   │   │   │\n//    ├───┼───┼───┼───┼───┤\n//  3 │   │   │   │   │   │\n//    ├───┼───┼───┼───┼───┤\n//  4 │   │   │   │   │   │\n//    └───┴───┴───┴───┴───┘\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/cc/base/index_rect.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/rust/minimal_lexical/v0_2/crate/src/libm.rs#L999-L1064",
    "ascii": "/* sqrt(x)\n * Return correctly rounded sqrt.\n *           ------------------------------------------\n *           |  Use the hardware sqrt if you have one |\n *           ------------------------------------------\n * Method:\n *   Bit by bit method using integer arithmetic. (Slow, but portable)\n *   1. Normalization\n *      Scale x to y in [1,4) with even powers of 2:\n *      find an integer k such that  1 <= (y=x*2^(2k)) < 4, then\n *              sqrt(x) = 2^k * sqrt(y)\n *   2. Bit by bit computation\n *      Let q  = sqrt(y) truncated to i bit after binary point (q = 1),\n *           i                                                   0\n *                                     i+1         2\n *          s  = 2*q , and      y  =  2   * ( y - q  ).         (1)\n *           i      i            i                 i\n *\n *      To compute q    from q , one checks whether\n *                  i+1       i\n *\n *                            -(i+1) 2\n *                      (q + 2      ) <= y.                     (2)\n *                        i\n *                                                            -(i+1)\n *      If (2) is false, then q   = q ; otherwise q   = q  + 2      .\n *                             i+1   i             i+1   i\n *\n *      With some algebraic manipulation, it is not difficult to see\n *      that (2) is equivalent to\n *                             -(i+1)\n *                      s  +  2       <= y                      (3)\n *                       i                i\n *\n *      The advantage of (3) is that s  and y  can be computed by\n *                                    i      i\n *      the following recurrence formula:\n *          if (3) is false\n *\n *          s     =  s  ,       y    = y   ;                    (4)\n *           i+1      i          i+1    i\n *\n *          otherwise,\n *                         -i                     -(i+1)\n *          s     =  s  + 2  ,  y    = y  -  s  - 2             (5)\n *           i+1      i          i+1    i     i\n *\n *      One may easily use induction to prove (4) and (5).\n *      Note. Since the left hand side of (3) contain only i+2 bits,\n *            it does not necessary to do a full (53-bit) comparison\n *            in (3).\n *   3. Final rounding\n *      After generating the 53 bits result, we compute one more bit.\n *      Together with the remainder, we can decide whether the\n *      result is exact, bigger than 1/2ulp, or less than 1/2ulp\n *      (it will never equal to 1/2ulp).\n *      The rounding mode can be detected by checking whether\n *      huge + tiny is equal to huge, and whether huge - tiny is\n *      equal to huge for some floating point number \"huge\" and \"tiny\".\n *\n * Special cases:\n *      sqrt(+-0) = +-0         ... exact\n *      sqrt(inf) = inf\n *      sqrt(-ve) = NaN         ... with invalid signal\n *      sqrt(NaN) = NaN         ... with invalid signal for signaling NaN\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/rust/minimal_lexical/v0_2/crate/src/libm.rs"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/rust/semver/v1/crate/src/identifier.rs#L1-L67",
    "ascii": "// This module implements Identifier, a short-optimized string allowed to\n// contain only the ASCII characters hyphen, dot, 0-9, A-Z, a-z.\n//\n// As of mid-2021, the distribution of pre-release lengths on crates.io is:\n//\n//     length  count         length  count         length  count\n//        0  355929            11      81            24       2\n//        1     208            12      48            25       6\n//        2     236            13      55            26      10\n//        3    1909            14      25            27       4\n//        4    1284            15      15            28       1\n//        5    1742            16      35            30       1\n//        6    3440            17       9            31       5\n//        7    5624            18       6            32       1\n//        8    1321            19      12            36       2\n//        9     179            20       2            37     379\n//       10      65            23      11\n//\n// and the distribution of build metadata lengths is:\n//\n//     length  count         length  count         length  count\n//        0  364445             8    7725            18       1\n//        1      72             9      16            19       1\n//        2       7            10      85            20       1\n//        3      28            11      17            22       4\n//        4       9            12      10            26       1\n//        5      68            13       9            27       1\n//        6      73            14      10            40       5\n//        7      53            15       6\n//\n// Therefore it really behooves us to be able to use the entire 8 bytes of a\n// pointer for inline storage. For both pre-release and build metadata there are\n// vastly more strings with length exactly 8 bytes than the sum over all lengths\n// longer than 8 bytes.\n//\n// To differentiate the inline representation from the heap allocated long\n// representation, we'll allocate heap pointers with 2-byte alignment so that\n// they are guaranteed to have an unset least significant bit. Then in the repr\n// we store for pointers, we rotate a 1 into the most significant bit of the\n// most significant byte, which is never set for an ASCII byte.\n//\n// Inline repr:\n//\n//     0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx\n//\n// Heap allocated repr:\n//\n//     1ppppppp pppppppp pppppppp pppppppp pppppppp pppppppp pppppppp pppppppp 0\n//     ^ most significant bit   least significant bit of orig ptr, rotated out ^\n//\n// Since the most significant bit doubles as a sign bit for the similarly sized\n// signed integer type, the CPU has an efficient instruction for inspecting it,\n// meaning we can differentiate between an inline repr and a heap allocated repr\n// in one instruction. Effectively an inline repr always looks like a positive\n// i64 while a heap allocated repr always looks like a negative i64.\n//\n// For the inline repr, we store \\0 padding on the end of the stored characters,\n// and thus the string length is readily determined efficiently by a cttz (count\n// trailing zeros) or bsf (bit scan forward) instruction.\n//\n// For the heap allocated repr, the length is encoded as a base-128 varint at\n// the head of the allocation.\n//\n// Empty strings are stored as an all-1 bit pattern, corresponding to -1i64.\n// Consequently the all-0 bit pattern is never a legal representation in any\n// repr, leaving it available as a niche for downstream code. For example this\n// allows size_of::<Version>() == size_of::<Option<Version>>().\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": true
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/rust/semver/v1/crate/src/identifier.rs"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/aura/window_occlusion_tracker_unittest.cc#L152-L155",
    "ascii": "// Verify that non-overlapping windows have a VISIBLE occlusion state.\n// _____  _____\n// |    | |    |\n// |____| |____|\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/aura/window_occlusion_tracker_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/display/display_layout.cc#L655-L684",
    "ascii": "// Creates a display::DisplayPlacement value for |rectangle| relative to the\n// |reference| rectangle.\n// The layout consists of two values:\n//   - position: Whether the rectangle is positioned left, right, over or under\n//     the reference.\n//   - offset: The rectangle's offset from the reference origin along the axis\n//     opposite the position direction (if the rectangle is left or right along\n//     y-axis, otherwise along x-axis).\n// The rectangle's position is calculated by dividing the space in areas defined\n// by the |reference|'s diagonals and finding the area |rectangle|'s center\n// point belongs. If the |rectangle| in the calculated layout does not share a\n// part of the bounds with the |reference|, the |rectangle| position in set to\n// the more suitable neighboring position (e.g. if |rectangle| is completely\n// over the |reference| top bound, it will be set to TOP) and the layout is\n// recalculated with the new position. This is to handle the case where the\n// rectangle shares an edge with the reference, but it's center is not in the\n// same area as the reference's edge, e.g.\n//\n// +---------------------+\n// |                     |\n// | REFERENCE           |\n// |                     |\n// |                     |\n// +---------------------+\n//                 +-------------------------------------------------+\n//                 | RECTANGLE               x                       |\n//                 +-------------------------------------------------+\n//\n// The rectangle shares an edge with the reference's bottom edge, but its\n// center point is in the left area.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/display/display_layout.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/display/display_layout.h#L30-L42",
    "ascii": "// DisplayPlacement specifies where the display (D) is placed relative to\n// parent (P) display. In the following example, D given by |display_id| is\n// placed at the left side of P given by |parent_display_id|, with a negative\n// offset and a top-left offset reference.\n//\n//        +      +--------+\n// offset |      |        |\n//        +      |   D    +--------+\n//               |        |        |\n//               +--------+   P    |\n//                        |        |\n//                        +--------+\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/display/display_layout.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/display/win/scaling_util.h#L25-L105",
    "ascii": "// Returns a DisplayPlacement for |current| relative to |parent|.\n// Note that DisplayPlacement's are always in DIPs, so this also performs the\n// required scaling.\n//\n// Examples (The offset is indicated by the arrow.):\n// Scaled and Unscaled Coordinates\n// +--------------+    +          Since both DisplayInfos are of the same scale\n// |              |    |          factor, relative positions remain the same.\n// |    Parent    |    V\n// |      1x      +----------+\n// |              |          |\n// +--------------+  Current |\n//                |    1x    |\n//                +----------+\n//\n// Unscaled Coordinates\n// +--------------+               The 2x DisplayInfo is offset to maintain a\n// |              |               similar neighboring relationship with the 1x\n// |    Parent    |               parent. Current's position is based off of the\n// |      1x      +----------+    percentage position along its parent. This\n// |              |          |    percentage position is preserved in the scaled\n// +--------------+  Current |    coordinates.\n//                |    2x    |\n//                +----------+\n// Scaled Coordinates\n// +--------------+  +\n// |              |  |\n// |    Parent    |  V\n// |      1x      +-----+\n// |              + C 2x|\n// +--------------+-----+\n//\n//\n// Unscaled Coordinates\n// +--------------+               The parent DisplayInfo has a 2x scale factor.\n// |              |               The offset is adjusted to maintain the\n// |              |               relative positioning of the 1x DisplayInfo in\n// |    Parent    +----------+    the scaled coordinate space. Current's\n// |      2x      |          |    position is based off of the percentage\n// |              |  Current |    position along its parent. This percentage\n// |              |    1x    |    position is preserved in the scaled\n// +--------------+          |    coordinates.\n//                |          |\n//                +----------+\n// Scaled Coordinates\n// +-------+    +\n// |       |    V\n// | Parent+----------+\n// |   2x  |          |\n// +-------+  Current |\n//         |    1x    |\n//         |          |\n//         |          |\n//         +----------+\n//\n// Unscaled Coordinates\n//         +----------+           In this case, parent lies between the top and\n//         |          |           bottom of parent. The roles are reversed when\n// +-------+          |           this occurs, and current is placed to maintain\n// |       |  Current |           parent's relative position along current.\n// | Parent|    1x    |\n// |   2x  |          |\n// +-------+          |\n//         +----------+\n// Scaled Coordinates\n//  ^      +----------+\n//  |      |          |\n//  + +----+          |\n//    |Prnt|  Current |\n//    | 2x |    1x    |\n//    +----+          |\n//         |          |\n//         +----------+\n//\n// Scaled and Unscaled Coordinates\n// +--------+                     If the two DisplayInfos are bottom aligned or\n// |        |                     right aligned, the DisplayPlacement will\n// |        +--------+            have an offset of 0 relative to the\n// |        |        |            bottom-right of the DisplayInfo.\n// |        |        |\n// +--------+--------+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/display/win/scaling_util.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/display/win/screen_win_unittest.cc#L1440-L1453",
    "ascii": "// Five 1x displays laid out as follows (not to scale):\n// +---------+----------------+\n// |         |                |\n// |    0    |                |\n// |         |       1        |\n// +---------+                |\n// |    2    |                |\n// |         +----------------+-----+\n// +---------+                |     |\n//                            |  3  |\n//                            |     |\n//                            +--+--+\n//                               |4 |\n//                               +--+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/display/win/screen_win_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/gfx/text_constants.h#L97-L107",
    "ascii": "// Text baseline offset types.\n// Figure of font metrics:\n//   +--------+--------+------------------------+-------------+\n//   |        |        | internal leading       | SUPERSCRIPT |\n//   |        |        +------------+-----------|             |\n//   |        | ascent |            | SUPERIOR  |-------------+\n//   | height |        | cap height |-----------|\n//   |        |        |            | INFERIOR  |-------------+\n//   |        |--------+------------+-----------|             |\n//   |        | descent                         | SUBSCRIPT   |\n//   +--------+---------------------------------+-------------+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/gfx/text_constants.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/gfx/text_utils.h#L74-L100",
    "ascii": "// Returns insets that can be used to draw a highlight or border that appears to\n// be distance |desired_visual_padding| from the body of a string of text\n// rendered using |font_list|. The insets are adjusted based on the box used to\n// render capital letters (or the bodies of most letters in non-capital fonts\n// like Hebrew and Devanagari), in order to give the best visual appearance.\n//\n// That is, any portion of |desired_visual_padding| overlapping the font's\n// leading space or descender area are truncated, to a minimum of zero.\n//\n// In this example, the text is rendered in a highlight that stretches above and\n// below the height of the H as well as to the left and right of the text\n// (|desired_visual_padding| = {2, 2, 2, 2}). Note that the descender of the 'y'\n// overlaps with the padding, as it is outside the capital letter box.\n//\n// The resulting padding is {1, 2, 1, 2}.\n//\n//  . . . . . . . . . .                               | actual top\n//  .                 .  |              | leading space\n//  .  |  |  _        .  | font    | capital\n//  .  |--| /_\\ \\  /  .  | height  | height\n//  .  |  | \\_   \\/   .  |         |\n//  .            /    .  |              | descender\n//  . . . . . . . . . .                               | actual bottom\n//  ___             ___\n//  actual        actual\n//  left           right\n//\nAdjustVisualBorderForFont(const FontList& font_list,\n                          const Insets& desired_visual_padding);\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/gfx/text_utils.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/gfx/geometry/matrix44.h#L17-L35",
    "ascii": "// This is the underlying data structure of Transform. Don't use this type\n// directly.\n//\n// Throughout this class, we will be speaking in column vector convention.\n// i.e. Applying a transform T to vector V is T * V.\n// The components of the matrix and the vector look like:\n//    \\  col\n// r   \\     0        1        2        3\n// o  0 | scale_x  skew_xy  skew_xz  trans_x |   | x |\n// w  1 | skew_yx  scale_y  skew_yz  trans_y | * | y |\n//    2 | skew_zx  skew_zy  scale_z  trans_z |   | z |\n//    3 | persp_x  persp_y  persp_z  persp_w |   | w |\n//\n// Note that the names are just for remembering and don't have the exact\n// meanings when other components exist.\n//\n// The components correspond to the DOMMatrix mij (i,j = 1..4) components:\n//   i = col + 1\n//   j = row + 1\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/gfx/geometry/matrix44.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/native_theme/native_theme_win.cc#L90-L100",
    "ascii": "//    <-a->\n// [  *****             ]\n//  ____ |              |\n//  <-a-> <------b----->\n// a: object_width\n// b: frame_width\n// *: animating object\n//\n// - the animation goes from \"[\" to \"]\" repeatedly.\n// - the animation offset is at first \"|\"\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/native_theme/native_theme_win.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/ozone/platform/drm/gpu/hardware_display_controller.h#L40-L92",
    "ascii": "// The HDC will handle modesetting and scanout operations for hardware devices.\n//\n// In the DRM world there are 3 components that need to be paired up to be able\n// to display an image to the monitor: CRTC (cathode ray tube controller),\n// encoder and connector. The CRTC determines which framebuffer to read, when\n// to scanout and where to scanout. Encoders converts the stream from the CRTC\n// to the appropriate format for the connector. The connector is the physical\n// connection that monitors connect to.\n//\n// There is no 1:1:1 pairing for these components. It is possible for an encoder\n// to be compatible to multiple CRTCs and each connector can be used with\n// multiple encoders. In addition, it is possible to use one CRTC with multiple\n// connectors such that we can display the same image on multiple monitors.\n//\n// For example, the following configuration shows 2 different screens being\n// initialized separately.\n// -------------      -------------\n// | Connector |      | Connector |\n// |   HDMI    |      |    VGA    |\n// -------------      -------------\n//       ^                  ^\n//       |                  |\n// -------------      -------------\n// |  Encoder1  |     |  Encoder2 |\n// -------------      -------------\n//       ^                  ^\n//       |                  |\n// -------------      -------------\n// |   CRTC1   |      |   CRTC2   |\n// -------------      -------------\n//\n// In the following configuration 2 different screens are associated with the\n// same CRTC, so on scanout the same framebuffer will be displayed on both\n// monitors.\n// -------------      -------------\n// | Connector |      | Connector |\n// |   HDMI    |      |    VGA    |\n// -------------      -------------\n//       ^                  ^\n//       |                  |\n// -------------      -------------\n// |  Encoder1  |     |  Encoder2 |\n// -------------      -------------\n//       ^                  ^\n//       |                  |\n//      ----------------------\n//      |        CRTC1       |\n//      ----------------------\n//\n// Note that it is possible to have more connectors than CRTCs which means that\n// only a subset of connectors can be active independently, showing different\n// framebuffers. Though, in this case, it would be possible to have all\n// connectors active if some use the same CRTC to mirror the display.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/ozone/platform/drm/gpu/hardware_display_controller.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/views/paint_info_unittest.cc#L34-L42",
    "ascii": "//  ___________\n// |     1     |\n// |___________|\n// | 3 | 4 | 5 | <-- 2 (encapsulates 3, 4 and 5)\n// |___|___|___|\n// |   7   | 8 | <-- 6 (encapsulates 7 and 8)\n// |_______|___|\n//\n// |r_0| encapsulates 1, 2 and 6.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/views/paint_info_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/views/view_unittest_aura.cc#L60-L74",
    "ascii": "// Test that wm::RecreateLayers() recreates the layers for all child windows and\n// all child views and that the z-order of the recreated layers matches that of\n// the original layers.\n// Test hierarchy:\n// w1\n// +-- v1\n// +-- v2 (no layer)\n//     +-- v3 (no layer)\n//     +-- v4\n// +-- w2\n//     +-- v5\n//         +-- v6\n// +-- v7\n//     +-- v8\n//     +-- v9\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/views/view_unittest_aura.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/cc/paint/discardable_image_map_unittest.cc#L400-L413",
    "ascii": "// Test if SaveLayer and Restore work together.\n// 1. Move cursor to (25, 25) draw a black rect of size 25x25.\n// 2. save layer, move the cursor by (100, 100) or to point (125, 125), draw a\n// red rect of size 25x25.\n// 3. Restore layer, so the cursor moved back to (25, 25), move cursor by (100,\n// 0) or at the point (125, 25), draw a yellow rect of size 25x25.\n//  (25, 25)\n//  +---+\n//  |   |\n//  +---+\n//  (25, 125) (125, 125)\n//  +---+     +---+\n//  |   |     |   |\n//  +---+     +---+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/cc/paint/discardable_image_map_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/views/animation/animation_builder_unittest.cc#L616-L617",
    "ascii": "// Opacity        -->|\n// RoundedCorners ----->|\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/views/animation/animation_builder_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/cc/raster/task.h#L20-L40",
    "ascii": "// This class provides states to manage life cycle of a task and given below is\n// how it is used by TaskGraphWorkQueue to process life cycle of a task.\n// Task is in NEW state when it is created. When task is added to\n// |ready_to_run_tasks| then its state is changed to SCHEDULED. Task can be\n// canceled from NEW state (not yet scheduled to run) or from SCHEDULED state,\n// when new ScheduleTasks() is triggered and its state is changed to CANCELED.\n// When task is about to run it is added |running_tasks| and its state is\n// changed to RUNNING. Once task finishes running, its state is changed to\n// FINISHED. Both CANCELED and FINISHED tasks are added to |completed_tasks|.\n//                ╔═════╗\n//         +------║ NEW ║------+\n//         |      ╚═════╝      |\n//         v                   v\n//   ┌───────────┐        ╔══════════╗\n//   │ SCHEDULED │------> ║ CANCELED ║\n//   └───────────┘        ╚══════════╝\n//         |\n//         v\n//    ┌─────────┐         ╔══════════╗\n//    │ RUNNING │-------> ║ FINISHED ║\n//    └─────────┘         ╚══════════╝\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/cc/raster/task.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/cc/trees/layer_tree_host_impl_unittest.cc#L2044-L2063",
    "ascii": "// Tests the following tricky case:\n// - Scrolling Layer A with scrolling children:\n//    - Ordinary Layer B with NonFastScrollableRegion\n//    - Ordinary Layer C\n//\n//                   +---------+\n//         +---------|         |+\n//         | Layer A |         ||\n//         |   +-----+-----+   ||\n//         |   |  Layer C  |   ||\n//         |   +-----+-----+   ||\n//         |         | Layer B ||\n//         +---------|         |+\n//                   +---------+\n//\n//\n// Both B and C scroll with A but overlap each other and C appears above B. If\n// we try scrolling over C, we need to check if we intersect the NFSR on B\n// because C may not be fully opaque to hit testing (e.g. the layer may be for\n// |pointer-events:none| or be a squashing layer with \"holes\").\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/cc/trees/layer_tree_host_impl_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/android/java/src/org/chromium/chrome/browser/autofill/prefeditor/EditorLabelField.java#L19-L35",
    "ascii": "/**\n * Helper class for creating a view with three labels and an icon.\n *\n * +--------------+------------+\n * | TOP LABEL    |            |\n * | MID LABEL    |       ICON |\n * | BOTTOM LABEL |            |\n * +--------------+------------+\n *\n * Used for showing the uneditable parts of server cards. For example:\n *\n * +--------------+------------+\n * | Visa***1234  |            |\n * | First Last   |       VISA |\n * | Exp: 12/2020 |            |\n * +--------------+------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/android/java/src/org/chromium/chrome/browser/autofill/prefeditor/EditorLabelField.java"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/accessibility/ui/accessibility_focus_ring_group.cc#L229-L263",
    "ascii": "// Given a vector of rects that all overlap, already sorted from top to bottom\n// and left to right, split them into three shapes covering the top, middle,\n// and bottom of a \"paragraph shape\".\n//\n// Input:\n//\n//                       +---+---+\n//                       | 1 | 2 |\n// +---------------------+---+---+\n// |             3               |\n// +--------+---------------+----+\n// |    4   |         5     |\n// +--------+---------------+--+\n// |             6             |\n// +---------+-----------------+\n// |    7    |\n// +---------+\n//\n// Output:\n//\n//                       +-------+\n//                       |  Top  |\n// +---------------------+-------+\n// |                             |\n// |                             |\n// |           Middle            |\n// |                             |\n// |                             |\n// +---------+-------------------+\n// | Bottom  |\n// +---------+\n//\n// When there's no clear \"top\" or \"bottom\" segment, split the overall rect\n// evenly so that some of the area still fits into the \"top\" and \"bottom\"\n// segments.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/accessibility/ui/accessibility_focus_ring_group.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/certificate_manager_model.cc#L54-L74",
    "ascii": "// CertificateManagerModel is created on the UI thread. It needs a\n// NSSCertDatabase handle (and on ChromeOS it needs to get the TPM status) which\n// needs to be done on the IO thread.\n//\n// The initialization flow is roughly:\n//\n//               UI thread                              IO Thread\n//\n//   CertificateManagerModel::Create\n//                  \\--------------------------------------v\n//                                CertificateManagerModel::GetCertDBOnIOThread\n//                                                         |\n//                                               NssCertDatabaseGetter\n//                                                         |\n//                               CertificateManagerModel::DidGetCertDBOnIOThread\n//                  v--------------------------------------/\n// CertificateManagerModel::DidGetCertDBOnUIThread\n//                  |\n//     new CertificateManagerModel\n//                  |\n//               callback\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/certificate_manager_model.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/arc/enterprise/cert_store/cert_store_service.cc#L86-L149",
    "ascii": "// The following series of functions related to ListCerts make use of the\n// NSSCertDatabase to fulfill its goal of listing certificates. The cert\n// database is accessed through a raw pointer with limited lifetime guarantees\n// and is not thread safe. Namely, the cert database is guaranteed valid for the\n// single IO thread task where it was received.\n//\n// Furthermore, creating an NssCertDatabaseGetter requires a BrowserContext,\n// which can only be accessed on the UI thread.\n//\n// ListCerts and related functions are implemented to make sure the above\n// requirements are respected. Here's a diagram of the interaction between UI\n// and IO threads.\n//\n//                    UI Thread                     IO Thread\n//\n//                    ListCerts\n//                        |\n//       NssService::CreateNSSCertDatabaseGetterForIOThread\n//                        |\n//                        \\----------------------------v\n//                                          ListCertsWithDbGetterOnIO\n//                                                     |\n//                                           database_getter.Run()\n//                                                     |\n//                                               ListCertsOnIO\n//                                                     |\n//                                              ListCertsInSlot\n//                                                     |\n//                                   PostListedCertsBackToOriginalTaskRunner\n//                                                     |\n//                        v----------------------------/\n//  Process certs / Repeat ListCerts for system slot\n//\n// ARC requires certs from both the 'user' and 'system' chaps slots to be\n// processed. Because ListCertsInSlot is asynchronous, it's not possible to\n// guarantee that both ListCertsInSlot calls happen in the same task execution,\n// so this entire process is performed twice: first for the user slot, then for\n// the system slot. The ordering of the calls is not important, other than the\n// implementation lists the 'user' slot first, and uses the 'system' slot to\n// signal the process is complete.\n//\n// The current user may not have access to the system slot, but that is only\n// discoverable on the IO thread. In that case, the sequence for the system slot\n// becomes:\n//\n//                    UI Thread                     IO Thread\n//\n//                    ListCerts\n//                        |\n//       NssService::CreateNSSCertDatabaseGetterForIOThread\n//                        |\n//                        \\----------------------------v\n//                                          ListCertsWithDbGetterOnIO\n//                                                     |\n//                                           database_getter.Run()\n//                                                     |\n//                                                ListCertsOnIO\n//                                                     |\n//                                   (Determine system slot isn't allowed)\n//                                                     |\n//                                   PostListedCertsBackToOriginalTaskRunner\n//                                                     |\n//                        v----------------------------/\n//             Process list of certs...\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/arc/enterprise/cert_store/cert_store_service.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/arc/enterprise/cert_store/cert_store_service_browsertest.cc#L190-L219",
    "ascii": "// The following series of functions related to IsSystemSlotAvailable use the\n// NSSCertDatabase. The cert database is accessed through a raw pointer with\n// limited lifetime guarantees and is not thread safe. Namely, the cert database\n// is guaranteed valid for the single IO thread task where it was received.\n//\n// Furthermore, creating an NssCertDatabaseGetter requires a BrowserContext,\n// which can only be accessed on the UI thread.\n//\n// ListCerts and related functions are implemented to make sure the above\n// requirements are respected. Here's a diagram of the interaction between UI\n// and IO threads.\n//\n//             UI Thread                        IO Thread\n//\n//       IsSystemSlotAvailable\n//                 |\n//       run_loop.QuitClosure\n//                 |\n//   NssService::CreateNSSCertDatabaseGetterForIOThread\n//                 |\n//                 \\--------------------------------v\n//                                 IsSystemSlotAvailableWithDbGetterOnIO\n//                                                  |\n//                                         database_getter.Run\n//                                                  |\n//                                       IsSystemSlotAvailableOnIO\n//                                                  |\n//                                            GetSystemSlot\n//                                                  |\n//                                           quit_closure.Run\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/arc/enterprise/cert_store/cert_store_service_browsertest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/arc/input_overlay/ui/input_menu_view.h#L22-L34",
    "ascii": "// A view that shows display options for input overlay, this is the entry\n// point for customizing key bindings and turning the feature on/off.\n//\n// The class reports back to DisplayOverlayController, who owns this.\n//   +---------------------------------+\n//   | Game Controls |Alpha| [ o]  [x] |\n//   |                                 |\n//   | Key mapping             [Edit]  |\n//   |                                 |\n//   | Show key mapping          [ o]  |\n//   |                                 |\n//   | Send feedback                   |\n//   +---------------------------------+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/arc/input_overlay/ui/input_menu_view.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/arc/input_overlay/ui/touch_point.cc#L54-L63",
    "ascii": "// Draw the cross shape path with round corner. It starts from bottom to up on\n// line #0 and draws clock-wisely.\n// |overall_length| is the total length of one side excluding the stroke\n// thickness. |mid_length| is the length of the middle part which is close to\n// the one third of |overall_length|.\n//      __\n//   _0^  |__\n//  |__    __|\n//     |__|\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/arc/input_overlay/ui/touch_point.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/login/ui/login_display_host.h#L46-L64",
    "ascii": "// An interface that defines an out-of-box-experience (OOBE) or login screen\n// host. It contains code specific to the login UI implementation.\n//\n// The inheritance graph is as folllows:\n//\n//                               LoginDisplayHost\n//                                   /       |\n//                LoginDisplayHostCommon   MockLoginDisplayHost\n//                      /      |\n//   LoginDisplayHostMojo    LoginDisplayHostWebUI\n//\n//\n// - LoginDisplayHost defines the generic interface.\n// - LoginDisplayHostCommon is UI-agnostic code shared between the views and\n//   webui hosts.\n// - MockLoginDisplayHost is for tests.\n// - LoginDisplayHostMojo is for the login screen which is implemented in Ash.\n//   TODO(estade): rename LoginDisplayHostMojo since it no longer uses Mojo.\n// - LoginDisplayHostWebUI is for OOBE, which is written in HTML/JS/CSS.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/login/ui/login_display_host.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/login/ui/oobe_ui_dialog_delegate.h#L46-L52",
    "ascii": "// This class manages the behavior of the Oobe UI dialog.\n// And its lifecycle is managed by the widget created in Show().\n//   WebDialogView<----delegate_----OobeUIDialogDelegate\n//         |\n//         |\n//         V\n//   clientView---->Widget's view hierarchy\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/login/ui/oobe_ui_dialog_delegate.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/cart/fetch_discount_worker.h#L48-L61",
    "ascii": "// This is used to fetch discounts for active Carts in cart_db. It starts\n// to work after calling Start() and continue to work util Chrome is finished.\n// The flow looks as follow:\n//\n//   UI Thread              | backend_task_runner_\n//  ===========================================\n// 1) Start                 |\n// 2) PrepareToFetch (delay)|\n// 3) ReadyToFetch          |\n// 4)                       | FetchInBackground\n// 5)                       | DoneFetchingInBackground\n// 6) AfterDiscountFetched  |\n// 7) OnUpdatingDiscounts   |\n// 8) Start                 |\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/cart/fetch_discount_worker.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/extensions/api/omnibox/omnibox_unittest.cc#L43-L46",
    "ascii": "//   0123456789\n//    mmmm\n// +       ddd\n// = nmmmmndddn\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/extensions/api/omnibox/omnibox_unittest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/ambient/ui/ambient_animation_attribution_transformer.h#L16-L51",
    "ascii": "// \"Attribution\" refers to the text credits that may optionally accompany each\n// photo that's assigned to a dynamic asset in an animation. The Lottie files\n// for ambient mode have a placeholder for each dynamic asset where its\n// attribution text should go.\n//\n// The attribution text box's coordinates must be baked into the Lottie file.\n// However, UX requires that it is positioned such that the bottom-right of the\n// text box has 24 pixels of padding from the bottom-right of the view.\n// Additionally, the text box's width should extend from the left side of the\n// view all the way to (width - 24) to account for long attributions.\n// Visually, it looks like this:\n//\n// View:\n// +-----------------------------------------------+\n// |                                               |\n// |                                               |\n// |                                               |\n// |                                               |\n// |                                               |\n// |                                               |\n// |                                               |\n// |                                               |\n// |                                               |\n// |-------------------------------------------+   |\n// |                           Attribution Text|   |\n// |-------------------------------------------+   |\n// |                                               |\n// +-----------------------------------------------+\n//\n// The animation already right-aligns the text within the box, but since the\n// view's boundaries can vary from device to device, it is impossible to\n// specify text box coordinates in the lottie file that work for all devices.\n//\n// To accomplish this, AmbientAnimationAttributionTransformer uses Skottie's\n// text/transform property observer API to intercept and modify the text box's\n// coordinates.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/ambient/ui/ambient_animation_attribution_transformer.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/lacros/account_manager/profile_account_manager.h#L18-L34",
    "ascii": "// This is a profile-scoped implementation of `AccountManagerFacade`, intended\n// to be used by the identity manager. Account updates generally follow the\n// path:\n//\n//                       AccountManagerFacadeImpl\n//                                  |\n//                                  V\n//                         AccountProfileMapper\n//                                  |\n//                                  V\n//                         ProfileAccountManager\n//                                  |\n//                                  V\n//                            IdentityManager\n//\n// The `ProfileAccountManager` is not intended to have much logic and mostly\n// forwards calls to the `AccountProfileMapper`.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/lacros/account_manager/profile_account_manager.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/metrics/power/coalition_resource_usage_provider_mac.h#L24-L44",
    "ascii": "// Provides resource usage rate for the current process' coalition over \"short\"\n// and \"long\" intervals.\n//\n// Init() must be invoked before any other method. It starts a \"long\" interval.\n// After that, StartShortInterval() and EndInterval() should be invoked in\n// alternance to start a \"short\" interval, end both intervals and start a new\n// \"long\" interval:\n//\n//  |         Long          |         Long          |         Long          |\n//                  | Short |               | Short |               | Short |\n//  Init            SSI     EI              SSI     EI              SSI     EI\n//\n//      SSI = StartShortInterval\n//      EI  = EndIntervals\n//\n// See //components/power_metrics/resource_coalition_mac.h for more details\n// about resource coalitions.\n//\n// NOTE: Chrome could belong to a non-empty coalition if it's started from a\n// terminal, in which case the data will be hard to interpret. This class\n// reports that the coalition data isn't available when it's the case.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/metrics/power/coalition_resource_usage_provider_mac.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/net/nss_service_chromeos.cc#L43-L77",
    "ascii": "// The following four functions are responsible for initializing NSS for each\n// profile on ChromeOS Ash, which has a separate NSS database and TPM slot\n// per-profile.\n//\n// Initialization basically follows these steps:\n// 1) Get some info from user_manager::UserManager about the User for this\n// profile.\n// 2) Tell nss_util to initialize the software slot for this profile.\n// 3) Wait for the TPM module to be loaded by nss_util if it isn't already.\n// 4) Ask CryptohomePkcs11Client which TPM slot id corresponds to this profile.\n// 5) Tell nss_util to use that slot id on the TPM module.\n//\n// Some of these steps must happen on the UI thread, others must happen on the\n// IO thread:\n//               UI thread                              IO Thread\n//\n//  NssService::NssService\n//                   |\n//  ProfileHelper::Get()->GetUserByProfile()\n//                   \\---------------------------------------v\n//                                                 StartNSSInitOnIOThread\n//                                                           |\n//                                          crypto::InitializeNSSForChromeOSUser\n//                                                           |\n//                                                crypto::IsTPMTokenEnabled\n//                                                           |\n//                                          StartTPMSlotInitializationOnIOThread\n//                   v---------------------------------------/\n//     GetTPMInfoForUserOnUIThread\n//                   |\n//   ash::TPMTokenInfoGetter::Start\n//                   |\n//     DidGetTPMInfoForUserOnUIThread\n//                   \\---------------------------------------v\n//                                          crypto::InitializeTPMForChromeOSUser\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/chrome/browser/net/nss_service_chromeos.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/privacy_budget/mesa_distribution.h#L13-L68",
    "ascii": "// Generates a set of integers drawn from a mesa shaped probability distribution\n// with replacement.\n//\n// The PDF is:\n//\n//            ⎧    0                               ... if x < 0\n//            ⎪\n//     P(x) = ⎨    λ                               ... if 0 <= x < T\n//            ⎪\n//            ⎩    (1 - τ) * γ * (1 - γ)^{X - T}   ... otherwise\n//\n// where\n//\n//   T = Value at which the PDF switches from a uniform to a geometric\n//       distribution. Referred to in code as the `pivot_point`.\n//\n//   τ = Ratio of probability between linear region of the PDF. I.e. if τ = 0.9,\n//       then 90% of the probability space is in the linear region. The ratio is\n//       referred to in code as `dist_ratio`.\n//\n//   γ = Parameter of the geometric distribution.\n//\n//        τ\n//   λ = ───\n//        T\n//\n// In otherwords, the PDF is uniform up to T with a probability of λ, and then\n// switches to a geometric distribution with parameter γ that extends to\n// infinity.\n//\n// It looks like this in the form of a graph which should make a little bit more\n// sense.\n//\n//          P(x)   ▲\n//                 │\n//   probability  λ│┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┬,\n//   density       │    uniform     ┊ L        geometric\n//                 │  distribution  ┊  \"._    distribution\n//                 │                ┊     `--..______\n//                 └────────────────┴──────────────────▶ x\n//                 0                T\n//\n// Why this odd combination of disjoint probability distributions?\n//\n// Such a distribution is useful when you want to select some set of elements\n// uniformly up to a threshold, but want to allow for a tail distribution that\n// extends arbitrarily past that range.\n//\n// The τ parameter establishes the balance between the linear region and the\n// geometric region, while T establishes the scale. Typically we set τ to\n// something close to 0.9 or so such that 0.1 of the probability space is\n// reserved for the long tail.\n//\n// Parameters:\n//   pivot_point: T as described above. Any value bigger than 0.\n//   dist_ratio : τ as described above. Must be in (0,1).\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/privacy_budget/mesa_distribution.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/resources/settings/site_settings/category_default_setting.ts#L5-L36",
    "ascii": "/**\n * @fileoverview\n * 'category-default-setting' is the polymer element for showing a certain\n * category under Site Settings.\n *\n * |optionLabel_| toggle is enabled:\n * +-------------------------------------------------+\n * | Category                                        |<-- Not defined here\n * |                                                 |\n * |  optionLabel_                     ( O)          |\n * |  optionDescription_                             |\n * |                                                 |\n * |  subOptionLabel                   ( O)          |<-- SubOptionMode.PREF\n * |  subOptionDescription                           |    (optional)\n * |                                                 |\n * +-------------------------------------------------+\n *\n * |optionLabel_| toggle is disabled:\n * +-------------------------------------------------+\n * | Category                                        |<-- Not defined here\n * |                                                 |\n * |  optionLabel_                     (O )          |\n * |  optionDescription_                             |\n * |                                                 |\n * |  subOptionLabel                   (O )          |<-- Toggle is off and\n * |  subOptionDescription                           |    disabled; or hidden\n * |                                                 |\n * +-------------------------------------------------+\n *\n * TODO(crbug.com/1113642): Remove this element when content settings redesign\n * is launched.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/resources/settings/site_settings/category_default_setting.ts"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/site_isolation/site_per_process_interactive_browsertest.cc#L251-L262",
    "ascii": "// Ensure that sequential focus navigation (advancing focused elements with\n// <tab> and <shift-tab>) works across cross-process subframes.\n// The test sets up six inputs fields in a page with two cross-process\n// subframes:\n//                 child1            child2\n//             /------------\\    /------------\\.\n//             | 2. <input> |    | 4. <input> |\n//  1. <input> | 3. <input> |    | 5. <input> |  6. <input>\n//             \\------------/    \\------------/.\n//\n// The test then presses <tab> six times to cycle through focused elements 1-6.\n// The test then repeats this with <shift-tab> to cycle in reverse order.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/site_isolation/site_per_process_interactive_browsertest.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/suggestions/tail/AlignmentManager.java#L14-L31",
    "ascii": "/**\n * Coordinates horizontal alignment of the tail suggestions.\n * Tail suggestions are aligned to\n * - the user input in the Omnibox, when possible,\n * - to each other (left edge) when longest tail suggestion makes it impossible to align it to\n *   user input.\n *\n * Examples:\n * 1. Aligned to User input:\n *    ( User Query In Omni             )\n *    [           ... Omnibox          ]\n *    [           ... Omnibox Android  ]\n *\n * 2. Aligned to longest suggestion:\n *    ( Longer User Query In The Omni  )\n *    [             ... Omnibox        ]\n *    [             ... Omnibox Android]\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/suggestions/tail/AlignmentManager.java"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmSyncDataStateMachine.java#L20-L48",
    "ascii": "/**\n * This class takes care of the various dialogs that must be shown when the user changes the\n * account they are syncing to (either directly, or by signing in to a new account). Most of the\n * complexity is due to many of the decisions getting answered through callbacks.\n *\n * This class progresses along the following state machine:\n *\n *       E-----\\  G--\\\n *       ^     |  ^  |\n *       |     v  |  v\n * A->B->C->D->+->F->H\n *    |        ^\n *    v        |\n *    \\--------/\n *\n * Where:\n * A - Start\n * B - Decision: progress to C if the user signed in previously to a different account, F otherwise.\n * C - Decision: progress to E if we are switching from a managed account, D otherwise.\n * D - Action: show Import Data Dialog.\n * E - Action: show Switching from Managed Account Dialog.\n * F - Decision: progress to G if we are switching to a managed account, H otherwise.\n * G - Action: show Switching to Managed Account Dialog.\n * H - End: perform {@link ConfirmImportSyncDataDialogCoordinator.Listener#onConfirm} with the\n * result of the Import Data Dialog, if displayed or true if switching from a managed account.\n *\n * At any dialog, the user can cancel the dialog and end the whole process (resulting in\n * {@link ConfirmImportSyncDataDialogCoordinator.Listener#onCancel}).\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmSyncDataStateMachine.java"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/views/page_info/page_info_permission_content_view.h#L21-L32",
    "ascii": "// The view that is used as a content view of the permissions subpages in page\n// info. It contains information about the permission (icon, title, state label)\n// and controls to change the permission state (toggle, checkbox and manage\n// button).\n// *---------------------------------------------------------------*\n// | Icon | Title                                         | Toggle |\n// |      | State label                                   |        |\n// |      |                                               |        |\n// |      | \"Remember this setting\" checkbox              |        |\n// |---------------------------------------------------------------|\n// | Manage button                                                 |\n// *---------------------------------------------------------------*\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/views/page_info/page_info_permission_content_view.h"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/views/payments/payment_sheet_view_controller.cc#L474-L477",
    "ascii": "// Adds the product logo to the footer.\n// +---------------------------------------------------------+\n// | (•) chrome                               | PAY | CANCEL |\n// +---------------------------------------------------------+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/views/payments/payment_sheet_view_controller.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/views/payments/secure_payment_confirmation_no_creds_dialog_view.cc#L143-L149",
    "ascii": "// Creates the body.\n// +------------------------------------------+\n// |              [header image]              |\n// |                                          |\n// | No matching credentials text             |\n// |                                     [OK] |\n// +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/views/payments/secure_payment_confirmation_no_creds_dialog_view.cc"
  },
  {
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/views/payments/secure_payment_confirmation_views_util.h#L60-L66",
    "ascii": "// Creates the header view, which contains the icon and a progress bar. The icon\n// covers the whole header view with the progress bar at the top of the header.\n// +------------------------------------------+\n// |===============progress bar===============|\n// |                                          |\n// |                   icon                   |\n// +------------------------------------------+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/views/payments/secure_payment_confirmation_views_util.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/bpf/btf.c#L104-L169",
    "ascii": "/* BTF verification:\n *\n * To verify BTF data, two passes are needed.\n *\n * Pass #1\n * ~~~~~~~\n * The first pass is to collect all btf_type objects to\n * an array: \"btf->types\".\n *\n * Depending on the C type that a btf_type is describing,\n * a btf_type may be followed by extra data.  We don't know\n * how many btf_type is there, and more importantly we don't\n * know where each btf_type is located in the type section.\n *\n * Without knowing the location of each type_id, most verifications\n * cannot be done.  e.g. an earlier btf_type may refer to a later\n * btf_type (recall the \"const void *\" above), so we cannot\n * check this type-reference in the first pass.\n *\n * In the first pass, it still does some verifications (e.g.\n * checking the name is a valid offset to the string section).\n *\n * Pass #2\n * ~~~~~~~\n * The main focus is to resolve a btf_type that is referring\n * to another type.\n *\n * We have to ensure the referring type:\n * 1) does exist in the BTF (i.e. in btf->types[])\n * 2) does not cause a loop:\n *\tstruct A {\n *\t\tstruct B b;\n *\t};\n *\n *\tstruct B {\n *\t\tstruct A a;\n *\t};\n *\n * btf_type_needs_resolve() decides if a btf_type needs\n * to be resolved.\n *\n * The needs_resolve type implements the \"resolve()\" ops which\n * essentially does a DFS and detects backedge.\n *\n * During resolve (or DFS), different C types have different\n * \"RESOLVED\" conditions.\n *\n * When resolving a BTF_KIND_STRUCT, we need to resolve all its\n * members because a member is always referring to another\n * type.  A struct's member can be treated as \"RESOLVED\" if\n * it is referring to a BTF_KIND_PTR.  Otherwise, the\n * following valid C struct would be rejected:\n *\n *\tstruct A {\n *\t\tint m;\n *\t\tstruct A *a;\n *\t};\n *\n * When resolving a BTF_KIND_PTR, it needs to keep resolving if\n * it is referring to another BTF_KIND_PTR.  Otherwise, we cannot\n * detect a pointer loop, e.g.:\n * BTF_KIND_CONST -> BTF_KIND_PTR -> BTF_KIND_CONST -> BTF_KIND_PTR +\n *                        ^                                         |\n *                        +-----------------------------------------+\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/bpf/btf.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/bpf/lpm_trie.c#L41-L150",
    "ascii": "/* This trie implements a longest prefix match algorithm that can be used to\n * match IP addresses to a stored set of ranges.\n *\n * Data stored in @data of struct bpf_lpm_key and struct lpm_trie_node is\n * interpreted as big endian, so data[0] stores the most significant byte.\n *\n * Match ranges are internally stored in instances of struct lpm_trie_node\n * which each contain their prefix length as well as two pointers that may\n * lead to more nodes containing more specific matches. Each node also stores\n * a value that is defined by and returned to userspace via the update_elem\n * and lookup functions.\n *\n * For instance, let's start with a trie that was created with a prefix length\n * of 32, so it can be used for IPv4 addresses, and one single element that\n * matches 192.168.0.0/16. The data array would hence contain\n * [0xc0, 0xa8, 0x00, 0x00] in big-endian notation. This documentation will\n * stick to IP-address notation for readability though.\n *\n * As the trie is empty initially, the new node (1) will be places as root\n * node, denoted as (R) in the example below. As there are no other node, both\n * child pointers are %NULL.\n *\n *              +----------------+\n *              |       (1)  (R) |\n *              | 192.168.0.0/16 |\n *              |    value: 1    |\n *              |   [0]    [1]   |\n *              +----------------+\n *\n * Next, let's add a new node (2) matching 192.168.0.0/24. As there is already\n * a node with the same data and a smaller prefix (ie, a less specific one),\n * node (2) will become a child of (1). In child index depends on the next bit\n * that is outside of what (1) matches, and that bit is 0, so (2) will be\n * child[0] of (1):\n *\n *              +----------------+\n *              |       (1)  (R) |\n *              | 192.168.0.0/16 |\n *              |    value: 1    |\n *              |   [0]    [1]   |\n *              +----------------+\n *                   |\n *    +----------------+\n *    |       (2)      |\n *    | 192.168.0.0/24 |\n *    |    value: 2    |\n *    |   [0]    [1]   |\n *    +----------------+\n *\n * The child[1] slot of (1) could be filled with another node which has bit #17\n * (the next bit after the ones that (1) matches on) set to 1. For instance,\n * 192.168.128.0/24:\n *\n *              +----------------+\n *              |       (1)  (R) |\n *              | 192.168.0.0/16 |\n *              |    value: 1    |\n *              |   [0]    [1]   |\n *              +----------------+\n *                   |      |\n *    +----------------+  +------------------+\n *    |       (2)      |  |        (3)       |\n *    | 192.168.0.0/24 |  | 192.168.128.0/24 |\n *    |    value: 2    |  |     value: 3     |\n *    |   [0]    [1]   |  |    [0]    [1]    |\n *    +----------------+  +------------------+\n *\n * Let's add another node (4) to the game for 192.168.1.0/24. In order to place\n * it, node (1) is looked at first, and because (4) of the semantics laid out\n * above (bit #17 is 0), it would normally be attached to (1) as child[0].\n * However, that slot is already allocated, so a new node is needed in between.\n * That node does not have a value attached to it and it will never be\n * returned to users as result of a lookup. It is only there to differentiate\n * the traversal further. It will get a prefix as wide as necessary to\n * distinguish its two children:\n *\n *                      +----------------+\n *                      |       (1)  (R) |\n *                      | 192.168.0.0/16 |\n *                      |    value: 1    |\n *                      |   [0]    [1]   |\n *                      +----------------+\n *                           |      |\n *            +----------------+  +------------------+\n *            |       (4)  (I) |  |        (3)       |\n *            | 192.168.0.0/23 |  | 192.168.128.0/24 |\n *            |    value: ---  |  |     value: 3     |\n *            |   [0]    [1]   |  |    [0]    [1]    |\n *            +----------------+  +------------------+\n *                 |      |\n *  +----------------+  +----------------+\n *  |       (2)      |  |       (5)      |\n *  | 192.168.0.0/24 |  | 192.168.1.0/24 |\n *  |    value: 2    |  |     value: 5   |\n *  |   [0]    [1]   |  |   [0]    [1]   |\n *  +----------------+  +----------------+\n *\n * 192.168.1.1/32 would be a child of (5) etc.\n *\n * An intermediate node will be turned into a 'real' node on demand. In the\n * example above, (4) would be re-used if 192.168.0.0/23 is added to the trie.\n *\n * A fully populated trie would have a height of 32 nodes, as the trie was\n * created with a prefix length of 32.\n *\n * The lookup starts at the root node. If the current node matches and if there\n * is a child that can be used to become more specific, the trie is traversed\n * downwards. The last node in the traversal that is a non-intermediate one is\n * returned.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/bpf/lpm_trie.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/futex/waitwake.c#L9-L107",
    "ascii": "/*\n * READ this before attempting to hack on futexes!\n *\n * Basic futex operation and ordering guarantees\n * =============================================\n *\n * The waiter reads the futex value in user space and calls\n * futex_wait(). This function computes the hash bucket and acquires\n * the hash bucket lock. After that it reads the futex user space value\n * again and verifies that the data has not changed. If it has not changed\n * it enqueues itself into the hash bucket, releases the hash bucket lock\n * and schedules.\n *\n * The waker side modifies the user space value of the futex and calls\n * futex_wake(). This function computes the hash bucket and acquires the\n * hash bucket lock. Then it looks for waiters on that futex in the hash\n * bucket and wakes them.\n *\n * In futex wake up scenarios where no tasks are blocked on a futex, taking\n * the hb spinlock can be avoided and simply return. In order for this\n * optimization to work, ordering guarantees must exist so that the waiter\n * being added to the list is acknowledged when the list is concurrently being\n * checked by the waker, avoiding scenarios like the following:\n *\n * CPU 0                               CPU 1\n * val = *futex;\n * sys_futex(WAIT, futex, val);\n *   futex_wait(futex, val);\n *   uval = *futex;\n *                                     *futex = newval;\n *                                     sys_futex(WAKE, futex);\n *                                       futex_wake(futex);\n *                                       if (queue_empty())\n *                                         return;\n *   if (uval == val)\n *      lock(hash_bucket(futex));\n *      queue();\n *     unlock(hash_bucket(futex));\n *     schedule();\n *\n * This would cause the waiter on CPU 0 to wait forever because it\n * missed the transition of the user space value from val to newval\n * and the waker did not find the waiter in the hash bucket queue.\n *\n * The correct serialization ensures that a waiter either observes\n * the changed user space value before blocking or is woken by a\n * concurrent waker:\n *\n * CPU 0                                 CPU 1\n * val = *futex;\n * sys_futex(WAIT, futex, val);\n *   futex_wait(futex, val);\n *\n *   waiters++; (a)\n *   smp_mb(); (A) <-- paired with -.\n *                                  |\n *   lock(hash_bucket(futex));      |\n *                                  |\n *   uval = *futex;                 |\n *                                  |        *futex = newval;\n *                                  |        sys_futex(WAKE, futex);\n *                                  |          futex_wake(futex);\n *                                  |\n *                                  `--------> smp_mb(); (B)\n *   if (uval == val)\n *     queue();\n *     unlock(hash_bucket(futex));\n *     schedule();                         if (waiters)\n *                                           lock(hash_bucket(futex));\n *   else                                    wake_waiters(futex);\n *     waiters--; (b)                        unlock(hash_bucket(futex));\n *\n * Where (A) orders the waiters increment and the futex value read through\n * atomic operations (see futex_hb_waiters_inc) and where (B) orders the write\n * to futex and the waiters read (see futex_hb_waiters_pending()).\n *\n * This yields the following case (where X:=waiters, Y:=futex):\n *\n *\tX = Y = 0\n *\n *\tw[X]=1\t\tw[Y]=1\n *\tMB\t\tMB\n *\tr[Y]=y\t\tr[X]=x\n *\n * Which guarantees that x==0 && y==0 is impossible; which translates back into\n * the guarantee that we cannot both miss the futex variable change and the\n * enqueue.\n *\n * Note that a new waiter is accounted for in (a) even when it is possible that\n * the wait call can return error, in which case we backtrack from it in (b).\n * Refer to the comment in futex_q_lock().\n *\n * Similarly, in order to account for waiters being requeued on another\n * address we always increment the waiters for the destination bucket before\n * acquiring the lock. It then decrements them again  after releasing it -\n * the code that actually moves the futex(es) between hash buckets (requeue_futex)\n * will do the additional required waiter count housekeeping. This is done for\n * double_lock_hb() and double_unlock_hb(), respectively.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/kernel/futex/waitwake.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/irq/timings.c#L36-L262",
    "ascii": "/*\n * The main goal of this algorithm is to predict the next interrupt\n * occurrence on the current CPU.\n *\n * Currently, the interrupt timings are stored in a circular array\n * buffer every time there is an interrupt, as a tuple: the interrupt\n * number and the associated timestamp when the event occurred <irq,\n * timestamp>.\n *\n * For every interrupt occurring in a short period of time, we can\n * measure the elapsed time between the occurrences for the same\n * interrupt and we end up with a suite of intervals. The experience\n * showed the interrupts are often coming following a periodic\n * pattern.\n *\n * The objective of the algorithm is to find out this periodic pattern\n * in a fastest way and use its period to predict the next irq event.\n *\n * When the next interrupt event is requested, we are in the situation\n * where the interrupts are disabled and the circular buffer\n * containing the timings is filled with the events which happened\n * after the previous next-interrupt-event request.\n *\n * At this point, we read the circular buffer and we fill the irq\n * related statistics structure. After this step, the circular array\n * containing the timings is empty because all the values are\n * dispatched in their corresponding buffers.\n *\n * Now for each interrupt, we can predict the next event by using the\n * suffix array, log interval and exponential moving average\n *\n * 1. Suffix array\n *\n * Suffix array is an array of all the suffixes of a string. It is\n * widely used as a data structure for compression, text search, ...\n * For instance for the word 'banana', the suffixes will be: 'banana'\n * 'anana' 'nana' 'ana' 'na' 'a'\n *\n * Usually, the suffix array is sorted but for our purpose it is\n * not necessary and won't provide any improvement in the context of\n * the solved problem where we clearly define the boundaries of the\n * search by a max period and min period.\n *\n * The suffix array will build a suite of intervals of different\n * length and will look for the repetition of each suite. If the suite\n * is repeating then we have the period because it is the length of\n * the suite whatever its position in the buffer.\n *\n * 2. Log interval\n *\n * We saw the irq timings allow to compute the interval of the\n * occurrences for a specific interrupt. We can reasonably assume the\n * longer is the interval, the higher is the error for the next event\n * and we can consider storing those interval values into an array\n * where each slot in the array correspond to an interval at the power\n * of 2 of the index. For example, index 12 will contain values\n * between 2^11 and 2^12.\n *\n * At the end we have an array of values where at each index defines a\n * [2^index - 1, 2 ^ index] interval values allowing to store a large\n * number of values inside a small array.\n *\n * For example, if we have the value 1123, then we store it at\n * ilog2(1123) = 10 index value.\n *\n * Storing those value at the specific index is done by computing an\n * exponential moving average for this specific slot. For instance,\n * for values 1800, 1123, 1453, ... fall under the same slot (10) and\n * the exponential moving average is computed every time a new value\n * is stored at this slot.\n *\n * 3. Exponential Moving Average\n *\n * The EMA is largely used to track a signal for stocks or as a low\n * pass filter. The magic of the formula, is it is very simple and the\n * reactivity of the average can be tuned with the factors called\n * alpha.\n *\n * The higher the alphas are, the faster the average respond to the\n * signal change. In our case, if a slot in the array is a big\n * interval, we can have numbers with a big difference between\n * them. The impact of those differences in the average computation\n * can be tuned by changing the alpha value.\n *\n *\n *  -- The algorithm --\n *\n * We saw the different processing above, now let's see how they are\n * used together.\n *\n * For each interrupt:\n *\tFor each interval:\n *\t\tCompute the index = ilog2(interval)\n *\t\tCompute a new_ema(buffer[index], interval)\n *\t\tStore the index in a circular buffer\n *\n *\tCompute the suffix array of the indexes\n *\n *\tFor each suffix:\n *\t\tIf the suffix is reverse-found 3 times\n *\t\t\tReturn suffix\n *\n *\tReturn Not found\n *\n * However we can not have endless suffix array to be build, it won't\n * make sense and it will add an extra overhead, so we can restrict\n * this to a maximum suffix length of 5 and a minimum suffix length of\n * 2. The experience showed 5 is the majority of the maximum pattern\n * period found for different devices.\n *\n * The result is a pattern finding less than 1us for an interrupt.\n *\n * Example based on real values:\n *\n * Example 1 : MMC write/read interrupt interval:\n *\n *\t223947, 1240, 1384, 1386, 1386,\n *\t217416, 1236, 1384, 1386, 1387,\n *\t214719, 1241, 1386, 1387, 1384,\n *\t213696, 1234, 1384, 1386, 1388,\n *\t219904, 1240, 1385, 1389, 1385,\n *\t212240, 1240, 1386, 1386, 1386,\n *\t214415, 1236, 1384, 1386, 1387,\n *\t214276, 1234, 1384, 1388, ?\n *\n * For each element, apply ilog2(value)\n *\n *\t15, 8, 8, 8, 8,\n *\t15, 8, 8, 8, 8,\n *\t15, 8, 8, 8, 8,\n *\t15, 8, 8, 8, 8,\n *\t15, 8, 8, 8, 8,\n *\t15, 8, 8, 8, 8,\n *\t15, 8, 8, 8, 8,\n *\t15, 8, 8, 8, ?\n *\n * Max period of 5, we take the last (max_period * 3) 15 elements as\n * we can be confident if the pattern repeats itself three times it is\n * a repeating pattern.\n *\n *\t             8,\n *\t15, 8, 8, 8, 8,\n *\t15, 8, 8, 8, 8,\n *\t15, 8, 8, 8, ?\n *\n * Suffixes are:\n *\n *  1) 8, 15, 8, 8, 8  <- max period\n *  2) 8, 15, 8, 8\n *  3) 8, 15, 8\n *  4) 8, 15           <- min period\n *\n * From there we search the repeating pattern for each suffix.\n *\n * buffer: 8, 15, 8, 8, 8, 8, 15, 8, 8, 8, 8, 15, 8, 8, 8\n *         |   |  |  |  |  |   |  |  |  |  |   |  |  |  |\n *         8, 15, 8, 8, 8  |   |  |  |  |  |   |  |  |  |\n *                         8, 15, 8, 8, 8  |   |  |  |  |\n *                                         8, 15, 8, 8, 8\n *\n * When moving the suffix, we found exactly 3 matches.\n *\n * The first suffix with period 5 is repeating.\n *\n * The next event is (3 * max_period) % suffix_period\n *\n * In this example, the result 0, so the next event is suffix[0] => 8\n *\n * However, 8 is the index in the array of exponential moving average\n * which was calculated on the fly when storing the values, so the\n * interval is ema[8] = 1366\n *\n *\n * Example 2:\n *\n *\t4, 3, 5, 100,\n *\t3, 3, 5, 117,\n *\t4, 4, 5, 112,\n *\t4, 3, 4, 110,\n *\t3, 5, 3, 117,\n *\t4, 4, 5, 112,\n *\t4, 3, 4, 110,\n *\t3, 4, 5, 112,\n *\t4, 3, 4, 110\n *\n * ilog2\n *\n *\t0, 0, 0, 4,\n *\t0, 0, 0, 4,\n *\t0, 0, 0, 4,\n *\t0, 0, 0, 4,\n *\t0, 0, 0, 4,\n *\t0, 0, 0, 4,\n *\t0, 0, 0, 4,\n *\t0, 0, 0, 4,\n *\t0, 0, 0, 4\n *\n * Max period 5:\n *\t   0, 0, 4,\n *\t0, 0, 0, 4,\n *\t0, 0, 0, 4,\n *\t0, 0, 0, 4\n *\n * Suffixes:\n *\n *  1) 0, 0, 4, 0, 0\n *  2) 0, 0, 4, 0\n *  3) 0, 0, 4\n *  4) 0, 0\n *\n * buffer: 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4\n *         |  |  |  |  |  |  X\n *         0, 0, 4, 0, 0, |  X\n *                        0, 0\n *\n * buffer: 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4\n *         |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n *         0, 0, 4, 0, |  |  |  |  |  |  |  |  |  |  |\n *                     0, 0, 4, 0, |  |  |  |  |  |  |\n *                                 0, 0, 4, 0, |  |  |\n *                                             0  0  4\n *\n * Pattern is found 3 times, the remaining is 1 which results from\n * (max_period * 3) % suffix_period. This value is the index in the\n * suffix arrays. The suffix array for a period 4 has the value 4\n * at index 1.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/irq/timings.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/locking/lockdep.c#L2432-L2451",
    "ascii": "/*\n * printk the shortest lock dependencies from @leaf to @root.\n *\n * We have a lock dependency path (from a backwards search) as follow:\n *\n *    @leaf                                                                 @root\n *      |                                                                     |\n *      V                                                                     V\n *\t          ->parent                                   ->parent\n * | lock_list | ---------> | lock_list | ... | lock_list  | ---------> | lock_list |\n * | L2 <- L1  |            | L3 <- L2  | ... | Ln <- Ln-1 |            |    <- Ln  |\n *\n * , so when we iterate from @leaf to @root, we actually print the lock\n * dependency path L1 -> L2 -> .. -> Ln in the non-reverse order.\n *\n * Another thing to notice here is that ->class of L2 <- L1 is L1, while the\n * ->trace of L2 <- L1 is the call trace of L2, in fact we don't have the call\n * trace of L1 in the dependency path, which is alright, because most of the\n * time we can figure out where L1 is held from the call trace of L2.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/kernel/locking/lockdep.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/locking/qspinlock.c#L143-L148",
    "ascii": "/**\n * clear_pending - clear the pending bit.\n * @lock: Pointer to queued spinlock structure\n *\n * *,1,* -> *,0,*\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/locking/qspinlock.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/sched/fair.c#L3360-L3432",
    "ascii": "/*\n * All this does is approximate the hierarchical proportion which includes that\n * global sum we all love to hate.\n *\n * That is, the weight of a group entity, is the proportional share of the\n * group weight based on the group runqueue weights. That is:\n *\n *                     tg->weight * grq->load.weight\n *   ge->load.weight = -----------------------------               (1)\n *                       \\Sum grq->load.weight\n *\n * Now, because computing that sum is prohibitively expensive to compute (been\n * there, done that) we approximate it with this average stuff. The average\n * moves slower and therefore the approximation is cheaper and more stable.\n *\n * So instead of the above, we substitute:\n *\n *   grq->load.weight -> grq->avg.load_avg                         (2)\n *\n * which yields the following:\n *\n *                     tg->weight * grq->avg.load_avg\n *   ge->load.weight = ------------------------------              (3)\n *                             tg->load_avg\n *\n * Where: tg->load_avg ~= \\Sum grq->avg.load_avg\n *\n * That is shares_avg, and it is right (given the approximation (2)).\n *\n * The problem with it is that because the average is slow -- it was designed\n * to be exactly that of course -- this leads to transients in boundary\n * conditions. In specific, the case where the group was idle and we start the\n * one task. It takes time for our CPU's grq->avg.load_avg to build up,\n * yielding bad latency etc..\n *\n * Now, in that special case (1) reduces to:\n *\n *                     tg->weight * grq->load.weight\n *   ge->load.weight = ----------------------------- = tg->weight   (4)\n *                         grp->load.weight\n *\n * That is, the sum collapses because all other CPUs are idle; the UP scenario.\n *\n * So what we do is modify our approximation (3) to approach (4) in the (near)\n * UP case, like:\n *\n *   ge->load.weight =\n *\n *              tg->weight * grq->load.weight\n *     ---------------------------------------------------         (5)\n *     tg->load_avg - grq->avg.load_avg + grq->load.weight\n *\n * But because grq->load.weight can drop to 0, resulting in a divide by zero,\n * we need to use grq->avg.load_avg as its lower bound, which then gives:\n *\n *\n *                     tg->weight * grq->load.weight\n *   ge->load.weight = -----------------------------\t\t   (6)\n *                             tg_load_avg'\n *\n * Where:\n *\n *   tg_load_avg' = tg->load_avg - grq->avg.load_avg +\n *                  max(grq->load.weight, grq->avg.load_avg)\n *\n * And that is shares_weight and is icky. In the (near) UP case it approaches\n * (4) while in the normal case it approaches (3). It consistently\n * overestimates the ge->load.weight and therefore:\n *\n *   \\Sum ge->load.weight >= tg->weight\n *\n * hence icky!\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/sched/fair.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/sched/loadavg.c#L163-L204",
    "ascii": "/*\n * Handle NO_HZ for the global load-average.\n *\n * Since the above described distributed algorithm to compute the global\n * load-average relies on per-CPU sampling from the tick, it is affected by\n * NO_HZ.\n *\n * The basic idea is to fold the nr_active delta into a global NO_HZ-delta upon\n * entering NO_HZ state such that we can include this as an 'extra' CPU delta\n * when we read the global state.\n *\n * Obviously reality has to ruin such a delightfully simple scheme:\n *\n *  - When we go NO_HZ idle during the window, we can negate our sample\n *    contribution, causing under-accounting.\n *\n *    We avoid this by keeping two NO_HZ-delta counters and flipping them\n *    when the window starts, thus separating old and new NO_HZ load.\n *\n *    The only trick is the slight shift in index flip for read vs write.\n *\n *        0s            5s            10s           15s\n *          +10           +10           +10           +10\n *        |-|-----------|-|-----------|-|-----------|-|\n *    r:0 0 1           1 0           0 1           1 0\n *    w:0 1 1           0 0           1 1           0 0\n *\n *    This ensures we'll fold the old NO_HZ contribution in this window while\n *    accumulating the new one.\n *\n *  - When we wake up from NO_HZ during the window, we push up our\n *    contribution, since we effectively move our sample point to a known\n *    busy state.\n *\n *    This is solved by pushing the window forward, and thus skipping the\n *    sample, for this CPU (effectively using the NO_HZ-delta for this CPU which\n *    was in effect at the time the window opened). This also solves the issue\n *    of having to deal with a CPU having been in NO_HZ for multiple LOAD_FREQ\n *    intervals.\n *\n * When making the ILB scale, we should try to pull this in as well.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/sched/loadavg.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/sched/pelt.c#L80-L100",
    "ascii": "/*\n * Accumulate the three separate parts of the sum; d1 the remainder\n * of the last (incomplete) period, d2 the span of full periods and d3\n * the remainder of the (incomplete) current period.\n *\n *           d1          d2           d3\n *           ^           ^            ^\n *           |           |            |\n *         |<->|<----------------->|<--->|\n * ... |---x---|------| ... |------|-----x (now)\n *\n *                           p-1\n * u' = (u + d1) y^p + 1024 \\Sum y^n + d3 y^0\n *                           n=1\n *\n *    = u y^p +\t\t\t\t\t(Step 1)\n *\n *                     p-1\n *      d1 y^p + 1024 \\Sum y^n + d3 y^0\t\t(Step 2)\n *                     n=1\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/sched/pelt.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/sched/pelt.h#L83-L94",
    "ascii": "/*\n * The clock_pelt scales the time to reflect the effective amount of\n * computation done during the running delta time but then sync back to\n * clock_task when rq is idle.\n *\n *\n * absolute time   | 1| 2| 3| 4| 5| 6| 7| 8| 9|10|11|12|13|14|15|16\n * @ max capacity  ------******---------------******---------------\n * @ half capacity ------************---------************---------\n * clock pelt      | 1| 2|    3|    4| 7| 8| 9|   10|   11|14|15|16\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/sched/pelt.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/sched/topology.c#L792-L885",
    "ascii": "/*\n * NUMA topology (first read the regular topology blurb below)\n *\n * Given a node-distance table, for example:\n *\n *   node   0   1   2   3\n *     0:  10  20  30  20\n *     1:  20  10  20  30\n *     2:  30  20  10  20\n *     3:  20  30  20  10\n *\n * which represents a 4 node ring topology like:\n *\n *   0 ----- 1\n *   |       |\n *   |       |\n *   |       |\n *   3 ----- 2\n *\n * We want to construct domains and groups to represent this. The way we go\n * about doing this is to build the domains on 'hops'. For each NUMA level we\n * construct the mask of all nodes reachable in @level hops.\n *\n * For the above NUMA topology that gives 3 levels:\n *\n * NUMA-2\t0-3\t\t0-3\t\t0-3\t\t0-3\n *  groups:\t{0-1,3},{1-3}\t{0-2},{0,2-3}\t{1-3},{0-1,3}\t{0,2-3},{0-2}\n *\n * NUMA-1\t0-1,3\t\t0-2\t\t1-3\t\t0,2-3\n *  groups:\t{0},{1},{3}\t{0},{1},{2}\t{1},{2},{3}\t{0},{2},{3}\n *\n * NUMA-0\t0\t\t1\t\t2\t\t3\n *\n *\n * As can be seen; things don't nicely line up as with the regular topology.\n * When we iterate a domain in child domain chunks some nodes can be\n * represented multiple times -- hence the \"overlap\" naming for this part of\n * the topology.\n *\n * In order to minimize this overlap, we only build enough groups to cover the\n * domain. For instance Node-0 NUMA-2 would only get groups: 0-1,3 and 1-3.\n *\n * Because:\n *\n *  - the first group of each domain is its child domain; this\n *    gets us the first 0-1,3\n *  - the only uncovered node is 2, who's child domain is 1-3.\n *\n * However, because of the overlap, computing a unique CPU for each group is\n * more complicated. Consider for instance the groups of NODE-1 NUMA-2, both\n * groups include the CPUs of Node-0, while those CPUs would not in fact ever\n * end up at those groups (they would end up in group: 0-1,3).\n *\n * To correct this we have to introduce the group balance mask. This mask\n * will contain those CPUs in the group that can reach this group given the\n * (child) domain tree.\n *\n * With this we can once again compute balance_cpu and sched_group_capacity\n * relations.\n *\n * XXX include words on how balance_cpu is unique and therefore can be\n * used for sched_group_capacity links.\n *\n *\n * Another 'interesting' topology is:\n *\n *   node   0   1   2   3\n *     0:  10  20  20  30\n *     1:  20  10  20  20\n *     2:  20  20  10  20\n *     3:  30  20  20  10\n *\n * Which looks a little like:\n *\n *   0 ----- 1\n *   |     / |\n *   |   /   |\n *   | /     |\n *   2 ----- 3\n *\n * This topology is asymmetric, nodes 1,2 are fully connected, but nodes 0,3\n * are not.\n *\n * This leads to a few particularly weird cases where the sched_domain's are\n * not of the same number for each CPU. Consider:\n *\n * NUMA-2\t0-3\t\t\t\t\t\t0-3\n *  groups:\t{0-2},{1-3}\t\t\t\t\t{1-3},{0-2}\n *\n * NUMA-1\t0-2\t\t0-3\t\t0-3\t\t1-3\n *\n * NUMA-0\t0\t\t1\t\t2\t\t3\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/sched/topology.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/time/timekeeping.c#L458-L489",
    "ascii": "/**\n * ktime_get_mono_fast_ns - Fast NMI safe access to clock monotonic\n *\n * This timestamp is not guaranteed to be monotonic across an update.\n * The timestamp is calculated by:\n *\n *\tnow = base_mono + clock_delta * slope\n *\n * So if the update lowers the slope, readers who are forced to the\n * not yet updated second array are still using the old steeper slope.\n *\n * tmono\n * ^\n * |    o  n\n * |   o n\n * |  u\n * | o\n * |o\n * |12345678---> reader order\n *\n * o = old slope\n * u = update\n * n = new slope\n *\n * So reader 6 will observe time going backwards versus reader 5.\n *\n * While other CPUs are likely to be able to observe that, the only way\n * for a CPU local observation is when an NMI hits in the middle of\n * the update. Timestamps taken from that NMI context might be ahead\n * of the following timestamps. Callers need to be aware of that and\n * deal with it.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/time/timekeeping.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/trace/ring_buffer.c#L64-L130",
    "ascii": "/*\n * The ring buffer is made up of a list of pages. A separate list of pages is\n * allocated for each CPU. A writer may only write to a buffer that is\n * associated with the CPU it is currently executing on.  A reader may read\n * from any per cpu buffer.\n *\n * The reader is special. For each per cpu buffer, the reader has its own\n * reader page. When a reader has read the entire reader page, this reader\n * page is swapped with another page in the ring buffer.\n *\n * Now, as long as the writer is off the reader page, the reader can do what\n * ever it wants with that page. The writer will never write to that page\n * again (as long as it is out of the ring buffer).\n *\n * Here's some silly ASCII art.\n *\n *   +------+\n *   |reader|          RING BUFFER\n *   |page  |\n *   +------+        +---+   +---+   +---+\n *                   |   |-->|   |-->|   |\n *                   +---+   +---+   +---+\n *                     ^               |\n *                     |               |\n *                     +---------------+\n *\n *\n *   +------+\n *   |reader|          RING BUFFER\n *   |page  |------------------v\n *   +------+        +---+   +---+   +---+\n *                   |   |-->|   |-->|   |\n *                   +---+   +---+   +---+\n *                     ^               |\n *                     |               |\n *                     +---------------+\n *\n *\n *   +------+\n *   |reader|          RING BUFFER\n *   |page  |------------------v\n *   +------+        +---+   +---+   +---+\n *      ^            |   |-->|   |-->|   |\n *      |            +---+   +---+   +---+\n *      |                              |\n *      |                              |\n *      +------------------------------+\n *\n *\n *   +------+\n *   |buffer|          RING BUFFER\n *   |page  |------------------v\n *   +------+        +---+   +---+   +---+\n *      ^            |   |   |   |-->|   |\n *      |   New      +---+   +---+   +---+\n *      |  Reader------^               |\n *      |   page                       |\n *      +------------------------------+\n *\n *\n * After we make this swap, the reader can hand this page off to the splice\n * code and be done with it. It can even allocate a new page if it needs to\n * and swap that into the ring buffer.\n *\n * We will be using cmpxchg soon to make all this lockless.\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/trace/ring_buffer.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/loongarch/net/bpf_jit.c#L63-L88",
    "ascii": "/*\n * eBPF prog stack layout:\n *\n *                                        high\n * original $sp ------------> +-------------------------+ <--LOONGARCH_GPR_FP\n *                            |           $ra           |\n *                            +-------------------------+\n *                            |           $fp           |\n *                            +-------------------------+\n *                            |           $s0           |\n *                            +-------------------------+\n *                            |           $s1           |\n *                            +-------------------------+\n *                            |           $s2           |\n *                            +-------------------------+\n *                            |           $s3           |\n *                            +-------------------------+\n *                            |           $s4           |\n *                            +-------------------------+\n *                            |           $s5           |\n *                            +-------------------------+ <--BPF_REG_FP\n *                            |  prog->aux->stack_depth |\n *                            |        (optional)       |\n * current $sp -------------> +-------------------------+\n *                                        low\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/loongarch/net/bpf_jit.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/lib/overflow_kunit.c#L591-L596",
    "ascii": "/*\n * Allocator uses a trailing node argument --------+  (e.g. kmalloc_node())\n * Allocator uses the gfp_t argument -----------+  |  (e.g. kmalloc())\n * Allocator uses a special leading argument +  |  |  (e.g. devm_kmalloc())\n *                                           |  |  |\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/lib/overflow_kunit.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/lib/test_bpf.c#L2642-L2690",
    "ascii": "/*\n * Set up a sequence of staggered jumps, forwards and backwards with\n * increasing offset. This tests the conversion of relative jumps to\n * JITed native jumps. On some architectures, for example MIPS, a large\n * PC-relative jump offset may overflow the immediate field of the native\n * conditional branch instruction, triggering a conversion to use an\n * absolute jump instead. Since this changes the jump offsets, another\n * offset computation pass is necessary, and that may in turn trigger\n * another branch conversion. This jump sequence is particularly nasty\n * in that regard.\n *\n * The sequence generation is parameterized by size and jump type.\n * The size must be even, and the expected result is always size + 1.\n * Below is an example with size=8 and result=9.\n *\n *                     ________________________Start\n *                     R0 = 0\n *                     R1 = r1\n *                     R2 = r2\n *            ,------- JMP +4 * 3______________Preamble: 4 insns\n * ,----------|-ind 0- if R0 != 7 JMP 8 * 3 + 1 <--------------------.\n * |          |        R0 = 8                                        |\n * |          |        JMP +7 * 3               ------------------------.\n * | ,--------|-----1- if R0 != 5 JMP 7 * 3 + 1 <--------------.     |  |\n * | |        |        R0 = 6                                  |     |  |\n * | |        |        JMP +5 * 3               ------------------.  |  |\n * | | ,------|-----2- if R0 != 3 JMP 6 * 3 + 1 <--------.     |  |  |  |\n * | | |      |        R0 = 4                            |     |  |  |  |\n * | | |      |        JMP +3 * 3               ------------.  |  |  |  |\n * | | | ,----|-----3- if R0 != 1 JMP 5 * 3 + 1 <--.     |  |  |  |  |  |\n * | | | |    |        R0 = 2                      |     |  |  |  |  |  |\n * | | | |    |        JMP +1 * 3               ------.  |  |  |  |  |  |\n * | | | | ,--t=====4> if R0 != 0 JMP 4 * 3 + 1    1  2  3  4  5  6  7  8 loc\n * | | | | |           R0 = 1                     -1 +2 -3 +4 -5 +6 -7 +8 off\n * | | | | |           JMP -2 * 3               ---'  |  |  |  |  |  |  |\n * | | | | | ,------5- if R0 != 2 JMP 3 * 3 + 1 <-----'  |  |  |  |  |  |\n * | | | | | |         R0 = 3                            |  |  |  |  |  |\n * | | | | | |         JMP -4 * 3               ---------'  |  |  |  |  |\n * | | | | | | ,----6- if R0 != 4 JMP 2 * 3 + 1 <-----------'  |  |  |  |\n * | | | | | | |       R0 = 5                                  |  |  |  |\n * | | | | | | |       JMP -6 * 3               ---------------'  |  |  |\n * | | | | | | | ,--7- if R0 != 6 JMP 1 * 3 + 1 <-----------------'  |  |\n * | | | | | | | |     R0 = 7                                        |  |\n * | | Error | | |     JMP -8 * 3               ---------------------'  |\n * | | paths | | | ,8- if R0 != 8 JMP 0 * 3 + 1 <-----------------------'\n * | | | | | | | | |   R0 = 9__________________Sequence: 3 * size - 1 insns\n * `-+-+-+-+-+-+-+-+-> EXIT____________________Return: 1 insn\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/lib/test_bpf.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/lib/textsearch.c#L11-L97",
    "ascii": "/**\n * DOC: ts_intro\n * INTRODUCTION\n *\n *   The textsearch infrastructure provides text searching facilities for\n *   both linear and non-linear data. Individual search algorithms are\n *   implemented in modules and chosen by the user.\n *\n * ARCHITECTURE\n *\n * .. code-block:: none\n *\n *     User\n *     +----------------+\n *     |        finish()|<--------------(6)-----------------+\n *     |get_next_block()|<--------------(5)---------------+ |\n *     |                |                     Algorithm   | |\n *     |                |                    +------------------------------+\n *     |                |                    |  init()   find()   destroy() |\n *     |                |                    +------------------------------+\n *     |                |       Core API           ^       ^          ^\n *     |                |      +---------------+  (2)     (4)        (8)\n *     |             (1)|----->| prepare()     |---+       |          |\n *     |             (3)|----->| find()/next() |-----------+          |\n *     |             (7)|----->| destroy()     |----------------------+\n *     +----------------+      +---------------+\n *\n *   (1) User configures a search by calling textsearch_prepare() specifying\n *       the search parameters such as the pattern and algorithm name.\n *   (2) Core requests the algorithm to allocate and initialize a search\n *       configuration according to the specified parameters.\n *   (3) User starts the search(es) by calling textsearch_find() or\n *       textsearch_next() to fetch subsequent occurrences. A state variable\n *       is provided to the algorithm to store persistent variables.\n *   (4) Core eventually resets the search offset and forwards the find()\n *       request to the algorithm.\n *   (5) Algorithm calls get_next_block() provided by the user continuously\n *       to fetch the data to be searched in block by block.\n *   (6) Algorithm invokes finish() after the last call to get_next_block\n *       to clean up any leftovers from get_next_block. (Optional)\n *   (7) User destroys the configuration by calling textsearch_destroy().\n *   (8) Core notifies the algorithm to destroy algorithm specific\n *       allocations. (Optional)\n *\n * USAGE\n *\n *   Before a search can be performed, a configuration must be created\n *   by calling textsearch_prepare() specifying the searching algorithm,\n *   the pattern to look for and flags. As a flag, you can set TS_IGNORECASE\n *   to perform case insensitive matching. But it might slow down\n *   performance of algorithm, so you should use it at own your risk.\n *   The returned configuration may then be used for an arbitrary\n *   amount of times and even in parallel as long as a separate struct\n *   ts_state variable is provided to every instance.\n *\n *   The actual search is performed by either calling\n *   textsearch_find_continuous() for linear data or by providing\n *   an own get_next_block() implementation and\n *   calling textsearch_find(). Both functions return\n *   the position of the first occurrence of the pattern or UINT_MAX if\n *   no match was found. Subsequent occurrences can be found by calling\n *   textsearch_next() regardless of the linearity of the data.\n *\n *   Once you're done using a configuration it must be given back via\n *   textsearch_destroy.\n *\n * EXAMPLE::\n *\n *   int pos;\n *   struct ts_config *conf;\n *   struct ts_state state;\n *   const char *pattern = \"chicken\";\n *   const char *example = \"We dance the funky chicken\";\n *\n *   conf = textsearch_prepare(\"kmp\", pattern, strlen(pattern),\n *                             GFP_KERNEL, TS_AUTOLOAD);\n *   if (IS_ERR(conf)) {\n *       err = PTR_ERR(conf);\n *       goto errout;\n *   }\n *\n *   pos = textsearch_find_continuous(conf, &state, example, strlen(example));\n *   if (pos != UINT_MAX)\n *       panic(\"Oh my god, dancing chickens at %d\\n\", pos);\n *\n *   textsearch_destroy(conf);\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/lib/textsearch.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/lib/zlib_inflate/inflate.h#L50-L71",
    "ascii": "/*\n    State transitions between above modes -\n\n    (most modes can go to the BAD or MEM mode -- not shown for clarity)\n    Process header:\n        HEAD -> (gzip) or (zlib)\n        (gzip) -> FLAGS -> TIME -> OS -> EXLEN -> EXTRA -> NAME\n        NAME -> COMMENT -> HCRC -> TYPE\n        (zlib) -> DICTID or TYPE\n        DICTID -> DICT -> TYPE\n    Read deflate blocks:\n            TYPE -> STORED or TABLE or LEN or CHECK\n            STORED -> COPY -> TYPE\n            TABLE -> LENLENS -> CODELENS -> LEN\n    Read deflate codes:\n                LEN -> LENEXT or LIT or TYPE\n                LENEXT -> DIST -> DISTEXT -> MATCH -> LEN\n                LIT -> LEN\n    Process trailer:\n        CHECK -> LENGTH -> DONE\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/lib/zlib_inflate/inflate.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/mm/filemap.c#L2344-L2358",
    "ascii": "/*\n * CD/DVDs are error prone. When a medium error occurs, the driver may fail\n * a _large_ part of the i/o request. Imagine the worst scenario:\n *\n *      ---R__________________________________________B__________\n *         ^ reading here                             ^ bad block(assume 4k)\n *\n * read(R) => miss => readahead(R...B) => media error => frustrating retries\n * => failing the whole request => read(R) => read(R+1) =>\n * readahead(R+1...B+1) => bang => read(R+2) => read(R+3) =>\n * readahead(R+3...B+2) => bang => read(R+3) => read(R+4) =>\n * readahead(R+4...B+3) => bang => read(R+4) => read(R+5) => ......\n *\n * It is going insane. Fix it by quickly scaling down the readahead size.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/mm/filemap.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/mm/page-writeback.c#L895-L908",
    "ascii": "/*\n *                           setpoint - dirty 3\n *        f(dirty) := 1.0 + (----------------)\n *                           limit - setpoint\n *\n * it's a 3rd order polynomial that subjects to\n *\n * (1) f(freerun)  = 2.0 => rampup dirty_ratelimit reasonably fast\n * (2) f(setpoint) = 1.0 => the balance point\n * (3) f(limit)    = 0   => the hard limit\n * (4) df/dx      <= 0\t => negative feedback control\n * (5) the closer to setpoint, the smaller |df/dx| (and the reverse)\n *     => fast response on large errors; small oscillation near setpoint\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/mm/page-writeback.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/mm/vmalloc.c#L1042-L1068",
    "ascii": "/*\n * This function populates subtree_max_size from bottom to upper\n * levels starting from VA point. The propagation must be done\n * when VA size is modified by changing its va_start/va_end. Or\n * in case of newly inserting of VA to the tree.\n *\n * It means that __augment_tree_propagate_from() must be called:\n * - After VA has been inserted to the tree(free path);\n * - After VA has been shrunk(allocation path);\n * - After VA has been increased(merging path).\n *\n * Please note that, it does not mean that upper parent nodes\n * and their subtree_max_size are recalculated all the time up\n * to the root node.\n *\n *       4--8\n *        /\\\n *       /  \\\n *      /    \\\n *    2--2  8--8\n *\n * For example if we modify the node 4, shrinking it to 2, then\n * no any modification is required. If we shrink the node 2 to 1\n * its subtree_max_size is updated only, and set to 1. If we shrink\n * the node 8 to 6, then its subtree_max_size is set to 6 and parent\n * node becomes 4--6.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/mm/vmalloc.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/ceph/striper.c#L11-L23",
    "ascii": "/*\n * Map a file extent to a stripe unit within an object.\n * Fill in objno, offset into object, and object extent length (i.e. the\n * number of bytes mapped, less than or equal to @l->stripe_unit).\n *\n * Example for stripe_count = 3, stripes_per_object = 4:\n *\n * blockno   |  0  3  6  9 |  1  4  7 10 |  2  5  8 11 | 12 15 18 21 | 13 16 19\n * stripeno  |  0  1  2  3 |  0  1  2  3 |  0  1  2  3 |  4  5  6  7 |  4  5  6\n * stripepos |      0      |      1      |      2      |      0      |      1\n * objno     |      0      |      1      |      2      |      3      |      4\n * objsetno  |                    0                    |                    1\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/ceph/striper.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/dsa/tag_lan9303.c#L12-L31",
    "ascii": "/* To define the outgoing port and to discover the incoming port a regular\n * VLAN tag is used by the LAN9303. But its VID meaning is 'special':\n *\n *       Dest MAC       Src MAC        TAG    Type\n * ...| 1 2 3 4 5 6 | 1 2 3 4 5 6 | 1 2 3 4 | 1 2 |...\n *                                |<------->|\n * TAG:\n *    |<------------->|\n *    |  1  2 | 3  4  |\n *      TPID    VID\n *     0x8100\n *\n * VID bit 3 indicates a request for an ALR lookup.\n *\n * If VID bit 3 is zero, then bits 0 and 1 specify the destination port\n * (0, 1, 2) or broadcast (3) or the source port (1, 2).\n *\n * VID bit 4 is used to specify if the STP port state should be overridden.\n * Required when no forwarding between the external ports should happen.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/dsa/tag_lan9303.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/mips/include/asm/dma.h#L29-L75",
    "ascii": "/*\n * NOTES about DMA transfers:\n *\n *  controller 1: channels 0-3, byte operations, ports 00-1F\n *  controller 2: channels 4-7, word operations, ports C0-DF\n *\n *  - ALL registers are 8 bits only, regardless of transfer size\n *  - channel 4 is not used - cascades 1 into 2.\n *  - channels 0-3 are byte - addresses/counts are for physical bytes\n *  - channels 5-7 are word - addresses/counts are for physical words\n *  - transfers must not cross physical 64K (0-3) or 128K (5-7) boundaries\n *  - transfer count loaded to registers is 1 less than actual count\n *  - controller 2 offsets are all even (2x offsets for controller 1)\n *  - page registers for 5-7 don't use data bit 0, represent 128K pages\n *  - page registers for 0-3 use bit 0, represent 64K pages\n *\n * DMA transfers are limited to the lower 16MB of _physical_ memory.\n * Note that addresses loaded into registers must be _physical_ addresses,\n * not logical addresses (which may differ if paging is active).\n *\n *  Address mapping for channels 0-3:\n *\n *   A23 ... A16 A15 ... A8  A7 ... A0\t  (Physical addresses)\n *    |\t ...  |\t  |  ... |   |\t... |\n *    |\t ...  |\t  |  ... |   |\t... |\n *    |\t ...  |\t  |  ... |   |\t... |\n *   P7\t ...  P0  A7 ... A0  A7 ... A0\n * |\tPage\t| Addr MSB | Addr LSB |\t  (DMA registers)\n *\n *  Address mapping for channels 5-7:\n *\n *   A23 ... A17 A16 A15 ... A9 A8 A7 ... A1 A0\t   (Physical addresses)\n *    |\t ...  |\t  \\   \\\t  ... \\\t \\  \\  ... \\  \\\n *    |\t ...  |\t   \\   \\   ... \\  \\  \\\t... \\  (not used)\n *    |\t ...  |\t    \\\t\\   ... \\  \\  \\\t ... \\\n *   P7\t ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0\n * |\t  Page\t    |  Addr MSB\t  |  Addr LSB  |   (DMA registers)\n *\n * Again, channels 5-7 transfer _physical_ words (16 bits), so addresses\n * and counts _must_ be word-aligned (the lowest address bit is _ignored_ at\n * the hardware level, so odd-byte transfers aren't possible).\n *\n * Transfer count (_not # bytes_) is limited to 64K, represented as actual\n * count - 1 : 64K => 0xFFFF, 1 => 0x0000.  Thus, count is always 1 or more,\n * and up to 128K bytes may be transferred on channels 5-7 in one operation.\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/mips/include/asm/dma.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/ipv4/tcp_bbr.c#L1-L58",
    "ascii": "/* Bottleneck Bandwidth and RTT (BBR) congestion control\n *\n * BBR congestion control computes the sending rate based on the delivery\n * rate (throughput) estimated from ACKs. In a nutshell:\n *\n *   On each ACK, update our model of the network path:\n *      bottleneck_bandwidth = windowed_max(delivered / elapsed, 10 round trips)\n *      min_rtt = windowed_min(rtt, 10 seconds)\n *   pacing_rate = pacing_gain * bottleneck_bandwidth\n *   cwnd = max(cwnd_gain * bottleneck_bandwidth * min_rtt, 4)\n *\n * The core algorithm does not react directly to packet losses or delays,\n * although BBR may adjust the size of next send per ACK when loss is\n * observed, or adjust the sending rate if it estimates there is a\n * traffic policer, in order to keep the drop rate reasonable.\n *\n * Here is a state transition diagram for BBR:\n *\n *             |\n *             V\n *    +---> STARTUP  ----+\n *    |        |         |\n *    |        V         |\n *    |      DRAIN   ----+\n *    |        |         |\n *    |        V         |\n *    +---> PROBE_BW ----+\n *    |      ^    |      |\n *    |      |    |      |\n *    |      +----+      |\n *    |                  |\n *    +---- PROBE_RTT <--+\n *\n * A BBR flow starts in STARTUP, and ramps up its sending rate quickly.\n * When it estimates the pipe is full, it enters DRAIN to drain the queue.\n * In steady state a BBR flow only uses PROBE_BW and PROBE_RTT.\n * A long-lived BBR flow spends the vast majority of its time remaining\n * (repeatedly) in PROBE_BW, fully probing and utilizing the pipe's bandwidth\n * in a fair manner, with a small, bounded queue. *If* a flow has been\n * continuously sending for the entire min_rtt window, and hasn't seen an RTT\n * sample that matches or decreases its min_rtt estimate for 10 seconds, then\n * it briefly enters PROBE_RTT to cut inflight to a minimum value to re-probe\n * the path's two-way propagation delay (min_rtt). When exiting PROBE_RTT, if\n * we estimated that we reached the full bw of the pipe then we enter PROBE_BW;\n * otherwise we enter STARTUP to try to fill the pipe.\n *\n * BBR is described in detail in:\n *   \"BBR: Congestion-Based Congestion Control\",\n *   Neal Cardwell, Yuchung Cheng, C. Stephen Gunn, Soheil Hassas Yeganeh,\n *   Van Jacobson. ACM Queue, Vol. 14 No. 5, September-October 2016.\n *\n * There is a public e-mail list for discussing BBR development and testing:\n *   https://groups.google.com/forum/#!forum/bbr-dev\n *\n * NOTE: BBR might be used with the fq qdisc (\"man tc-fq\") with pacing enabled,\n * otherwise TCP stack falls back to an internal pacing using one high\n * resolution timer per TCP socket and may use more resources.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/ipv4/tcp_bbr.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/ipv4/tcp_input.c#L1119-L1211",
    "ascii": "/* This procedure tags the retransmission queue when SACKs arrive.\n *\n * We have three tag bits: SACKED(S), RETRANS(R) and LOST(L).\n * Packets in queue with these bits set are counted in variables\n * sacked_out, retrans_out and lost_out, correspondingly.\n *\n * Valid combinations are:\n * Tag  InFlight\tDescription\n * 0\t1\t\t- orig segment is in flight.\n * S\t0\t\t- nothing flies, orig reached receiver.\n * L\t0\t\t- nothing flies, orig lost by net.\n * R\t2\t\t- both orig and retransmit are in flight.\n * L|R\t1\t\t- orig is lost, retransmit is in flight.\n * S|R  1\t\t- orig reached receiver, retrans is still in flight.\n * (L|S|R is logically valid, it could occur when L|R is sacked,\n *  but it is equivalent to plain S and code short-curcuits it to S.\n *  L|S is logically invalid, it would mean -1 packet in flight 8))\n *\n * These 6 states form finite state machine, controlled by the following events:\n * 1. New ACK (+SACK) arrives. (tcp_sacktag_write_queue())\n * 2. Retransmission. (tcp_retransmit_skb(), tcp_xmit_retransmit_queue())\n * 3. Loss detection event of two flavors:\n *\tA. Scoreboard estimator decided the packet is lost.\n *\t   A'. Reno \"three dupacks\" marks head of queue lost.\n *\tB. SACK arrives sacking SND.NXT at the moment, when the\n *\t   segment was retransmitted.\n * 4. D-SACK added new rule: D-SACK changes any tag to S.\n *\n * It is pleasant to note, that state diagram turns out to be commutative,\n * so that we are allowed not to be bothered by order of our actions,\n * when multiple events arrive simultaneously. (see the function below).\n *\n * Reordering detection.\n * --------------------\n * Reordering metric is maximal distance, which a packet can be displaced\n * in packet stream. With SACKs we can estimate it:\n *\n * 1. SACK fills old hole and the corresponding segment was not\n *    ever retransmitted -> reordering. Alas, we cannot use it\n *    when segment was retransmitted.\n * 2. The last flaw is solved with D-SACK. D-SACK arrives\n *    for retransmitted and already SACKed segment -> reordering..\n * Both of these heuristics are not used in Loss state, when we cannot\n * account for retransmits accurately.\n *\n * SACK block validation.\n * ----------------------\n *\n * SACK block range validation checks that the received SACK block fits to\n * the expected sequence limits, i.e., it is between SND.UNA and SND.NXT.\n * Note that SND.UNA is not included to the range though being valid because\n * it means that the receiver is rather inconsistent with itself reporting\n * SACK reneging when it should advance SND.UNA. Such SACK block this is\n * perfectly valid, however, in light of RFC2018 which explicitly states\n * that \"SACK block MUST reflect the newest segment.  Even if the newest\n * segment is going to be discarded ...\", not that it looks very clever\n * in case of head skb. Due to potentional receiver driven attacks, we\n * choose to avoid immediate execution of a walk in write queue due to\n * reneging and defer head skb's loss recovery to standard loss recovery\n * procedure that will eventually trigger (nothing forbids us doing this).\n *\n * Implements also blockage to start_seq wrap-around. Problem lies in the\n * fact that though start_seq (s) is before end_seq (i.e., not reversed),\n * there's no guarantee that it will be before snd_nxt (n). The problem\n * happens when start_seq resides between end_seq wrap (e_w) and snd_nxt\n * wrap (s_w):\n *\n *         <- outs wnd ->                          <- wrapzone ->\n *         u     e      n                         u_w   e_w  s n_w\n *         |     |      |                          |     |   |  |\n * |<------------+------+----- TCP seqno space --------------+---------->|\n * ...-- <2^31 ->|                                           |<--------...\n * ...---- >2^31 ------>|                                    |<--------...\n *\n * Current code wouldn't be vulnerable but it's better still to discard such\n * crazy SACK blocks. Doing this check for start_seq alone closes somewhat\n * similar case (end_seq after snd_nxt wrap) as earlier reversed check in\n * snd_nxt wrap -> snd_una region will then become \"well defined\", i.e.,\n * equal to the ideal case (infinite seqno space without wrap caused issues).\n *\n * With D-SACK the lower bound is extended to cover sequence space below\n * SND.UNA down to undo_marker, which is the last point of interest. Yet\n * again, D-SACK block must not to go across snd_una (for the same reason as\n * for the normal SACK blocks, explained above). But there all simplicity\n * ends, TCP might receive valid D-SACKs below that. As long as they reside\n * fully below undo_marker they do not affect behavior in anyway and can\n * therefore be safely ignored. In rare cases (which are more or less\n * theoretical ones), the D-SACK will nicely cross that boundary due to skb\n * fragmentation and packet reordering past skb's retransmission. To consider\n * them correctly, the acceptable range must be extended even more though\n * the exact amount is rather hard to quantify. However, tp->max_window can\n * be used as an exaggerated estimate.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/ipv4/tcp_input.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/netfilter/nft_set_pipapo.c#L10-L329",
    "ascii": "/**\n * DOC: Theory of Operation\n *\n *\n * Problem\n * -------\n *\n * Match packet bytes against entries composed of ranged or non-ranged packet\n * field specifiers, mapping them to arbitrary references. For example:\n *\n * ::\n *\n *               --- fields --->\n *      |    [net],[port],[net]... => [reference]\n *   entries [net],[port],[net]... => [reference]\n *      |    [net],[port],[net]... => [reference]\n *      V    ...\n *\n * where [net] fields can be IP ranges or netmasks, and [port] fields are port\n * ranges. Arbitrary packet fields can be matched.\n *\n *\n * Algorithm Overview\n * ------------------\n *\n * This algorithm is loosely inspired by [Ligatti 2010], and fundamentally\n * relies on the consideration that every contiguous range in a space of b bits\n * can be converted into b * 2 netmasks, from Theorem 3 in [Rottenstreich 2010],\n * as also illustrated in Section 9 of [Kogan 2014].\n *\n * Classification against a number of entries, that require matching given bits\n * of a packet field, is performed by grouping those bits in sets of arbitrary\n * size, and classifying packet bits one group at a time.\n *\n * Example:\n *   to match the source port (16 bits) of a packet, we can divide those 16 bits\n *   in 4 groups of 4 bits each. Given the entry:\n *      0000 0001 0101 1001\n *   and a packet with source port:\n *      0000 0001 1010 1001\n *   first and second groups match, but the third doesn't. We conclude that the\n *   packet doesn't match the given entry.\n *\n * Translate the set to a sequence of lookup tables, one per field. Each table\n * has two dimensions: bit groups to be matched for a single packet field, and\n * all the possible values of said groups (buckets). Input entries are\n * represented as one or more rules, depending on the number of composing\n * netmasks for the given field specifier, and a group match is indicated as a\n * set bit, with number corresponding to the rule index, in all the buckets\n * whose value matches the entry for a given group.\n *\n * Rules are mapped between fields through an array of x, n pairs, with each\n * item mapping a matched rule to one or more rules. The position of the pair in\n * the array indicates the matched rule to be mapped to the next field, x\n * indicates the first rule index in the next field, and n the amount of\n * next-field rules the current rule maps to.\n *\n * The mapping array for the last field maps to the desired references.\n *\n * To match, we perform table lookups using the values of grouped packet bits,\n * and use a sequence of bitwise operations to progressively evaluate rule\n * matching.\n *\n * A stand-alone, reference implementation, also including notes about possible\n * future optimisations, is available at:\n *    https://pipapo.lameexcu.se/\n *\n * Insertion\n * ---------\n *\n * - For each packet field:\n *\n *   - divide the b packet bits we want to classify into groups of size t,\n *     obtaining ceil(b / t) groups\n *\n *      Example: match on destination IP address, with t = 4: 32 bits, 8 groups\n *      of 4 bits each\n *\n *   - allocate a lookup table with one column (\"bucket\") for each possible\n *     value of a group, and with one row for each group\n *\n *      Example: 8 groups, 2^4 buckets:\n *\n * ::\n *\n *                     bucket\n *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n *        0\n *        1\n *        2\n *        3\n *        4\n *        5\n *        6\n *        7\n *\n *   - map the bits we want to classify for the current field, for a given\n *     entry, to a single rule for non-ranged and netmask set items, and to one\n *     or multiple rules for ranges. Ranges are expanded to composing netmasks\n *     by pipapo_expand().\n *\n *      Example: 2 entries, 10.0.0.5:1024 and 192.168.1.0-192.168.2.1:2048\n *      - rule #0: 10.0.0.5\n *      - rule #1: 192.168.1.0/24\n *      - rule #2: 192.168.2.0/31\n *\n *   - insert references to the rules in the lookup table, selecting buckets\n *     according to bit values of a rule in the given group. This is done by\n *     pipapo_insert().\n *\n *      Example: given:\n *      - rule #0: 10.0.0.5 mapping to buckets\n *        < 0 10  0 0   0 0  0 5 >\n *      - rule #1: 192.168.1.0/24 mapping to buckets\n *        < 12 0  10 8  0 1  < 0..15 > < 0..15 > >\n *      - rule #2: 192.168.2.0/31 mapping to buckets\n *        < 12 0  10 8  0 2  0 < 0..1 > >\n *\n *      these bits are set in the lookup table:\n *\n * ::\n *\n *                     bucket\n *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n *        0    0                                              1,2\n *        1   1,2                                      0\n *        2    0                                      1,2\n *        3    0                              1,2\n *        4  0,1,2\n *        5    0   1   2\n *        6  0,1,2 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n *        7   1,2 1,2  1   1   1  0,1  1   1   1   1   1   1   1   1   1   1\n *\n *   - if this is not the last field in the set, fill a mapping array that maps\n *     rules from the lookup table to rules belonging to the same entry in\n *     the next lookup table, done by pipapo_map().\n *\n *     Note that as rules map to contiguous ranges of rules, given how netmask\n *     expansion and insertion is performed, &union nft_pipapo_map_bucket stores\n *     this information as pairs of first rule index, rule count.\n *\n *      Example: 2 entries, 10.0.0.5:1024 and 192.168.1.0-192.168.2.1:2048,\n *      given lookup table #0 for field 0 (see example above):\n *\n * ::\n *\n *                     bucket\n *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n *        0    0                                              1,2\n *        1   1,2                                      0\n *        2    0                                      1,2\n *        3    0                              1,2\n *        4  0,1,2\n *        5    0   1   2\n *        6  0,1,2 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n *        7   1,2 1,2  1   1   1  0,1  1   1   1   1   1   1   1   1   1   1\n *\n *      and lookup table #1 for field 1 with:\n *      - rule #0: 1024 mapping to buckets\n *        < 0  0  4  0 >\n *      - rule #1: 2048 mapping to buckets\n *        < 0  0  5  0 >\n *\n * ::\n *\n *                     bucket\n *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n *        0   0,1\n *        1   0,1\n *        2                    0   1\n *        3   0,1\n *\n *      we need to map rules for 10.0.0.5 in lookup table #0 (rule #0) to 1024\n *      in lookup table #1 (rule #0) and rules for 192.168.1.0-192.168.2.1\n *      (rules #1, #2) to 2048 in lookup table #2 (rule #1):\n *\n * ::\n *\n *       rule indices in current field: 0    1    2\n *       map to rules in next field:    0    1    1\n *\n *   - if this is the last field in the set, fill a mapping array that maps\n *     rules from the last lookup table to element pointers, also done by\n *     pipapo_map().\n *\n *     Note that, in this implementation, we have two elements (start, end) for\n *     each entry. The pointer to the end element is stored in this array, and\n *     the pointer to the start element is linked from it.\n *\n *      Example: entry 10.0.0.5:1024 has a corresponding &struct nft_pipapo_elem\n *      pointer, 0x66, and element for 192.168.1.0-192.168.2.1:2048 is at 0x42.\n *      From the rules of lookup table #1 as mapped above:\n *\n * ::\n *\n *       rule indices in last field:    0    1\n *       map to elements:             0x66  0x42\n *\n *\n * Matching\n * --------\n *\n * We use a result bitmap, with the size of a single lookup table bucket, to\n * represent the matching state that applies at every algorithm step. This is\n * done by pipapo_lookup().\n *\n * - For each packet field:\n *\n *   - start with an all-ones result bitmap (res_map in pipapo_lookup())\n *\n *   - perform a lookup into the table corresponding to the current field,\n *     for each group, and at every group, AND the current result bitmap with\n *     the value from the lookup table bucket\n *\n * ::\n *\n *      Example: 192.168.1.5 < 12 0  10 8  0 1  0 5 >, with lookup table from\n *      insertion examples.\n *      Lookup table buckets are at least 3 bits wide, we'll assume 8 bits for\n *      convenience in this example. Initial result bitmap is 0xff, the steps\n *      below show the value of the result bitmap after each group is processed:\n *\n *                     bucket\n *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n *        0    0                                              1,2\n *        result bitmap is now: 0xff & 0x6 [bucket 12] = 0x6\n *\n *        1   1,2                                      0\n *        result bitmap is now: 0x6 & 0x6 [bucket 0] = 0x6\n *\n *        2    0                                      1,2\n *        result bitmap is now: 0x6 & 0x6 [bucket 10] = 0x6\n *\n *        3    0                              1,2\n *        result bitmap is now: 0x6 & 0x6 [bucket 8] = 0x6\n *\n *        4  0,1,2\n *        result bitmap is now: 0x6 & 0x7 [bucket 0] = 0x6\n *\n *        5    0   1   2\n *        result bitmap is now: 0x6 & 0x2 [bucket 1] = 0x2\n *\n *        6  0,1,2 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n *        result bitmap is now: 0x2 & 0x7 [bucket 0] = 0x2\n *\n *        7   1,2 1,2  1   1   1  0,1  1   1   1   1   1   1   1   1   1   1\n *        final result bitmap for this field is: 0x2 & 0x3 [bucket 5] = 0x2\n *\n *   - at the next field, start with a new, all-zeroes result bitmap. For each\n *     bit set in the previous result bitmap, fill the new result bitmap\n *     (fill_map in pipapo_lookup()) with the rule indices from the\n *     corresponding buckets of the mapping field for this field, done by\n *     pipapo_refill()\n *\n *      Example: with mapping table from insertion examples, with the current\n *      result bitmap from the previous example, 0x02:\n *\n * ::\n *\n *       rule indices in current field: 0    1    2\n *       map to rules in next field:    0    1    1\n *\n *      the new result bitmap will be 0x02: rule 1 was set, and rule 1 will be\n *      set.\n *\n *      We can now extend this example to cover the second iteration of the step\n *      above (lookup and AND bitmap): assuming the port field is\n *      2048 < 0  0  5  0 >, with starting result bitmap 0x2, and lookup table\n *      for \"port\" field from pre-computation example:\n *\n * ::\n *\n *                     bucket\n *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n *        0   0,1\n *        1   0,1\n *        2                    0   1\n *        3   0,1\n *\n *       operations are: 0x2 & 0x3 [bucket 0] & 0x3 [bucket 0] & 0x2 [bucket 5]\n *       & 0x3 [bucket 0], resulting bitmap is 0x2.\n *\n *   - if this is the last field in the set, look up the value from the mapping\n *     array corresponding to the final result bitmap\n *\n *      Example: 0x2 resulting bitmap from 192.168.1.5:2048, mapping array for\n *      last field from insertion example:\n *\n * ::\n *\n *       rule indices in last field:    0    1\n *       map to elements:             0x66  0x42\n *\n *      the matching element is at 0x42.\n *\n *\n * References\n * ----------\n *\n * [Ligatti 2010]\n *      A Packet-classification Algorithm for Arbitrary Bitmask Rules, with\n *      Automatic Time-space Tradeoffs\n *      Jay Ligatti, Josh Kuhn, and Chris Gage.\n *      Proceedings of the IEEE International Conference on Computer\n *      Communication Networks (ICCCN), August 2010.\n *      https://www.cse.usf.edu/~ligatti/papers/grouper-conf.pdf\n *\n * [Rottenstreich 2010]\n *      Worst-Case TCAM Rule Expansion\n *      Ori Rottenstreich and Isaac Keslassy.\n *      2010 Proceedings IEEE INFOCOM, San Diego, CA, 2010.\n *      http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.212.4592&rep=rep1&type=pdf\n *\n * [Kogan 2014]\n *      SAX-PAC (Scalable And eXpressive PAcket Classification)\n *      Kirill Kogan, Sergey Nikolenko, Ori Rottenstreich, William Culhane,\n *      and Patrick Eugster.\n *      Proceedings of the 2014 ACM conference on SIGCOMM, August 2014.\n *      https://www.sigcomm.org/sites/default/files/ccr/papers/2014/August/2619239-2626294.pdf\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/netfilter/nft_set_pipapo.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/netfilter/x_tables.c#L869-L911",
    "ascii": "/**\n * xt_check_entry_offsets - validate arp/ip/ip6t_entry\n *\n * @base: pointer to arp/ip/ip6t_entry\n * @elems: pointer to first xt_entry_match, i.e. ip(6)t_entry->elems\n * @target_offset: the arp/ip/ip6_t->target_offset\n * @next_offset: the arp/ip/ip6_t->next_offset\n *\n * validates that target_offset and next_offset are sane and that all\n * match sizes (if any) align with the target offset.\n *\n * This function does not validate the targets or matches themselves, it\n * only tests that all the offsets and sizes are correct, that all\n * match structures are aligned, and that the last structure ends where\n * the target structure begins.\n *\n * Also see xt_compat_check_entry_offsets for CONFIG_NETFILTER_XTABLES_COMPAT version.\n *\n * The arp/ip/ip6t_entry structure @base must have passed following tests:\n * - it must point to a valid memory location\n * - base to base + next_offset must be accessible, i.e. not exceed allocated\n *   length.\n *\n * A well-formed entry looks like this:\n *\n * ip(6)t_entry   match [mtdata]  match [mtdata] target [tgdata] ip(6)t_entry\n * e->elems[]-----'                              |               |\n *                matchsize                      |               |\n *                                matchsize      |               |\n *                                               |               |\n * target_offset---------------------------------'               |\n * next_offset---------------------------------------------------'\n *\n * elems[]: flexible array member at end of ip(6)/arpt_entry struct.\n *          This is where matches (if any) and the target reside.\n * target_offset: beginning of target.\n * next_offset: start of the next rule; also: size of this rule.\n * Since targets have a minimum size, target_offset + minlen <= next_offset.\n *\n * Every match stores its size, sum of sizes must not exceed target_offset.\n *\n * Return: 0 on success, negative errno on failure.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/netfilter/x_tables.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/sched/sch_plug.c#L43-L54",
    "ascii": "/*\n * State of the queue, when used for network output buffering:\n *\n *                 plug(i+1)            plug(i)          head\n * ------------------+--------------------+---------------->\n *                   |                    |\n *                   |                    |\n * pkts_current_epoch| pkts_last_epoch    |pkts_to_release\n * ----------------->|<--------+--------->|+--------------->\n *                   v                    v\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/sched/sch_plug.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/mips/include/asm/sn/klconfig.h#L217-L307",
    "ascii": "/*\n * The KLCONFIG area is organized as a LINKED LIST of BOARDs. A BOARD\n * can be either 'LOCAL' or 'REMOTE'. LOCAL means it is attached to\n * the LOCAL/current NODE. REMOTE means it is attached to a different\n * node.(TBD - Need a way to treat ROUTER boards.)\n *\n * There are 2 different structures to represent these boards -\n * lboard - Local board, rboard - remote board. These 2 structures\n * can be arbitrarily mixed in the LINKED LIST of BOARDs. (Refer\n * Figure below). The first byte of the rboard or lboard structure\n * is used to find out its type - no unions are used.\n * If it is a lboard, then the config info of this board will be found\n * on the local node. (LOCAL NODE BASE + offset value gives pointer to\n * the structure.\n * If it is a rboard, the local structure contains the node number\n * and the offset of the beginning of the LINKED LIST on the remote node.\n * The details of the hardware on a remote node can be built locally,\n * if required, by reading the LINKED LIST on the remote node and\n * ignoring all the rboards on that node.\n *\n * The local node uses the REMOTE NODE NUMBER + OFFSET to point to the\n * First board info on the remote node. The remote node list is\n * traversed as the local list, using the REMOTE BASE ADDRESS and not\n * the local base address and ignoring all rboard values.\n *\n *\n KLCONFIG\n\n +------------+\t     +------------+\t +------------+\t     +------------+\n |  lboard    |\t +-->|\t lboard\t  |  +-->|   rboard   |\t +-->|\t lboard\t  |\n +------------+\t |   +------------+  |\t +------------+\t |   +------------+\n | board info |\t |   | board info |  |\t |errinfo,bptr|\t |   | board info |\n +------------+\t |   +------------+  |\t +------------+\t |   +------------+\n | offset     |--+   |\toffset\t  |--+\t |  offset    |--+   |offset=NULL |\n +------------+\t     +------------+\t +------------+\t     +------------+\n\n\n +------------+\n | board info |\n +------------+\t      +--------------------------------+\n | compt 1    |------>| type, rev, diaginfo, size ...  |  (CPU)\n +------------+\t      +--------------------------------+\n | compt 2    |--+\n +------------+\t |    +--------------------------------+\n |  ...\t      |\t +--->| type, rev, diaginfo, size ...  |  (MEM_BANK)\n +------------+\t      +--------------------------------+\n | errinfo    |--+\n +------------+\t |    +--------------------------------+\n\t\t +--->|r/l brd errinfo,compt err flags |\n\t\t      +--------------------------------+\n *\n * Each BOARD consists of COMPONENTs and the BOARD structure has\n * pointers (offsets) to its COMPONENT structure.\n * The COMPONENT structure has version info, size and speed info, revision,\n * error info and the NIC info. This structure can accommodate any\n * BOARD with arbitrary COMPONENT composition.\n *\n * The ERRORINFO part of each BOARD has error information\n * that describes errors about the BOARD itself. It also has flags to\n * indicate the COMPONENT(s) on the board that have errors. The error\n * information specific to the COMPONENT is present in the respective\n * COMPONENT structure.\n *\n * The ERRORINFO structure is also treated like a COMPONENT, ie. the\n * BOARD has pointers(offset) to the ERRORINFO structure. The rboard\n * structure also has a pointer to the ERRORINFO structure. This is\n * the place to store ERRORINFO about a REMOTE NODE, if the HUB on\n * that NODE is not working or if the REMOTE MEMORY is BAD. In cases where\n * only the CPU of the REMOTE NODE is disabled, the ERRORINFO pointer can\n * be a NODE NUMBER, REMOTE OFFSET combination, pointing to error info\n * which is present on the REMOTE NODE.(TBD)\n * REMOTE ERRINFO can be stored on any of the nearest nodes\n * or on all the nearest nodes.(TBD)\n * Like BOARD structures, REMOTE ERRINFO structures can be built locally\n * using the rboard errinfo pointer.\n *\n * In order to get useful information from this Data organization, a set of\n * interface routines are provided (TBD). The important thing to remember while\n * manipulating the structures, is that, the NODE number information should\n * be used. If the NODE is non-zero (remote) then each offset should\n * be added to the REMOTE BASE ADDR else it should be added to the LOCAL BASE ADDR.\n * This includes offsets for BOARDS, COMPONENTS and ERRORINFO.\n *\n * Note that these structures do not provide much info about connectivity.\n * That info will be part of HWGRAPH, which is an extension of the cfg_t\n * data structure. (ref IP27prom/cfg.h) It has to be extended to include\n * the IO part of the Network(TBD).\n *\n * The data structures below define the above concepts.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/mips/include/asm/sn/klconfig.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/sunrpc/xprtrdma/rpc_rdma.c#L319-L332",
    "ascii": "/* Register and XDR encode the Read list. Supports encoding a list of read\n * segments that belong to a single read chunk.\n *\n * Encoding key for single-list chunks (HLOO = Handle32 Length32 Offset64):\n *\n *  Read chunklist (a linked list):\n *   N elements, position P (same P for all chunks of same arg!):\n *    1 - PHLOO - 1 - PHLOO - ... - 1 - PHLOO - 0\n *\n * Returns zero on success, or a negative errno if a failure occurred.\n * @xdr is advanced to the next position in the stream.\n *\n * Only a single @pos value is currently supported.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/sunrpc/xprtrdma/rpc_rdma.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/xdp/xsk_queue.h#L50-L90",
    "ascii": "/* The structure of the shared state of the rings are a simple\n * circular buffer, as outlined in\n * Documentation/core-api/circular-buffers.rst. For the Rx and\n * completion ring, the kernel is the producer and user space is the\n * consumer. For the Tx and fill rings, the kernel is the consumer and\n * user space is the producer.\n *\n * producer                         consumer\n *\n * if (LOAD ->consumer) {  (A)      LOAD.acq ->producer  (C)\n *    STORE $data                   LOAD $data\n *    STORE.rel ->producer (B)      STORE.rel ->consumer (D)\n * }\n *\n * (A) pairs with (D), and (B) pairs with (C).\n *\n * Starting with (B), it protects the data from being written after\n * the producer pointer. If this barrier was missing, the consumer\n * could observe the producer pointer being set and thus load the data\n * before the producer has written the new data. The consumer would in\n * this case load the old data.\n *\n * (C) protects the consumer from speculatively loading the data before\n * the producer pointer actually has been read. If we do not have this\n * barrier, some architectures could load old data as speculative loads\n * are not discarded as the CPU does not know there is a dependency\n * between ->producer and data.\n *\n * (A) is a control dependency that separates the load of ->consumer\n * from the stores of $data. In case ->consumer indicates there is no\n * room in the buffer to store $data we do not. The dependency will\n * order both of the stores after the loads. So no barrier is needed.\n *\n * (D) protects the load of the data to be observed to happen after the\n * store of the consumer pointer. If we did not have this memory\n * barrier, the producer could observe the consumer pointer being set\n * and overwrite the data with a new value before the consumer got the\n * chance to read the old value. The consumer would thus miss reading\n * the old entry and very likely read the new entry twice, once right\n * now and again after circling through the ring.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/xdp/xsk_queue.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/xfrm/xfrm_policy.c#L77-L112",
    "ascii": "/* xfrm inexact policy search tree:\n * xfrm_pol_inexact_bin = hash(dir,type,family,if_id);\n *  |\n * +---- root_d: sorted by daddr:prefix\n * |                 |\n * |        xfrm_pol_inexact_node\n * |                 |\n * |                 +- root: sorted by saddr/prefix\n * |                 |              |\n * |                 |         xfrm_pol_inexact_node\n * |                 |              |\n * |                 |              + root: unused\n * |                 |              |\n * |                 |              + hhead: saddr:daddr policies\n * |                 |\n * |                 +- coarse policies and all any:daddr policies\n * |\n * +---- root_s: sorted by saddr:prefix\n * |                 |\n * |        xfrm_pol_inexact_node\n * |                 |\n * |                 + root: unused\n * |                 |\n * |                 + hhead: saddr:any policies\n * |\n * +---- coarse policies and all any:any policies\n *\n * Lookups return four candidate lists:\n * 1. any:any list from top-level xfrm_pol_inexact_bin\n * 2. any:daddr list from daddr tree\n * 3. saddr:daddr list from 2nd level daddr tree\n * 4. saddr:any list from saddr tree\n *\n * This result set then needs to be searched for the policy with\n * the lowest priority.  If two results have same prio, youngest one wins.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/xfrm/xfrm_policy.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/core/seq/seq_prioq.c#L14-L37",
    "ascii": "/* Implementation is a simple linked list for now...\n\n   This priority queue orders the events on timestamp. For events with an\n   equeal timestamp the queue behaves as a FIFO. \n   *\n   *           +-------+\n   *  Head --> | first |\n   *           +-------+\n   *                 |next\n   *           +-----v-+\n   *           |       |\n   *           +-------+\n   *                 |\n   *           +-----v-+\n   *           |       |\n   *           +-------+\n   *                 |\n   *           +-----v-+\n   *  Tail --> | last  |\n   *           +-------+\n   *\n\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/core/seq/seq_prioq.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/drivers/mtpav.c#L142-L158",
    "ascii": "/*\n * possible hardware ports (selected by 0xf5 port message)\n *      0x00\t\tall ports\n *      0x01 .. 0x08    this MTP's ports 1..8\n *      0x09 .. 0x10    networked MTP's ports (9..16)\n *      0x11            networked MTP's computer port\n *      0x63            to ADAT\n *\n * mappig:\n *  subdevice 0 - (X-1)    ports\n *            X - (2*X-1)  networked ports\n *            X            computer\n *            X+1          ADAT\n *            X+2          all ports\n *\n *  where X = chip->num_ports\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/drivers/mtpav.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/drivers/portman2x4.c#L146-L153",
    "ascii": "/* Parallel Port Status Register BUSY and SELECT lines are multiplexed\n * between several functions.  Depending on which 2x4 \"register\" is\n * currently selected (b1..b3), the BUSY and SELECT lines are\n * assigned as follows:\n *\n *   SELECT LINE:                                                    A3 A2 A1\n *                                                                   --------\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/drivers/portman2x4.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/hda/hdac_stream.c#L17-L48",
    "ascii": "/*\n * the hdac_stream library is intended to be used with the following\n * transitions. The states are not formally defined in the code but loosely\n * inspired by boolean variables. Note that the 'prepared' field is not used\n * in this library but by the callers during the hw_params/prepare transitions\n *\n *\t\t\t   |\n *\tstream_init()\t   |\n *\t\t\t   v\n *\t\t\t+--+-------+\n *\t\t\t|  unused  |\n *\t\t\t+--+----+--+\n *\t\t\t   |    ^\n *\tstream_assign()\t   | \t|    stream_release()\n *\t\t\t   v\t|\n *\t\t\t+--+----+--+\n *\t\t\t|  opened  |\n *\t\t\t+--+----+--+\n *\t\t\t   |    ^\n *\tstream_reset()\t   |    |\n *\tstream_setup()\t   |\t|    stream_cleanup()\n *\t\t\t   v\t|\n *\t\t\t+--+----+--+\n *\t\t\t| prepared |\n *\t\t\t+--+----+--+\n *\t\t\t   |    ^\n *\tstream_start()\t   | \t|    stream_stop()\n *\t\t\t   v\t|\n *\t\t\t+--+----+--+\n *\t\t\t|  running |\n *\t\t\t+----------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/hda/hdac_stream.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/hda/hdmi_chmap.c#L11-L24",
    "ascii": "/*\n * CEA speaker placement:\n *\n *        FLH       FCH        FRH\n *  FLW    FL  FLC   FC   FRC   FR   FRW\n *\n *                                  LFE\n *                     TC\n *\n *          RL  RLC   RC   RRC   RR\n *\n * The Left/Right Surround channel _notions_ LS/RS in SMPTE 320M corresponds to\n * CEA RL/RR; The SMPTE channel _assignment_ C/LFE is swapped to CEA LFE/FC.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/hda/hdmi_chmap.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/pci/cs46xx/cs46xx_dsp_task_types.h#L17-L37",
    "ascii": "/*********************************************************************************************\nExample hierarchy of stream control blocks in the SP\nhfgTree\nPtr____Call (c)\n       \\\n -------+------         -------------      -------------      -------------      -----\n| SBlaster IF  |______\\| Foreground  |___\\| Middlegr'nd |___\\| Background  |___\\| Nul |\n|              |Goto  /| tree header |g  /| tree header |g  /| tree header |g  /| SCB |r\n -------------- (g)     -------------      -------------      -------------      -----\n       |c                     |c                 |c                 |c\n       |                      |                  |                  |\n      \\/                  -------------      -------------      -------------   \n                       | Foreground  |_\\  | Middlegr'nd |_\\  | Background  |_\\\n                       |     tree    |g/  |    tree     |g/  |     tree    |g/\n                        -------------      -------------      -------------   \n                              |c                 |c                 |c\n                              |                  |                  | \n                             \\/                 \\/                 \\/ \n*********************************************************************************************/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/pci/cs46xx/cs46xx_dsp_task_types.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/pci/ice1712/se.c#L31-L95",
    "ascii": "/*\n *  system configuration ICE_EEP2_SYSCONF=0x4b\n *    XIN1 49.152MHz\n *    not have UART\n *    one stereo ADC and a S/PDIF receiver connected\n *    four stereo DACs connected\n *\n *  AC-Link configuration ICE_EEP2_ACLINK=0x80\n *    use I2C, not use AC97\n *\n *  I2S converters feature ICE_EEP2_I2S=0x78\n *    I2S codec has no volume/mute control feature\n *    I2S codec supports 96KHz and 192KHz\n *    I2S codec 24bits\n *\n *  S/PDIF configuration ICE_EEP2_SPDIF=0xc3\n *    Enable integrated S/PDIF transmitter\n *    internal S/PDIF out implemented\n *    S/PDIF is stereo\n *    External S/PDIF out implemented\n *\n *\n * ** connected chips **\n *\n *  WM8740\n *      A 2ch-DAC of main outputs.\n *      It setuped as I2S mode by wire, so no way to setup from software.\n *      The sample-rate are automatically changed.\n *          ML/I2S (28pin) --------+\n *          MC/DM1 (27pin) -- 5V   |\n *          MD/DM0 (26pin) -- GND  |\n *          MUTEB  (25pin) -- NC   |\n *          MODE   (24pin) -- GND  |\n *          CSBIW  (23pin) --------+\n *                                 |\n *          RSTB   (22pin) --R(1K)-+\n *      Probably it reduce the noise from the control line.\n *\n *  WM8766\n *      A 6ch-DAC for surrounds.\n *      It's control wire was connected to GPIOxx (3-wire serial interface)\n *          ML/I2S (11pin) -- GPIO18\n *          MC/IWL (12pin) -- GPIO17\n *          MD/DM  (13pin) -- GPIO16\n *          MUTE   (14pin) -- GPIO01\n *\n *  WM8776\n *     A 2ch-ADC(with 10ch-selector) plus 2ch-DAC.\n *     It's control wire was connected to SDA/SCLK (2-wire serial interface)\n *          MODE (16pin) -- R(1K) -- GND\n *          CE   (17pin) -- R(1K) -- GND  2-wire mode (address=0x34)\n *          DI   (18pin) -- SDA\n *          CL   (19pin) -- SCLK\n *\n *\n * ** output pins and device names **\n *\n *   7.1ch name -- output connector color -- device (-D option)\n *\n *      FRONT 2ch                  -- green  -- plughw:0,0\n *      CENTER(Lch) SUBWOOFER(Rch) -- black  -- plughw:0,2,0\n *      SURROUND 2ch               -- orange -- plughw:0,2,1\n *      SURROUND BACK 2ch          -- white  -- plughw:0,2,2\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/pci/ice1712/se.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/codecs/hdmi-codec.c#L23-L33",
    "ascii": "/*\n * CEA speaker placement for HDMI 1.4:\n *\n *  FL  FLC   FC   FRC   FR   FRW\n *\n *                                  LFE\n *\n *  RL  RLC   RC   RRC   RR\n *\n *  Speaker placement has to be extended to support HDMI 2.0\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/codecs/hdmi-codec.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/fsl/fsl_dma.c#L298-L359",
    "ascii": "/**\n * fsl_dma_open: open a new substream.\n *\n * Each substream has its own DMA buffer.\n *\n * ALSA divides the DMA buffer into N periods.  We create NUM_DMA_LINKS link\n * descriptors that ping-pong from one period to the next.  For example, if\n * there are six periods and two link descriptors, this is how they look\n * before playback starts:\n *\n *      \t   The last link descriptor\n *   ____________  points back to the first\n *  |   \t |\n *  V   \t |\n *  ___    ___   |\n * |   |->|   |->|\n * |___|  |___|\n *   |      |\n *   |      |\n *   V      V\n *  _________________________________________\n * |      |      |      |      |      |      |  The DMA buffer is\n * |      |      |      |      |      |      |    divided into 6 parts\n * |______|______|______|______|______|______|\n *\n * and here's how they look after the first period is finished playing:\n *\n *   ____________\n *  |   \t |\n *  V   \t |\n *  ___    ___   |\n * |   |->|   |->|\n * |___|  |___|\n *   |      |\n *   |______________\n *          |       |\n *          V       V\n *  _________________________________________\n * |      |      |      |      |      |      |\n * |      |      |      |      |      |      |\n * |______|______|______|______|______|______|\n *\n * The first link descriptor now points to the third period.  The DMA\n * controller is currently playing the second period.  When it finishes, it\n * will jump back to the first descriptor and play the third period.\n *\n * There are four reasons we do this:\n *\n * 1. The only way to get the DMA controller to automatically restart the\n *    transfer when it gets to the end of the buffer is to use chaining\n *    mode.  Basic direct mode doesn't offer that feature.\n * 2. We need to receive an interrupt at the end of every period.  The DMA\n *    controller can generate an interrupt at the end of every link transfer\n *    (aka segment).  Making each period into a DMA segment will give us the\n *    interrupts we need.\n * 3. By creating only two link descriptors, regardless of the number of\n *    periods, we do not need to reallocate the link descriptors if the\n *    number of periods changes.\n * 4. All of the audio data is still stored in a single, contiguous DMA\n *    buffer, which is what ALSA expects.  We're just dividing it into\n *    contiguous parts, and creating a link descriptor for each one.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/fsl/fsl_dma.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/sh/fsi.c#L159-L174",
    "ascii": "/*\n *\tperiod/frame/sample image\n *\n * ex) PCM (2ch)\n *\n * period pos\t\t\t\t\t   period pos\n *   [n]\t\t\t\t\t     [n + 1]\n *   |<-------------------- period--------------------->|\n * ==|============================================ ... =|==\n *   |\t\t\t\t\t\t\t|\n *   ||<-----  frame ----->|<------ frame ----->|  ...\t|\n *   |+--------------------+--------------------+- ...\t|\n *   ||[ sample ][ sample ]|[ sample ][ sample ]|  ...\t|\n *   |+--------------------+--------------------+- ...\t|\n * ==|============================================ ... =|==\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/sh/fsi.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/sh/rcar/core.c#L36-L91",
    "ascii": "/*\n *\tdriver data Image\n *\n * rsnd_priv\n *   |\n *   | ** this depends on Gen1/Gen2\n *   |\n *   +- gen\n *   |\n *   | ** these depend on data path\n *   | ** gen and platform data control it\n *   |\n *   +- rdai[0]\n *   |   |\t\t sru     ssiu      ssi\n *   |   +- playback -> [mod] -> [mod] -> [mod] -> ...\n *   |   |\n *   |   |\t\t sru     ssiu      ssi\n *   |   +- capture  -> [mod] -> [mod] -> [mod] -> ...\n *   |\n *   +- rdai[1]\n *   |   |\t\t sru     ssiu      ssi\n *   |   +- playback -> [mod] -> [mod] -> [mod] -> ...\n *   |   |\n *   |   |\t\t sru     ssiu      ssi\n *   |   +- capture  -> [mod] -> [mod] -> [mod] -> ...\n *   ...\n *   |\n *   | ** these control ssi\n *   |\n *   +- ssi\n *   |  |\n *   |  +- ssi[0]\n *   |  +- ssi[1]\n *   |  +- ssi[2]\n *   |  ...\n *   |\n *   | ** these control src\n *   |\n *   +- src\n *      |\n *      +- src[0]\n *      +- src[1]\n *      +- src[2]\n *      ...\n *\n *\n * for_each_rsnd_dai(xx, priv, xx)\n *  rdai[0] => rdai[1] => rdai[2] => ...\n *\n * for_each_rsnd_mod(xx, rdai, xx)\n *  [mod] => [mod] => [mod] => ...\n *\n * rsnd_dai_call(xxx, fn )\n *  [mod]->fn() -> [mod]->fn() -> [mod]->fn()...\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/sh/rcar/core.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/sh/rcar/src.c#L56-L64",
    "ascii": "/*\n *\t\timage of SRC (Sampling Rate Converter)\n *\n * 96kHz   <-> +-----+\t48kHz\t+-----+\t 48kHz\t+-------+\n * 48kHz   <-> | SRC | <------>\t| SSI |\t<----->\t| codec |\n * 44.1kHz <-> +-----+\t\t+-----+\t\t+-------+\n * ...\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/sh/rcar/src.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/sof/core.c#L146-L184",
    "ascii": "/*\n *\t\t\tFW Boot State Transition Diagram\n *\n *    +----------------------------------------------------------------------+\n *    |\t\t\t\t\t\t\t\t\t     |\n * ------------------\t     ------------------\t\t\t\t     |\n * |\t\t    |\t     |\t\t      |\t\t\t\t     |\n * |   BOOT_FAILED  |<-------|  READY_FAILED  |\t\t\t\t     |\n * |\t\t    |<--+    |\t              |\t   ------------------\t     |\n * ------------------\t|    ------------------\t   |\t\t    |\t     |\n *\t^\t\t|\t    ^\t\t   |\tCRASHED\t    |---+    |\n *\t|\t\t|\t    |\t\t   |\t\t    |\t|    |\n * (FW Boot Timeout)\t|\t(FW_READY FAIL)\t   ------------------\t|    |\n *\t|\t\t|\t    |\t\t     ^\t\t\t|    |\n *\t|\t\t|\t    |\t\t     |(DSP Panic)\t|    |\n * ------------------\t|\t    |\t\t   ------------------\t|    |\n * |\t\t    |\t|\t    |\t\t   |\t\t    |\t|    |\n * |   IN_PROGRESS  |---------------+------------->|    COMPLETE    |\t|    |\n * |\t\t    | (FW Boot OK)   (FW_READY OK) |\t\t    |\t|    |\n * ------------------\t|\t\t\t   ------------------\t|    |\n *\t^\t\t|\t\t\t\t|\t\t|    |\n *\t|\t\t|\t\t\t\t|\t\t|    |\n * (FW Loading OK)\t|\t\t\t(System Suspend/Runtime Suspend)\n *\t|\t\t|\t\t\t\t|\t\t|    |\n *\t|\t(FW Loading Fail)\t\t\t|\t\t|    |\n * ------------------\t|\t------------------\t|\t\t|    |\n * |\t\t    |\t|\t|\t\t |<-----+\t\t|    |\n * |   PREPARE\t    |---+\t|   NOT_STARTED  |<---------------------+    |\n * |\t\t    |\t\t|\t\t |<--------------------------+\n * ------------------\t\t------------------\n *    |\t    ^\t\t\t    |\t   ^\n *    |\t    |\t\t\t    |\t   |\n *    |\t    +-----------------------+\t   |\n *    |\t\t(DSP Probe OK)\t\t   |\n *    |\t\t\t\t\t   |\n *    |\t\t\t\t\t   |\n *    +------------------------------------+\n *\t(System Suspend/Runtime Suspend)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/sof/core.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/sof/intel/hda-dsp.c#L590-L618",
    "ascii": "/*\n * Audio DSP states may transform as below:-\n *\n *                                         Opportunistic D0I3 in S0\n *     Runtime    +---------------------+  Delayed D0i3 work timeout\n *     suspend    |                     +--------------------+\n *   +------------+       D0I0(active)  |                    |\n *   |            |                     <---------------+    |\n *   |   +-------->                     |    New IPC\t|    |\n *   |   |Runtime +--^--+---------^--+--+ (via mailbox)\t|    |\n *   |   |resume     |  |         |  |\t\t\t|    |\n *   |   |           |  |         |  |\t\t\t|    |\n *   |   |     System|  |         |  |\t\t\t|    |\n *   |   |     resume|  | S3/S0IX |  |                  |    |\n *   |   |\t     |  | suspend |  | S0IX             |    |\n *   |   |           |  |         |  |suspend           |    |\n *   |   |           |  |         |  |                  |    |\n *   |   |           |  |         |  |                  |    |\n * +-v---+-----------+--v-------+ |  |           +------+----v----+\n * |                            | |  +----------->                |\n * |       D3 (suspended)       | |              |      D0I3      |\n * |                            | +--------------+                |\n * |                            |  System resume |                |\n * +----------------------------+\t\t +----------------+\n *\n * S0IX suspend: The DSP is in D0I3 if any D0I3-compatible streams\n *\t\t ignored the suspend trigger. Otherwise the DSP\n *\t\t is in D3.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/sof/intel/hda-dsp.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/ti/omap3pandora.c#L102-L109",
    "ascii": "/*\n * Audio paths on Pandora board:\n *\n *  |O| ---> PCM DAC +-> AMP -> Headphone Jack\n *  |M|         A    +--------> Line Out\n *  |A| <~~clk~~+\n *  |P| <--- TWL4030 <--------- Line In and MICs\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/ti/omap3pandora.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/usb/mixer_maps.c#L38-L54",
    "ascii": "/*\n * Topology of SB Extigy (see on the wide screen :)\n\nUSB_IN[1] --->FU[2]------------------------------+->MU[16]-->PU[17]-+->FU[18]--+->EU[27]--+->EU[21]-->FU[22]--+->FU[23] > Dig_OUT[24]\n                                                 ^                  |          |          |                   |\nUSB_IN[3] -+->SU[5]-->FU[6]--+->MU[14] ->PU[15]->+                  |          |          |                   +->FU[25] > Dig_OUT[26]\n           ^                 ^                   |                  |          |          |\nDig_IN[4] -+                 |                   |                  |          |          +->FU[28]---------------------> Spk_OUT[19]\n                             |                   |                  |          |\nLin-IN[7] -+-->FU[8]---------+                   |                  |          +----------------------------------------> Hph_OUT[20]\n           |                                     |                  |\nMic-IN[9] --+->FU[10]----------------------------+                  |\n           ||                                                       |\n           ||  +----------------------------------------------------+\n           VV  V\n           ++--+->SU[11]-->FU[12] --------------------------------------------------------------------------------------> USB_OUT[13]\n*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/usb/mixer_maps.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/usb/mixer_scarlett.c#L30-L118",
    "ascii": "/* Mixer Interface for the Focusrite Scarlett 18i6 audio interface.\n *\n * The protocol was reverse engineered by looking at communication between\n * Scarlett MixControl (v 1.2.128.0) and the Focusrite(R) Scarlett 18i6\n * (firmware v305) using wireshark and usbmon in January 2013.\n * Extended in July 2013.\n *\n * this mixer gives complete access to all features of the device:\n *  - change Impedance of inputs (Line-in, Mic / Instrument, Hi-Z)\n *  - select clock source\n *  - dynamic input to mixer-matrix assignment\n *  - 18 x 6 mixer-matrix gain stages\n *  - bus routing & volume control\n *  - automatic re-initialization on connect if device was power-cycled\n *\n * USB URB commands overview (bRequest = 0x01 = UAC2_CS_CUR)\n * wIndex\n * 0x01 Analog Input line/instrument impedance switch, wValue=0x0901 +\n *      channel, data=Line/Inst (2bytes)\n *      pad (-10dB) switch, wValue=0x0b01 + channel, data=Off/On (2bytes)\n *      ?? wValue=0x0803/04, ?? (2bytes)\n * 0x0a Master Volume, wValue=0x0200+bus[0:all + only 1..4?] data(2bytes)\n *      Bus Mute/Unmute wValue=0x0100+bus[0:all + only 1..4?], data(2bytes)\n * 0x28 Clock source, wValue=0x0100, data={1:int,2:spdif,3:adat} (1byte)\n * 0x29 Set Sample-rate, wValue=0x0100, data=sample-rate(4bytes)\n * 0x32 Mixer mux, wValue=0x0600 + mixer-channel, data=input-to-connect(2bytes)\n * 0x33 Output mux, wValue=bus, data=input-to-connect(2bytes)\n * 0x34 Capture mux, wValue=0...18, data=input-to-connect(2bytes)\n * 0x3c Matrix Mixer gains, wValue=mixer-node  data=gain(2bytes)\n *      ?? [sometimes](4bytes, e.g 0x000003be 0x000003bf ...03ff)\n *\n * USB reads: (i.e. actually issued by original software)\n * 0x01 wValue=0x0901+channel (1byte!!), wValue=0x0b01+channed (1byte!!)\n * 0x29 wValue=0x0100 sample-rate(4bytes)\n *      wValue=0x0200 ?? 1byte (only once)\n * 0x2a wValue=0x0100 ?? 4bytes, sample-rate2 ??\n *\n * USB reads with bRequest = 0x03 = UAC2_CS_MEM\n * 0x3c wValue=0x0002 1byte: sync status (locked=1)\n *      wValue=0x0000 18*2byte: peak meter (inputs)\n *      wValue=0x0001 8(?)*2byte: peak meter (mix)\n *      wValue=0x0003 6*2byte: peak meter (pcm/daw)\n *\n * USB write with bRequest = 0x03\n * 0x3c Save settings to hardware: wValue=0x005a, data=0xa5\n *\n *\n * <ditaa>\n *  /--------------\\    18chn            6chn    /--------------\\\n *  | Hardware  in +--+-------\\        /------+--+ ALSA PCM out |\n *  \\--------------/  |       |        |      |  \\--------------/\n *                    |       |        |      |\n *                    |       v        v      |\n *                    |   +---------------+   |\n *                    |    \\ Matrix  Mux /    |\n *                    |     +-----+-----+     |\n *                    |           |           |\n *                    |           | 18chn     |\n *                    |           v           |\n *                    |     +-----------+     |\n *                    |     | Mixer     |     |\n *                    |     |    Matrix |     |\n *                    |     |           |     |\n *                    |     | 18x6 Gain |     |\n *                    |     |   stages  |     |\n *                    |     +-----+-----+     |\n *                    |           |           |\n *                    |           |           |\n *                    | 18chn     | 6chn      | 6chn\n *                    v           v           v\n *                    =========================\n *             +---------------+     +--—------------+\n *              \\ Output  Mux /       \\ Capture Mux /\n *               +-----+-----+         +-----+-----+\n *                     |                     |\n *                     | 6chn                |\n *                     v                     |\n *              +-------------+              |\n *              | Master Gain |              |\n *              +------+------+              |\n *                     |                     |\n *                     | 6chn                | 18chn\n *                     | (3 stereo pairs)    |\n *  /--------------\\   |                     |   /--------------\\\n *  | Hardware out |<--/                     \\-->| ALSA PCM  in |\n *  \\--------------/                             \\--------------/\n * </ditaa>\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/usb/mixer_scarlett.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/x86/intel_hdmi_audio.c#L827-L865",
    "ascii": "/*\n * PCM ring buffer handling\n *\n * The hardware provides a ring buffer with the fixed 4 buffer descriptors\n * (BDs).  The driver maps these 4 BDs onto the PCM ring buffer.  The mapping\n * moves at each period elapsed.  The below illustrates how it works:\n *\n * At time=0\n *  PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|\n *  BD  | 0 | 1 | 2 | 3 |\n *\n * At time=1 (period elapsed)\n *  PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|\n *  BD      | 1 | 2 | 3 | 0 |\n *\n * At time=2 (second period elapsed)\n *  PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|\n *  BD          | 2 | 3 | 0 | 1 |\n *\n * The bd_head field points to the index of the BD to be read.  It's also the\n * position to be filled at next.  The pcm_head and the pcm_filled fields\n * point to the indices of the current position and of the next position to\n * be filled, respectively.  For PCM buffer there are both _head and _filled\n * because they may be difference when nperiods > 4.  For example, in the\n * example above at t=1, bd_head=1 and pcm_head=1 while pcm_filled=5:\n *\n * pcm_head (=1) --v               v-- pcm_filled (=5)\n *       PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|\n *       BD      | 1 | 2 | 3 | 0 |\n *  bd_head (=1) --^               ^-- next to fill (= bd_head)\n *\n * For nperiods < 4, the remaining BDs out of 4 are marked as invalid, so that\n * the hardware skips those BDs in the loop.\n *\n * An exceptional setup is the case with nperiods=1.  Since we have to update\n * BDs after finishing one BD processing, we'd need at least two BDs, where\n * both BDs point to the same content, the same address, the same size of the\n * whole PCM buffer.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/x86/intel_hdmi_audio.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/x86/intel_hdmi_audio.h#L40-L52",
    "ascii": "/*\n *\tCEA speaker placement:\n *\n *\tFL  FLC   FC   FRC   FR\n *\n *\t\t\t\t\t\tLFE\n *\n *\tRL  RLC   RC   RRC   RR\n *\n *\tThe Left/Right Surround channel _notions_ LS/RS in SMPTE 320M\n *\tcorresponds to CEA RL/RR; The SMPTE channel _assignment_ C/LFE is\n *\tswapped to CEA LFE/FC.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/x86/intel_hdmi_audio.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/arch/x86/include/asm/irq_vectors.h#L6-L27",
    "ascii": "/*\n * Linux IRQ vector layout.\n *\n * There are 256 IDT entries (per CPU - each entry is 8 bytes) which can\n * be defined by Linux. They are used as a jump table by the CPU when a\n * given vector is triggered - by a CPU-external, CPU-internal or\n * software-triggered event.\n *\n * Linux sets the kernel code address each entry jumps to early during\n * bootup, and never changes them. This is the general layout of the\n * IDT entries:\n *\n *  Vectors   0 ...  31 : system traps and exceptions - hardcoded events\n *  Vectors  32 ... 127 : device interrupts\n *  Vector  128         : legacy int80 syscall interface\n *  Vectors 129 ... LOCAL_TIMER_VECTOR-1\n *  Vectors LOCAL_TIMER_VECTOR ... 255 : special interrupts\n *\n * 64-bit x86 has per CPU IDT tables, 32-bit has one shared IDT table.\n *\n * This file enumerates the exact layout of them:\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/arch/x86/include/asm/irq_vectors.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/lib/bpf/libbpf.c#L6262-L6342",
    "ascii": "/*\n * Relocate sub-program calls.\n *\n * Algorithm operates as follows. Each entry-point BPF program (referred to as\n * main prog) is processed separately. For each subprog (non-entry functions,\n * that can be called from either entry progs or other subprogs) gets their\n * sub_insn_off reset to zero. This serves as indicator that this subprogram\n * hasn't been yet appended and relocated within current main prog. Once its\n * relocated, sub_insn_off will point at the position within current main prog\n * where given subprog was appended. This will further be used to relocate all\n * the call instructions jumping into this subprog.\n *\n * We start with main program and process all call instructions. If the call\n * is into a subprog that hasn't been processed (i.e., subprog->sub_insn_off\n * is zero), subprog instructions are appended at the end of main program's\n * instruction array. Then main program is \"put on hold\" while we recursively\n * process newly appended subprogram. If that subprogram calls into another\n * subprogram that hasn't been appended, new subprogram is appended again to\n * the *main* prog's instructions (subprog's instructions are always left\n * untouched, as they need to be in unmodified state for subsequent main progs\n * and subprog instructions are always sent only as part of a main prog) and\n * the process continues recursively. Once all the subprogs called from a main\n * prog or any of its subprogs are appended (and relocated), all their\n * positions within finalized instructions array are known, so it's easy to\n * rewrite call instructions with correct relative offsets, corresponding to\n * desired target subprog.\n *\n * Its important to realize that some subprogs might not be called from some\n * main prog and any of its called/used subprogs. Those will keep their\n * subprog->sub_insn_off as zero at all times and won't be appended to current\n * main prog and won't be relocated within the context of current main prog.\n * They might still be used from other main progs later.\n *\n * Visually this process can be shown as below. Suppose we have two main\n * programs mainA and mainB and BPF object contains three subprogs: subA,\n * subB, and subC. mainA calls only subA, mainB calls only subC, but subA and\n * subC both call subB:\n *\n *        +--------+ +-------+\n *        |        v v       |\n *     +--+---+ +--+-+-+ +---+--+\n *     | subA | | subB | | subC |\n *     +--+---+ +------+ +---+--+\n *        ^                  ^\n *        |                  |\n *    +---+-------+   +------+----+\n *    |   mainA   |   |   mainB   |\n *    +-----------+   +-----------+\n *\n * We'll start relocating mainA, will find subA, append it and start\n * processing sub A recursively:\n *\n *    +-----------+------+\n *    |   mainA   | subA |\n *    +-----------+------+\n *\n * At this point we notice that subB is used from subA, so we append it and\n * relocate (there are no further subcalls from subB):\n *\n *    +-----------+------+------+\n *    |   mainA   | subA | subB |\n *    +-----------+------+------+\n *\n * At this point, we relocate subA calls, then go one level up and finish with\n * relocatin mainA calls. mainA is done.\n *\n * For mainB process is similar but results in different order. We start with\n * mainB and skip subA and subB, as mainB never calls them (at least\n * directly), but we see subC is needed, so we append and start processing it:\n *\n *    +-----------+------+\n *    |   mainB   | subC |\n *    +-----------+------+\n * Now we see subC needs subB, so we go back to it, append and relocate it:\n *\n *    +-----------+------+------+\n *    |   mainB   | subC | subB |\n *    +-----------+------+------+\n *\n * At this point we unwind recursion, relocate calls in subC, then in mainB.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/lib/bpf/libbpf.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/builtin-sched.c#L2100-L2121",
    "ascii": "/*\n * Explanation of delta-time stats:\n *\n *            t = time of current schedule out event\n *        tprev = time of previous sched out event\n *                also time of schedule-in event for current task\n *    last_time = time of last sched change event for current task\n *                (i.e, time process was last scheduled out)\n * ready_to_run = time of wakeup for current task\n *\n * -----|------------|------------|------------|------\n *    last         ready        tprev          t\n *    time         to run\n *\n *      |-------- dt_wait --------|\n *                   |- dt_delay -|-- dt_run --|\n *\n *   dt_run = run time of current task\n *  dt_wait = time between last schedule out event for task and tprev\n *            represents time spent off the cpu\n * dt_delay = time between wakeup and schedule-in of task\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/builtin-sched.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/auxtrace.c#L1738-L1780",
    "ascii": "/*\n * In the compat mode kernel runs in 64-bit and perf tool runs in 32-bit mode,\n * 32-bit perf tool cannot access 64-bit value atomically, which might lead to\n * the issues caused by the below sequence on multiple CPUs: when perf tool\n * accesses either the load operation or the store operation for 64-bit value,\n * on some architectures the operation is divided into two instructions, one\n * is for accessing the low 32-bit value and another is for the high 32-bit;\n * thus these two user operations can give the kernel chances to access the\n * 64-bit value, and thus leads to the unexpected load values.\n *\n *   kernel (64-bit)                        user (32-bit)\n *\n *   if (LOAD ->aux_tail) { --,             LOAD ->aux_head_lo\n *       STORE $aux_data      |       ,--->\n *       FLUSH $aux_data      |       |     LOAD ->aux_head_hi\n *       STORE ->aux_head   --|-------`     smp_rmb()\n *   }                        |             LOAD $data\n *                            |             smp_mb()\n *                            |             STORE ->aux_tail_lo\n *                            `----------->\n *                                          STORE ->aux_tail_hi\n *\n * For this reason, it's impossible for the perf tool to work correctly when\n * the AUX head or tail is bigger than 4GB (more than 32 bits length); and we\n * can not simply limit the AUX ring buffer to less than 4GB, the reason is\n * the pointers can be increased monotonically, whatever the buffer size it is,\n * at the end the head and tail can be bigger than 4GB and carry out to the\n * high 32-bit.\n *\n * To mitigate the issues and improve the user experience, we can allow the\n * perf tool working in certain conditions and bail out with error if detect\n * any overflow cannot be handled.\n *\n * For reading the AUX head, it reads out the values for three times, and\n * compares the high 4 bytes of the values between the first time and the last\n * time, if there has no change for high 4 bytes injected by the kernel during\n * the user reading sequence, it's safe for use the second value.\n *\n * When compat_auxtrace_mmap__write_tail() detects any carrying in the high\n * 32 bits, it means there have two store operations in user space and it cannot\n * promise the atomicity for 64-bit write, so return '-1' in this case to tell\n * the caller an overflow error has happened.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": true
        }
      }
    },
    "path": "linux/tools/perf/util/auxtrace.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/bpf_counter.c#L696-L769",
    "ascii": "/*\n * bperf: share hardware PMCs with BPF\n *\n * perf uses performance monitoring counters (PMC) to monitor system\n * performance. The PMCs are limited hardware resources. For example,\n * Intel CPUs have 3x fixed PMCs and 4x programmable PMCs per cpu.\n *\n * Modern data center systems use these PMCs in many different ways:\n * system level monitoring, (maybe nested) container level monitoring, per\n * process monitoring, profiling (in sample mode), etc. In some cases,\n * there are more active perf_events than available hardware PMCs. To allow\n * all perf_events to have a chance to run, it is necessary to do expensive\n * time multiplexing of events.\n *\n * On the other hand, many monitoring tools count the common metrics\n * (cycles, instructions). It is a waste to have multiple tools create\n * multiple perf_events of \"cycles\" and occupy multiple PMCs.\n *\n * bperf tries to reduce such wastes by allowing multiple perf_events of\n * \"cycles\" or \"instructions\" (at different scopes) to share PMUs. Instead\n * of having each perf-stat session to read its own perf_events, bperf uses\n * BPF programs to read the perf_events and aggregate readings to BPF maps.\n * Then, the perf-stat session(s) reads the values from these BPF maps.\n *\n *                                ||\n *       shared progs and maps <- || -> per session progs and maps\n *                                ||\n *   ---------------              ||\n *   | perf_events |              ||\n *   ---------------       fexit  ||      -----------------\n *          |             --------||----> | follower prog |\n *       --------------- /        || ---  -----------------\n * cs -> | leader prog |/         ||/        |         |\n *   --> ---------------         /||  --------------  ------------------\n *  /       |         |         / ||  | filter map |  | accum_readings |\n * /  ------------  ------------  ||  --------------  ------------------\n * |  | prev map |  | diff map |  ||                        |\n * |  ------------  ------------  ||                        |\n *  \\                             ||                        |\n * = \\ ==================================================== | ============\n *    \\                                                    /   user space\n *     \\                                                  /\n *      \\                                                /\n *    BPF_PROG_TEST_RUN                    BPF_MAP_LOOKUP_ELEM\n *        \\                                            /\n *         \\                                          /\n *          \\------  perf-stat ----------------------/\n *\n * The figure above shows the architecture of bperf. Note that the figure\n * is divided into 3 regions: shared progs and maps (top left), per session\n * progs and maps (top right), and user space (bottom).\n *\n * The leader prog is triggered on each context switch (cs). The leader\n * prog reads perf_events and stores the difference (current_reading -\n * previous_reading) to the diff map. For the same metric, e.g. \"cycles\",\n * multiple perf-stat sessions share the same leader prog.\n *\n * Each perf-stat session creates a follower prog as fexit program to the\n * leader prog. It is possible to attach up to BPF_MAX_TRAMP_PROGS (38)\n * follower progs to the same leader prog. The follower prog checks current\n * task and processor ID to decide whether to add the value from the diff\n * map to its accumulated reading map (accum_readings).\n *\n * Finally, perf-stat user space reads the value from accum_reading map.\n *\n * Besides context switch, it is also necessary to trigger the leader prog\n * before perf-stat reads the value. Otherwise, the accum_reading map may\n * not have the latest reading from the perf_events. This is achieved by\n * triggering the event via sys_bpf(BPF_PROG_TEST_RUN) to each CPU.\n *\n * Comment before the definition of struct perf_event_attr_map_entry\n * describes how different sessions of perf-stat share information about\n * the leader prog.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/util/bpf_counter.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/evlist.h#L23-L43",
    "ascii": "/*\n * State machine of bkw_mmap_state:\n *\n *                     .________________(forbid)_____________.\n *                     |                                     V\n * NOTREADY --(0)--> RUNNING --(1)--> DATA_PENDING --(2)--> EMPTY\n *                     ^  ^              |   ^               |\n *                     |  |__(forbid)____/   |___(forbid)___/|\n *                     |                                     |\n *                      \\_________________(3)_______________/\n *\n * NOTREADY     : Backward ring buffers are not ready\n * RUNNING      : Backward ring buffers are recording\n * DATA_PENDING : We are required to collect data from backward ring buffers\n * EMPTY        : We have collected data from backward ring buffers.\n *\n * (0): Setup backward ring buffer\n * (1): Pause ring buffers for reading\n * (2): Read from ring buffers\n * (3): Resume ring buffers for recording\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/util/evlist.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/kwork.h#L35-L76",
    "ascii": "/*\n * data structure:\n *\n *                 +==================+ +============+ +======================+\n *                 |      class       | |    work    | |         atom         |\n *                 +==================+ +============+ +======================+\n * +------------+  |  +-----+         | |  +------+  | |  +-------+   +-----+ |\n * | perf_kwork | +-> | irq | --------|+-> | eth0 | --+-> | raise | - | ... | --+   +-----------+\n * +-----+------+ ||  +-----+         |||  +------+  |||  +-------+   +-----+ | |   |           |\n *       |        ||                  |||            |||                      | +-> | atom_page |\n *       |        ||                  |||            |||  +-------+   +-----+ |     |           |\n *       |  class_list                |||            |+-> | entry | - | ... | ----> |           |\n *       |        ||                  |||            |||  +-------+   +-----+ |     |           |\n *       |        ||                  |||            |||                      | +-> |           |\n *       |        ||                  |||            |||  +-------+   +-----+ | |   |           |\n *       |        ||                  |||            |+-> | exit  | - | ... | --+   +-----+-----+\n *       |        ||                  |||            | |  +-------+   +-----+ |           |\n *       |        ||                  |||            | |                      |           |\n *       |        ||                  |||  +-----+   | |                      |           |\n *       |        ||                  |+-> | ... |   | |                      |           |\n *       |        ||                  | |  +-----+   | |                      |           |\n *       |        ||                  | |            | |                      |           |\n *       |        ||  +---------+     | |  +-----+   | |  +-------+   +-----+ |           |\n *       |        +-> | softirq | -------> | RCU | ---+-> | raise | - | ... | --+   +-----+-----+\n *       |        ||  +---------+     | |  +-----+   |||  +-------+   +-----+ | |   |           |\n *       |        ||                  | |            |||                      | +-> | atom_page |\n *       |        ||                  | |            |||  +-------+   +-----+ |     |           |\n *       |        ||                  | |            |+-> | entry | - | ... | ----> |           |\n *       |        ||                  | |            |||  +-------+   +-----+ |     |           |\n *       |        ||                  | |            |||                      | +-> |           |\n *       |        ||                  | |            |||  +-------+   +-----+ | |   |           |\n *       |        ||                  | |            |+-> | exit  | - | ... | --+   +-----+-----+\n *       |        ||                  | |            | |  +-------+   +-----+ |           |\n *       |        ||                  | |            | |                      |           |\n *       |        ||  +-----------+   | |  +-----+   | |                      |           |\n *       |        +-> | workqueue | -----> | ... |   | |                      |           |\n *       |         |  +-----------+   | |  +-----+   | |                      |           |\n *       |         +==================+ +============+ +======================+           |\n *       |                                                                                |\n *       +---->  atom_page_list  ---------------------------------------------------------+\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/tools/perf/util/kwork.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/session.c#L1041-L1079",
    "ascii": "/*\n * When perf record finishes a pass on every buffers, it records this pseudo\n * event.\n * We record the max timestamp t found in the pass n.\n * Assuming these timestamps are monotonic across cpus, we know that if\n * a buffer still has events with timestamps below t, they will be all\n * available and then read in the pass n + 1.\n * Hence when we start to read the pass n + 2, we can safely flush every\n * events with timestamps below t.\n *\n *    ============ PASS n =================\n *       CPU 0         |   CPU 1\n *                     |\n *    cnt1 timestamps  |   cnt2 timestamps\n *          1          |         2\n *          2          |         3\n *          -          |         4  <--- max recorded\n *\n *    ============ PASS n + 1 ==============\n *       CPU 0         |   CPU 1\n *                     |\n *    cnt1 timestamps  |   cnt2 timestamps\n *          3          |         5\n *          4          |         6\n *          5          |         7 <---- max recorded\n *\n *      Flush every events below timestamp 4\n *\n *    ============ PASS n + 2 ==============\n *       CPU 0         |   CPU 1\n *                     |\n *    cnt1 timestamps  |   cnt2 timestamps\n *          6          |         8\n *          7          |         9\n *          -          |         10\n *\n *      Flush every events below timestamp 7\n *      etc...\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/util/session.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/stat.c#L41-L56",
    "ascii": "/*\n * http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n *\n *       (\\Sum n_i^2) - ((\\Sum n_i)^2)/n\n * s^2 = -------------------------------\n *                  n - 1\n *\n * http://en.wikipedia.org/wiki/Stddev\n *\n * The std dev of the mean is related to the std dev by:\n *\n *             s\n * s_mean = -------\n *          sqrt(n)\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": true
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/util/stat.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/trigger.h#L7-L23",
    "ascii": "/*\n * Use trigger to model operations which need to be executed when\n * an event (a signal, for example) is observed.\n *\n * States and transits:\n *\n *\n *  OFF--> ON --> READY --(hit)--> HIT\n *                 ^               |\n *                 |            (ready)\n *                 |               |\n *                  \\_____________/\n *\n * is_hit and is_ready are two key functions to query the state of\n * a trigger. is_hit means the event already happen; is_ready means the\n * trigger is waiting for the event.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/util/trigger.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/parisc/math-emu/dbl_float.h#L213-L222",
    "ascii": "/* This magnitude comparison uses the signless first words and\n * the regular part2 words.  The comparison is graphically:\n *\n *       1st greater?  -------------\n *                                 |\n *       1st less?-----------------+---------\n *                                 |        |\n *       2nd greater or equal----->|        |\n *                               False     True\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/parisc/math-emu/dbl_float.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/nvdimm/test/nfit.c#L26-L94",
    "ascii": "/*\n * Generate an NFIT table to describe the following topology:\n *\n * BUS0: Interleaved PMEM regions, and aliasing with BLK regions\n *\n *                     (a)                       (b)            DIMM   BLK-REGION\n *           +----------+--------------+----------+---------+\n * +------+  |  blk2.0  |     pm0.0    |  blk2.1  |  pm1.0  |    0      region2\n * | imc0 +--+- - - - - region0 - - - -+----------+         +\n * +--+---+  |  blk3.0  |     pm0.0    |  blk3.1  |  pm1.0  |    1      region3\n *    |      +----------+--------------v----------v         v\n * +--+---+                            |                    |\n * | cpu0 |                                    region1\n * +--+---+                            |                    |\n *    |      +-------------------------^----------^         ^\n * +--+---+  |                 blk4.0             |  pm1.0  |    2      region4\n * | imc1 +--+-------------------------+----------+         +\n * +------+  |                 blk5.0             |  pm1.0  |    3      region5\n *           +-------------------------+----------+-+-------+\n *\n * +--+---+\n * | cpu1 |\n * +--+---+                   (Hotplug DIMM)\n *    |      +----------------------------------------------+\n * +--+---+  |                 blk6.0/pm7.0                 |    4      region6/7\n * | imc0 +--+----------------------------------------------+\n * +------+\n *\n *\n * *) In this layout we have four dimms and two memory controllers in one\n *    socket.  Each unique interface (BLK or PMEM) to DPA space\n *    is identified by a region device with a dynamically assigned id.\n *\n * *) The first portion of dimm0 and dimm1 are interleaved as REGION0.\n *    A single PMEM namespace \"pm0.0\" is created using half of the\n *    REGION0 SPA-range.  REGION0 spans dimm0 and dimm1.  PMEM namespace\n *    allocate from from the bottom of a region.  The unallocated\n *    portion of REGION0 aliases with REGION2 and REGION3.  That\n *    unallacted capacity is reclaimed as BLK namespaces (\"blk2.0\" and\n *    \"blk3.0\") starting at the base of each DIMM to offset (a) in those\n *    DIMMs.  \"pm0.0\", \"blk2.0\" and \"blk3.0\" are free-form readable\n *    names that can be assigned to a namespace.\n *\n * *) In the last portion of dimm0 and dimm1 we have an interleaved\n *    SPA range, REGION1, that spans those two dimms as well as dimm2\n *    and dimm3.  Some of REGION1 allocated to a PMEM namespace named\n *    \"pm1.0\" the rest is reclaimed in 4 BLK namespaces (for each\n *    dimm in the interleave set), \"blk2.1\", \"blk3.1\", \"blk4.0\", and\n *    \"blk5.0\".\n *\n * *) The portion of dimm2 and dimm3 that do not participate in the\n *    REGION1 interleaved SPA range (i.e. the DPA address below offset\n *    (b) are also included in the \"blk4.0\" and \"blk5.0\" namespaces.\n *    Note, that BLK namespaces need not be contiguous in DPA-space, and\n *    can consume aliased capacity from multiple interleave sets.\n *\n * BUS1: Legacy NVDIMM (single contiguous range)\n *\n *  region2\n * +---------------------+\n * |---------------------|\n * ||       pm2.0       ||\n * |---------------------|\n * +---------------------+\n *\n * *) A NFIT-table may describe a simple system-physical-address range\n *    with no BLK aliasing.  This type of region may optionally\n *    reference an NVDIMM.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/nvdimm/test/nfit.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/bpf/progs/test_tcp_estats.c#L8-L33",
    "ascii": "/* This program shows clang/llvm is able to generate code pattern\n * like:\n *   _tcp_send_active_reset:\n *      0:       bf 16 00 00 00 00 00 00         r6 = r1\n *    ......\n *    335:       b7 01 00 00 0f 00 00 00         r1 = 15\n *    336:       05 00 48 00 00 00 00 00         goto 72\n *\n *   LBB0_3:\n *    337:       b7 01 00 00 01 00 00 00         r1 = 1\n *    338:       63 1a d0 ff 00 00 00 00         *(u32 *)(r10 - 48) = r1\n *    408:       b7 01 00 00 03 00 00 00         r1 = 3\n *\n *   LBB0_4:\n *    409:       71 a2 fe ff 00 00 00 00         r2 = *(u8 *)(r10 - 2)\n *    410:       bf a7 00 00 00 00 00 00         r7 = r10\n *    411:       07 07 00 00 b8 ff ff ff         r7 += -72\n *    412:       bf 73 00 00 00 00 00 00         r3 = r7\n *    413:       0f 13 00 00 00 00 00 00         r3 += r1\n *    414:       73 23 2d 00 00 00 00 00         *(u8 *)(r3 + 45) = r2\n *\n * From the above code snippet, the code generated by the compiler\n * is reasonable. The \"r1\" is assigned to different values in basic\n * blocks \"_tcp_send_active_reset\" and \"LBB0_3\", and used in \"LBB0_4\".\n * The verifier should be able to handle such code patterns.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/bpf/progs/test_tcp_estats.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/bpf/prog_tests/btf.c#L1185-L1191",
    "ascii": "/* Array_A  <------------------+\n *     elem_type == Array_B    |\n *                    |        |\n *                    |        |\n * Array_B  <-------- +        |\n *      elem_type == Array A --+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/bpf/prog_tests/btf.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/bpf/prog_tests/test_tunnel.c#L3-L50",
    "ascii": "/*\n * End-to-end eBPF tunnel test suite\n *   The file tests BPF network tunnel implementation.\n *\n * Topology:\n * ---------\n *     root namespace   |     at_ns0 namespace\n *                       |\n *       -----------     |     -----------\n *       | tnl dev |     |     | tnl dev |  (overlay network)\n *       -----------     |     -----------\n *       metadata-mode   |     metadata-mode\n *        with bpf       |       with bpf\n *                       |\n *       ----------      |     ----------\n *       |  veth1  | --------- |  veth0  |  (underlay network)\n *       ----------    peer    ----------\n *\n *\n *  Device Configuration\n *  --------------------\n *  root namespace with metadata-mode tunnel + BPF\n *  Device names and addresses:\n *\tveth1 IP 1: 172.16.1.200, IPv6: 00::22 (underlay)\n *\t\tIP 2: 172.16.1.20, IPv6: 00::bb (underlay)\n *\ttunnel dev <type>11, ex: gre11, IPv4: 10.1.1.200, IPv6: 1::22 (overlay)\n *\n *  Namespace at_ns0 with native tunnel\n *  Device names and addresses:\n *\tveth0 IPv4: 172.16.1.100, IPv6: 00::11 (underlay)\n *\ttunnel dev <type>00, ex: gre00, IPv4: 10.1.1.100, IPv6: 1::11 (overlay)\n *\n *\n * End-to-end ping packet flow\n *  ---------------------------\n *  Most of the tests start by namespace creation, device configuration,\n *  then ping the underlay and overlay network.  When doing 'ping 10.1.1.100'\n *  from root namespace, the following operations happen:\n *  1) Route lookup shows 10.1.1.100/24 belongs to tnl dev, fwd to tnl dev.\n *  2) Tnl device's egress BPF program is triggered and set the tunnel metadata,\n *     with local_ip=172.16.1.200, remote_ip=172.16.1.100. BPF program choose\n *     the primary or secondary ip of veth1 as the local ip of tunnel. The\n *     choice is made based on the value of bpf map local_ip_map.\n *  3) Outer tunnel header is prepended and route the packet to veth1's egress.\n *  4) veth0's ingress queue receive the tunneled packet at namespace at_ns0.\n *  5) Tunnel protocol handler, ex: vxlan_rcv, decap the packet.\n *  6) Forward the packet to the overlay tnl dev.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/bpf/prog_tests/test_tunnel.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/bpf/prog_tests/xfrm_info.c#L3-L44",
    "ascii": "/*\n * Topology:\n * ---------\n *   NS0 namespace         |   NS1 namespace        | NS2 namespace\n *                         |                        |\n *   +---------------+     |   +---------------+    |\n *   |    ipsec0     |---------|    ipsec0     |    |\n *   | 192.168.1.100 |     |   | 192.168.1.200 |    |\n *   | if_id: bpf    |     |   +---------------+    |\n *   +---------------+     |                        |\n *           |             |                        |   +---------------+\n *           |             |                        |   |    ipsec0     |\n *           \\------------------------------------------| 192.168.1.200 |\n *                         |                        |   +---------------+\n *                         |                        |\n *                         |                        | (overlay network)\n *      ------------------------------------------------------\n *                         |                        | (underlay network)\n *   +--------------+      |   +--------------+     |\n *   |    veth01    |----------|    veth10    |     |\n *   | 172.16.1.100 |      |   | 172.16.1.200 |     |\n *   ---------------+      |   +--------------+     |\n *                         |                        |\n *   +--------------+      |                        |   +--------------+\n *   |    veth02    |-----------------------------------|    veth20    |\n *   | 172.16.2.100 |      |                        |   | 172.16.2.200 |\n *   +--------------+      |                        |   +--------------+\n *\n *\n * Test Packet flow\n * -----------\n *  The tests perform 'ping 192.168.1.200' from the NS0 namespace:\n *  1) request is routed to NS0 ipsec0\n *  2) NS0 ipsec0 tc egress BPF program is triggered and sets the if_id based\n *     on the requested value. This makes the ipsec0 device in external mode\n *     select the destination tunnel\n *  3) ping reaches the other namespace (NS1 or NS2 based on which if_id was\n *     used) and response is sent\n *  4) response is received on NS0 ipsec0, tc ingress program is triggered and\n *     records the response if_id\n *  5) requested if_id is compared with received if_id\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/bpf/prog_tests/xfrm_info.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/bpf/verifier/event_output.c#L1-L25",
    "ascii": "/* instructions used to output a skb based software event, produced\n * from code snippet:\n * struct TMP {\n *  uint64_t tmp;\n * } tt;\n * tt.tmp = 5;\n * bpf_perf_event_output(skb, &connection_tracking_event_map, 0,\n *\t\t\t &tt, sizeof(tt));\n * return 1;\n *\n * the bpf assembly from llvm is:\n *        0:       b7 02 00 00 05 00 00 00         r2 = 5\n *        1:       7b 2a f8 ff 00 00 00 00         *(u64 *)(r10 - 8) = r2\n *        2:       bf a4 00 00 00 00 00 00         r4 = r10\n *        3:       07 04 00 00 f8 ff ff ff         r4 += -8\n *        4:       18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00    r2 = 0ll\n *        6:       b7 03 00 00 00 00 00 00         r3 = 0\n *        7:       b7 05 00 00 08 00 00 00         r5 = 8\n *        8:       85 00 00 00 19 00 00 00         call 25\n *        9:       b7 00 00 00 01 00 00 00         r0 = 1\n *       10:       95 00 00 00 00 00 00 00         exit\n *\n *     The reason I put the code here instead of fill_helpers is that map fixup\n *     is against the insns, instead of filled prog.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/bpf/verifier/event_output.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/powerpc/include/asm/dma.h#L41-L87",
    "ascii": "/*\n * NOTES about DMA transfers:\n *\n *  controller 1: channels 0-3, byte operations, ports 00-1F\n *  controller 2: channels 4-7, word operations, ports C0-DF\n *\n *  - ALL registers are 8 bits only, regardless of transfer size\n *  - channel 4 is not used - cascades 1 into 2.\n *  - channels 0-3 are byte - addresses/counts are for physical bytes\n *  - channels 5-7 are word - addresses/counts are for physical words\n *  - transfers must not cross physical 64K (0-3) or 128K (5-7) boundaries\n *  - transfer count loaded to registers is 1 less than actual count\n *  - controller 2 offsets are all even (2x offsets for controller 1)\n *  - page registers for 5-7 don't use data bit 0, represent 128K pages\n *  - page registers for 0-3 use bit 0, represent 64K pages\n *\n * On CHRP, the W83C553F (and VLSI Tollgate?) support full 32 bit addressing.\n * Note that addresses loaded into registers must be _physical_ addresses,\n * not logical addresses (which may differ if paging is active).\n *\n *  Address mapping for channels 0-3:\n *\n *   A23 ... A16 A15 ... A8  A7 ... A0    (Physical addresses)\n *    |  ...  |   |  ... |   |  ... |\n *    |  ...  |   |  ... |   |  ... |\n *    |  ...  |   |  ... |   |  ... |\n *   P7  ...  P0  A7 ... A0  A7 ... A0\n * |    Page    | Addr MSB | Addr LSB |   (DMA registers)\n *\n *  Address mapping for channels 5-7:\n *\n *   A23 ... A17 A16 A15 ... A9 A8 A7 ... A1 A0    (Physical addresses)\n *    |  ...  |   \\   \\   ... \\  \\  \\  ... \\  \\\n *    |  ...  |    \\   \\   ... \\  \\  \\  ... \\  (not used)\n *    |  ...  |     \\   \\   ... \\  \\  \\  ... \\\n *   P7  ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0\n * |      Page      |  Addr MSB   |  Addr LSB  |   (DMA registers)\n *\n * Again, channels 5-7 transfer _physical_ words (16 bits), so addresses\n * and counts _must_ be word-aligned (the lowest address bit is _ignored_ at\n * the hardware level, so odd-byte transfers aren't possible).\n *\n * Transfer count (_not # bytes_) is limited to 64K, represented as actual\n * count - 1 : 64K => 0xFFFF, 1 => 0x0000.  Thus, count is always 1 or more,\n * and up to 128K bytes may be transferred on channels 5-7 in one operation.\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/powerpc/include/asm/dma.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/powerpc/include/asm/kvm_ppc.h#L444-L517",
    "ascii": "/*\n * To avoid the need to unnecessarily exit fully to the host kernel, an IPI to\n * a CPU thread that's running/napping inside of a guest is by default regarded\n * as a request to wake the CPU (if needed) and continue execution within the\n * guest, potentially to process new state like externally-generated\n * interrupts or IPIs sent from within the guest itself (e.g. H_PROD/H_IPI).\n *\n * To force an exit to the host kernel, kvmppc_set_host_ipi() must be called\n * prior to issuing the IPI to set the corresponding 'host_ipi' flag in the\n * target CPU's PACA. To avoid unnecessary exits to the host, this flag should\n * be immediately cleared via kvmppc_clear_host_ipi() by the IPI handler on\n * the receiving side prior to processing the IPI work.\n *\n * NOTE:\n *\n * We currently issue an smp_mb() at the beginning of kvmppc_set_host_ipi().\n * This is to guard against sequences such as the following:\n *\n *      CPU\n *        X: smp_muxed_ipi_set_message():\n *        X:   smp_mb()\n *        X:   message[RESCHEDULE] = 1\n *        X: doorbell_global_ipi(42):\n *        X:   kvmppc_set_host_ipi(42)\n *        X:   ppc_msgsnd_sync()/smp_mb()\n *        X:   ppc_msgsnd() -> 42\n *       42: doorbell_exception(): // from CPU X\n *       42:   ppc_msgsync()\n *      105: smp_muxed_ipi_set_message():\n *      105:   smb_mb()\n *           // STORE DEFERRED DUE TO RE-ORDERING\n *    --105:   message[CALL_FUNCTION] = 1\n *    | 105: doorbell_global_ipi(42):\n *    | 105:   kvmppc_set_host_ipi(42)\n *    |  42:   kvmppc_clear_host_ipi(42)\n *    |  42: smp_ipi_demux_relaxed()\n *    |  42: // returns to executing guest\n *    |      // RE-ORDERED STORE COMPLETES\n *    ->105:   message[CALL_FUNCTION] = 1\n *      105:   ppc_msgsnd_sync()/smp_mb()\n *      105:   ppc_msgsnd() -> 42\n *       42: local_paca->kvm_hstate.host_ipi == 0 // IPI ignored\n *      105: // hangs waiting on 42 to process messages/call_single_queue\n *\n * We also issue an smp_mb() at the end of kvmppc_clear_host_ipi(). This is\n * to guard against sequences such as the following (as well as to create\n * a read-side pairing with the barrier in kvmppc_set_host_ipi()):\n *\n *      CPU\n *        X: smp_muxed_ipi_set_message():\n *        X:   smp_mb()\n *        X:   message[RESCHEDULE] = 1\n *        X: doorbell_global_ipi(42):\n *        X:   kvmppc_set_host_ipi(42)\n *        X:   ppc_msgsnd_sync()/smp_mb()\n *        X:   ppc_msgsnd() -> 42\n *       42: doorbell_exception(): // from CPU X\n *       42:   ppc_msgsync()\n *           // STORE DEFERRED DUE TO RE-ORDERING\n *    -- 42:   kvmppc_clear_host_ipi(42)\n *    |  42: smp_ipi_demux_relaxed()\n *    | 105: smp_muxed_ipi_set_message():\n *    | 105:   smb_mb()\n *    | 105:   message[CALL_FUNCTION] = 1\n *    | 105: doorbell_global_ipi(42):\n *    | 105:   kvmppc_set_host_ipi(42)\n *    |      // RE-ORDERED STORE COMPLETES\n *    -> 42:   kvmppc_clear_host_ipi(42)\n *       42: // returns to executing guest\n *      105:   ppc_msgsnd_sync()/smp_mb()\n *      105:   ppc_msgsnd() -> 42\n *       42: local_paca->kvm_hstate.host_ipi == 0 // IPI ignored\n *      105: // hangs waiting on 42 to process messages/call_single_queue\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/powerpc/include/asm/kvm_ppc.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/landlock/fs_test.c#L66-L90",
    "ascii": "/*\n * layout1 hierarchy:\n *\n * tmp\n * ├── s1d1\n * │   ├── f1\n * │   ├── f2\n * │   └── s1d2\n * │       ├── f1\n * │       ├── f2\n * │       └── s1d3\n * │           ├── f1\n * │           └── f2\n * ├── s2d1\n * │   ├── f1\n * │   └── s2d2\n * │       ├── f1\n * │       └── s2d3\n * │           ├── f1\n * │           └── f2\n * └── s3d1\n *     ├── f1\n *     └── s3d2\n *         └── s3d3\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/landlock/fs_test.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/landlock/ptrace_test.c#L131-L139",
    "ascii": "/*\n *        Parent + child domain (siblings)\n * .------.\n * |  P1  ---.          P1 -> P2 : deny\n * '------'   \\         P2 -> P1 : deny\n *         .---'--.\n *         |  P2  |\n *         '------'\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/landlock/ptrace_test.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/powerpc/pmu/ebb/ebb_handler.S#L16-L39",
    "ascii": "/* Stack layout:\n *\n *                   ^\n *  User stack       |\n *  Back chain ------+\t<- r1\t\t<-------+\n *  ...\t\t\t\t\t\t|\n *  Red zone / ABI Gap\t\t\t\t|\n *  ...\t\t\t\t\t\t|\n *  vr63\t<+\t\t\t\t|\n *  vr0\t\t |\t\t\t\t|\n *  VSCR\t |\t\t\t\t|\n *  FSCR\t |\t\t\t\t|\n *  r31\t\t | Save area\t\t\t|\n *  r0\t\t |\t\t\t\t|\n *  XER\t\t |\t\t\t\t|\n *  CTR\t\t |\t\t\t\t|\n *  LR\t\t |\t\t\t\t|\n *  CCR\t\t<+\t\t\t\t|\n *  ...\t\t<+\t\t\t\t|\n *  LR\t\t | Caller frame\t\t\t|\n *  CCR\t\t |\t\t\t\t|\n *  Back chain\t<+\t<- updated r1\t--------+\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/powerpc/pmu/ebb/ebb_handler.S"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/powerpc/mm/book3s64/hash_pgtable.c#L27-L101",
    "ascii": "/*\n * vmemmap is the starting address of the virtual address space where\n * struct pages are allocated for all possible PFNs present on the system\n * including holes and bad memory (hence sparse). These virtual struct\n * pages are stored in sequence in this virtual address space irrespective\n * of the fact whether the corresponding PFN is valid or not. This achieves\n * constant relationship between address of struct page and its PFN.\n *\n * During boot or memory hotplug operation when a new memory section is\n * added, physical memory allocation (including hash table bolting) will\n * be performed for the set of struct pages which are part of the memory\n * section. This saves memory by not allocating struct pages for PFNs\n * which are not valid.\n *\n *\t\t----------------------------------------------\n *\t\t| PHYSICAL ALLOCATION OF VIRTUAL STRUCT PAGES|\n *\t\t----------------------------------------------\n *\n *\t   f000000000000000                  c000000000000000\n * vmemmap +--------------+                  +--------------+\n *  +      |  page struct | +--------------> |  page struct |\n *  |      +--------------+                  +--------------+\n *  |      |  page struct | +--------------> |  page struct |\n *  |      +--------------+ |                +--------------+\n *  |      |  page struct | +       +------> |  page struct |\n *  |      +--------------+         |        +--------------+\n *  |      |  page struct |         |   +--> |  page struct |\n *  |      +--------------+         |   |    +--------------+\n *  |      |  page struct |         |   |\n *  |      +--------------+         |   |\n *  |      |  page struct |         |   |\n *  |      +--------------+         |   |\n *  |      |  page struct |         |   |\n *  |      +--------------+         |   |\n *  |      |  page struct |         |   |\n *  |      +--------------+         |   |\n *  |      |  page struct | +-------+   |\n *  |      +--------------+             |\n *  |      |  page struct | +-----------+\n *  |      +--------------+\n *  |      |  page struct | No mapping\n *  |      +--------------+\n *  |      |  page struct | No mapping\n *  v      +--------------+\n *\n *\t\t-----------------------------------------\n *\t\t| RELATION BETWEEN STRUCT PAGES AND PFNS|\n *\t\t-----------------------------------------\n *\n * vmemmap +--------------+                 +---------------+\n *  +      |  page struct | +-------------> |      PFN      |\n *  |      +--------------+                 +---------------+\n *  |      |  page struct | +-------------> |      PFN      |\n *  |      +--------------+                 +---------------+\n *  |      |  page struct | +-------------> |      PFN      |\n *  |      +--------------+                 +---------------+\n *  |      |  page struct | +-------------> |      PFN      |\n *  |      +--------------+                 +---------------+\n *  |      |              |\n *  |      +--------------+\n *  |      |              |\n *  |      +--------------+\n *  |      |              |\n *  |      +--------------+                 +---------------+\n *  |      |  page struct | +-------------> |      PFN      |\n *  |      +--------------+                 +---------------+\n *  |      |              |\n *  |      +--------------+\n *  |      |              |\n *  |      +--------------+                 +---------------+\n *  |      |  page struct | +-------------> |      PFN      |\n *  |      +--------------+                 +---------------+\n *  |      |  page struct | +-------------> |      PFN      |\n *  v      +--------------+                 +---------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/powerpc/mm/book3s64/hash_pgtable.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/powerpc/platforms/powernv/subcore.c#L27-L123",
    "ascii": "/*\n * Split/unsplit procedure:\n *\n * A core can be in one of three states, unsplit, 2-way split, and 4-way split.\n *\n * The mapping to subcores_per_core is simple:\n *\n *  State       | subcores_per_core\n *  ------------|------------------\n *  Unsplit     |        1\n *  2-way split |        2\n *  4-way split |        4\n *\n * The core is split along thread boundaries, the mapping between subcores and\n * threads is as follows:\n *\n *  Unsplit:\n *          ----------------------------\n *  Subcore |            0             |\n *          ----------------------------\n *  Thread  |  0  1  2  3  4  5  6  7  |\n *          ----------------------------\n *\n *  2-way split:\n *          -------------------------------------\n *  Subcore |        0        |        1        |\n *          -------------------------------------\n *  Thread  |  0   1   2   3  |  4   5   6   7  |\n *          -------------------------------------\n *\n *  4-way split:\n *          -----------------------------------------\n *  Subcore |    0    |    1    |    2    |    3    |\n *          -----------------------------------------\n *  Thread  |  0   1  |  2   3  |  4   5  |  6   7  |\n *          -----------------------------------------\n *\n *\n * Transitions\n * -----------\n *\n * It is not possible to transition between either of the split states, the\n * core must first be unsplit. The legal transitions are:\n *\n *  -----------          ---------------\n *  |         |  <---->  | 2-way split |\n *  |         |          ---------------\n *  | Unsplit |\n *  |         |          ---------------\n *  |         |  <---->  | 4-way split |\n *  -----------          ---------------\n *\n * Unsplitting\n * -----------\n *\n * Unsplitting is the simpler procedure. It requires thread 0 to request the\n * unsplit while all other threads NAP.\n *\n * Thread 0 clears HID0_POWER8_DYNLPARDIS (Dynamic LPAR Disable). This tells\n * the hardware that if all threads except 0 are napping, the hardware should\n * unsplit the core.\n *\n * Non-zero threads are sent to a NAP loop, they don't exit the loop until they\n * see the core unsplit.\n *\n * Core 0 spins waiting for the hardware to see all the other threads napping\n * and perform the unsplit.\n *\n * Once thread 0 sees the unsplit, it IPIs the secondary threads to wake them\n * out of NAP. They will then see the core unsplit and exit the NAP loop.\n *\n * Splitting\n * ---------\n *\n * The basic splitting procedure is fairly straight forward. However it is\n * complicated by the fact that after the split occurs, the newly created\n * subcores are not in a fully initialised state.\n *\n * Most notably the subcores do not have the correct value for SDR1, which\n * means they must not be running in virtual mode when the split occurs. The\n * subcores have separate timebases SPRs but these are pre-synchronised by\n * opal.\n *\n * To begin with secondary threads are sent to an assembly routine. There they\n * switch to real mode, so they are immune to the uninitialised SDR1 value.\n * Once in real mode they indicate that they are in real mode, and spin waiting\n * to see the core split.\n *\n * Thread 0 waits to see that all secondaries are in real mode, and then begins\n * the splitting procedure. It firstly sets HID0_POWER8_DYNLPARDIS, which\n * prevents the hardware from unsplitting. Then it sets the appropriate HID bit\n * to request the split, and spins waiting to see that the split has happened.\n *\n * Concurrently the secondaries will notice the split. When they do they set up\n * their SPRs, notably SDR1, and then they can return to virtual mode and exit\n * the procedure.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/powerpc/platforms/powernv/subcore.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/powerpc/xmon/spu-insns.h#L10-L113",
    "ascii": "/* SPU Opcode Table\n-=-=-= FORMAT =-=-=-\n                                             \t\t                                             \n       +----+-------+-------+-------+-------+  \t\t       +------------+-------+-------+-------+\nRRR    | op |  RC   |  RB   |  RA   |  RT   |\t\tRI7    | op         |  I7   |  RA   |  RT   |\n       +----+-------+-------+-------+-------+\t\t       +------------+-------+-------+-------+\n        0  3       1       1       2       3\t\t        0          1       1       2       3 \n                   0       7       4       1\t\t                   0       7       4       1 \n\n       +-----------+--------+-------+-------+\t\t       +---------+----------+-------+-------+\nRI8    | op        |   I8   |  RA   |  RT   |\t\tRI10   | op      |   I10    |  RA   |  RT   |\n       +-----------+--------+-------+-------+\t\t       +---------+----------+-------+-------+\n        0         9        1       2       3\t\t        0       7          1       2       3 \n                           7       4       1\t\t                           7       4       1 \n\n       +----------+-----------------+-------+\t\t       +--------+-------------------+-------+\nRI16   | op       |       I16       |  RT   |\t\tRI18   | op     |       I18         |  RT   |\n       +----------+-----------------+-------+\t\t       +--------+-------------------+-------+\n        0        8                 2       3\t\t        0      6                   2       3 \n                                   4       1\t\t                                   4       1 \n\n       +------------+-------+-------+-------+\t\t       +-------+--+-----------------+-------+\nRR     | op         |  RB   |  RA   |  RT   |\t\tLBT    | op    |RO|       I16       |  RO   |\n       +------------+-------+-------+-------+\t\t       +-------+--+-----------------+-------+\n        0          1       1       2       3\t\t        0     6  8                 2       3 \n                   0       7       4       1\t\t                                   4       1 \n\n\t\t\t\t\t\t\t       +------------+----+--+-------+-------+\n\t\t\t\t\t\t\tLBTI   | op         | // |RO|  RA   |  RO   |\n\t\t\t\t\t\t\t       +------------+----+--+-------+-------+\n\t\t\t\t\t\t\t        0          1    1  1       2       3\n\t\t\t\t\t\t\t                   0    5  7       4       1\n-=-=-= OPCODE =-=-=-\n\nOPCODE field specifies the most significant 11bit of the instruction. Some formats don't have 11bits for opcode field, and in this\ncase, bit field other than op are defined as 0s. For example, opcode of fma instruction which is RRR format is defined as 0x700,\nsince 0x700 -> 11'b11100000000, this means opcode is 4'b1110, and other 7bits are defined as 7'b0000000.\n\n-=-=-= ASM_FORMAT =-=-=-\nRRR category\t\t\t\t\t\tRI7 category                               \n\tASM_RRR\t\tmnemonic RC, RA, RB, RT\t\t        ASM_RI4         mnemonic RT, RA, I4\n\t\t\t\t\t\t\t        ASM_RI7         mnemonic RT, RA, I7\n\nRI8 category\t\t\t\t\t\tRI10 category                               \n\tASM_RUI8\tmnemonic RT, RA, UI8\t\t        ASM_AI10        mnemonic RA, I10    \n\t\t\t\t\t\t\t        ASM_RI10        mnemonic RT, RA, R10\n\t\t\t\t\t\t\t        ASM_RI10IDX     mnemonic RT, I10(RA)\n\nRI16 category\t\t\t\t\t\tRI18 category                           \n\tASM_I16W\tmnemonic I16W\t\t\t        ASM_RI18        mnemonic RT, I18\n\tASM_RI16\tmnemonic RT, I16\n\tASM_RI16W\tmnemonic RT, I16W\n\nRR category\t\t\t\t\t\tLBT category                                    \n\tASM_MFSPR\tmnemonic RT, SA\t\t\t        ASM_LBT         mnemonic brinst, brtarg \n\tASM_MTSPR\tmnemonic SA, RT\t\t\t                                                \n\tASM_NOOP\tmnemonic\t\t\tLBTI category                                   \n\tASM_RA\t\tmnemonic RA\t\t\t        ASM_LBTI        mnemonic brinst, RA     \n\tASM_RAB\t\tmnemonic RA, RB\n\tASM_RDCH\tmnemonic RT, CA\n\tASM_RR\t\tmnemonic RT, RA, RB\n\tASM_RT\t\tmnemonic RT\n\tASM_RTA\t\tmnemonic RT, RA\n\tASM_WRCH\tmnemonic CA, RT\nNote that RRR instructions have the names for RC and RT reversed from\nwhat's in the ISA, in order to put RT in the same position it appears\nfor other formats.\n\n-=-=-= DEPENDENCY =-=-=-\n\nDEPENDENCY filed consists of 5 digits. This represents which register is used as source and which register is used as target.\nThe first(most significant) digit is always 0. Then it is followd by RC, RB, RA and RT digits.\nIf the digit is 0, this means the corresponding register is not used in the instruction.\nIf the digit is 1, this means the corresponding register is used as a source in the instruction.\nIf the digit is 2, this means the corresponding register is used as a target in the instruction.\nIf the digit is 3, this means the corresponding register is used as both source and target in the instruction.\nFor example, fms instruction has 00113 as the DEPENDENCY field. This means RC is not used in this operation, RB and RA are\nused as sources and RT is the target.\n\n-=-=-= PIPE =-=-=-\n\nThis field shows which execution pipe is used for the instruction\n\npipe0 execution pipelines:\n\tFP6\tSP floating pipeline\n\tFP7\tinteger operations executed in SP floating pipeline\n\tFPD\tDP floating pipeline\n\tFX2\tFXU pipeline\n\tFX3\tRotate/Shift pipeline\n\tFXB\tByte pipeline\n\tNOP\tNo pipeline\n\npipe1 execution pipelines:\n\tBR\tBranch pipeline\n\tLNOP\tNo pipeline\n\tLS\tLoad/Store pipeline\n\tSHUF\tShuffle pipeline\n\tSPR\tSPR/CH pipeline\n\n*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/powerpc/xmon/spu-insns.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/sparc/include/uapi/asm/display7seg.h#L20-L38",
    "ascii": "/*\n * ioctl flag definitions\n *\n * POINT\t- Toggle decimal point\t(0=absent 1=present)\n * ALARM\t- Toggle alarm LED \t\t(0=green  1=red)\n * FLIP\t\t- Toggle inverted mode \t(0=normal 1=flipped)\n * bits 0-4\t- Character displayed\t(see definitions below)\n *\n * Display segments are defined as follows,\n * subject to D7S_FLIP register state:\n *\n *    a\n *   ---\n * f|   |b\n *   -g-\n * e|   |c\n *   ---\n *    d\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/sparc/include/uapi/asm/display7seg.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/sparc/include/uapi/asm/psr.h#L15-L21",
    "ascii": "/* The Sparc PSR fields are laid out as the following:\n *\n *  ------------------------------------------------------------------------\n *  | impl  | vers  | icc   | resv  | EC | EF | PIL  | S | PS | ET |  CWP  |\n *  | 31-28 | 27-24 | 23-20 | 19-14 | 13 | 12 | 11-8 | 7 | 6  | 5  |  4-0  |\n *  ------------------------------------------------------------------------\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/sparc/include/uapi/asm/psr.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/boot/compressed/efi_mixed.S#L25-L47",
    "ascii": "/*\n * When booting in 64-bit mode on 32-bit EFI firmware, startup_64_mixed_mode()\n * is the first thing that runs after switching to long mode. Depending on\n * whether the EFI handover protocol or the compat entry point was used to\n * enter the kernel, it will either branch to the 64-bit EFI handover\n * entrypoint at offset 0x390 in the image, or to the 64-bit EFI PE/COFF\n * entrypoint efi_pe_entry(). In the former case, the bootloader must provide a\n * struct bootparams pointer as the third argument, so the presence of such a\n * pointer is used to disambiguate.\n *\n *                                                             +--------------+\n *  +------------------+     +------------+            +------>| efi_pe_entry |\n *  | efi32_pe_entry   |---->|            |            |       +-----------+--+\n *  +------------------+     |            |     +------+----------------+  |\n *                           | startup_32 |---->| startup_64_mixed_mode |  |\n *  +------------------+     |            |     +------+----------------+  V\n *  | efi32_stub_entry |---->|            |            |     +------------------+\n *  +------------------+     +------------+            +---->| efi64_stub_entry |\n *                                                           +-------------+----+\n *                           +------------+     +----------+               |\n *                           | startup_64 |<----| efi_main |<--------------+\n *                           +------------+     +----------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/arch/x86/boot/compressed/efi_mixed.S"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/crypto/aria-aesni-avx-asm_64.S#L729-L738",
    "ascii": "/* AES inverse affine and S2 combined:\n *      1 1 0 0 0 0 0 1     x0     0\n *      0 1 0 0 1 0 0 0     x1     0\n *      1 1 0 0 1 1 1 1     x2     0\n *      0 1 1 0 1 0 0 1     x3     1\n *      0 1 0 0 1 1 0 0  *  x4  +  0\n *      0 1 0 1 1 0 0 0     x5     0\n *      0 0 0 0 0 1 0 1     x6     0\n *      1 1 1 0 0 1 1 1     x7     1\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/crypto/aria-aesni-avx-asm_64.S"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/events/intel/uncore_snbep.c#L277-L296",
    "ascii": "/*\n * The CPU_BUS_NUMBER MSR returns the values of the respective CPUBUSNO CSR\n * that BIOS programmed. MSR has package scope.\n * |  Bit  |  Default  |  Description\n * | [63]  |    00h    | VALID - When set, indicates the CPU bus\n *                       numbers have been initialized. (RO)\n * |[62:48]|    ---    | Reserved\n * |[47:40]|    00h    | BUS_NUM_5 - Return the bus number BIOS assigned\n *                       CPUBUSNO(5). (RO)\n * |[39:32]|    00h    | BUS_NUM_4 - Return the bus number BIOS assigned\n *                       CPUBUSNO(4). (RO)\n * |[31:24]|    00h    | BUS_NUM_3 - Return the bus number BIOS assigned\n *                       CPUBUSNO(3). (RO)\n * |[23:16]|    00h    | BUS_NUM_2 - Return the bus number BIOS assigned\n *                       CPUBUSNO(2). (RO)\n * |[15:8] |    00h    | BUS_NUM_1 - Return the bus number BIOS assigned\n *                       CPUBUSNO(1). (RO)\n * | [7:0] |    00h    | BUS_NUM_0 - Return the bus number BIOS assigned\n *                       CPUBUSNO(0). (RO)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/events/intel/uncore_snbep.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/include/asm/dma.h#L23-L69",
    "ascii": "/*\n * NOTES about DMA transfers:\n *\n *  controller 1: channels 0-3, byte operations, ports 00-1F\n *  controller 2: channels 4-7, word operations, ports C0-DF\n *\n *  - ALL registers are 8 bits only, regardless of transfer size\n *  - channel 4 is not used - cascades 1 into 2.\n *  - channels 0-3 are byte - addresses/counts are for physical bytes\n *  - channels 5-7 are word - addresses/counts are for physical words\n *  - transfers must not cross physical 64K (0-3) or 128K (5-7) boundaries\n *  - transfer count loaded to registers is 1 less than actual count\n *  - controller 2 offsets are all even (2x offsets for controller 1)\n *  - page registers for 5-7 don't use data bit 0, represent 128K pages\n *  - page registers for 0-3 use bit 0, represent 64K pages\n *\n * DMA transfers are limited to the lower 16MB of _physical_ memory.\n * Note that addresses loaded into registers must be _physical_ addresses,\n * not logical addresses (which may differ if paging is active).\n *\n *  Address mapping for channels 0-3:\n *\n *   A23 ... A16 A15 ... A8  A7 ... A0    (Physical addresses)\n *    |  ...  |   |  ... |   |  ... |\n *    |  ...  |   |  ... |   |  ... |\n *    |  ...  |   |  ... |   |  ... |\n *   P7  ...  P0  A7 ... A0  A7 ... A0\n * |    Page    | Addr MSB | Addr LSB |   (DMA registers)\n *\n *  Address mapping for channels 5-7:\n *\n *   A23 ... A17 A16 A15 ... A9 A8 A7 ... A1 A0    (Physical addresses)\n *    |  ...  |   \\   \\   ... \\  \\  \\  ... \\  \\\n *    |  ...  |    \\   \\   ... \\  \\  \\  ... \\  (not used)\n *    |  ...  |     \\   \\   ... \\  \\  \\  ... \\\n *   P7  ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0\n * |      Page      |  Addr MSB   |  Addr LSB  |   (DMA registers)\n *\n * Again, channels 5-7 transfer _physical_ words (16 bits), so addresses\n * and counts _must_ be word-aligned (the lowest address bit is _ignored_ at\n * the hardware level, so odd-byte transfers aren't possible).\n *\n * Transfer count (_not # bytes_) is limited to 64K, represented as actual\n * count - 1 : 64K => 0xFFFF, 1 => 0x0000.  Thus, count is always 1 or more,\n * and up to 128K bytes may be transferred on channels 5-7 in one operation.\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/include/asm/dma.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/kernel/apm_32.c#L2003-L2017",
    "ascii": "/*\n *  Check for clue free BIOS implementations who use\n *  the following QA technique\n *\n *      [ Write BIOS Code ]<------\n *               |                ^\n *      < Does it Compile >----N--\n *               |Y               ^\n *\t< Does it Boot Win98 >-N--\n *               |Y\n *           [Ship It]\n *\n *\tPhoenix A04  08/24/2000 is known bad (Dell Inspiron 5000e)\n *\tPhoenix A07  09/29/2000 is known good (Dell Inspiron 5000)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/kernel/apm_32.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/math-emu/div_Xsig.S#L15-L29",
    "ascii": "/*---------------------------------------------------------------------------+\n | Divide the 96 bit quantity pointed to by a, by that pointed to by b, and  |\n | put the 96 bit result at the location d.                                  |\n |                                                                           |\n | The result may not be accurate to 96 bits. It is intended for use where   |\n | a result better than 64 bits is required. The result should usually be    |\n | good to at least 94 bits.                                                 |\n | The returned result is actually divided by one half. This is done to      |\n | prevent overflow.                                                         |\n |                                                                           |\n |  .aaaaaaaaaaaaaa / .bbbbbbbbbbbbb  ->  .dddddddddddd                      |\n |                                                                           |\n |  void div_Xsig(Xsig *a, Xsig *b, Xsig *dest)                              |\n |                                                                           |\n +---------------------------------------------------------------------------*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/math-emu/div_Xsig.S"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/xen/p2m.c#L3-L62",
    "ascii": "/*\n * Xen leaves the responsibility for maintaining p2m mappings to the\n * guests themselves, but it must also access and update the p2m array\n * during suspend/resume when all the pages are reallocated.\n *\n * The logical flat p2m table is mapped to a linear kernel memory area.\n * For accesses by Xen a three-level tree linked via mfns only is set up to\n * allow the address space to be sparse.\n *\n *               Xen\n *                |\n *          p2m_top_mfn\n *              /   \\\n * p2m_mid_mfn p2m_mid_mfn\n *         /           /\n *  p2m p2m p2m ...\n *\n * The p2m_mid_mfn pages are mapped by p2m_top_mfn_p.\n *\n * The p2m_top_mfn level is limited to 1 page, so the maximum representable\n * pseudo-physical address space is:\n *  P2M_TOP_PER_PAGE * P2M_MID_PER_PAGE * P2M_PER_PAGE pages\n *\n * P2M_PER_PAGE depends on the architecture, as a mfn is always\n * unsigned long (8 bytes on 64-bit, 4 bytes on 32), leading to\n * 512 and 1024 entries respectively.\n *\n * In short, these structures contain the Machine Frame Number (MFN) of the PFN.\n *\n * However not all entries are filled with MFNs. Specifically for all other\n * leaf entries, or for the top  root, or middle one, for which there is a void\n * entry, we assume it is  \"missing\". So (for example)\n *  pfn_to_mfn(0x90909090)=INVALID_P2M_ENTRY.\n * We have a dedicated page p2m_missing with all entries being\n * INVALID_P2M_ENTRY. This page may be referenced multiple times in the p2m\n * list/tree in case there are multiple areas with P2M_PER_PAGE invalid pfns.\n *\n * We also have the possibility of setting 1-1 mappings on certain regions, so\n * that:\n *  pfn_to_mfn(0xc0000)=0xc0000\n *\n * The benefit of this is, that we can assume for non-RAM regions (think\n * PCI BARs, or ACPI spaces), we can create mappings easily because we\n * get the PFN value to match the MFN.\n *\n * For this to work efficiently we have one new page p2m_identity. All entries\n * in p2m_identity are set to INVALID_P2M_ENTRY type (Xen toolstack only\n * recognizes that and MFNs, no other fancy value).\n *\n * On lookup we spot that the entry points to p2m_identity and return the\n * identity value instead of dereferencing and returning INVALID_P2M_ENTRY.\n * If the entry points to an allocated page, we just proceed as before and\n * return the PFN. If the PFN has IDENTITY_FRAME_BIT set we unmask that in\n * appropriate functions (pfn_to_mfn).\n *\n * The reason for having the IDENTITY_FRAME_BIT instead of just returning the\n * PFN is that we could find ourselves where pfn_to_mfn(pfn)==pfn for a\n * non-identity pfn. To protect ourselves against we elect to set (and get) the\n * IDENTITY_FRAME_BIT on all identity mapped PFNs.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/xen/p2m.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/block/floppy.c#L359-L373",
    "ascii": "/* NOTE: the time values in jiffies should be in msec!\n CMOS drive type\n  |     Maximum data rate supported by drive type\n  |     |   Head load time, msec\n  |     |   |   Head unload time, msec (not used)\n  |     |   |   |     Step rate interval, usec\n  |     |   |   |     |       Time needed for spinup time (jiffies)\n  |     |   |   |     |       |      Timeout for spinning down (jiffies)\n  |     |   |   |     |       |      |   Spindown offset (where disk stops)\n  |     |   |   |     |       |      |   |     Select delay\n  |     |   |   |     |       |      |   |     |     RPS\n  |     |   |   |     |       |      |   |     |     |    Max number of tracks\n  |     |   |   |     |       |      |   |     |     |    |     Interrupt timeout\n  |     |   |   |     |       |      |   |     |     |    |     |   Max nonintlv. sectors\n  |     |   |   |     |       |      |   |     |     |    |     |   | -Max Errors- flags */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/block/floppy.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/berlin/berlin2-div.c#L18-L49",
    "ascii": "/*\n * Clock dividers in Berlin2 SoCs comprise a complex cell to select\n * input pll and divider. The virtual structure as it is used in Marvell\n * BSP code can be seen as:\n *\n *                      +---+\n * pll0 --------------->| 0 |                   +---+\n *           +---+      |(B)|--+--------------->| 0 |      +---+\n * pll1.0 -->| 0 |  +-->| 1 |  |   +--------+   |(E)|----->| 0 |   +---+\n * pll1.1 -->| 1 |  |   +---+  +-->|(C) 1:M |-->| 1 |      |(F)|-->|(G)|->\n * ...    -->|(A)|--+          |   +--------+   +---+  +-->| 1 |   +---+\n * ...    -->|   |             +-->|(D) 1:3 |----------+   +---+\n * pll1.N -->| N |                 +---------\n *           +---+\n *\n * (A) input pll clock mux controlled by               <PllSelect[1:n]>\n * (B) input pll bypass mux controlled by              <PllSwitch>\n * (C) programmable clock divider controlled by        <Select[1:n]>\n * (D) constant div-by-3 clock divider\n * (E) programmable clock divider bypass controlled by <Switch>\n * (F) constant div-by-3 clock mux controlled by       <D3Switch>\n * (G) clock gate controlled by                        <Enable>\n *\n * For whatever reason, above control signals come in two flavors:\n * - single register dividers with all bits in one register\n * - shared register dividers with bits spread over multiple registers\n *   (including signals for the same cell spread over consecutive registers)\n *\n * Also, clock gate and pll mux is not available on every div cell, so\n * we have to deal with those, too. We reuse common clock composite driver\n * for it.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/berlin/berlin2-div.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/imx/clk-imx6q.c#L289-L317",
    "ascii": "/*\n * We have to follow a strict procedure when changing the LDB clock source,\n * otherwise we risk introducing a glitch that can lock up the LDB divider.\n * Things to keep in mind:\n *\n * 1. The current and new parent clock inputs to the mux must be disabled.\n * 2. The default clock input for ldb_di0/1_clk_sel is mmdc_ch1_axi, which\n *    has no CG bit.\n * 3. pll2_pfd2_396m can not be gated if it is used as memory clock.\n * 4. In the RTL implementation of the LDB_DI_CLK_SEL muxes the top four\n *    options are in one mux and the PLL3 option along with three unused\n *    inputs is in a second mux. There is a third mux with two inputs used\n *    to decide between the first and second 4-port mux:\n *\n *    pll5_video_div 0 --|\\\n *    pll2_pfd0_352m 1 --| |_\n *    pll2_pfd2_396m 2 --| | `-|\\\n *    mmdc_ch1_axi   3 --|/    | |\n *                             | |--\n *    pll3_usb_otg   4 --|\\    | |\n *                   5 --| |_,-|/\n *                   6 --| |\n *                   7 --|/\n *\n * The ldb_di0/1_clk_sel[1:0] bits control both 4-port muxes at the same time.\n * The ldb_di0/1_clk_sel[2] bit controls the 2-port mux. The code below\n * switches the parent to the bottom mux first and then manipulates the top\n * mux to ensure that no glitch will enter the divider.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/imx/clk-imx6q.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/pxa/clk-pxa.h#L89-L104",
    "ascii": "/*\n * CKEN clock type\n * This clock takes it source from 2 possible parents :\n *  - a low power parent\n *  - a normal parent\n *\n *  +------------+     +-----------+\n *  |  Low Power | --- | x mult_lp |\n *  |    Clock   |     | / div_lp  |\\\n *  +------------+     +-----------+ \\+-----+   +-----------+\n *                                    | Mux |---| CKEN gate |\n *  +------------+     +-----------+ /+-----+   +-----------+\n *  | High Power |     | x mult_hp |/\n *  |    Clock   | --- | / div_hp  |\n *  +------------+     +-----------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/pxa/clk-pxa.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/qcom/gcc-msm8916.c#L959-L974",
    "ascii": "/*\n * This is a frequency table for \"General Purpose\" clocks.\n * These clocks can be muxed to the SoC pins and may be used by\n * external devices. They're often used as PWM source.\n *\n * Please note that MND divider must be enabled for duty-cycle\n * control to be possible. (M != N) Also since D register is configured\n * with a value multiplied by 2, and duty cycle is calculated as\n *                             (2 * D) % 2^W\n *                DutyCycle = ----------------\n *                              2 * (N % 2^W)\n * (where W = .mnd_width)\n * N must be half or less than maximum value for the register.\n * Otherwise duty-cycle control would be limited.\n * (e.g. for 8-bit NMD N should be less than 128)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/qcom/gcc-msm8916.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/rockchip/clk.c#L28-L37",
    "ascii": "/*\n * Register a clock branch.\n * Most clock branches have a form like\n *\n * src1 --|--\\\n *        |M |--[GATE]-[DIV]-\n * src2 --|--/\n *\n * sometimes without one of those components.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/rockchip/clk.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/sunxi/clk-sunxi.c#L932-L941",
    "ascii": "/*\n * sunxi_divs_clk_setup() - Setup function for leaf divisors on clocks\n *\n * These clocks look something like this\n *            ________________________\n *           |         ___divisor 1---|----> to consumer\n * parent >--|  pll___/___divisor 2---|----> to consumer\n *           |        \\_______________|____> to consumer\n *           |________________________|\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/sunxi/clk-sunxi.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arc/kernel/process.c#L131-L164",
    "ascii": "/*\n * Copy architecture-specific thread state\n *\n * Layout of Child kernel mode stack as setup at the end of this function is\n *\n * |     ...        |\n * |     ...        |\n * |    unused      |\n * |                |\n * ------------------\n * |     r25        |   <==== top of Stack (thread.ksp)\n * ~                ~\n * |    --to--      |   (CALLEE Regs of kernel mode)\n * |     r13        |\n * ------------------\n * |     fp         |\n * |    blink       |   @ret_from_fork\n * ------------------\n * |                |\n * ~                ~\n * ~                ~\n * |                |\n * ------------------\n * |     r12        |\n * ~                ~\n * |    --to--      |   (scratch Regs of user mode)\n * |     r0         |\n * ------------------\n * |      SP        |\n * |    orig_r0     |\n * |    event/ECR   |\n * |    user_r25    |\n * ------------------  <===== END of PAGE\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arc/kernel/process.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/devfreq/imx8m-ddrc.c#L37-L64",
    "ascii": "/*\n * i.MX8M DRAM Controller clocks have the following structure (abridged):\n *\n * +----------+       |\\            +------+\n * | dram_pll |-------|M| dram_core |      |\n * +----------+       |U|---------->| D    |\n *                 /--|X|           |  D   |\n *   dram_alt_root |  |/            |   R  |\n *                 |                |    C |\n *            +---------+           |      |\n *            |FIX DIV/4|           |      |\n *            +---------+           |      |\n *  composite:     |                |      |\n * +----------+    |                |      |\n * | dram_alt |----/                |      |\n * +----------+                     |      |\n * | dram_apb |-------------------->|      |\n * +----------+                     +------+\n *\n * The dram_pll is used for higher rates and dram_alt is used for lower rates.\n *\n * Frequency switching is implemented in TF-A (via SMC call) and can change the\n * configuration of the clocks, including mux parents. The dram_alt and\n * dram_apb clocks are \"imx composite\" and their parent can change too.\n *\n * We need to prepare/enable the new mux parents head of switching and update\n * their information afterwards.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/devfreq/imx8m-ddrc.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpio/gpio-mvebu.c#L468-L492",
    "ascii": "/*****************************************************************************\n * MVEBU GPIO IRQ\n *\n * GPIO_IN_POL register controls whether GPIO_DATA_IN will hold the same\n * value of the line or the opposite value.\n *\n * Level IRQ handlers: DATA_IN is used directly as cause register.\n *\t\t       Interrupt are masked by LEVEL_MASK registers.\n * Edge IRQ handlers:  Change in DATA_IN are latched in EDGE_CAUSE.\n *\t\t       Interrupt are masked by EDGE_MASK registers.\n * Both-edge handlers: Similar to regular Edge handlers, but also swaps\n *\t\t       the polarity to catch the next line transaction.\n *\t\t       This is a race condition that might not perfectly\n *\t\t       work on some use cases.\n *\n * Every eight GPIO lines are grouped (OR'ed) before going up to main\n * cause register.\n *\n *\t\t      EDGE  cause    mask\n *\t  data-in   /--------| |-----| |----\\\n *     -----| |-----\t\t\t     ---- to main cause reg\n *\t     X\t    \\----------------| |----/\n *\t  polarity    LEVEL\t     mask\n *\n ****************************************************************************/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpio/gpio-mvebu.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpio/gpio-ts5500.c#L101-L121",
    "ascii": "/*\n * TS-5500 DIO1 block\n *\n *  value    control  dir    hw\n *  addr bit addr bit in out irq name     pin offset\n *\n *  0x7b  0  0x7a  0  x   x      DIO1_0   1   0\n *  0x7b  1  0x7a  0  x   x      DIO1_1   3   1\n *  0x7b  2  0x7a  0  x   x      DIO1_2   5   2\n *  0x7b  3  0x7a  0  x   x      DIO1_3   7   3\n *  0x7b  4  0x7a  1  x   x      DIO1_4   9   4\n *  0x7b  5  0x7a  1  x   x      DIO1_5   11  5\n *  0x7b  6  0x7a  1  x   x      DIO1_6   13  6\n *  0x7b  7  0x7a  1  x   x      DIO1_7   15  7\n *  0x7c  0  0x7a  5  x   x      DIO1_8   4   8\n *  0x7c  1  0x7a  5  x   x      DIO1_9   6   9\n *  0x7c  2  0x7a  5  x   x      DIO1_10  8   10\n *  0x7c  3  0x7a  5  x   x      DIO1_11  10  11\n *  0x7c  4           x          DIO1_12  12  12\n *  0x7c  5           x      7   DIO1_13  14  13\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpio/gpio-ts5500.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/drm_blend.c#L38-L204",
    "ascii": "/**\n * DOC: overview\n *\n * The basic plane composition model supported by standard plane properties only\n * has a source rectangle (in logical pixels within the &drm_framebuffer), with\n * sub-pixel accuracy, which is scaled up to a pixel-aligned destination\n * rectangle in the visible area of a &drm_crtc. The visible area of a CRTC is\n * defined by the horizontal and vertical visible pixels (stored in @hdisplay\n * and @vdisplay) of the requested mode (stored in &drm_crtc_state.mode). These\n * two rectangles are both stored in the &drm_plane_state.\n *\n * For the atomic ioctl the following standard (atomic) properties on the plane object\n * encode the basic plane composition model:\n *\n * SRC_X:\n * \tX coordinate offset for the source rectangle within the\n * \t&drm_framebuffer, in 16.16 fixed point. Must be positive.\n * SRC_Y:\n * \tY coordinate offset for the source rectangle within the\n * \t&drm_framebuffer, in 16.16 fixed point. Must be positive.\n * SRC_W:\n * \tWidth for the source rectangle within the &drm_framebuffer, in 16.16\n * \tfixed point. SRC_X plus SRC_W must be within the width of the source\n * \tframebuffer. Must be positive.\n * SRC_H:\n * \tHeight for the source rectangle within the &drm_framebuffer, in 16.16\n * \tfixed point. SRC_Y plus SRC_H must be within the height of the source\n * \tframebuffer. Must be positive.\n * CRTC_X:\n * \tX coordinate offset for the destination rectangle. Can be negative.\n * CRTC_Y:\n * \tY coordinate offset for the destination rectangle. Can be negative.\n * CRTC_W:\n * \tWidth for the destination rectangle. CRTC_X plus CRTC_W can extend past\n * \tthe currently visible horizontal area of the &drm_crtc.\n * CRTC_H:\n * \tHeight for the destination rectangle. CRTC_Y plus CRTC_H can extend past\n * \tthe currently visible vertical area of the &drm_crtc.\n * FB_ID:\n * \tMode object ID of the &drm_framebuffer this plane should scan out.\n * CRTC_ID:\n * \tMode object ID of the &drm_crtc this plane should be connected to.\n *\n * Note that the source rectangle must fully lie within the bounds of the\n * &drm_framebuffer. The destination rectangle can lie outside of the visible\n * area of the current mode of the CRTC. It must be appropriately clipped by the\n * driver, which can be done by calling drm_plane_helper_check_update(). Drivers\n * are also allowed to round the subpixel sampling positions appropriately, but\n * only to the next full pixel. No pixel outside of the source rectangle may\n * ever be sampled, which is important when applying more sophisticated\n * filtering than just a bilinear one when scaling. The filtering mode when\n * scaling is unspecified.\n *\n * On top of this basic transformation additional properties can be exposed by\n * the driver:\n *\n * alpha:\n * \tAlpha is setup with drm_plane_create_alpha_property(). It controls the\n * \tplane-wide opacity, from transparent (0) to opaque (0xffff). It can be\n * \tcombined with pixel alpha.\n *\tThe pixel values in the framebuffers are expected to not be\n *\tpre-multiplied by the global alpha associated to the plane.\n *\n * rotation:\n *\tRotation is set up with drm_plane_create_rotation_property(). It adds a\n *\trotation and reflection step between the source and destination rectangles.\n *\tWithout this property the rectangle is only scaled, but not rotated or\n *\treflected.\n *\n *\tPossbile values:\n *\n *\t\"rotate-<degrees>\":\n *\t\tSignals that a drm plane is rotated <degrees> degrees in counter\n *\t\tclockwise direction.\n *\n *\t\"reflect-<axis>\":\n *\t\tSignals that the contents of a drm plane is reflected along the\n *\t\t<axis> axis, in the same way as mirroring.\n *\n *\treflect-x::\n *\n *\t\t\t|o |    | o|\n *\t\t\t|  | -> |  |\n *\t\t\t| v|    |v |\n *\n *\treflect-y::\n *\n *\t\t\t|o |    | ^|\n *\t\t\t|  | -> |  |\n *\t\t\t| v|    |o |\n *\n * zpos:\n *\tZ position is set up with drm_plane_create_zpos_immutable_property() and\n *\tdrm_plane_create_zpos_property(). It controls the visibility of overlapping\n *\tplanes. Without this property the primary plane is always below the cursor\n *\tplane, and ordering between all other planes is undefined. The positive\n *\tZ axis points towards the user, i.e. planes with lower Z position values\n *\tare underneath planes with higher Z position values. Two planes with the\n *\tsame Z position value have undefined ordering. Note that the Z position\n *\tvalue can also be immutable, to inform userspace about the hard-coded\n *\tstacking of planes, see drm_plane_create_zpos_immutable_property(). If\n *\tany plane has a zpos property (either mutable or immutable), then all\n *\tplanes shall have a zpos property.\n *\n * pixel blend mode:\n *\tPixel blend mode is set up with drm_plane_create_blend_mode_property().\n *\tIt adds a blend mode for alpha blending equation selection, describing\n *\thow the pixels from the current plane are composited with the\n *\tbackground.\n *\n *\t Three alpha blending equations are defined:\n *\n *\t \"None\":\n *\t\t Blend formula that ignores the pixel alpha::\n *\n *\t\t\t out.rgb = plane_alpha * fg.rgb +\n *\t\t\t\t (1 - plane_alpha) * bg.rgb\n *\n *\t \"Pre-multiplied\":\n *\t\t Blend formula that assumes the pixel color values\n *\t\t have been already pre-multiplied with the alpha\n *\t\t channel values::\n *\n *\t\t\t out.rgb = plane_alpha * fg.rgb +\n *\t\t\t\t (1 - (plane_alpha * fg.alpha)) * bg.rgb\n *\n *\t \"Coverage\":\n *\t\t Blend formula that assumes the pixel color values have not\n *\t\t been pre-multiplied and will do so when blending them to the\n *\t\t background color values::\n *\n *\t\t\t out.rgb = plane_alpha * fg.alpha * fg.rgb +\n *\t\t\t\t (1 - (plane_alpha * fg.alpha)) * bg.rgb\n *\n *\t Using the following symbols:\n *\n *\t \"fg.rgb\":\n *\t\t Each of the RGB component values from the plane's pixel\n *\t \"fg.alpha\":\n *\t\t Alpha component value from the plane's pixel. If the plane's\n *\t\t pixel format has no alpha component, then this is assumed to be\n *\t\t 1.0. In these cases, this property has no effect, as all three\n *\t\t equations become equivalent.\n *\t \"bg.rgb\":\n *\t\t Each of the RGB component values from the background\n *\t \"plane_alpha\":\n *\t\t Plane alpha value set by the plane \"alpha\" property. If the\n *\t\t plane does not expose the \"alpha\" property, then this is\n *\t\t assumed to be 1.0\n *\n * Note that all the property extensions described here apply either to the\n * plane or the CRTC (e.g. for the background color, which currently is not\n * exposed and assumed to be black).\n *\n * SCALING_FILTER:\n *     Indicates scaling filter to be used for plane scaler\n *\n *     The value of this property can be one of the following:\n *\n *     Default:\n *             Driver's default scaling filter\n *     Nearest Neighbor:\n *             Nearest Neighbor scaling filter\n *\n * Drivers can set up this property for a plane by calling\n * drm_plane_create_scaling_filter_property\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/drm_blend.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/drm_vblank.c#L42-L144",
    "ascii": "/**\n * DOC: vblank handling\n *\n * From the computer's perspective, every time the monitor displays\n * a new frame the scanout engine has \"scanned out\" the display image\n * from top to bottom, one row of pixels at a time. The current row\n * of pixels is referred to as the current scanline.\n *\n * In addition to the display's visible area, there's usually a couple of\n * extra scanlines which aren't actually displayed on the screen.\n * These extra scanlines don't contain image data and are occasionally used\n * for features like audio and infoframes. The region made up of these\n * scanlines is referred to as the vertical blanking region, or vblank for\n * short.\n *\n * For historical reference, the vertical blanking period was designed to\n * give the electron gun (on CRTs) enough time to move back to the top of\n * the screen to start scanning out the next frame. Similar for horizontal\n * blanking periods. They were designed to give the electron gun enough\n * time to move back to the other side of the screen to start scanning the\n * next scanline.\n *\n * ::\n *\n *\n *    physical →   ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽\n *    top of      |                                        |\n *    display     |                                        |\n *                |               New frame                |\n *                |                                        |\n *                |↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓|\n *                |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~| ← Scanline,\n *                |↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓|   updates the\n *                |                                        |   frame as it\n *                |                                        |   travels down\n *                |                                        |   (\"scan out\")\n *                |               Old frame                |\n *                |                                        |\n *                |                                        |\n *                |                                        |\n *                |                                        |   physical\n *                |                                        |   bottom of\n *    vertical    |⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽| ← display\n *    blanking    ┆xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx┆\n *    region   →  ┆xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx┆\n *                ┆xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx┆\n *    start of →   ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽\n *    new frame\n *\n * \"Physical top of display\" is the reference point for the high-precision/\n * corrected timestamp.\n *\n * On a lot of display hardware, programming needs to take effect during the\n * vertical blanking period so that settings like gamma, the image buffer\n * buffer to be scanned out, etc. can safely be changed without showing\n * any visual artifacts on the screen. In some unforgiving hardware, some of\n * this programming has to both start and end in the same vblank. To help\n * with the timing of the hardware programming, an interrupt is usually\n * available to notify the driver when it can start the updating of registers.\n * The interrupt is in this context named the vblank interrupt.\n *\n * The vblank interrupt may be fired at different points depending on the\n * hardware. Some hardware implementations will fire the interrupt when the\n * new frame start, other implementations will fire the interrupt at different\n * points in time.\n *\n * Vertical blanking plays a major role in graphics rendering. To achieve\n * tear-free display, users must synchronize page flips and/or rendering to\n * vertical blanking. The DRM API offers ioctls to perform page flips\n * synchronized to vertical blanking and wait for vertical blanking.\n *\n * The DRM core handles most of the vertical blanking management logic, which\n * involves filtering out spurious interrupts, keeping race-free blanking\n * counters, coping with counter wrap-around and resets and keeping use counts.\n * It relies on the driver to generate vertical blanking interrupts and\n * optionally provide a hardware vertical blanking counter.\n *\n * Drivers must initialize the vertical blanking handling core with a call to\n * drm_vblank_init(). Minimally, a driver needs to implement\n * &drm_crtc_funcs.enable_vblank and &drm_crtc_funcs.disable_vblank plus call\n * drm_crtc_handle_vblank() in its vblank interrupt handler for working vblank\n * support.\n *\n * Vertical blanking interrupts can be enabled by the DRM core or by drivers\n * themselves (for instance to handle page flipping operations).  The DRM core\n * maintains a vertical blanking use count to ensure that the interrupts are not\n * disabled while a user still needs them. To increment the use count, drivers\n * call drm_crtc_vblank_get() and release the vblank reference again with\n * drm_crtc_vblank_put(). In between these two calls vblank interrupts are\n * guaranteed to be enabled.\n *\n * On many hardware disabling the vblank interrupt cannot be done in a race-free\n * manner, see &drm_driver.vblank_disable_immediate and\n * &drm_driver.max_vblank_count. In that case the vblank core only disables the\n * vblanks after a timer has expired, which can be configured through the\n * ``vblankoffdelay`` module parameter.\n *\n * Drivers for hardware without support for vertical-blanking interrupts\n * must not call drm_vblank_init(). For such drivers, atomic helpers will\n * automatically generate fake vblank events as part of the display update.\n * This functionality also can be controlled by the driver by enabling and\n * disabling struct drm_crtc_state.no_vblank.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/drm_vblank.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/amd/display/dc/inc/hw/hw_shared.h#L292-L358",
    "ascii": "/**\n * speakersToChannels\n *\n * @brief\n *  translate speakers to channels\n *\n *  FL  - Front Left\n *  FR  - Front Right\n *  RL  - Rear Left\n *  RR  - Rear Right\n *  RC  - Rear Center\n *  FC  - Front Center\n *  FLC - Front Left Center\n *  FRC - Front Right Center\n *  RLC - Rear Left Center\n *  RRC - Rear Right Center\n *  LFE - Low Freq Effect\n *\n *               FC\n *          FLC      FRC\n *    FL                    FR\n *\n *                    LFE\n *              ()\n *\n *\n *    RL                    RR\n *          RLC      RRC\n *               RC\n *\n *             ch  8   7   6   5   4   3   2   1\n * 0b00000011      -   -   -   -   -   -   FR  FL\n * 0b00000111      -   -   -   -   -   LFE FR  FL\n * 0b00001011      -   -   -   -   FC  -   FR  FL\n * 0b00001111      -   -   -   -   FC  LFE FR  FL\n * 0b00010011      -   -   -   RC  -   -   FR  FL\n * 0b00010111      -   -   -   RC  -   LFE FR  FL\n * 0b00011011      -   -   -   RC  FC  -   FR  FL\n * 0b00011111      -   -   -   RC  FC  LFE FR  FL\n * 0b00110011      -   -   RR  RL  -   -   FR  FL\n * 0b00110111      -   -   RR  RL  -   LFE FR  FL\n * 0b00111011      -   -   RR  RL  FC  -   FR  FL\n * 0b00111111      -   -   RR  RL  FC  LFE FR  FL\n * 0b01110011      -   RC  RR  RL  -   -   FR  FL\n * 0b01110111      -   RC  RR  RL  -   LFE FR  FL\n * 0b01111011      -   RC  RR  RL  FC  -   FR  FL\n * 0b01111111      -   RC  RR  RL  FC  LFE FR  FL\n * 0b11110011      RRC RLC RR  RL  -   -   FR  FL\n * 0b11110111      RRC RLC RR  RL  -   LFE FR  FL\n * 0b11111011      RRC RLC RR  RL  FC  -   FR  FL\n * 0b11111111      RRC RLC RR  RL  FC  LFE FR  FL\n * 0b11000011      FRC FLC -   -   -   -   FR  FL\n * 0b11000111      FRC FLC -   -   -   LFE FR  FL\n * 0b11001011      FRC FLC -   -   FC  -   FR  FL\n * 0b11001111      FRC FLC -   -   FC  LFE FR  FL\n * 0b11010011      FRC FLC -   RC  -   -   FR  FL\n * 0b11010111      FRC FLC -   RC  -   LFE FR  FL\n * 0b11011011      FRC FLC -   RC  FC  -   FR  FL\n * 0b11011111      FRC FLC -   RC  FC  LFE FR  FL\n * 0b11110011      FRC FLC RR  RL  -   -   FR  FL\n * 0b11110111      FRC FLC RR  RL  -   LFE FR  FL\n * 0b11111011      FRC FLC RR  RL  FC  -   FR  FL\n * 0b11111111      FRC FLC RR  RL  FC  LFE FR  FL\n *\n * @param\n *  speakers - speaker information as it comes from CEA audio block\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/amd/display/dc/inc/hw/hw_shared.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/arm/display/komeda/komeda_pipeline_state.c#L913-L943",
    "ascii": "/*\n * Split is introduced for workaround scaler's input/output size limitation.\n * The idea is simple, if one scaler can not fit the requirement, use two.\n * So split splits the big source image to two half parts (left/right) and do\n * the scaling by two scaler separately and independently.\n * But split also imports an edge problem in the middle of the image when\n * scaling, to avoid it, split isn't a simple half-and-half, but add an extra\n * pixels (overlap) to both side, after split the left/right will be:\n * - left: [0, src_length/2 + overlap]\n * - right: [src_length/2 - overlap, src_length]\n * The extra overlap do eliminate the edge problem, but which may also generates\n * unnecessary pixels when scaling, we need to crop them before scaler output\n * the result to the next stage. and for the how to crop, it depends on the\n * unneeded pixels, another words the position where overlay has been added.\n * - left: crop the right\n * - right: crop the left\n *\n * The diagram for how to do the split\n *\n *  <---------------------left->out_w ---------------->\n * |--------------------------------|---right_crop-----| <- left after split\n *  \\                                \\                /\n *   \\                                \\<--overlap--->/\n *   |-----------------|-------------|(Middle)------|-----------------| <- src\n *                     /<---overlap--->\\                               \\\n *                    /                 \\                               \\\n * right after split->|-----left_crop---|--------------------------------|\n *                    ^<------------------- right->out_w --------------->^\n *\n * NOTE: To consistent with HW the output_w always contains the crop size.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/arm/display/komeda/komeda_pipeline_state.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/armada/armada_crtc.c#L26-L78",
    "ascii": "/*\n * A note about interlacing.  Let's consider HDMI 1920x1080i.\n * The timing parameters we have from X are:\n *  Hact HsyA HsyI Htot  Vact VsyA VsyI Vtot\n *  1920 2448 2492 2640  1080 1084 1094 1125\n * Which get translated to:\n *  Hact HsyA HsyI Htot  Vact VsyA VsyI Vtot\n *  1920 2448 2492 2640   540  542  547  562\n *\n * This is how it is defined by CEA-861-D - line and pixel numbers are\n * referenced to the rising edge of VSYNC and HSYNC.  Total clocks per\n * line: 2640.  The odd frame, the first active line is at line 21, and\n * the even frame, the first active line is 584.\n *\n * LN:    560     561     562     563             567     568    569\n * DE:    ~~~|____________________________//__________________________\n * HSYNC: ____|~|_____|~|_____|~|_____|~|_//__|~|_____|~|_____|~|_____\n * VSYNC: _________________________|~~~~~~//~~~~~~~~~~~~~~~|__________\n *  22 blanking lines.  VSYNC at 1320 (referenced to the HSYNC rising edge).\n *\n * LN:    1123   1124    1125      1               5       6      7\n * DE:    ~~~|____________________________//__________________________\n * HSYNC: ____|~|_____|~|_____|~|_____|~|_//__|~|_____|~|_____|~|_____\n * VSYNC: ____________________|~~~~~~~~~~~//~~~~~~~~~~|_______________\n *  23 blanking lines\n *\n * The Armada LCD Controller line and pixel numbers are, like X timings,\n * referenced to the top left of the active frame.\n *\n * So, translating these to our LCD controller:\n *  Odd frame, 563 total lines, VSYNC at line 543-548, pixel 1128.\n *  Even frame, 562 total lines, VSYNC at line 542-547, pixel 2448.\n * Note: Vsync front porch remains constant!\n *\n * if (odd_frame) {\n *   vtotal = mode->crtc_vtotal + 1;\n *   vbackporch = mode->crtc_vsync_start - mode->crtc_vdisplay + 1;\n *   vhorizpos = mode->crtc_hsync_start - mode->crtc_htotal / 2\n * } else {\n *   vtotal = mode->crtc_vtotal;\n *   vbackporch = mode->crtc_vsync_start - mode->crtc_vdisplay;\n *   vhorizpos = mode->crtc_hsync_start;\n * }\n * vfrontporch = mode->crtc_vtotal - mode->crtc_vsync_end;\n *\n * So, we need to reprogram these registers on each vsync event:\n *  LCD_SPU_V_PORCH, LCD_SPU_ADV_REG, LCD_SPUT_V_H_TOTAL\n *\n * Note: we do not use the frame done interrupts because these appear\n * to happen too early, and lead to jitter on the display (presumably\n * they occur at the end of the last active line, before the vsync back\n * porch, which we're reprogramming.)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/armada/armada_crtc.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/i915/i915_irq.c#L617-L665",
    "ascii": "/*\n * This timing diagram depicts the video signal in and\n * around the vertical blanking period.\n *\n * Assumptions about the fictitious mode used in this example:\n *  vblank_start >= 3\n *  vsync_start = vblank_start + 1\n *  vsync_end = vblank_start + 2\n *  vtotal = vblank_start + 3\n *\n *           start of vblank:\n *           latch double buffered registers\n *           increment frame counter (ctg+)\n *           generate start of vblank interrupt (gen4+)\n *           |\n *           |          frame start:\n *           |          generate frame start interrupt (aka. vblank interrupt) (gmch)\n *           |          may be shifted forward 1-3 extra lines via PIPECONF\n *           |          |\n *           |          |  start of vsync:\n *           |          |  generate vsync interrupt\n *           |          |  |\n * ___xxxx___    ___xxxx___    ___xxxx___    ___xxxx___    ___xxxx___    ___xxxx\n *       .   \\hs/   .      \\hs/          \\hs/          \\hs/   .      \\hs/\n * ----va---> <-----------------vb--------------------> <--------va-------------\n *       |          |       <----vs----->                     |\n * -vbs-----> <---vbs+1---> <---vbs+2---> <-----0-----> <-----1-----> <-----2--- (scanline counter gen2)\n * -vbs-2---> <---vbs-1---> <---vbs-----> <---vbs+1---> <---vbs+2---> <-----0--- (scanline counter gen3+)\n * -vbs-2---> <---vbs-2---> <---vbs-1---> <---vbs-----> <---vbs+1---> <---vbs+2- (scanline counter hsw+ hdmi)\n *       |          |                                         |\n *       last visible pixel                                   first visible pixel\n *                  |                                         increment frame counter (gen3/4)\n *                  pixel counter = vblank_start * htotal     pixel counter = 0 (gen3/4)\n *\n * x  = horizontal active\n * _  = horizontal blanking\n * hs = horizontal sync\n * va = vertical active\n * vb = vertical blanking\n * vs = vertical sync\n * vbs = vblank_start (number)\n *\n * Summary:\n * - most events happen at the start of horizontal sync\n * - frame start happens at the start of horizontal blank, 1-4 lines\n *   (depending on PIPECONF settings) after the start of vblank\n * - gen3/4 pixel and frame counter are synchronized with the start\n *   of horizontal active on the first line of vertical active\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/i915/i915_irq.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/i915/display/intel_dpio_phy.c#L34-L123",
    "ascii": "/**\n * DOC: DPIO\n *\n * VLV, CHV and BXT have slightly peculiar display PHYs for driving DP/HDMI\n * ports. DPIO is the name given to such a display PHY. These PHYs\n * don't follow the standard programming model using direct MMIO\n * registers, and instead their registers must be accessed trough IOSF\n * sideband. VLV has one such PHY for driving ports B and C, and CHV\n * adds another PHY for driving port D. Each PHY responds to specific\n * IOSF-SB port.\n *\n * Each display PHY is made up of one or two channels. Each channel\n * houses a common lane part which contains the PLL and other common\n * logic. CH0 common lane also contains the IOSF-SB logic for the\n * Common Register Interface (CRI) ie. the DPIO registers. CRI clock\n * must be running when any DPIO registers are accessed.\n *\n * In addition to having their own registers, the PHYs are also\n * controlled through some dedicated signals from the display\n * controller. These include PLL reference clock enable, PLL enable,\n * and CRI clock selection, for example.\n *\n * Eeach channel also has two splines (also called data lanes), and\n * each spline is made up of one Physical Access Coding Sub-Layer\n * (PCS) block and two TX lanes. So each channel has two PCS blocks\n * and four TX lanes. The TX lanes are used as DP lanes or TMDS\n * data/clock pairs depending on the output type.\n *\n * Additionally the PHY also contains an AUX lane with AUX blocks\n * for each channel. This is used for DP AUX communication, but\n * this fact isn't really relevant for the driver since AUX is\n * controlled from the display controller side. No DPIO registers\n * need to be accessed during AUX communication,\n *\n * Generally on VLV/CHV the common lane corresponds to the pipe and\n * the spline (PCS/TX) corresponds to the port.\n *\n * For dual channel PHY (VLV/CHV):\n *\n *  pipe A == CMN/PLL/REF CH0\n *\n *  pipe B == CMN/PLL/REF CH1\n *\n *  port B == PCS/TX CH0\n *\n *  port C == PCS/TX CH1\n *\n * This is especially important when we cross the streams\n * ie. drive port B with pipe B, or port C with pipe A.\n *\n * For single channel PHY (CHV):\n *\n *  pipe C == CMN/PLL/REF CH0\n *\n *  port D == PCS/TX CH0\n *\n * On BXT the entire PHY channel corresponds to the port. That means\n * the PLL is also now associated with the port rather than the pipe,\n * and so the clock needs to be routed to the appropriate transcoder.\n * Port A PLL is directly connected to transcoder EDP and port B/C\n * PLLs can be routed to any transcoder A/B/C.\n *\n * Note: DDI0 is digital port B, DD1 is digital port C, and DDI2 is\n * digital port D (CHV) or port A (BXT). ::\n *\n *\n *     Dual channel PHY (VLV/CHV/BXT)\n *     ---------------------------------\n *     |      CH0      |      CH1      |\n *     |  CMN/PLL/REF  |  CMN/PLL/REF  |\n *     |---------------|---------------| Display PHY\n *     | PCS01 | PCS23 | PCS01 | PCS23 |\n *     |-------|-------|-------|-------|\n *     |TX0|TX1|TX2|TX3|TX0|TX1|TX2|TX3|\n *     ---------------------------------\n *     |     DDI0      |     DDI1      | DP/HDMI ports\n *     ---------------------------------\n *\n *     Single channel PHY (CHV/BXT)\n *     -----------------\n *     |      CH0      |\n *     |  CMN/PLL/REF  |\n *     |---------------| Display PHY\n *     | PCS01 | PCS23 |\n *     |-------|-------|\n *     |TX0|TX1|TX2|TX3|\n *     -----------------\n *     |     DDI2      | DP/HDMI port\n *     -----------------\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/i915/display/intel_dpio_phy.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/i915/display/skl_scaler.c#L13-L52",
    "ascii": "/*\n * The hardware phase 0.0 refers to the center of the pixel.\n * We want to start from the top/left edge which is phase\n * -0.5. That matches how the hardware calculates the scaling\n * factors (from top-left of the first pixel to bottom-right\n * of the last pixel, as opposed to the pixel centers).\n *\n * For 4:2:0 subsampled chroma planes we obviously have to\n * adjust that so that the chroma sample position lands in\n * the right spot.\n *\n * Note that for packed YCbCr 4:2:2 formats there is no way to\n * control chroma siting. The hardware simply replicates the\n * chroma samples for both of the luma samples, and thus we don't\n * actually get the expected MPEG2 chroma siting convention :(\n * The same behaviour is observed on pre-SKL platforms as well.\n *\n * Theory behind the formula (note that we ignore sub-pixel\n * source coordinates):\n * s = source sample position\n * d = destination sample position\n *\n * Downscaling 4:1:\n * -0.5\n * | 0.0\n * | |     1.5 (initial phase)\n * | |     |\n * v v     v\n * | s | s | s | s |\n * |       d       |\n *\n * Upscaling 1:4:\n * -0.5\n * | -0.375 (initial phase)\n * | |     0.0\n * | |     |\n * v v     v\n * |       s       |\n * | d | d | d | d |\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/i915/display/skl_scaler.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.h#L23-L45",
    "ascii": "/*\n * +------------+---------------------------------------------------+\n * |   PHASE    |           FIRMWARE STATUS TRANSITIONS             |\n * +============+===================================================+\n * |            |               UNINITIALIZED                       |\n * +------------+-               /   |   \\                         -+\n * |            |   DISABLED <--/    |    \\--> NOT_SUPPORTED        |\n * | init_early |                    V                              |\n * |            |                 SELECTED                          |\n * +------------+-               /   |   \\                         -+\n * |            |    MISSING <--/    |    \\--> ERROR                |\n * |   fetch    |                    V                              |\n * |            |                 AVAILABLE                         |\n * +------------+-                   |   \\                         -+\n * |            |                    |    \\--> INIT FAIL            |\n * |   init     |                    V                              |\n * |            |        /------> LOADABLE <----<-----------\\       |\n * +------------+-       \\         /    \\        \\           \\     -+\n * |            |    LOAD FAIL <--<      \\--> TRANSFERRED     \\     |\n * |   upload   |                  \\           /   \\          /     |\n * |            |                   \\---------/     \\--> RUNNING    |\n * +------------+---------------------------------------------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm/include/asm/pgtable-2level.h#L12-L69",
    "ascii": "/*\n * Hardware-wise, we have a two level page table structure, where the first\n * level has 4096 entries, and the second level has 256 entries.  Each entry\n * is one 32-bit word.  Most of the bits in the second level entry are used\n * by hardware, and there aren't any \"accessed\" and \"dirty\" bits.\n *\n * Linux on the other hand has a three level page table structure, which can\n * be wrapped to fit a two level page table structure easily - using the PGD\n * and PTE only.  However, Linux also expects one \"PTE\" table per page, and\n * at least a \"dirty\" bit.\n *\n * Therefore, we tweak the implementation slightly - we tell Linux that we\n * have 2048 entries in the first level, each of which is 8 bytes (iow, two\n * hardware pointers to the second level.)  The second level contains two\n * hardware PTE tables arranged contiguously, preceded by Linux versions\n * which contain the state information Linux needs.  We, therefore, end up\n * with 512 entries in the \"PTE\" level.\n *\n * This leads to the page tables having the following layout:\n *\n *    pgd             pte\n * |        |\n * +--------+\n * |        |       +------------+ +0\n * +- - - - +       | Linux pt 0 |\n * |        |       +------------+ +1024\n * +--------+ +0    | Linux pt 1 |\n * |        |-----> +------------+ +2048\n * +- - - - + +4    |  h/w pt 0  |\n * |        |-----> +------------+ +3072\n * +--------+ +8    |  h/w pt 1  |\n * |        |       +------------+ +4096\n *\n * See L_PTE_xxx below for definitions of bits in the \"Linux pt\", and\n * PTE_xxx for definitions of bits appearing in the \"h/w pt\".\n *\n * PMD_xxx definitions refer to bits in the first level page table.\n *\n * The \"dirty\" bit is emulated by only granting hardware write permission\n * iff the page is marked \"writable\" and \"dirty\" in the Linux PTE.  This\n * means that a write to a clean page will cause a permission fault, and\n * the Linux MM layer will mark the page dirty via handle_pte_fault().\n * For the hardware to notice the permission change, the TLB entry must\n * be flushed, and ptep_set_access_flags() does that for us.\n *\n * The \"accessed\" or \"young\" bit is emulated by a similar method; we only\n * allow accesses to the page if the \"young\" bit is set.  Accesses to the\n * page will cause a fault, and handle_pte_fault() will set the young bit\n * for us as long as the page is marked present in the corresponding Linux\n * PTE entry.  Again, ptep_set_access_flags() will ensure that the TLB is\n * up to date.\n *\n * However, when the \"young\" bit is cleared, we deny access to the page\n * by clearing the hardware PTE.  Currently Linux does not flush the TLB\n * for us in this case, which means the TLB will retain the transation\n * until either the TLB entry is evicted under pressure, or a context\n * switch which changes the user space mapping occurs.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm/include/asm/pgtable-2level.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/mcde/mcde_drv.c#L8-L54",
    "ascii": "/**\n * DOC: ST-Ericsson MCDE Driver\n *\n * The MCDE (short for multi-channel display engine) is a graphics\n * controller found in the Ux500 chipsets, such as NovaThor U8500.\n * It was initially conceptualized by ST Microelectronics for the\n * successor of the Nomadik line, STn8500 but productified in the\n * ST-Ericsson U8500 where is was used for mass-market deployments\n * in Android phones from Samsung and Sony Ericsson.\n *\n * It can do 1080p30 on SDTV CCIR656, DPI-2, DBI-2 or DSI for\n * panels with or without frame buffering and can convert most\n * input formats including most variants of RGB and YUV.\n *\n * The hardware has four display pipes, and the layout is a little\n * bit like this::\n *\n *   Memory     -> Overlay -> Channel -> FIFO -> 8 formatters -> DSI/DPI\n *   External      0..5       0..3       A,B,    6 x DSI         bridge\n *   source 0..9                         C0,C1   2 x DPI\n *\n * FIFOs A and B are for LCD and HDMI while FIFO CO/C1 are for\n * panels with embedded buffer.\n * 6 of the formatters are for DSI, 3 pairs for VID/CMD respectively.\n * 2 of the formatters are for DPI.\n *\n * Behind the formatters are the DSI or DPI ports that route to\n * the external pins of the chip. As there are 3 DSI ports and one\n * DPI port, it is possible to configure up to 4 display pipelines\n * (effectively using channels 0..3) for concurrent use.\n *\n * In the current DRM/KMS setup, we use one external source, one overlay,\n * one FIFO and one formatter which we connect to the simple DMA framebuffer\n * helpers. We then provide a bridge to the DSI port, and on the DSI port\n * bridge we connect hang a panel bridge or other bridge. This may be subject\n * to change as we exploit more of the hardware capabilities.\n *\n * TODO:\n *\n * - Enabled damaged rectangles using drm_plane_enable_fb_damage_clips()\n *   so we can selectively just transmit the damaged area to a\n *   command-only display.\n * - Enable mixing of more planes, possibly at the cost of moving away\n *   from using the simple framebuffer pipeline.\n * - Enable output to bridges such as the AV8100 HDMI encoder from\n *   the DSI bridge.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/mcde/mcde_drv.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/meson/meson_vclk.c#L15-L47",
    "ascii": "/**\n * DOC: Video Clocks\n *\n * VCLK is the \"Pixel Clock\" frequency generator from a dedicated PLL.\n * We handle the following encodings :\n *\n * - CVBS 27MHz generator via the VCLK2 to the VENCI and VDAC blocks\n * - HDMI Pixel Clocks generation\n *\n * What is missing :\n *\n * - Genenate Pixel clocks for 2K/4K 10bit formats\n *\n * Clock generator scheme :\n *\n * .. code::\n *\n *    __________   _________            _____\n *   |          | |         |          |     |--ENCI\n *   | HDMI PLL |-| PLL_DIV |--- VCLK--|     |--ENCL\n *   |__________| |_________| \\        | MUX |--ENCP\n *                             --VCLK2-|     |--VDAC\n *                                     |_____|--HDMI-TX\n *\n * Final clocks can take input for either VCLK or VCLK2, but\n * VCLK is the preferred path for HDMI clocking and VCLK2 is the\n * preferred path for CVBS VDAC clocking.\n *\n * VCLK and VCLK2 have fixed divided clocks paths for /1, /2, /4, /6 or /12.\n *\n * The PLL_DIV can achieve an additional fractional dividing like\n * 1.5, 3.5, 3.75... to generate special 2K and 4K 10bit clocks.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/meson/meson_vclk.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/msm/disp/mdp5/mdp5_mixer.c#L8-L16",
    "ascii": "/*\n * As of now, there are only 2 combinations possible for source split:\n *\n * Left | Right\n * -----|------\n *  LM0 | LM1\n *  LM2 | LM5\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/msm/disp/mdp5/mdp5_mixer.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/msm/dsi/phy/dsi_phy_14nm.c#L16-L32",
    "ascii": "/*\n * DSI PLL 14nm - clock diagram (eg: DSI0):\n *\n *         dsi0n1_postdiv_clk\n *                         |\n *                         |\n *                 +----+  |  +----+\n *  dsi0vco_clk ---| n1 |--o--| /8 |-- dsi0pllbyte\n *                 +----+  |  +----+\n *                         |           dsi0n1_postdivby2_clk\n *                         |   +----+  |\n *                         o---| /2 |--o--|\\\n *                         |   +----+     | \\   +----+\n *                         |              |  |--| n2 |-- dsi0pll\n *                         o--------------| /   +----+\n *                                        |/\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/msm/dsi/phy/dsi_phy_14nm.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/msm/dsi/phy/dsi_phy_28nm_8960.c#L13-L37",
    "ascii": "/*\n * DSI PLL 28nm (8960/A family) - clock diagram (eg: DSI1):\n *\n *\n *                        +------+\n *  dsi1vco_clk ----o-----| DIV1 |---dsi1pllbit (not exposed as clock)\n *  F * byte_clk    |     +------+\n *                  | bit clock divider (F / 8)\n *                  |\n *                  |     +------+\n *                  o-----| DIV2 |---dsi0pllbyte---o---> To byte RCG\n *                  |     +------+                 | (sets parent rate)\n *                  | byte clock divider (F)       |\n *                  |                              |\n *                  |                              o---> To esc RCG\n *                  |                                (doesn't set parent rate)\n *                  |\n *                  |     +------+\n *                  o-----| DIV3 |----dsi0pll------o---> To dsi RCG\n *                        +------+                 | (sets parent rate)\n *                  dsi clock divider (F * magic)  |\n *                                                 |\n *                                                 o---> To pixel rcg\n *                                                  (doesn't set parent rate)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/msm/dsi/phy/dsi_phy_28nm_8960.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/msm/dsi/phy/dsi_phy_7nm.c#L14-L37",
    "ascii": "/*\n * DSI PLL 7nm - clock diagram (eg: DSI0): TODO: updated CPHY diagram\n *\n *           dsi0_pll_out_div_clk  dsi0_pll_bit_clk\n *                              |                |\n *                              |                |\n *                 +---------+  |  +----------+  |  +----+\n *  dsi0vco_clk ---| out_div |--o--| divl_3_0 |--o--| /8 |-- dsi0_phy_pll_out_byteclk\n *                 +---------+  |  +----------+  |  +----+\n *                              |                |\n *                              |                |         dsi0_pll_by_2_bit_clk\n *                              |                |          |\n *                              |                |  +----+  |  |\\  dsi0_pclk_mux\n *                              |                |--| /2 |--o--| \\   |\n *                              |                |  +----+     |  \\  |  +---------+\n *                              |                --------------|  |--o--| div_7_4 |-- dsi0_phy_pll_out_dsiclk\n *                              |------------------------------|  /     +---------+\n *                              |          +-----+             | /\n *                              -----------| /4? |--o----------|/\n *                                         +-----+  |           |\n *                                                  |           |dsiclk_sel\n *                                                  |\n *                                                  dsi0_pll_post_out_div_clk\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/msm/dsi/phy/dsi_phy_7nm.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/nouveau/dispnv50/disp.c#L2702-L2707",
    "ascii": "/****************************************************************\n *            Log2(block height) ----------------------------+  *\n *            Page Kind ----------------------------------+  |  *\n *            Gob Height/Page Kind Generation ------+     |  |  *\n *                          Sector layout -------+  |     |  |  *\n *                          Compression ------+  |  |     |  |  */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/nouveau/dispnv50/disp.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/nouveau/dispnv50/wndwc57e.c#L196-L201",
    "ascii": "/****************************************************************\n *            Log2(block height) ----------------------------+  *\n *            Page Kind ----------------------------------+  |  *\n *            Gob Height/Page Kind Generation ------+     |  |  *\n *                          Sector layout -------+  |     |  |  *\n *                          Compression ------+  |  |     |  |  */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/nouveau/dispnv50/wndwc57e.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/panel/panel-ilitek-ili9322.c#L194-L250",
    "ascii": "/**\n * struct ili9322_config - the system specific ILI9322 configuration\n * @width_mm: physical panel width [mm]\n * @height_mm: physical panel height [mm]\n * @flip_horizontal: flip the image horizontally (right-to-left scan)\n * (only in RGB and YUV modes)\n * @flip_vertical: flip the image vertically (down-to-up scan)\n * (only in RGB and YUV modes)\n * @input: the input/entry type used in this system, if this is set to\n * ILI9322_INPUT_UNKNOWN the driver will try to figure it out by probing\n * the hardware\n * @vreg1out_mv: the output in microvolts for the VREGOUT1 regulator used\n * to drive the physical display. Valid ranges are 3600 thru 6000 in 100\n * microvolt increments. If not specified, hardware defaults will be\n * used (4.5V).\n * @vcom_high_percent: the percentage of VREGOUT1 used for the peak\n * voltage on the communications link. Valid ranges are 37 thru 100\n * percent. If not specified, hardware defaults will be used (91%).\n * @vcom_amplitude_percent: the percentage of VREGOUT1 used for the\n * peak-to-peak amplitude of the communcation signals to the physical\n * display. Valid ranges are 70 thru 132 percent in increments if two\n * percent. Odd percentages will be truncated. If not specified, hardware\n * defaults will be used (114%).\n * @dclk_active_high: data/pixel clock active high, data will be clocked\n * in on the rising edge of the DCLK (this is usually the case).\n * @syncmode: The synchronization mode, what sync signals are emitted.\n * See the enum for details.\n * @de_active_high: DE (data entry) is active high\n * @hsync_active_high: HSYNC is active high\n * @vsync_active_high: VSYNC is active high\n * @gamma_corr_pos: a set of 8 nybbles describing positive\n * gamma correction for voltages V1 thru V8. Valid range 0..15\n * @gamma_corr_neg: a set of 8 nybbles describing negative\n * gamma correction for voltages V1 thru V8. Valid range 0..15\n *\n * These adjust what grayscale voltage will be output for input data V1 = 0,\n * V2 = 16, V3 = 48, V4 = 96, V5 = 160, V6 = 208, V7 = 240 and V8 = 255.\n * The curve is shaped like this:\n *\n *  ^\n *  |                                                        V8\n *  |                                                   V7\n *  |                                          V6\n *  |                               V5\n *  |                    V4\n *  |            V3\n *  |     V2\n *  | V1\n *  +----------------------------------------------------------->\n *    0   16     48      96         160        208      240  255\n *\n * The negative and postive gamma values adjust the V1 thru V8 up/down\n * according to the datasheet specifications. This is a property of the\n * physical display connected to the display controller and may vary.\n * If defined, both arrays must be supplied in full. If the properties\n * are not supplied, hardware defaults will be used.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/panel/panel-ilitek-ili9322.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/panel/panel-novatek-nt35510.c#L127-L158",
    "ascii": "/**\n * struct nt35510_config - the display-specific NT35510 configuration\n *\n * Some of the settings provide an array of bytes, A, B C which mean:\n * A = normal / idle off mode\n * B = idle on mode\n * C = partial / idle off mode\n *\n * Gamma correction arrays are 10bit numbers, two consecutive bytes\n * makes out one point on the gamma correction curve. The points are\n * not linearly placed along the X axis, we get points 0, 1, 3, 5\n * 7, 11, 15, 23, 31, 47, 63, 95, 127, 128, 160, 192, 208, 224, 232,\n * 240, 244, 248, 250, 252, 254, 255. The voltages tuples form\n * V0, V1, V3 ... V255, with 0x0000 being the lowest voltage and\n * 0x03FF being the highest voltage.\n *\n * Each value must be strictly higher than the previous value forming\n * a rising curve like this:\n *\n * ^\n * |                                        V255\n * |                                 V254\n * |                         ....\n * |                    V5\n * |           V3\n * |     V1\n * | V0\n * +------------------------------------------->\n *\n * The details about all settings can be found in the NT35510 Application\n * Note.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/panel/panel-novatek-nt35510.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/rockchip/rockchip_drm_vop.c#L495-L516",
    "ascii": "/*\n * (1) each frame starts at the start of the Vsync pulse which is signaled by\n *     the \"FRAME_SYNC\" interrupt.\n * (2) the active data region of each frame ends at dsp_vact_end\n * (3) we should program this same number (dsp_vact_end) into dsp_line_frag_num,\n *      to get \"LINE_FLAG\" interrupt at the end of the active on screen data.\n *\n * VOP_INTR_CTRL0.dsp_line_frag_num = VOP_DSP_VACT_ST_END.dsp_vact_end\n * Interrupts\n * LINE_FLAG -------------------------------+\n * FRAME_SYNC ----+                         |\n *                |                         |\n *                v                         v\n *                | Vsync | Vbp |  Vactive  | Vfp |\n *                        ^     ^           ^     ^\n *                        |     |           |     |\n *                        |     |           |     |\n * dsp_vs_end ------------+     |           |     |   VOP_DSP_VTOTAL_VS_END\n * dsp_vact_start --------------+           |     |   VOP_DSP_VACT_ST_END\n * dsp_vact_end ----------------------------+     |   VOP_DSP_VACT_ST_END\n * dsp_total -------------------------------------+   VOP_DSP_VTOTAL_VS_END\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/rockchip/rockchip_drm_vop.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c#L43-L71",
    "ascii": "/*\n * VOP2 architecture\n *\n +----------+   +-------------+                                                        +-----------+\n |  Cluster |   | Sel 1 from 6|                                                        | 1 from 3  |\n |  window0 |   |    Layer0   |                                                        |    RGB    |\n +----------+   +-------------+              +---------------+    +-------------+      +-----------+\n +----------+   +-------------+              |N from 6 layers|    |             |\n |  Cluster |   | Sel 1 from 6|              |   Overlay0    +--->| Video Port0 |      +-----------+\n |  window1 |   |    Layer1   |              |               |    |             |      | 1 from 3  |\n +----------+   +-------------+              +---------------+    +-------------+      |   LVDS    |\n +----------+   +-------------+                                                        +-----------+\n |  Esmart  |   | Sel 1 from 6|\n |  window0 |   |   Layer2    |              +---------------+    +-------------+      +-----------+\n +----------+   +-------------+              |N from 6 Layers|    |             | +--> | 1 from 3  |\n +----------+   +-------------+   -------->  |   Overlay1    +--->| Video Port1 |      |   MIPI    |\n |  Esmart  |   | Sel 1 from 6|   -------->  |               |    |             |      +-----------+\n |  Window1 |   |   Layer3    |              +---------------+    +-------------+\n +----------+   +-------------+                                                        +-----------+\n +----------+   +-------------+                                                        | 1 from 3  |\n |  Smart   |   | Sel 1 from 6|              +---------------+    +-------------+      |   HDMI    |\n |  Window0 |   |    Layer4   |              |N from 6 Layers|    |             |      +-----------+\n +----------+   +-------------+              |   Overlay2    +--->| Video Port2 |\n +----------+   +-------------+              |               |    |             |      +-----------+\n |  Smart   |   | Sel 1 from 6|              +---------------+    +-------------+      |  1 from 3 |\n |  Window1 |   |    Layer5   |                                                        |    eDP    |\n +----------+   +-------------+                                                        +-----------+\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/xlnx/zynqmp_disp.c#L31-L60",
    "ascii": "/*\n * Overview\n * --------\n *\n * The display controller part of ZynqMP DP subsystem, made of the Audio/Video\n * Buffer Manager, the Video Rendering Pipeline (blender) and the Audio Mixer.\n *\n *              +------------------------------------------------------------+\n * +--------+   | +----------------+     +-----------+                       |\n * | DPDMA  | --->|                | --> |   Video   | Video +-------------+ |\n * | 4x vid |   | |                |     | Rendering | -+--> |             | |   +------+\n * | 2x aud |   | |  Audio/Video   | --> | Pipeline  |  |    | DisplayPort |---> | PHY0 |\n * +--------+   | | Buffer Manager |     +-----------+  |    |   Source    | |   +------+\n *              | |    and STC     |     +-----------+  |    | Controller  | |   +------+\n * Live Video --->|                | --> |   Audio   | Audio |             |---> | PHY1 |\n *              | |                |     |   Mixer   | --+-> |             | |   +------+\n * Live Audio --->|                | --> |           |  ||   +-------------+ |\n *              | +----------------+     +-----------+  ||                   |\n *              +---------------------------------------||-------------------+\n *                                                      vv\n *                                                Blended Video and\n *                                                Mixed Audio to PL\n *\n * Only non-live input from the DPDMA and output to the DisplayPort Source\n * Controller are currently supported. Interface with the programmable logic\n * for live streams is not implemented.\n *\n * The display controller code creates planes for the DPDMA video and graphics\n * layers, and a CRTC for the Video Rendering Pipeline.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/xlnx/zynqmp_disp.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/ipu-v3/ipu-image-convert.c#L13-L61",
    "ascii": "/*\n * The IC Resizer has a restriction that the output frame from the\n * resizer must be 1024 or less in both width (pixels) and height\n * (lines).\n *\n * The image converter attempts to split up a conversion when\n * the desired output (converted) frame resolution exceeds the\n * IC resizer limit of 1024 in either dimension.\n *\n * If either dimension of the output frame exceeds the limit, the\n * dimension is split into 1, 2, or 4 equal stripes, for a maximum\n * of 4*4 or 16 tiles. A conversion is then carried out for each\n * tile (but taking care to pass the full frame stride length to\n * the DMA channel's parameter memory!). IDMA double-buffering is used\n * to convert each tile back-to-back when possible (see note below\n * when double_buffering boolean is set).\n *\n * Note that the input frame must be split up into the same number\n * of tiles as the output frame:\n *\n *                       +---------+-----+\n *   +-----+---+         |  A      | B   |\n *   | A   | B |         |         |     |\n *   +-----+---+   -->   +---------+-----+\n *   | C   | D |         |  C      | D   |\n *   +-----+---+         |         |     |\n *                       +---------+-----+\n *\n * Clockwise 90° rotations are handled by first rescaling into a\n * reusable temporary tile buffer and then rotating with the 8x8\n * block rotator, writing to the correct destination:\n *\n *                                         +-----+-----+\n *                                         |     |     |\n *   +-----+---+         +---------+       | C   | A   |\n *   | A   | B |         | A,B, |  |       |     |     |\n *   +-----+---+   -->   | C,D  |  |  -->  |     |     |\n *   | C   | D |         +---------+       +-----+-----+\n *   +-----+---+                           | D   | B   |\n *                                         |     |     |\n *                                         +-----+-----+\n *\n * If the 8x8 block rotator is used, horizontal or vertical flipping\n * is done during the rotation step, otherwise flipping is done\n * during the scaling step.\n * With rotation or flipping, tile order changes between input and\n * output image. Tiles are numbered row major from top left to bottom\n * right for both input and output image.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/ipu-v3/ipu-image-convert.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/hid/hid-picolcd_fb.c#L18-L37",
    "ascii": "/* Framebuffer\n *\n * The PicoLCD use a Topway LCD module of 256x64 pixel\n * This display area is tiled over 4 controllers with 8 tiles\n * each. Each tile has 8x64 pixel, each data byte representing\n * a 1-bit wide vertical line of the tile.\n *\n * The display can be updated at a tile granularity.\n *\n *       Chip 1           Chip 2           Chip 3           Chip 4\n * +----------------+----------------+----------------+----------------+\n * |     Tile 1     |     Tile 1     |     Tile 1     |     Tile 1     |\n * +----------------+----------------+----------------+----------------+\n * |     Tile 2     |     Tile 2     |     Tile 2     |     Tile 2     |\n * +----------------+----------------+----------------+----------------+\n *                                  ...\n * +----------------+----------------+----------------+----------------+\n * |     Tile 8     |     Tile 8     |     Tile 8     |     Tile 8     |\n * +----------------+----------------+----------------+----------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/hid/hid-picolcd_fb.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/hwtracing/coresight/coresight-trbe.c#L298-L339",
    "ascii": "/*\n * TRBE Buffer Management\n *\n * The TRBE buffer spans from the base pointer till the limit pointer. When enabled,\n * it starts writing trace data from the write pointer onward till the limit pointer.\n * When the write pointer reaches the address just before the limit pointer, it gets\n * wrapped around again to the base pointer. This is called a TRBE wrap event, which\n * generates a maintenance interrupt when operated in WRAP or FILL mode. This driver\n * uses FILL mode, where the TRBE stops the trace collection at wrap event. The IRQ\n * handler updates the AUX buffer and re-enables the TRBE with updated WRITE and\n * LIMIT pointers.\n *\n *\tWrap around with an IRQ\n *\t------ < ------ < ------- < ----- < -----\n *\t|\t\t\t\t\t|\n *\t------ > ------ > ------- > ----- > -----\n *\n *\t+---------------+-----------------------+\n *\t|\t\t|\t\t\t|\n *\t+---------------+-----------------------+\n *\tBase Pointer\tWrite Pointer\t\tLimit Pointer\n *\n * The base and limit pointers always needs to be PAGE_SIZE aligned. But the write\n * pointer can be aligned to the implementation defined TRBE trace buffer alignment\n * as captured in trbe_cpudata->trbe_align.\n *\n *\n *\t\thead\t\ttail\t\twakeup\n *\t+---------------------------------------+----- ~ ~ ------\n *\t|$$$$$$$|################|$$$$$$$$$$$$$$|\t\t|\n *\t+---------------------------------------+----- ~ ~ ------\n *\tBase Pointer\tWrite Pointer\t\tLimit Pointer\n *\n * The perf_output_handle indices (head, tail, wakeup) are monotonically increasing\n * values which tracks all the driver writes and user reads from the perf auxiliary\n * buffer. Generally [head..tail] is the area where the driver can write into unless\n * the wakeup is behind the tail. Enabled TRBE buffer span needs to be adjusted and\n * configured depending on the perf_output_handle indices, so that the driver does\n * not override into areas in the perf auxiliary buffer which is being or yet to be\n * consumed from the user space. The enabled TRBE buffer area is a moving subset of\n * the allocated perf auxiliary buffer.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/hwtracing/coresight/coresight-trbe.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/i2c/muxes/i2c-mux-mlxcpld.c#L29-L55",
    "ascii": "/* MUX logic description.\n * Driver can support different mux control logic, according to CPLD\n * implementation.\n *\n * Connectivity schema.\n *\n * i2c-mlxcpld                                 Digital               Analog\n * driver\n * *--------*                                 * -> mux1 (virt bus2) -> mux -> |\n * | I2CLPC | i2c physical                    * -> mux2 (virt bus3) -> mux -> |\n * | bridge | bus 1                 *---------*                               |\n * | logic  |---------------------> * mux reg *                               |\n * | in CPLD|                       *---------*                               |\n * *--------*   i2c-mux-mlxpcld          ^    * -> muxn (virt busn) -> mux -> |\n *     |        driver                   |                                    |\n *     |        *---------------*        |                              Devices\n *     |        * CPLD (i2c bus)* select |\n *     |        * registers for *--------*\n *     |        * mux selection * deselect\n *     |        *---------------*\n *     |                 |\n * <-------->     <----------->\n * i2c cntrl      Board cntrl reg\n * reg space      space (mux select,\n *                IO, LED, WD, info)\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/i2c/muxes/i2c-mux-mlxcpld.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/infiniband/hw/hfi1/pio.h#L129-L188",
    "ascii": "/*\n * The diagram below details the relationship of the mapping structures\n *\n * Since the mapping now allows for non-uniform send contexts per vl, the\n * number of send contexts for a vl is either the vl_scontexts[vl] or\n * a computation based on num_kernel_send_contexts/num_vls:\n *\n * For example:\n * nactual = vl_scontexts ? vl_scontexts[vl] : num_kernel_send_contexts/num_vls\n *\n * n = roundup to next highest power of 2 using nactual\n *\n * In the case where there are num_kernel_send_contexts/num_vls doesn't divide\n * evenly, the extras are added from the last vl downward.\n *\n * For the case where n > nactual, the send contexts are assigned\n * in a round robin fashion wrapping back to the first send context\n * for a particular vl.\n *\n *               dd->pio_map\n *                    |                                   pio_map_elem[0]\n *                    |                                +--------------------+\n *                    v                                |       mask         |\n *               pio_vl_map                            |--------------------|\n *      +--------------------------+                   | ksc[0] -> sc 1     |\n *      |    list (RCU)            |                   |--------------------|\n *      |--------------------------|                 ->| ksc[1] -> sc 2     |\n *      |    mask                  |              --/  |--------------------|\n *      |--------------------------|            -/     |        *           |\n *      |    actual_vls (max 8)    |          -/       |--------------------|\n *      |--------------------------|       --/         | ksc[n-1] -> sc n   |\n *      |    vls (max 8)           |     -/            +--------------------+\n *      |--------------------------|  --/\n *      |    map[0]                |-/\n *      |--------------------------|                   +--------------------+\n *      |    map[1]                |---                |       mask         |\n *      |--------------------------|   \\----           |--------------------|\n *      |           *              |        \\--        | ksc[0] -> sc 1+n   |\n *      |           *              |           \\----   |--------------------|\n *      |           *              |                \\->| ksc[1] -> sc 2+n   |\n *      |--------------------------|                   |--------------------|\n *      |   map[vls - 1]           |-                  |         *          |\n *      +--------------------------+ \\-                |--------------------|\n *                                     \\-              | ksc[m-1] -> sc m+n |\n *                                       \\             +--------------------+\n *                                        \\-\n *                                          \\\n *                                           \\-        +----------------------+\n *                                             \\-      |       mask           |\n *                                               \\     |----------------------|\n *                                                \\-   | ksc[0] -> sc 1+m+n   |\n *                                                  \\- |----------------------|\n *                                                    >| ksc[1] -> sc 2+m+n   |\n *                                                     |----------------------|\n *                                                     |         *            |\n *                                                     |----------------------|\n *                                                     | ksc[o-1] -> sc o+m+n |\n *                                                     +----------------------+\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/infiniband/hw/hfi1/pio.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/infiniband/hw/hfi1/sdma.h#L873-L933",
    "ascii": "/*\n *\n * The diagram below details the relationship of the mapping structures\n *\n * Since the mapping now allows for non-uniform engines per vl, the\n * number of engines for a vl is either the vl_engines[vl] or\n * a computation based on num_sdma/num_vls:\n *\n * For example:\n * nactual = vl_engines ? vl_engines[vl] : num_sdma/num_vls\n *\n * n = roundup to next highest power of 2 using nactual\n *\n * In the case where there are num_sdma/num_vls doesn't divide\n * evenly, the extras are added from the last vl downward.\n *\n * For the case where n > nactual, the engines are assigned\n * in a round robin fashion wrapping back to the first engine\n * for a particular vl.\n *\n *               dd->sdma_map\n *                    |                                   sdma_map_elem[0]\n *                    |                                +--------------------+\n *                    v                                |       mask         |\n *               sdma_vl_map                           |--------------------|\n *      +--------------------------+                   | sde[0] -> eng 1    |\n *      |    list (RCU)            |                   |--------------------|\n *      |--------------------------|                 ->| sde[1] -> eng 2    |\n *      |    mask                  |              --/  |--------------------|\n *      |--------------------------|            -/     |        *           |\n *      |    actual_vls (max 8)    |          -/       |--------------------|\n *      |--------------------------|       --/         | sde[n-1] -> eng n  |\n *      |    vls (max 8)           |     -/            +--------------------+\n *      |--------------------------|  --/\n *      |    map[0]                |-/\n *      |--------------------------|                   +---------------------+\n *      |    map[1]                |---                |       mask          |\n *      |--------------------------|   \\----           |---------------------|\n *      |           *              |        \\--        | sde[0] -> eng 1+n   |\n *      |           *              |           \\----   |---------------------|\n *      |           *              |                \\->| sde[1] -> eng 2+n   |\n *      |--------------------------|                   |---------------------|\n *      |   map[vls - 1]           |-                  |         *           |\n *      +--------------------------+ \\-                |---------------------|\n *                                     \\-              | sde[m-1] -> eng m+n |\n *                                       \\             +---------------------+\n *                                        \\-\n *                                          \\\n *                                           \\-        +----------------------+\n *                                             \\-      |       mask           |\n *                                               \\     |----------------------|\n *                                                \\-   | sde[0] -> eng 1+m+n  |\n *                                                  \\- |----------------------|\n *                                                    >| sde[1] -> eng 2+m+n  |\n *                                                     |----------------------|\n *                                                     |         *            |\n *                                                     |----------------------|\n *                                                     | sde[o-1] -> eng o+m+n|\n *                                                     +----------------------+\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/infiniband/hw/hfi1/sdma.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/keyboard/lkkbd.c#L10-L47",
    "ascii": "/*\n * DEC LK201 and LK401 keyboard driver for Linux (primary for DECstations\n * and VAXstations, but can also be used on any standard RS232 with an\n * adaptor).\n *\n * DISCLAIMER: This works for _me_. If you break anything by using the\n * information given below, I will _not_ be liable!\n *\n * RJ10 pinout:\t\tTo DE9:\t\tOr DB25:\n *\t1 - RxD <---->\tPin 3 (TxD) <->\tPin 2 (TxD)\n *\t2 - GND <---->\tPin 5 (GND) <->\tPin 7 (GND)\n *\t4 - TxD <---->\tPin 2 (RxD) <->\tPin 3 (RxD)\n *\t3 - +12V (from HDD drive connector), DON'T connect to DE9 or DB25!!!\n *\n * Pin numbers for DE9 and DB25 are noted on the plug (quite small:). For\n * RJ10, it's like this:\n *\n *      __=__\tHold the plug in front of you, cable downwards,\n *     /___/|\tnose is hidden behind the plug. Now, pin 1 is at\n *    |1234||\tthe left side, pin 4 at the right and 2 and 3 are\n *    |IIII||\tin between, of course:)\n *    |    ||\n *    |____|/\n *      ||\tSo the adaptor consists of three connected cables\n *      ||\tfor data transmission (RxD and TxD) and signal ground.\n *\t\tAdditionally, you have to get +12V from somewhere.\n * Most easily, you'll get that from a floppy or HDD power connector.\n * It's the yellow cable there (black is ground and red is +5V).\n *\n * The keyboard and all the commands it understands are documented in\n * \"VCB02 Video Subsystem - Technical Manual\", EK-104AA-TM-001. This\n * document is LK201 specific, but LK401 is mostly compatible. It comes\n * up in LK201 mode and doesn't report any of the additional keys it\n * has. These need to be switched on with the LK_CMD_ENABLE_LK401\n * command. You'll find this document (scanned .pdf file) on MANX,\n * a search engine specific to DEC documentation. Try\n * http://www.vt100.net/manx/details?pn=EK-104AA-TM-001;id=21;cp=1\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": true
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/keyboard/lkkbd.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/misc/cm109.c#L148-L171",
    "ascii": "/* Map device buttons to internal key events.\n *\n * The \"up\" and \"down\" keys, are symbolised by arrows on the button.\n * The \"pickup\" and \"hangup\" keys are symbolised by a green and red phone\n * on the button.\n Komunikate KIP1000 Keyboard Matrix\n\n     -> -- 1 -- 2 -- 3  --> GPI pin 4 (0x10)\n      |    |    |    |\n     <- -- 4 -- 5 -- 6  --> GPI pin 5 (0x20)\n      |    |    |    |\n     END - 7 -- 8 -- 9  --> GPI pin 6 (0x40)\n      |    |    |    |\n     OK -- * -- 0 -- #  --> GPI pin 7 (0x80)\n      |    |    |    |\n\n     /|\\  /|\\  /|\\  /|\\\n      |    |    |    |\nGPO\npin:  3    2    1    0\n     0x8  0x4  0x2  0x1\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/misc/cm109.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/misc/yealink.c#L172-L189",
    "ascii": "/* Map device buttons to internal key events.\n *\n * USB-P1K button layout:\n *\n *             up\n *       IN           OUT\n *            down\n *\n *     pickup   C    hangup\n *       1      2      3\n *       4      5      6\n *       7      8      9\n *       *      0      #\n *\n * The \"up\" and \"down\" keys, are symbolised by arrows on the button.\n * The \"pickup\" and \"hangup\" keys are symbolised by a green and red phone\n * on the button.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/misc/yealink.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/misc/yealink.h#L116-L128",
    "ascii": "/* LCD, each segment must be driven separately.\n *\n * Layout:\n *\n *   |[]   [][]   [][]   [][]   in   |[][]\n *   |[] M [][] D [][] : [][]   out  |[][]\n *                             store\n *\n *    NEW REP         SU MO TU WE TH FR SA\n *\n *    [] [] [] [] [] [] [] [] [] [] [] []\n *    [] [] [] [] [] [] [] [] [] [] [] []\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/misc/yealink.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/mouse/vsxxxaa.c#L15-L62",
    "ascii": "/*\n * Building an adaptor to DE9 / DB25 RS232\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n *\n * DISCLAIMER: Use this description AT YOUR OWN RISK! I'll not pay for\n * anything if you break your mouse, your computer or whatever!\n *\n * In theory, this mouse is a simple RS232 device. In practice, it has got\n * a quite uncommon plug and the requirement to additionally get a power\n * supply at +5V and -12V.\n *\n * If you look at the socket/jack (_not_ at the plug), we use this pin\n * numbering:\n *    _______\n *   / 7 6 5 \\\n *  | 4 --- 3 |\n *   \\  2 1  /\n *    -------\n *\n *\tDEC socket\tDE9\tDB25\tNote\n *\t1 (GND)\t\t5\t7\t-\n *\t2 (RxD)\t\t2\t3\t-\n *\t3 (TxD)\t\t3\t2\t-\n *\t4 (-12V)\t-\t-\tSomewhere from the PSU. At ATX, it's\n *\t\t\t\t\tthe thin blue wire at pin 12 of the\n *\t\t\t\t\tATX power connector. Only required for\n *\t\t\t\t\tVSXXX-AA/-GA mice.\n *\t5 (+5V)\t\t-\t-\tPSU (red wires of ATX power connector\n *\t\t\t\t\ton pin 4, 6, 19 or 20) or HDD power\n *\t\t\t\t\tconnector (also red wire).\n *\t6 (+12V)\t-\t-\tHDD power connector, yellow wire. Only\n *\t\t\t\t\trequired for VSXXX-AB digitizer.\n *\t7 (dev. avail.)\t-\t-\tThe mouse shorts this one to pin 1.\n *\t\t\t\t\tThis way, the host computer can detect\n *\t\t\t\t\tthe mouse. To use it with the adaptor,\n *\t\t\t\t\tsimply don't connect this pin.\n *\n * So to get a working adaptor, you need to connect the mouse with three\n * wires to a RS232 port and two or three additional wires for +5V, +12V and\n * -12V to the PSU.\n *\n * Flow specification for the link is 4800, 8o1.\n *\n * The mice and tablet are described in \"VCB02 Video Subsystem - Technical\n * Manual\", DEC EK-104AA-TM-001. You'll find it at MANX, a search engine\n * specific for DEC documentation. Try\n * http://www.vt100.net/manx/details?pn=EK-104AA-TM-001;id=21;cp=1\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/mouse/vsxxxaa.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/serio/ps2-gpio.c#L47-L63",
    "ascii": "/*\n * The PS2 protocol specifies a clock frequency between 10kHz and 16.7kHz,\n * therefore the maximal interrupt interval should be 100us and the minimum\n * interrupt interval should be ~60us. Let's allow +/- 20us for frequency\n * deviations and interrupt latency.\n *\n * The data line must be samples after ~30us to 50us after the falling edge,\n * since the device updates the data line at the rising edge.\n *\n * ___            ______            ______            ______            ___\n *    \\          /      \\          /      \\          /      \\          /\n *     \\        /        \\        /        \\        /        \\        /\n *      \\______/          \\______/          \\______/          \\______/\n *\n *     |-----------------|                 |--------|\n *          60us/100us                      30us/50us\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/serio/ps2-gpio.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm/kernel/tcm.c#L182-L232",
    "ascii": "/*\n * When we are running in the non-secure world and the secure world\n * has not explicitly given us access to the TCM we will get an\n * undefined error when reading the TCM region register in the\n * setup_tcm_bank function (above).\n *\n * There are two variants of this register read that we need to trap,\n * the read for the data TCM and the read for the instruction TCM:\n *  c0370628:       ee196f11        mrc     15, 0, r6, cr9, cr1, {0}\n *  c0370674:       ee196f31        mrc     15, 0, r6, cr9, cr1, {1}\n *\n * Our undef hook mask explicitly matches all fields of the encoded\n * instruction other than the destination register.  The mask also\n * only allows operand 2 to have the values 0 or 1.\n *\n * The undefined hook is defined as __init and __initdata, and therefore\n * must be removed before tcm_init returns.\n *\n * In this particular case (MRC with ARM condition code ALways) the\n * Thumb-2 and ARM instruction encoding are identical, so this hook\n * will work on a Thumb-2 kernel.\n *\n * See A8.8.107, DDI0406C_C ARM Architecture Reference Manual, Encoding\n * T1/A1 for the bit-by-bit details.\n *\n *  mrc   p15, 0, XX, c9, c1, 0\n *  mrc   p15, 0, XX, c9, c1, 1\n *   |  |  |   |   |   |   |  +---- opc2           0|1 = 000|001\n *   |  |  |   |   |   |   +------- CRm              0 = 0001\n *   |  |  |   |   |   +----------- CRn              0 = 1001\n *   |  |  |   |   +--------------- Rt               ? = ????\n *   |  |  |   +------------------- opc1             0 =  000\n *   |  |  +----------------------- coproc          15 = 1111\n *   |  +-------------------------- condition   ALways = 1110\n *   +----------------------------- instruction    MRC = 1110\n *\n * Encoding this as per A8.8.107 of DDI0406C, Encoding T1/A1, yields:\n *  1111 1111 1111 1111 0000 1111 1101 1111 Required Mask\n *  1110 1110 0001 1001 ???? 1111 0001 0001 mrc p15, 0, XX, c9, c1, 0\n *  1110 1110 0001 1001 ???? 1111 0011 0001 mrc p15, 0, XX, c9, c1, 1\n *  [  ] [  ] [ ]| [  ] [  ] [  ] [ ]| +--- CRm\n *    |    |   | |   |    |    |   | +----- SBO\n *    |    |   | |   |    |    |   +------- opc2\n *    |    |   | |   |    |    +----------- coproc\n *    |    |   | |   |    +---------------- Rt\n *    |    |   | |   +--------------------- CRn\n *    |    |   | +------------------------- SBO\n *    |    |   +--------------------------- opc1\n *    |    +------------------------------- instruction\n *    +------------------------------------ condition\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm/kernel/tcm.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/touchscreen/mxs-lradc-ts.c#L260-L271",
    "ascii": "/*\n * YP(open)--+-------------+\n *\t     |\t\t   |--+\n *\t     |\t\t   |  |\n *    YM(-)--+-------------+  |\n *\t       +--------------+\n *\t       |\t      |\n *\t   XP(weak+)\t    XM(open)\n *\n * \"weak+\" means 200k Ohm VDDIO\n * (-) means GND\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/touchscreen/mxs-lradc-ts.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm/lib/backtrace-clang.S#L30-L97",
    "ascii": "/*\n * Clang does not store pc or sp in function prologues so we don't know exactly\n * where the function starts.\n *\n * We can treat the current frame's lr as the saved pc and the preceding\n * frame's lr as the current frame's lr, but we can't trace the most recent\n * call.  Inserting a false stack frame allows us to reference the function\n * called last in the stacktrace.\n *\n * If the call instruction was a bl we can look at the callers branch\n * instruction to calculate the saved pc.  We can recover the pc in most cases,\n * but in cases such as calling function pointers we cannot. In this case,\n * default to using the lr. This will be some address in the function, but will\n * not be the function start.\n *\n * Unfortunately due to the stack frame layout we can't dump r0 - r3, but these\n * are less frequently saved.\n *\n * Stack frame layout:\n * \t\t<larger addresses>\n * \t\tsaved lr\n * \tframe=> saved fp\n * \t\toptionally saved caller registers (r4 - r10)\n * \t\toptionally saved arguments (r0 - r3)\n * \t\t<top of stack frame>\n * \t\t<smaller addresses>\n *\n * Functions start with the following code sequence:\n * corrected pc =>  stmfd sp!, {..., fp, lr}\n *\t\tadd fp, sp, #x\n *\t\tstmfd sp!, {r0 - r3} (optional)\n *\n *\n *\n *\n *\n *\n * The diagram below shows an example stack setup for dump_stack.\n *\n * The frame for c_backtrace has pointers to the code of dump_stack. This is\n * why the frame of c_backtrace is used to for the pc calculation of\n * dump_stack. This is why we must move back a frame to print dump_stack.\n *\n * The stored locals for dump_stack are in dump_stack's frame. This means that\n * to fully print dump_stack's frame we need both the frame for dump_stack (for\n * locals) and the frame that was called by dump_stack (for pc).\n *\n * To print locals we must know where the function start is. If we read the\n * function prologue opcodes we can determine which variables are stored in the\n * stack frame.\n *\n * To find the function start of dump_stack we can look at the stored LR of\n * show_stack. It points at the instruction directly after the bl dump_stack.\n * We can then read the offset from the bl opcode to determine where the branch\n * takes us.  The address calculated must be the start of dump_stack.\n *\n * c_backtrace frame           dump_stack:\n * {[LR]    }  ============|   ...\n * {[FP]    }  =======|    |   bl c_backtrace\n *                    |    |=> ...\n * {[R4-R10]}         |\n * {[R0-R3] }         |        show_stack:\n * dump_stack frame   |        ...\n * {[LR]    } =============|   bl dump_stack\n * {[FP]    } <=======|    |=> ...\n * {[R4-R10]}\n * {[R0-R3] }\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm/lib/backtrace-clang.S"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/touchscreen/touchit213.c#L31-L53",
    "ascii": "/*\n * Data is received through COM1 at 9600bit/s,8bit,no parity in packets\n * of 5 byte each.\n *\n *   +--------+   +--------+   +--------+   +--------+   +--------+\n *   |1000000p|   |0xxxxxxx|   |0xxxxxxx|   |0yyyyyyy|   |0yyyyyyy|\n *   +--------+   +--------+   +--------+   +--------+   +--------+\n *                    MSB          LSB          MSB          LSB\n *\n * The value of p is 1 as long as the screen is touched and 0 when\n * reporting the location where touching stopped, e.g. where the pen was\n * lifted from the screen.\n *\n * When holding the screen in landscape mode as the BIOS text output is\n * presented, x is the horizontal axis with values growing from left to\n * right and y is the vertical axis with values growing from top to\n * bottom.\n *\n * When holding the screen in portrait mode with the Sahara logo in its\n * correct position, x ist the vertical axis with values growing from\n * top to bottom and y is the horizontal axis with values growing from\n * right to left.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/touchscreen/touchit213.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/irqchip/irq-armada-370-xp.c#L37-L115",
    "ascii": "/*\n * Overall diagram of the Armada XP interrupt controller:\n *\n *    To CPU 0                 To CPU 1\n *\n *       /\\                       /\\\n *       ||                       ||\n * +---------------+     +---------------+\n * |               |\t |               |\n * |    per-CPU    |\t |    per-CPU    |\n * |  mask/unmask  |\t |  mask/unmask  |\n * |     CPU0      |\t |     CPU1      |\n * |               |\t |               |\n * +---------------+\t +---------------+\n *        /\\                       /\\\n *        ||                       ||\n *        \\\\_______________________//\n *                     ||\n *            +-------------------+\n *            |                   |\n *            | Global interrupt  |\n *            |    mask/unmask    |\n *            |                   |\n *            +-------------------+\n *                     /\\\n *                     ||\n *               interrupt from\n *                   device\n *\n * The \"global interrupt mask/unmask\" is modified using the\n * ARMADA_370_XP_INT_SET_ENABLE_OFFS and\n * ARMADA_370_XP_INT_CLEAR_ENABLE_OFFS registers, which are relative\n * to \"main_int_base\".\n *\n * The \"per-CPU mask/unmask\" is modified using the\n * ARMADA_370_XP_INT_SET_MASK_OFFS and\n * ARMADA_370_XP_INT_CLEAR_MASK_OFFS registers, which are relative to\n * \"per_cpu_int_base\". This base address points to a special address,\n * which automatically accesses the registers of the current CPU.\n *\n * The per-CPU mask/unmask can also be adjusted using the global\n * per-interrupt ARMADA_370_XP_INT_SOURCE_CTL register, which we use\n * to configure interrupt affinity.\n *\n * Due to this model, all interrupts need to be mask/unmasked at two\n * different levels: at the global level and at the per-CPU level.\n *\n * This driver takes the following approach to deal with this:\n *\n *  - For global interrupts:\n *\n *    At ->map() time, a global interrupt is unmasked at the per-CPU\n *    mask/unmask level. It is therefore unmasked at this level for\n *    the current CPU, running the ->map() code. This allows to have\n *    the interrupt unmasked at this level in non-SMP\n *    configurations. In SMP configurations, the ->set_affinity()\n *    callback is called, which using the\n *    ARMADA_370_XP_INT_SOURCE_CTL() readjusts the per-CPU mask/unmask\n *    for the interrupt.\n *\n *    The ->mask() and ->unmask() operations only mask/unmask the\n *    interrupt at the \"global\" level.\n *\n *    So, a global interrupt is enabled at the per-CPU level as soon\n *    as it is mapped. At run time, the masking/unmasking takes place\n *    at the global level.\n *\n *  - For per-CPU interrupts\n *\n *    At ->map() time, a per-CPU interrupt is unmasked at the global\n *    mask/unmask level.\n *\n *    The ->mask() and ->unmask() operations mask/unmask the interrupt\n *    at the per-CPU level.\n *\n *    So, a per-CPU interrupt is enabled at the global level as soon\n *    as it is mapped. At run time, the masking/unmasking takes place\n *    at the per-CPU level.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/irqchip/irq-armada-370-xp.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/isdn/mISDN/dsp_core.c#L21-L152",
    "ascii": "/* STRUCTURE:\n *\n * The dsp module provides layer 2 for b-channels (64kbit). It provides\n * transparent audio forwarding with special digital signal processing:\n *\n * - (1) generation of tones\n * - (2) detection of dtmf tones\n * - (3) crossconnecting and conferences (clocking)\n * - (4) echo generation for delay test\n * - (5) volume control\n * - (6) disable receive data\n * - (7) pipeline\n * - (8) encryption/decryption\n *\n * Look:\n *             TX            RX\n *         ------upper layer------\n *             |             ^\n *             |             |(6)\n *             v             |\n *       +-----+-------------+-----+\n *       |(3)(4)                   |\n *       |           CMX           |\n *       |                         |\n *       |           +-------------+\n *       |           |       ^\n *       |           |       |\n *       |+---------+|  +----+----+\n *       ||(1)      ||  |(2)      |\n *       ||         ||  |         |\n *       ||  Tones  ||  |  DTMF   |\n *       ||         ||  |         |\n *       ||         ||  |         |\n *       |+----+----+|  +----+----+\n *       +-----+-----+       ^\n *             |             |\n *             v             |\n *        +----+----+   +----+----+\n *        |(5)      |   |(5)      |\n *        |         |   |         |\n *        |TX Volume|   |RX Volume|\n *        |         |   |         |\n *        |         |   |         |\n *        +----+----+   +----+----+\n *             |             ^\n *             |             |\n *             v             |\n *        +----+-------------+----+\n *        |(7)                    |\n *        |                       |\n *        |  Pipeline Processing  |\n *        |                       |\n *        |                       |\n *        +----+-------------+----+\n *             |             ^\n *             |             |\n *             v             |\n *        +----+----+   +----+----+\n *        |(8)      |   |(8)      |\n *        |         |   |         |\n *        | Encrypt |   | Decrypt |\n *        |         |   |         |\n *        |         |   |         |\n *        +----+----+   +----+----+\n *             |             ^\n *             |             |\n *             v             |\n *         ------card  layer------\n *             TX            RX\n *\n * Above you can see the logical data flow. If software is used to do the\n * process, it is actually the real data flow. If hardware is used, data\n * may not flow, but hardware commands to the card, to provide the data flow\n * as shown.\n *\n * NOTE: The channel must be activated in order to make dsp work, even if\n * no data flow to the upper layer is intended. Activation can be done\n * after and before controlling the setting using PH_CONTROL requests.\n *\n * DTMF: Will be detected by hardware if possible. It is done before CMX\n * processing.\n *\n * Tones: Will be generated via software if endless looped audio fifos are\n * not supported by hardware. Tones will override all data from CMX.\n * It is not required to join a conference to use tones at any time.\n *\n * CMX: Is transparent when not used. When it is used, it will do\n * crossconnections and conferences via software if not possible through\n * hardware. If hardware capability is available, hardware is used.\n *\n * Echo: Is generated by CMX and is used to check performance of hard and\n * software CMX.\n *\n * The CMX has special functions for conferences with one, two and more\n * members. It will allow different types of data flow. Receive and transmit\n * data to/form upper layer may be switched on/off individually without losing\n * features of CMX, Tones and DTMF.\n *\n * Echo Cancellation: Sometimes we like to cancel echo from the interface.\n * Note that a VoIP call may not have echo caused by the IP phone. The echo\n * is generated by the telephone line connected to it. Because the delay\n * is high, it becomes an echo. RESULT: Echo Cachelation is required if\n * both echo AND delay is applied to an interface.\n * Remember that software CMX always generates a more or less delay.\n *\n * If all used features can be realized in hardware, and if transmit and/or\n * receive data ist disabled, the card may not send/receive any data at all.\n * Not receiving is useful if only announcements are played. Not sending is\n * useful if an answering machine records audio. Not sending and receiving is\n * useful during most states of the call. If supported by hardware, tones\n * will be played without cpu load. Small PBXs and NT-Mode applications will\n * not need expensive hardware when processing calls.\n *\n *\n * LOCKING:\n *\n * When data is received from upper or lower layer (card), the complete dsp\n * module is locked by a global lock.  This lock MUST lock irq, because it\n * must lock timer events by DSP poll timer.\n * When data is ready to be transmitted down, the data is queued and sent\n * outside lock and timer event.\n * PH_CONTROL must not change any settings, join or split conference members\n * during process of data.\n *\n * HDLC:\n *\n * It works quite the same as transparent, except that HDLC data is forwarded\n * to all other conference members if no hardware bridging is possible.\n * Send data will be writte to sendq. Sendq will be sent if confirm is received.\n * Conference cannot join, if one member is not hdlc.\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/isdn/mISDN/dsp_core.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/leds/leds-cr0014114.c#L12-L30",
    "ascii": "/*\n *  CR0014114 SPI protocol descrtiption:\n *  +----+-----------------------------------+----+\n *  | CMD|             BRIGHTNESS            |CRC |\n *  +----+-----------------------------------+----+\n *  |    | LED0| LED1| LED2| LED3| LED4| LED5|    |\n *  |    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+    |\n *  |    |R|G|B|R|G|B|R|G|B|R|G|B|R|G|B|R|G|B|    |\n *  | 1  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 1  |\n *  |    |1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|    |\n *  |    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+    |\n *  |    |               18                  |    |\n *  +----+-----------------------------------+----+\n *  |                    20                       |\n *  +---------------------------------------------+\n *\n *  PS: Boards can be connected to the chain:\n *      SPI -> board0 -> board1 -> board2 ..\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/leds/leds-cr0014114.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/md/dm.c#L1287-L1316",
    "ascii": "/*\n * A target may call dm_accept_partial_bio only from the map routine.  It is\n * allowed for all bio types except REQ_PREFLUSH, REQ_OP_ZONE_* zone management\n * operations, REQ_OP_ZONE_APPEND (zone append writes) and any bio serviced by\n * __send_duplicate_bios().\n *\n * dm_accept_partial_bio informs the dm that the target only wants to process\n * additional n_sectors sectors of the bio and the rest of the data should be\n * sent in a next bio.\n *\n * A diagram that explains the arithmetics:\n * +--------------------+---------------+-------+\n * |         1          |       2       |   3   |\n * +--------------------+---------------+-------+\n *\n * <-------------- *tio->len_ptr --------------->\n *                      <----- bio_sectors ----->\n *                      <-- n_sectors -->\n *\n * Region 1 was already iterated over with bio_advance or similar function.\n *\t(it may be empty if the target doesn't use bio_advance)\n * Region 2 is the remaining bio size that the target wants to process.\n *\t(it may be empty if region 1 is non-empty, although there is no reason\n *\t to make it empty)\n * The target requires that region 3 is to be sent in the next bio.\n *\n * If the target wants to receive multiple copies of the bio (via num_*bios, etc),\n * the partially processed part (the sum of regions 1+2) must be the same for all\n * copies of the bio.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/md/dm.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/md/raid10.c#L26-L65",
    "ascii": "/*\n * RAID10 provides a combination of RAID0 and RAID1 functionality.\n * The layout of data is defined by\n *    chunk_size\n *    raid_disks\n *    near_copies (stored in low byte of layout)\n *    far_copies (stored in second byte of layout)\n *    far_offset (stored in bit 16 of layout )\n *    use_far_sets (stored in bit 17 of layout )\n *    use_far_sets_bugfixed (stored in bit 18 of layout )\n *\n * The data to be stored is divided into chunks using chunksize.  Each device\n * is divided into far_copies sections.   In each section, chunks are laid out\n * in a style similar to raid0, but near_copies copies of each chunk is stored\n * (each on a different drive).  The starting device for each section is offset\n * near_copies from the starting device of the previous section.  Thus there\n * are (near_copies * far_copies) of each chunk, and each is on a different\n * drive.  near_copies and far_copies must be at least one, and their product\n * is at most raid_disks.\n *\n * If far_offset is true, then the far_copies are handled a bit differently.\n * The copies are still in different stripes, but instead of being very far\n * apart on disk, there are adjacent stripes.\n *\n * The far and offset algorithms are handled slightly differently if\n * 'use_far_sets' is true.  In this case, the array's devices are grouped into\n * sets that are (near_copies * far_copies) in size.  The far copied stripes\n * are still shifted by 'near_copies' devices, but this shifting stays confined\n * to the set rather than the entire array.  This is done to improve the number\n * of device combinations that can fail without causing the array to fail.\n * Example 'far' algorithm w/o 'use_far_sets' (each letter represents a chunk\n * on a device):\n *    A B C D    A B C D E\n *      ...         ...\n *    D A B C    E A B C D\n * Example 'far' algorithm w/ 'use_far_sets' enabled (sets illustrated w/ []'s):\n *    [A B] [C D]    [A B] [C D E]\n *    |...| |...|    |...| | ... |\n *    [B A] [D C]    [B A] [E C D]\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/md/raid10.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/md/raid5-cache.c#L2290-L2344",
    "ascii": "/*\n * Before recovery, the log looks like the following\n *\n *   ---------------------------------------------\n *   |           valid log        | invalid log  |\n *   ---------------------------------------------\n *   ^\n *   |- log->last_checkpoint\n *   |- log->last_cp_seq\n * Now we scan through the log until we see invalid entry\n *\n *   ---------------------------------------------\n *   |           valid log        | invalid log  |\n *   ---------------------------------------------\n *   ^                            ^\n *   |- log->last_checkpoint      |- ctx->pos\n *   |- log->last_cp_seq          |- ctx->seq\n *\n * From this point, we need to increase seq number by 10 to avoid\n * confusing next recovery.\n *\n *   ---------------------------------------------\n *   |           valid log        | invalid log  |\n *   ---------------------------------------------\n *   ^                              ^\n *   |- log->last_checkpoint        |- ctx->pos+1\n *   |- log->last_cp_seq            |- ctx->seq+10001\n *\n * However, it is not safe to start the state machine yet, because data only\n * parities are not yet secured in RAID. To save these data only parities, we\n * rewrite them from seq+11.\n *\n *   -----------------------------------------------------------------\n *   |           valid log        | data only stripes | invalid log  |\n *   -----------------------------------------------------------------\n *   ^                                                ^\n *   |- log->last_checkpoint                          |- ctx->pos+n\n *   |- log->last_cp_seq                              |- ctx->seq+10000+n\n *\n * If failure happens again during this process, the recovery can safe start\n * again from log->last_checkpoint.\n *\n * Once data only stripes are rewritten to journal, we move log_tail\n *\n *   -----------------------------------------------------------------\n *   |     old log        |    data only stripes    | invalid log  |\n *   -----------------------------------------------------------------\n *                        ^                         ^\n *                        |- log->last_checkpoint   |- ctx->pos+n\n *                        |- log->last_cp_seq       |- ctx->seq+10000+n\n *\n * Then we can safely start the state machine. If failure happens from this\n * point on, the recovery will start from new log->last_checkpoint.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/md/raid5-cache.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/md/raid5-ppl.c#L17-L83",
    "ascii": "/*\n * PPL consists of a 4KB header (struct ppl_header) and at least 128KB for\n * partial parity data. The header contains an array of entries\n * (struct ppl_header_entry) which describe the logged write requests.\n * Partial parity for the entries comes after the header, written in the same\n * sequence as the entries:\n *\n * Header\n *   entry0\n *   ...\n *   entryN\n * PP data\n *   PP for entry0\n *   ...\n *   PP for entryN\n *\n * An entry describes one or more consecutive stripe_heads, up to a full\n * stripe. The modifed raid data chunks form an m-by-n matrix, where m is the\n * number of stripe_heads in the entry and n is the number of modified data\n * disks. Every stripe_head in the entry must write to the same data disks.\n * An example of a valid case described by a single entry (writes to the first\n * stripe of a 4 disk array, 16k chunk size):\n *\n * sh->sector   dd0   dd1   dd2    ppl\n *            +-----+-----+-----+\n * 0          | --- | --- | --- | +----+\n * 8          | -W- | -W- | --- | | pp |   data_sector = 8\n * 16         | -W- | -W- | --- | | pp |   data_size = 3 * 2 * 4k\n * 24         | -W- | -W- | --- | | pp |   pp_size = 3 * 4k\n *            +-----+-----+-----+ +----+\n *\n * data_sector is the first raid sector of the modified data, data_size is the\n * total size of modified data and pp_size is the size of partial parity for\n * this entry. Entries for full stripe writes contain no partial parity\n * (pp_size = 0), they only mark the stripes for which parity should be\n * recalculated after an unclean shutdown. Every entry holds a checksum of its\n * partial parity, the header also has a checksum of the header itself.\n *\n * A write request is always logged to the PPL instance stored on the parity\n * disk of the corresponding stripe. For each member disk there is one ppl_log\n * used to handle logging for this disk, independently from others. They are\n * grouped in child_logs array in struct ppl_conf, which is assigned to\n * r5conf->log_private.\n *\n * ppl_io_unit represents a full PPL write, header_page contains the ppl_header.\n * PPL entries for logged stripes are added in ppl_log_stripe(). A stripe_head\n * can be appended to the last entry if it meets the conditions for a valid\n * entry described above, otherwise a new entry is added. Checksums of entries\n * are calculated incrementally as stripes containing partial parity are being\n * added. ppl_submit_iounit() calculates the checksum of the header and submits\n * a bio containing the header page and partial parity pages (sh->ppl_page) for\n * all stripes of the io_unit. When the PPL write completes, the stripes\n * associated with the io_unit are released and raid5d starts writing their data\n * and parity. When all stripes are written, the io_unit is freed and the next\n * can be submitted.\n *\n * An io_unit is used to gather stripes until it is submitted or becomes full\n * (if the maximum number of entries or size of PPL is reached). Another io_unit\n * can't be submitted until the previous has completed (PPL and stripe\n * data+parity is written). The log->io_list tracks all io_units of a log\n * (for a single member disk). New io_units are added to the end of the list\n * and the first io_unit is submitted, if it is not submitted already.\n * The current io_unit accepting new stripes is always at the end of the list.\n *\n * If write-back cache is enabled for any of the disks in the array, its data\n * must be flushed before next io_unit is submitted.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/md/raid5-ppl.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/md/bcache/super.c#L1754-L1769",
    "ascii": "/*\n * This function is only called when CACHE_SET_IO_DISABLE is set, which means\n * cache set is unregistering due to too many I/O errors. In this condition,\n * the bcache device might be stopped, it depends on stop_when_cache_set_failed\n * value and whether the broken cache has dirty data:\n *\n * dc->stop_when_cache_set_failed    dc->has_dirty   stop bcache device\n *  BCH_CACHED_STOP_AUTO               0               NO\n *  BCH_CACHED_STOP_AUTO               1               YES\n *  BCH_CACHED_DEV_STOP_ALWAYS         0               YES\n *  BCH_CACHED_DEV_STOP_ALWAYS         1               YES\n *\n * The expected behavior is, if stop_when_cache_set_failed is configured to\n * \"auto\" via sysfs interface, the bcache device will not be stopped if the\n * backing device is clean on the broken cache device.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/md/bcache/super.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/cec/platform/meson/ao-cec-g12a.c#L196-L212",
    "ascii": "/*\n * The AO-CECB embeds a dual/divider to generate a more precise\n * 32,768KHz clock for CEC core clock.\n *                      ______   ______\n *                     |      | |      |\n *         ______      | Div1 |-| Cnt1 |       ______\n *        |      |    /|______| |______|\\     |      |\n * Xtal-->| Gate |---|  ______   ______  X-X--| Gate |-->\n *        |______| |  \\|      | |      |/  |  |______|\n *                 |   | Div2 |-| Cnt2 |   |\n *                 |   |______| |______|   |\n *                 |_______________________|\n *\n * The dividing can be switched to single or dual, with a counter\n * for each divider to set when the switching is done.\n * The entire dividing mechanism can be also bypassed.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/cec/platform/meson/ao-cec-g12a.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/i2c/imx290.c#L109-L144",
    "ascii": "/*\n * The IMX290 pixel array is organized as follows:\n *\n *     +------------------------------------+\n *     |           Optical Black            |     }  Vertical effective optical black (10)\n * +---+------------------------------------+---+\n * |   |                                    |   | }  Effective top margin (8)\n * |   |   +----------------------------+   |   | \\\n * |   |   |                            |   |   |  |\n * |   |   |                            |   |   |  |\n * |   |   |                            |   |   |  |\n * |   |   |    Recording Pixel Area    |   |   |  | Recommended height (1080)\n * |   |   |                            |   |   |  |\n * |   |   |                            |   |   |  |\n * |   |   |                            |   |   |  |\n * |   |   +----------------------------+   |   | /\n * |   |                                    |   | }  Effective bottom margin (9)\n * +---+------------------------------------+---+\n *  <-> <-> <--------------------------> <-> <->\n *                                            \\----  Ignored right margin (4)\n *                                        \\--------  Effective right margin (9)\n *                       \\-------------------------  Recommended width (1920)\n *       \\-----------------------------------------  Effective left margin (8)\n *   \\---------------------------------------------  Ignored left margin (4)\n *\n * The optical black lines are output over CSI-2 with a separate data type.\n *\n * The pixel array is meant to have 1920x1080 usable pixels after image\n * processing in an ISP. It has 8 (9) extra active pixels usable for color\n * processing in the ISP on the top and left (bottom and right) sides of the\n * image. In addition, 4 additional pixels are present on the left and right\n * sides of the image, documented as \"ignored area\".\n *\n * As far as is understood, all pixels of the pixel array (ignored area, color\n * processing margins and recording area) can be output by the sensor.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/i2c/imx290.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/i2c/ov8865.c#L482-L517",
    "ascii": "/*\n * PLL1 Clock Tree:\n *\n * +-< EXTCLK\n * |\n * +-+ pll_pre_div_half (0x30a [0])\n *   |\n *   +-+ pll_pre_div (0x300 [2:0], special values:\n *     |              0: 1, 1: 1.5, 3: 2.5, 4: 3, 5: 4, 7: 8)\n *     +-+ pll_mul (0x301 [1:0], 0x302 [7:0])\n *       |\n *       +-+ m_div (0x303 [3:0])\n *       | |\n *       | +-> PHY_SCLK\n *       | |\n *       | +-+ mipi_div (0x304 [1:0], special values: 0: 4, 1: 5, 2: 6, 3: 8)\n *       |   |\n *       |   +-+ pclk_div (0x3020 [3])\n *       |     |\n *       |     +-> PCLK\n *       |\n *       +-+ sys_pre_div (0x305 [1:0], special values: 0: 3, 1: 4, 2: 5, 3: 6)\n *         |\n *         +-+ sys_div (0x306 [0])\n *           |\n *           +-+ sys_sel (0x3032 [7], 0: PLL1, 1: PLL2)\n *             |\n *             +-+ sclk_sel (0x3033 [1], 0: sys_sel, 1: PLL2 DAC_CLK)\n *               |\n *               +-+ sclk_pre_div (0x3106 [3:2], special values:\n *                 |               0: 1, 1: 2, 2: 4, 3: 1)\n *                 |\n *                 +-+ sclk_div (0x3106 [7:4], special values: 0: 1)\n *                   |\n *                   +-> SCLK\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/i2c/ov8865.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/platform/aspeed/aspeed-video.c#L937-L982",
    "ascii": "/*\n * Update v4l2_bt_timings per current status.\n * frame_top/frame_bottom/frame_left/frame_right need to be ready.\n *\n * The following registers start counting from sync's rising edge:\n * 1. VR090: frame edge's left and right\n * 2. VR094: frame edge's top and bottom\n * 3. VR09C: counting from sync's rising edge to falling edge\n *\n * [Vertical timing]\n *             +--+     +-------------------+     +--+\n *             |  |     |     v i d e o     |     |  |\n *          +--+  +-----+                   +-----+  +---+\n *        vsync+--+\n *    frame_top+--------+\n * frame_bottom+----------------------------+\n *\n *                   +-------------------+\n *                   |     v i d e o     |\n *       +--+  +-----+                   +-----+  +---+\n *          |  |                               |  |\n *          +--+                               +--+\n *        vsync+-------------------------------+\n *    frame_top+-----+\n * frame_bottom+-------------------------+\n *\n * [Horizontal timing]\n *             +--+     +-------------------+     +--+\n *             |  |     |     v i d e o     |     |  |\n *          +--+  +-----+                   +-----+  +---+\n *        hsync+--+\n *   frame_left+--------+\n *  frame_right+----------------------------+\n *\n *                   +-------------------+\n *                   |     v i d e o     |\n *       +--+  +-----+                   +-----+  +---+\n *          |  |                               |  |\n *          +--+                               +--+\n *        hsync+-------------------------------+\n *   frame_left+-----+\n *  frame_right+-------------------------+\n *\n * @v: the struct of aspeed_video\n * @det: v4l2_bt_timings to be updated.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/platform/aspeed/aspeed-video.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/rc/redrat3.c#L315-L325",
    "ascii": "/*\n * convert us back into redrat3 lengths\n *\n * length * 1000   length * 1000000\n * ------------- = ---------------- = micro\n * rr3clk / 1000       rr3clk\n\n * 6 * 2       4 * 3        micro * rr3clk          micro * rr3clk / 1000\n * ----- = 4   ----- = 6    -------------- = len    ---------------------\n *   3           2             1000000                    1000\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/rc/redrat3.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/rc/st_rc.c#L70-L90",
    "ascii": "/*\n * RX graphical example to better understand the difference between ST IR block\n * output and standard definition used by LIRC (and most of the world!)\n *\n *           mark                                     mark\n *      |-IRB_RX_ON-|                            |-IRB_RX_ON-|\n *      ___  ___  ___                            ___  ___  ___             _\n *      | |  | |  | |                            | |  | |  | |             |\n *      | |  | |  | |         space 0            | |  | |  | |   space 1   |\n * _____| |__| |__| |____________________________| |__| |__| |_____________|\n *\n *      |--------------- IRB_RX_SYS -------------|------ IRB_RX_SYS -------|\n *\n *      |------------- encoding bit 0 -----------|---- encoding bit 1 -----|\n *\n * ST hardware returns mark (IRB_RX_ON) and total symbol time (IRB_RX_SYS), so\n * convert to standard mark/space we have to calculate space=(IRB_RX_SYS-mark)\n * The mark time represents the amount of time the carrier (usually 36-40kHz)\n * is detected.The above examples shows Pulse Width Modulation encoding where\n * bit 0 is represented by space>mark.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/rc/st_rc.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/rc/keymaps/rc-msi-tvanywhere-plus.c#L27-L45",
    "ascii": "/*  ---- Remote Button Layout ----\n    POWER   SOURCE  SCAN    MUTE\n    TV/FM   1       2       3\n    |>      4       5       6\n    <|      7       8       9\n    ^^UP    0       +       RECALL\n    vvDN    RECORD  STOP    PLAY\n\n\tMINIMIZE          ZOOM\n\n\t\t  CH+\n      VOL-                   VOL+\n\t\t  CH-\n\n\tSNAPSHOT           MTS\n\n     <<      FUNC    >>     RESET\n*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/rc/keymaps/rc-msi-tvanywhere-plus.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/tuners/mt2063.c#L659-L677",
    "ascii": "/**\n * IsSpurInBand() - Checks to see if a spur will be present within the IF's\n *                  bandwidth. (fIFOut +/- fIFBW, -fIFOut +/- fIFBW)\n *\n *                    ma   mb                                     mc   md\n *                  <--+-+-+-------------------+-------------------+-+-+-->\n *                     |   ^                   0                   ^   |\n *                     ^   b=-fIFOut+fIFBW/2      -b=+fIFOut-fIFBW/2   ^\n *                     a=-fIFOut-fIFBW/2              -a=+fIFOut+fIFBW/2\n *\n *                  Note that some equations are doubled to prevent round-off\n *                  problems when calculating fIFBW/2\n *\n * @pAS_Info:\tAvoid Spurs information block\n * @fm:\t\tIf spur, amount f_IF1 has to move negative\n * @fp:\t\tIf spur, amount f_IF1 has to move positive\n *\n *  Returns 1 if an LO spur would be present, otherwise 0.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/tuners/mt2063.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/usb/dvb-usb-v2/mxl111sf-gpio.c#L708-L714",
    "ascii": "/*\tGPO:\n *\t3 - ATSC/MH#   | 1 = ATSC transport, 0 = MH transport      | default 0\n *\t4 - ATSC_RST## | 1 = ATSC enable, 0 = ATSC Reset           | default 0\n *\t5 - ATSC_EN    | 1 = ATSC power enable, 0 = ATSC power off | default 0\n *\t6 - MH_RESET#  | 1 = MH enable, 0 = MH Reset               | default 0\n *\t7 - MH_EN      | 1 = MH power enable, 0 = MH power off     | default 0\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/usb/dvb-usb-v2/mxl111sf-gpio.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/usb/uvc/uvc_driver.c#L1311-L1336",
    "ascii": "/*\n * Scan the UVC descriptors to locate a chain starting at an Output Terminal\n * and containing the following units:\n *\n * - one or more Output Terminals (USB Streaming or Display)\n * - zero or one Processing Unit\n * - zero, one or more single-input Selector Units\n * - zero or one multiple-input Selector Units, provided all inputs are\n *   connected to input terminals\n * - zero, one or mode single-input Extension Units\n * - one or more Input Terminals (Camera, External or USB Streaming)\n *\n * The terminal and units must match on of the following structures:\n *\n * ITT_*(0) -> +---------+    +---------+    +---------+ -> TT_STREAMING(0)\n * ...         | SU{0,1} | -> | PU{0,1} | -> | XU{0,n} |    ...\n * ITT_*(n) -> +---------+    +---------+    +---------+ -> TT_STREAMING(n)\n *\n *                 +---------+    +---------+ -> OTT_*(0)\n * TT_STREAMING -> | PU{0,1} | -> | XU{0,n} |    ...\n *                 +---------+    +---------+ -> OTT_*(n)\n *\n * The Processing Unit and Extension Units can be in any order. Additional\n * Extension Units connected to the main chain as single-unit branches are\n * also supported. Single-input Selector Units are ignored.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/usb/uvc/uvc_driver.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/memory/tegra/mc.c#L757-L779",
    "ascii": "/*\n * Memory Controller (MC) has few Memory Clients that are issuing memory\n * bandwidth allocation requests to the MC interconnect provider. The MC\n * provider aggregates the requests and then sends the aggregated request\n * up to the External Memory Controller (EMC) interconnect provider which\n * re-configures hardware interface to External Memory (EMEM) in accordance\n * to the required bandwidth. Each MC interconnect node represents an\n * individual Memory Client.\n *\n * Memory interconnect topology:\n *\n *               +----+\n * +--------+    |    |\n * | TEXSRD +--->+    |\n * +--------+    |    |\n *               |    |    +-----+    +------+\n *    ...        | MC +--->+ EMC +--->+ EMEM |\n *               |    |    +-----+    +------+\n * +--------+    |    |\n * | DISP.. +--->+    |\n * +--------+    |    |\n *               +----+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/memory/tegra/mc.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/misc/genwqe/card_ddcb.c#L35-L80",
    "ascii": "/*\n * N: next DDCB, this is where the next DDCB will be put.\n * A: active DDCB, this is where the code will look for the next completion.\n * x: DDCB is enqueued, we are waiting for its completion.\n * Situation (1): Empty queue\n *  +---+---+---+---+---+---+---+---+\n *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n *  |   |   |   |   |   |   |   |   |\n *  +---+---+---+---+---+---+---+---+\n *           A/N\n *  enqueued_ddcbs = A - N = 2 - 2 = 0\n *\n * Situation (2): Wrapped, N > A\n *  +---+---+---+---+---+---+---+---+\n *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n *  |   |   | x | x |   |   |   |   |\n *  +---+---+---+---+---+---+---+---+\n *            A       N\n *  enqueued_ddcbs = N - A = 4 - 2 = 2\n *\n * Situation (3): Queue wrapped, A > N\n *  +---+---+---+---+---+---+---+---+\n *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n *  | x | x |   |   | x | x | x | x |\n *  +---+---+---+---+---+---+---+---+\n *            N       A\n *  enqueued_ddcbs = queue_max  - (A - N) = 8 - (4 - 2) = 6\n *\n * Situation (4a): Queue full N > A\n *  +---+---+---+---+---+---+---+---+\n *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n *  | x | x | x | x | x | x | x |   |\n *  +---+---+---+---+---+---+---+---+\n *    A                           N\n *\n *  enqueued_ddcbs = N - A = 7 - 0 = 7\n *\n * Situation (4a): Queue full A > N\n *  +---+---+---+---+---+---+---+---+\n *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n *  | x | x | x |   | x | x | x | x |\n *  +---+---+---+---+---+---+---+---+\n *                N   A\n *  enqueued_ddcbs = queue_max - (A - N) = 8 - (4 - 3) = 7\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/misc/genwqe/card_ddcb.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/mtd/nand/raw/gpmi-nand/gpmi-nand.c#L766-L839",
    "ascii": "/*\n * <1> Firstly, we should know what's the GPMI-clock means.\n *     The GPMI-clock is the internal clock in the gpmi nand controller.\n *     If you set 100MHz to gpmi nand controller, the GPMI-clock's period\n *     is 10ns. Mark the GPMI-clock's period as GPMI-clock-period.\n *\n * <2> Secondly, we should know what's the frequency on the nand chip pins.\n *     The frequency on the nand chip pins is derived from the GPMI-clock.\n *     We can get it from the following equation:\n *\n *         F = G / (DS + DH)\n *\n *         F  : the frequency on the nand chip pins.\n *         G  : the GPMI clock, such as 100MHz.\n *         DS : GPMI_HW_GPMI_TIMING0:DATA_SETUP\n *         DH : GPMI_HW_GPMI_TIMING0:DATA_HOLD\n *\n * <3> Thirdly, when the frequency on the nand chip pins is above 33MHz,\n *     the nand EDO(extended Data Out) timing could be applied.\n *     The GPMI implements a feedback read strobe to sample the read data.\n *     The feedback read strobe can be delayed to support the nand EDO timing\n *     where the read strobe may deasserts before the read data is valid, and\n *     read data is valid for some time after read strobe.\n *\n *     The following figure illustrates some aspects of a NAND Flash read:\n *\n *                   |<---tREA---->|\n *                   |             |\n *                   |         |   |\n *                   |<--tRP-->|   |\n *                   |         |   |\n *                  __          ___|__________________________________\n *     RDN            \\________/   |\n *                                 |\n *                                 /---------\\\n *     Read Data    --------------<           >---------\n *                                 \\---------/\n *                                |     |\n *                                |<-D->|\n *     FeedbackRDN  ________             ____________\n *                          \\___________/\n *\n *          D stands for delay, set in the HW_GPMI_CTRL1:RDN_DELAY.\n *\n *\n * <4> Now, we begin to describe how to compute the right RDN_DELAY.\n *\n *  4.1) From the aspect of the nand chip pins:\n *        Delay = (tREA + C - tRP)               {1}\n *\n *        tREA : the maximum read access time.\n *        C    : a constant to adjust the delay. default is 4000ps.\n *        tRP  : the read pulse width, which is exactly:\n *                   tRP = (GPMI-clock-period) * DATA_SETUP\n *\n *  4.2) From the aspect of the GPMI nand controller:\n *         Delay = RDN_DELAY * 0.125 * RP        {2}\n *\n *         RP   : the DLL reference period.\n *            if (GPMI-clock-period > DLL_THRETHOLD)\n *                   RP = GPMI-clock-period / 2;\n *            else\n *                   RP = GPMI-clock-period;\n *\n *            Set the HW_GPMI_CTRL1:HALF_PERIOD if GPMI-clock-period\n *            is greater DLL_THRETHOLD. In other SOCs, the DLL_THRETHOLD\n *            is 16000ps, but in mx6q, we use 12000ps.\n *\n *  4.3) since {1} equals {2}, we get:\n *\n *                     (tREA + 4000 - tRP) * 8\n *         RDN_DELAY = -----------------------     {3}\n *                           RP\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/mtd/nand/raw/gpmi-nand/gpmi-nand.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/dsa/sja1105/sja1105_ptp.h#L26-L38",
    "ascii": "/* Calculate the first base_time in the future that satisfies this\n * relationship:\n *\n * future_base_time = base_time + N x cycle_time >= now, or\n *\n *      now - base_time\n * N >= ---------------\n *         cycle_time\n *\n * Because N is an integer, the ceiling value of the above \"a / b\" ratio\n * is in fact precisely the floor value of \"(a + b - 1) / b\", which is\n * easier to calculate only having integer division tools.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": true
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/dsa/sja1105/sja1105_ptp.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/dsa/sja1105/sja1105_tas.c#L93-L157",
    "ascii": "/* Lo and behold: the egress scheduler from hell.\n *\n * At the hardware level, the Time-Aware Shaper holds a global linear arrray of\n * all schedule entries for all ports. These are the Gate Control List (GCL)\n * entries, let's call them \"timeslots\" for short. This linear array of\n * timeslots is held in BLK_IDX_SCHEDULE.\n *\n * Then there are a maximum of 8 \"execution threads\" inside the switch, which\n * iterate cyclically through the \"schedule\". Each \"cycle\" has an entry point\n * and an exit point, both being timeslot indices in the schedule table. The\n * hardware calls each cycle a \"subschedule\".\n *\n * Subschedule (cycle) i starts when\n *   ptpclkval >= ptpschtm + BLK_IDX_SCHEDULE_ENTRY_POINTS[i].delta.\n *\n * The hardware scheduler iterates BLK_IDX_SCHEDULE with a k ranging from\n *   k = BLK_IDX_SCHEDULE_ENTRY_POINTS[i].address to\n *   k = BLK_IDX_SCHEDULE_PARAMS.subscheind[i]\n *\n * For each schedule entry (timeslot) k, the engine executes the gate control\n * list entry for the duration of BLK_IDX_SCHEDULE[k].delta.\n *\n *         +---------+\n *         |         | BLK_IDX_SCHEDULE_ENTRY_POINTS_PARAMS\n *         +---------+\n *              |\n *              +-----------------+\n *                                | .actsubsch\n *  BLK_IDX_SCHEDULE_ENTRY_POINTS v\n *                 +-------+-------+\n *                 |cycle 0|cycle 1|\n *                 +-------+-------+\n *                   |  |      |  |\n *  +----------------+  |      |  +-------------------------------------+\n *  |   .subschindx     |      |             .subschindx                |\n *  |                   |      +---------------+                        |\n *  |          .address |        .address      |                        |\n *  |                   |                      |                        |\n *  |                   |                      |                        |\n *  |  BLK_IDX_SCHEDULE v                      v                        |\n *  |              +-------+-------+-------+-------+-------+------+     |\n *  |              |entry 0|entry 1|entry 2|entry 3|entry 4|entry5|     |\n *  |              +-------+-------+-------+-------+-------+------+     |\n *  |                                  ^                    ^  ^  ^     |\n *  |                                  |                    |  |  |     |\n *  |        +-------------------------+                    |  |  |     |\n *  |        |              +-------------------------------+  |  |     |\n *  |        |              |              +-------------------+  |     |\n *  |        |              |              |                      |     |\n *  | +---------------------------------------------------------------+ |\n *  | |subscheind[0]<=subscheind[1]<=subscheind[2]<=...<=subscheind[7]| |\n *  | +---------------------------------------------------------------+ |\n *  |        ^              ^                BLK_IDX_SCHEDULE_PARAMS    |\n *  |        |              |                                           |\n *  +--------+              +-------------------------------------------+\n *\n *  In the above picture there are two subschedules (cycles):\n *\n *  - cycle 0: iterates the schedule table from 0 to 2 (and back)\n *  - cycle 1: iterates the schedule table from 3 to 5 (and back)\n *\n *  All other possible execution threads must be marked as unused by making\n *  their \"subschedule end index\" (subscheind) equal to the last valid\n *  subschedule's end index (in this case 5).\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/dsa/sja1105/sja1105_tas.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/dsa/sja1105/sja1105_vl.c#L169-L274",
    "ascii": "/* The switch flow classification core implements TTEthernet, which 'thinks' in\n * terms of Virtual Links (VL), a concept borrowed from ARINC 664 part 7.\n * However it also has one other operating mode (VLLUPFORMAT=0) where it acts\n * somewhat closer to a pre-standard implementation of IEEE 802.1Qci\n * (Per-Stream Filtering and Policing), which is what the driver is going to be\n * implementing.\n *\n *                                 VL Lookup\n *        Key = {DMAC && VLANID   +---------+  Key = { (DMAC[47:16] & VLMASK ==\n *               && VLAN PCP      |         |                         VLMARKER)\n *               && INGRESS PORT} +---------+                      (both fixed)\n *            (exact match,            |             && DMAC[15:0] == VLID\n *         all specified in rule)      |                    (specified in rule)\n *                                     v             && INGRESS PORT }\n *                               ------------\n *                    0 (PSFP)  /            \\  1 (ARINC664)\n *                 +-----------/  VLLUPFORMAT \\----------+\n *                 |           \\    (fixed)   /          |\n *                 |            \\            /           |\n *  0 (forwarding) v             ------------            |\n *           ------------                                |\n *          /            \\  1 (QoS classification)       |\n *     +---/  ISCRITICAL  \\-----------+                  |\n *     |   \\  (per rule)  /           |                  |\n *     |    \\            /   VLID taken from      VLID taken from\n *     v     ------------     index of rule       contents of rule\n *  select                     that matched         that matched\n * DESTPORTS                          |                  |\n *  |                                 +---------+--------+\n *  |                                           |\n *  |                                           v\n *  |                                     VL Forwarding\n *  |                                   (indexed by VLID)\n *  |                                      +---------+\n *  |                       +--------------|         |\n *  |                       |  select TYPE +---------+\n *  |                       v\n *  |   0 (rate      ------------    1 (time\n *  |  constrained) /            \\   triggered)\n *  |       +------/     TYPE     \\------------+\n *  |       |      \\  (per VLID)  /            |\n *  |       v       \\            /             v\n *  |  VL Policing   ------------         VL Policing\n *  | (indexed by VLID)                (indexed by VLID)\n *  |  +---------+                        +---------+\n *  |  | TYPE=0  |                        | TYPE=1  |\n *  |  +---------+                        +---------+\n *  |  select SHARINDX                 select SHARINDX to\n *  |  to rate-limit                 re-enter VL Forwarding\n *  |  groups of VL's               with new VLID for egress\n *  |  to same quota                           |\n *  |       |                                  |\n *  |  select MAXLEN -> exceed => drop    select MAXLEN -> exceed => drop\n *  |       |                                  |\n *  |       v                                  v\n *  |  VL Forwarding                      VL Forwarding\n *  | (indexed by SHARINDX)             (indexed by SHARINDX)\n *  |  +---------+                        +---------+\n *  |  | TYPE=0  |                        | TYPE=1  |\n *  |  +---------+                        +---------+\n *  |  select PRIORITY,                 select PRIORITY,\n *  | PARTITION, DESTPORTS            PARTITION, DESTPORTS\n *  |       |                                  |\n *  |       v                                  v\n *  |  VL Policing                        VL Policing\n *  | (indexed by SHARINDX)           (indexed by SHARINDX)\n *  |  +---------+                        +---------+\n *  |  | TYPE=0  |                        | TYPE=1  |\n *  |  +---------+                        +---------+\n *  |       |                                  |\n *  |       v                                  |\n *  |  select BAG, -> exceed => drop           |\n *  |    JITTER                                v\n *  |       |             ----------------------------------------------\n *  |       |            /    Reception Window is open for this VL      \\\n *  |       |           /    (the Schedule Table executes an entry i     \\\n *  |       |          /   M <= i < N, for which these conditions hold):  \\ no\n *  |       |    +----/                                                    \\-+\n *  |       |    |yes \\       WINST[M] == 1 && WINSTINDEX[M] == VLID       / |\n *  |       |    |     \\     WINEND[N] == 1 && WINSTINDEX[N] == VLID      /  |\n *  |       |    |      \\                                                /   |\n *  |       |    |       \\ (the VL window has opened and not yet closed)/    |\n *  |       |    |        ----------------------------------------------     |\n *  |       |    v                                                           v\n *  |       |  dispatch to DESTPORTS when the Schedule Table               drop\n *  |       |  executes an entry i with TXEN == 1 && VLINDEX == i\n *  v       v\n * dispatch immediately to DESTPORTS\n *\n * The per-port classification key is always composed of {DMAC, VID, PCP} and\n * is non-maskable. This 'looks like' the NULL stream identification function\n * from IEEE 802.1CB clause 6, except for the extra VLAN PCP. When the switch\n * ports operate as VLAN-unaware, we do allow the user to not specify the VLAN\n * ID and PCP, and then the port-based defaults will be used.\n *\n * In TTEthernet, routing is something that needs to be done manually for each\n * Virtual Link. So the flow action must always include one of:\n * a. 'redirect', 'trap' or 'drop': select the egress port list\n * Additionally, the following actions may be applied on a Virtual Link,\n * turning it into 'critical' traffic:\n * b. 'police': turn it into a rate-constrained VL, with bandwidth limitation\n *    given by the maximum frame length, bandwidth allocation gap (BAG) and\n *    maximum jitter.\n * c. 'gate': turn it into a time-triggered VL, which can be only be received\n *    and forwarded according to a given schedule.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/dsa/sja1105/sja1105_vl.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/intel/ice/ice_flex_pipe.c#L653-L677",
    "ascii": "/**\n * ice_gen_key_word - generate 16-bits of a key/mask word\n * @val: the value\n * @valid: valid bits mask (change only the valid bits)\n * @dont_care: don't care mask\n * @nvr_mtch: never match mask\n * @key: pointer to an array of where the resulting key portion\n * @key_inv: pointer to an array of where the resulting key invert portion\n *\n * This function generates 16-bits from a 8-bit value, an 8-bit don't care mask\n * and an 8-bit never match mask. The 16-bits of output are divided into 8 bits\n * of key and 8 bits of key invert.\n *\n *     '0' =    b01, always match a 0 bit\n *     '1' =    b10, always match a 1 bit\n *     '?' =    b11, don't care bit (always matches)\n *     '~' =    b00, never match bit\n *\n * Input:\n *          val:         b0  1  0  1  0  1\n *          dont_care:   b0  0  1  1  0  0\n *          never_mtch:  b0  0  0  0  1  1\n *          ------------------------------\n * Result:  key:        b01 10 11 11 00 00\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm/mach-s3c/mach-mini2440.c#L345-L361",
    "ascii": "/* \n *  CON5\n *\t+--+\t /-----\\\n *\t|  |    |\t|\n *\t|  |\t|  BAT\t|\n *\t|  |\t \\_____/\n *\t|  |\n *\t|  |  +----+  +----+\n *\t|  |  | K5 |  | K1 |\n *\t|  |  +----+  +----+\n *\t|  |  +----+  +----+\n *\t|  |  | K4 |  | K2 |\n *\t|  |  +----+  +----+\n *\t|  |  +----+  +----+\n *\t|  |  | K6 |  | K3 |\n *\t|  |  +----+  +----+\n *\t  .....\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm/mach-s3c/mach-mini2440.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/marvell/prestera/prestera_router_hw.c#L11-L28",
    "ascii": "/*\n *                                Nexthop is pointed\n *                                to port (not rif)\n *                                +-------+\n *                              +>|nexthop|\n *                              | +-------+\n *                              |\n *            +--+        +-----++\n *   +------->|vr|<-+   +>|nh_grp|\n *   |        +--+  |   | +------+\n *   |              |   |\n * +-+-------+   +--+---+-+\n * |rif_entry|   |fib_node|\n * +---------+   +--------+\n *  Rif is        Fib - is exit point\n *  used as\n *  entry point\n *  for vr in hw\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/marvell/prestera/prestera_router_hw.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c#L1775-L1813",
    "ascii": "/* We translate the tc filter with CT action to the following HW model:\n *\n *\t+---------------------+\n *\t+ ft prio (tc chain)  +\n *\t+ original match      +\n *\t+---------------------+\n *\t\t | set chain miss mapping\n *\t\t | set fte_id\n *\t\t | set tunnel_id\n *\t\t | do decap\n *\t\t |\n * +-------------+\n * | Chain 0\t |\n * | optimization|\n * |\t\t v\n * |\t+---------------------+\n * |\t+ pre_ct/pre_ct_nat   +  if matches     +----------------------+\n * |\t+ zone+nat match      +---------------->+ post_act (see below) +\n * |\t+---------------------+  set zone       +----------------------+\n * |\t\t |\n * +-------------+ set zone\n *\t\t |\n *\t\t v\n *\t+--------------------+\n *\t+ CT (nat or no nat) +\n *\t+ tuple + zone match +\n *\t+--------------------+\n *\t\t | set mark\n *\t\t | set labels_id\n *\t\t | set established\n *\t\t | set zone_restore\n *\t\t | do nat (if needed)\n *\t\t v\n *\t+--------------+\n *\t+ post_act     + original filter actions\n *\t+ fte_id match +------------------------>\n *\t+--------------+\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c#L422-L467",
    "ascii": "/* For the following typical flow table:\n *\n * +-------------------------------+\n * +       original flow table     +\n * +-------------------------------+\n * +         original match        +\n * +-------------------------------+\n * + sample action + other actions +\n * +-------------------------------+\n *\n * We translate the tc filter with sample action to the following HW model:\n *\n *         +---------------------+\n *         + original flow table +\n *         +---------------------+\n *         +   original match    +\n *         +---------------------+\n *               | set fte_id (if reg_c preserve cap)\n *               | do decap (if required)\n *               v\n * +------------------------------------------------+\n * +                Flow Sampler Object             +\n * +------------------------------------------------+\n * +                    sample ratio                +\n * +------------------------------------------------+\n * +    sample table id    |    default table id    +\n * +------------------------------------------------+\n *            |                            |\n *            v                            v\n * +-----------------------------+  +-------------------+\n * +        sample table         +  +   default table   +\n * +-----------------------------+  +-------------------+\n * + forward to management vport +             |\n * +-----------------------------+             |\n *                                     +-------+------+\n *                                     |              |reg_c preserve cap\n *                                     |              |or decap action\n *                                     v              v\n *                        +-----------------+   +-------------+\n *                        + per vport table +   + post action +\n *                        +-----------------+   +-------------+\n *                        + original match  +\n *                        +-----------------+\n *                        + other actions   +\n *                        +-----------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c#L172-L183",
    "ascii": "/* Replace relevant fields, except of:\n * htbl - keep the origin htbl\n * miss_list + list - already took the src from the list.\n * icm_addr/mr_addr - depends on the hosting table.\n *\n * Before:\n * | a | -> | b | -> | c | ->\n *\n * After:\n * | a | -> | c | ->\n * While the data that was in b copied to a.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/mscc/ocelot_devlink.c#L39-L46",
    "ascii": "/*\n *  Amount of packet buffer\n *  |  per QoS class\n *  |  |  reserved\n *  |  |  |   per egress port\n *  |  |  |   |\n *  V  V  v   v\n * BUF_Q_RSRV_E\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/mscc/ocelot_devlink.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/realtek/atp.c#L390-L400",
    "ascii": "/*\n  An EEPROM read command starts by shifting out 0x60+address, and then\n  shifting in the serial data. See the NatSemi databook for details.\n *\t\t   ________________\n * CS : __|\n *\t\t\t   ___\t   ___\n * CLK: ______|\t  |___|\t  |\n *\t\t __ _______ _______\n * DI :\t __X_______X_______X\n * DO :\t _________X_______X\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/realtek/atp.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/sfc/mae.c#L282-L287",
    "ascii": "/* Bit twiddling:\n * Prefix: 1...110...0\n *      ~: 0...001...1\n *    + 1: 0...010...0 is power of two\n * so (~x) & ((~x) + 1) == 0.  Converse holds also.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/sfc/mae.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/toshiba/spider_net.h#L184-L200",
    "ascii": "/* DMAC control register GDMACCNTR\n *\n * 1(0)\t\t\t\tenable r/tx dma\n *  0000000\t\t\t\tfixed to 0\n *\n *         000000\t\t\tfixed to 0\n *               0(1)\t\t\ten/disable descr writeback on force end\n *                0(1)\t\t\tforce end\n *\n *                 000000\t\tfixed to 0\n *                       00\t\tburst alignment: 128 bytes\n *                       11\t\tburst alignment: 1024 bytes\n *\n *                         00000\tfixed to 0\n *                              0\tdescr writeback size 32 bytes\n *                               0(1)\tdescr chain end interrupt enable\n *                                0(1)\tdescr status writeback enable\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/toshiba/spider_net.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ipa/gsi.c#L26-L87",
    "ascii": "/**\n * DOC: The IPA Generic Software Interface\n *\n * The generic software interface (GSI) is an integral component of the IPA,\n * providing a well-defined communication layer between the AP subsystem\n * and the IPA core.  The modem uses the GSI layer as well.\n *\n *\t--------\t     ---------\n *\t|      |\t     |\t     |\n *\t|  AP  +<---.\t.----+ Modem |\n *\t|      +--. |\t| .->+\t     |\n *\t|      |  | |\t| |  |\t     |\n *\t--------  | |\t| |  ---------\n *\t\t  v |\tv |\n *\t\t--+-+---+-+--\n *\t\t|    GSI    |\n *\t\t|-----------|\n *\t\t|\t    |\n *\t\t|    IPA    |\n *\t\t|\t    |\n *\t\t-------------\n *\n * In the above diagram, the AP and Modem represent \"execution environments\"\n * (EEs), which are independent operating environments that use the IPA for\n * data transfer.\n *\n * Each EE uses a set of unidirectional GSI \"channels,\" which allow transfer\n * of data to or from the IPA.  A channel is implemented as a ring buffer,\n * with a DRAM-resident array of \"transfer elements\" (TREs) available to\n * describe transfers to or from other EEs through the IPA.  A transfer\n * element can also contain an immediate command, requesting the IPA perform\n * actions other than data transfer.\n *\n * Each TRE refers to a block of data--also located in DRAM.  After writing\n * one or more TREs to a channel, the writer (either the IPA or an EE) writes\n * a doorbell register to inform the receiving side how many elements have\n * been written.\n *\n * Each channel has a GSI \"event ring\" associated with it.  An event ring\n * is implemented very much like a channel ring, but is always directed from\n * the IPA to an EE.  The IPA notifies an EE (such as the AP) about channel\n * events by adding an entry to the event ring associated with the channel.\n * The GSI then writes its doorbell for the event ring, causing the target\n * EE to be interrupted.  Each entry in an event ring contains a pointer\n * to the channel TRE whose completion the event represents.\n *\n * Each TRE in a channel ring has a set of flags.  One flag indicates whether\n * the completion of the transfer operation generates an entry (and possibly\n * an interrupt) in the channel's event ring.  Other flags allow transfer\n * elements to be chained together, forming a single logical transaction.\n * TRE flags are used to control whether and when interrupts are generated\n * to signal completion of channel transfers.\n *\n * Elements in channel and event rings are completed (or consumed) strictly\n * in order.  Completion of one entry implies the completion of all preceding\n * entries.  A single completion interrupt can therefore communicate the\n * completion of many transfers.\n *\n * Note that all GSI registers are little-endian, which is the assumed\n * endianness of I/O space accesses.  The accessor functions perform byte\n * swapping if needed (i.e., for a big endian CPU).\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ipa/gsi.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/mdio/mdio-i2c.c#L97-L107",
    "ascii": "/* RollBall SFPs do not access internal PHY via I2C address 0x56, but\n * instead via address 0x51, when SFP page is set to 0x03 and password to\n * 0xffffffff.\n *\n * address  size  contents  description\n * -------  ----  --------  -----------\n * 0x80     1     CMD       0x01/0x02/0x04 for write/read/done\n * 0x81     1     DEV       Clause 45 device\n * 0x82     2     REG       Clause 45 register\n * 0x84     2     VAL       Register value\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/mdio/mdio-i2c.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/wl3501_cs.c#L284-L295",
    "ascii": "/*\n * Get/Allocate a free Tx Data Buffer\n *\n *  *--------------*-----------------*----------------------------------*\n *  |    PLCP      |    MAC Header   |  DST  SRC         Data ...       |\n *  |  (24 bytes)  |    (30 bytes)   |  (6)  (6)  (Ethernet Row Data)   |\n *  *--------------*-----------------*----------------------------------*\n *  \\               \\- IEEE 802.11 -/ \\-------------- len --------------/\n *   \\-struct wl3501_80211_tx_hdr--/   \\-------- Ethernet Frame -------/\n *\n * Return = Position in Card\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/wl3501_cs.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/ath/ath10k/targaddrs.h#L277-L284",
    "ascii": "/*\n * Fw Mode/SubMode Mask\n *-----------------------------------------------------------------------------\n *  SUB   |   SUB   |   SUB   |  SUB    |         |         |         |\n *MODE[3] | MODE[2] | MODE[1] | MODE[0] | MODE[3] | MODE[2] | MODE[1] | MODE[0]\n *  (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)\n *-----------------------------------------------------------------------------\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/ath/ath10k/targaddrs.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/ath/ath6kl/target.h#L319-L325",
    "ascii": "/* Fw Mode/SubMode Mask\n|------------------------------------------------------------------------------|\n|   SUB   |   SUB   |   SUB   |  SUB    |         |         |         |\n| MODE[3] | MODE[2] | MODE[1] | MODE[0] | MODE[3] | MODE[2] | MODE[1] | MODE[0|\n|   (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)\n|------------------------------------------------------------------------------|\n*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/ath/ath6kl/target.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c#L1454-L1460",
    "ascii": "/* When driver needs ucode to stop beaconing, it has to make sure that\n * MCTL_AP is clear and MCTL_INFRA is set\n * Mode           MCTL_AP        MCTL_INFRA\n * AP                1              1\n * STA               0              1 <--- This will ensure no beacons\n * IBSS              0              0\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/intel/iwlwifi/fw/api/phy-ctxt.h#L23-L36",
    "ascii": "/*\n * Control channel position:\n * For legacy set bit means upper channel, otherwise lower.\n * For VHT - bit-2 marks if the control is lower/upper relative to center-freq\n *   bits-1:0 mark the distance from the center freq. for 20Mhz, offset is 0.\n *                                   center_freq\n * For EHT - bit-3 is used for extended distance\n *                                                |\n * 40Mhz                                     |____|____|\n * 80Mhz                                |____|____|____|____|\n * 160Mhz                     |____|____|____|____|____|____|____|____|\n * 320MHz |____|____|____|____|____|____|____|____|____|____|____|____|____|____|____|____|\n * code    1011 1010 1001 1000 0011 0010 0001 0000 0100 0101 0110 0111 1100 1101 1110 1111\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/intel/iwlwifi/fw/api/phy-ctxt.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/marvell/mwifiex/scan.c#L320-L337",
    "ascii": "/*\n * This function checks if a scanned network is compatible with the driver\n * settings.\n *\n *   WEP     WPA    WPA2   ad-hoc encrypt                  Network\n * enabled enabled enabled  AES    mode   Privacy WPA WPA2 Compatible\n *    0       0       0      0     NONE      0     0   0   yes No security\n *    0       1       0      0      x        1x    1   x   yes WPA (disable\n *                                                         HT if no AES)\n *    0       0       1      0      x        1x    x   1   yes WPA2 (disable\n *                                                         HT if no AES)\n *    0       0       0      1     NONE      1     0   0   yes Ad-hoc AES\n *    1       0       0      0     NONE      1     0   0   yes Static WEP\n *                                                         (disable HT)\n *    0       0       0      0    !=NONE     1     0   0   yes Dynamic WEP\n *\n * Compatibility is not matched while roaming, except for mode.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/marvell/mwifiex/scan.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/ti/wl1251/cmd.h#L360-L375",
    "ascii": "/*\n *\n * key_type_e   key size    key format\n * ----------   ---------   ----------\n * 0x00         5, 13, 29   Key data\n * 0x01         5, 13, 29   Key data\n * 0x04         16          16 bytes of key data\n * 0x05         16          16 bytes of key data\n * 0x0a         32          16 bytes of TKIP key data\n *                          8 bytes of RX MIC key data\n *                          8 bytes of TX MIC key data\n * 0x0b         32          16 bytes of TKIP key data\n *                          8 bytes of RX MIC key data\n *                          8 bytes of TX MIC key data\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/ti/wl1251/cmd.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/ti/wlcore/io.c#L89-L122",
    "ascii": "/* Set the partitions to access the chip addresses\n *\n * To simplify driver code, a fixed (virtual) memory map is defined for\n * register and memory addresses. Because in the chipset, in different stages\n * of operation, those addresses will move around, an address translation\n * mechanism is required.\n *\n * There are four partitions (three memory and one register partition),\n * which are mapped to two different areas of the hardware memory.\n *\n *                                Virtual address\n *                                     space\n *\n *                                    |    |\n *                                 ...+----+--> mem.start\n *          Physical address    ...   |    |\n *               space       ...      |    | [PART_0]\n *                        ...         |    |\n *  00000000  <--+----+...         ...+----+--> mem.start + mem.size\n *               |    |         ...   |    |\n *               |MEM |      ...      |    |\n *               |    |   ...         |    |\n *  mem.size  <--+----+...            |    | {unused area)\n *               |    |   ...         |    |\n *               |REG |      ...      |    |\n *  mem.size     |    |         ...   |    |\n *      +     <--+----+...         ...+----+--> reg.start\n *  reg.size     |    |   ...         |    |\n *               |MEM2|      ...      |    | [PART_1]\n *               |    |         ...   |    |\n *                                 ...+----+--> reg.start + reg.size\n *                                    |    |\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/ti/wlcore/io.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wwan/t7xx/t7xx_modem_ops.c#L238-L258",
    "ascii": "/* Modem Exception Handshake Flow\n *\n * Modem HW Exception interrupt received\n *           (MD_IRQ_CCIF_EX)\n *                   |\n *         +---------v--------+\n *         |   HIF_EX_INIT    | : Disable and clear TXQ\n *         +------------------+\n *                   |\n *         +---------v--------+\n *         | HIF_EX_INIT_DONE | : Wait for the init to be done\n *         +------------------+\n *                   |\n *         +---------v--------+\n *         |HIF_EX_CLEARQ_DONE| : Disable and clear RXQ\n *         +------------------+ : Flush TX/RX workqueues\n *                   |\n *         +---------v--------+\n *         |HIF_EX_ALLQ_RESET | : Restart HW and CLDMA\n *         +------------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/drivers/net/wwan/t7xx/t7xx_modem_ops.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/xen-netback/xenbus.c#L301-L320",
    "ascii": "/* Handle backend state transitions:\n *\n * The backend state starts in Initialising and the following transitions are\n * allowed.\n *\n * Initialising -> InitWait -> Connected\n *          \\\n *           \\        ^    \\         |\n *            \\       |     \\        |\n *             \\      |      \\       |\n *              \\     |       \\      |\n *               \\    |        \\     |\n *                \\   |         \\    |\n *                 V  |          V   V\n *\n *                  Closed  <-> Closing\n *\n * The state argument specifies the eventual state of the backend and the\n * function transitions to that state via the shortest path.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/xen-netback/xenbus.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/nvdimm/btt.h#L47-L82",
    "ascii": "/*\n * A log group represents one log 'lane', and consists of four log entries.\n * Two of the four entries are valid entries, and the remaining two are\n * padding. Due to an old bug in the padding location, we need to perform a\n * test to determine the padding scheme being used, and use that scheme\n * thereafter.\n *\n * In kernels prior to 4.15, 'log group' would have actual log entries at\n * indices (0, 2) and padding at indices (1, 3), where as the correct/updated\n * format has log entries at indices (0, 1) and padding at indices (2, 3).\n *\n * Old (pre 4.15) format:\n * +-----------------+-----------------+\n * |      ent[0]     |      ent[1]     |\n * |       16B       |       16B       |\n * | lba/old/new/seq |       pad       |\n * +-----------------------------------+\n * |      ent[2]     |      ent[3]     |\n * |       16B       |       16B       |\n * | lba/old/new/seq |       pad       |\n * +-----------------+-----------------+\n *\n * New format:\n * +-----------------+-----------------+\n * |      ent[0]     |      ent[1]     |\n * |       16B       |       16B       |\n * | lba/old/new/seq | lba/old/new/seq |\n * +-----------------------------------+\n * |      ent[2]     |      ent[3]     |\n * |       16B       |       16B       |\n * |       pad       |       pad       |\n * +-----------------+-----------------+\n *\n * We detect during start-up which format is in use, and set\n * arena->log_index[(0, 1)] with the detected format.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/nvdimm/btt.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/pci/endpoint/functions/pci-epf-ntb.c#L9-L35",
    "ascii": "/*\n * The PCI NTB function driver configures the SoC with multiple PCIe Endpoint\n * (EP) controller instances (see diagram below) in such a way that\n * transactions from one EP controller are routed to the other EP controller.\n * Once PCI NTB function driver configures the SoC with multiple EP instances,\n * HOST1 and HOST2 can communicate with each other using SoC as a bridge.\n *\n *    +-------------+                                   +-------------+\n *    |             |                                   |             |\n *    |    HOST1    |                                   |    HOST2    |\n *    |             |                                   |             |\n *    +------^------+                                   +------^------+\n *           |                                                 |\n *           |                                                 |\n * +---------|-------------------------------------------------|---------+\n * |  +------v------+                                   +------v------+  |\n * |  |             |                                   |             |  |\n * |  |     EP      |                                   |     EP      |  |\n * |  | CONTROLLER1 |                                   | CONTROLLER2 |  |\n * |  |             <----------------------------------->             |  |\n * |  |             |                                   |             |  |\n * |  |             |                                   |             |  |\n * |  |             |  SoC With Multiple EP Instances   |             |  |\n * |  |             |  (Configured using NTB Function)  |             |  |\n * |  +-------------+                                   +-------------+  |\n * +---------------------------------------------------------------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/pci/endpoint/functions/pci-epf-ntb.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm/plat-orion/gpio.c#L325-L349",
    "ascii": "/*****************************************************************************\n * Orion GPIO IRQ\n *\n * GPIO_IN_POL register controls whether GPIO_DATA_IN will hold the same\n * value of the line or the opposite value.\n *\n * Level IRQ handlers: DATA_IN is used directly as cause register.\n *                     Interrupt are masked by LEVEL_MASK registers.\n * Edge IRQ handlers:  Change in DATA_IN are latched in EDGE_CAUSE.\n *                     Interrupt are masked by EDGE_MASK registers.\n * Both-edge handlers: Similar to regular Edge handlers, but also swaps\n *                     the polarity to catch the next line transaction.\n *                     This is a race condition that might not perfectly\n *                     work on some use cases.\n *\n * Every eight GPIO lines are grouped (OR'ed) before going up to main\n * cause register.\n *\n *                    EDGE  cause    mask\n *        data-in   /--------| |-----| |----\\\n *     -----| |-----                         ---- to main cause reg\n *           X      \\----------------| |----/\n *        polarity    LEVEL          mask\n *\n ****************************************************************************/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm/plat-orion/gpio.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/alpha/include/asm/dma.h#L28-L74",
    "ascii": "/*\n * NOTES about DMA transfers:\n *\n *  controller 1: channels 0-3, byte operations, ports 00-1F\n *  controller 2: channels 4-7, word operations, ports C0-DF\n *\n *  - ALL registers are 8 bits only, regardless of transfer size\n *  - channel 4 is not used - cascades 1 into 2.\n *  - channels 0-3 are byte - addresses/counts are for physical bytes\n *  - channels 5-7 are word - addresses/counts are for physical words\n *  - transfers must not cross physical 64K (0-3) or 128K (5-7) boundaries\n *  - transfer count loaded to registers is 1 less than actual count\n *  - controller 2 offsets are all even (2x offsets for controller 1)\n *  - page registers for 5-7 don't use data bit 0, represent 128K pages\n *  - page registers for 0-3 use bit 0, represent 64K pages\n *\n * DMA transfers are limited to the lower 16MB of _physical_ memory.  \n * Note that addresses loaded into registers must be _physical_ addresses,\n * not logical addresses (which may differ if paging is active).\n *\n *  Address mapping for channels 0-3:\n *\n *   A23 ... A16 A15 ... A8  A7 ... A0    (Physical addresses)\n *    |  ...  |   |  ... |   |  ... |\n *    |  ...  |   |  ... |   |  ... |\n *    |  ...  |   |  ... |   |  ... |\n *   P7  ...  P0  A7 ... A0  A7 ... A0   \n * |    Page    | Addr MSB | Addr LSB |   (DMA registers)\n *\n *  Address mapping for channels 5-7:\n *\n *   A23 ... A17 A16 A15 ... A9 A8 A7 ... A1 A0    (Physical addresses)\n *    |  ...  |   \\   \\   ... \\  \\  \\  ... \\  \\\n *    |  ...  |    \\   \\   ... \\  \\  \\  ... \\  (not used)\n *    |  ...  |     \\   \\   ... \\  \\  \\  ... \\\n *   P7  ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0   \n * |      Page      |  Addr MSB   |  Addr LSB  |   (DMA registers)\n *\n * Again, channels 5-7 transfer _physical_ words (16 bits), so addresses\n * and counts _must_ be word-aligned (the lowest address bit is _ignored_ at\n * the hardware level, so odd-byte transfers aren't possible).\n *\n * Transfer count (_not # bytes_) is limited to 64K, represented as actual\n * count - 1 : 64K => 0xFFFF, 1 => 0x0000.  Thus, count is always 1 or more,\n * and up to 128K bytes may be transferred on channels 5-7 in one operation. \n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/alpha/include/asm/dma.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/pci/endpoint/functions/pci-epf-vntb.c#L14-L37",
    "ascii": "/*\n * +------------+         +---------------------------------------+\n * |            |         |                                       |\n * +------------+         |                        +--------------+\n * | NTB        |         |                        | NTB          |\n * | NetDev     |         |                        | NetDev       |\n * +------------+         |                        +--------------+\n * | NTB        |         |                        | NTB          |\n * | Transfer   |         |                        | Transfer     |\n * +------------+         |                        +--------------+\n * |            |         |                        |              |\n * |  PCI NTB   |         |                        |              |\n * |    EPF     |         |                        |              |\n * |   Driver   |         |                        | PCI Virtual  |\n * |            |         +---------------+        | NTB Driver   |\n * |            |         | PCI EP NTB    |<------>|              |\n * |            |         |  FN Driver    |        |              |\n * +------------+         +---------------+        +--------------+\n * |            |         |               |        |              |\n * |  PCI Bus   | <-----> |  PCI EP Bus   |        |  Virtual PCI |\n * |            |  PCI    |               |        |     Bus      |\n * +------------+         +---------------+--------+--------------+\n * PCIe Root Port                        PCI EP\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/pci/endpoint/functions/pci-epf-vntb.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/phy/qualcomm/phy-qcom-edp.c#L613-L661",
    "ascii": "/*\n * Embedded Display Port PLL driver block diagram for branch clocks\n *\n *              +------------------------------+\n *              |        EDP_VCO_CLK           |\n *              |                              |\n *              |    +-------------------+     |\n *              |    |  (EDP PLL/VCO)    |     |\n *              |    +---------+---------+     |\n *              |              v               |\n *              |   +----------+-----------+   |\n *              |   | hsclk_divsel_clk_src |   |\n *              |   +----------+-----------+   |\n *              +------------------------------+\n *                              |\n *          +---------<---------v------------>----------+\n *          |                                           |\n * +--------v----------------+                          |\n * |   edp_phy_pll_link_clk  |                          |\n * |     link_clk            |                          |\n * +--------+----------------+                          |\n *          |                                           |\n *          |                                           |\n *          v                                           v\n * Input to DISPCC block                                |\n * for link clk, crypto clk                             |\n * and interface clock                                  |\n *                                                      |\n *                                                      |\n *      +--------<------------+-----------------+---<---+\n *      |                     |                 |\n * +----v---------+  +--------v-----+  +--------v------+\n * | vco_divided  |  | vco_divided  |  | vco_divided   |\n * |    _clk_src  |  |    _clk_src  |  |    _clk_src   |\n * |              |  |              |  |               |\n * |divsel_six    |  |  divsel_two  |  |  divsel_four  |\n * +-------+------+  +-----+--------+  +--------+------+\n *         |                 |                  |\n *         v---->----------v-------------<------v\n *                         |\n *              +----------+-----------------+\n *              |   edp_phy_pll_vco_div_clk  |\n *              +---------+------------------+\n *                        |\n *                        v\n *              Input to DISPCC block\n *              for EDP pixel clock\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/phy/qualcomm/phy-qcom-edp.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/phy/qualcomm/phy-qcom-qmp-combo.c#L2254-L2271",
    "ascii": "/*\n * Register a fixed rate pipe clock.\n *\n * The <s>_pipe_clksrc generated by PHY goes to the GCC that gate\n * controls it. The <s>_pipe_clk coming out of the GCC is requested\n * by the PHY driver for its operations.\n * We register the <s>_pipe_clksrc here. The gcc driver takes care\n * of assigning this <s>_pipe_clksrc as parent to <s>_pipe_clk.\n * Below picture shows this relationship.\n *\n *         +---------------+\n *         |   PHY block   |<<---------------------------------------+\n *         |               |                                         |\n *         |   +-------+   |                   +-----+               |\n *   I/P---^-->|  PLL  |---^--->pipe_clksrc--->| GCC |--->pipe_clk---+\n *    clk  |   +-------+   |                   +-----+\n *         +---------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/drivers/phy/qualcomm/phy-qcom-qmp-combo.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/phy/qualcomm/phy-qcom-qmp-usb.c#L2342-L2359",
    "ascii": "/*\n * Register a fixed rate pipe clock.\n *\n * The <s>_pipe_clksrc generated by PHY goes to the GCC that gate\n * controls it. The <s>_pipe_clk coming out of the GCC is requested\n * by the PHY driver for its operations.\n * We register the <s>_pipe_clksrc here. The gcc driver takes care\n * of assigning this <s>_pipe_clksrc as parent to <s>_pipe_clk.\n * Below picture shows this relationship.\n *\n *         +---------------+\n *         |   PHY block   |<<---------------------------------------+\n *         |               |                                         |\n *         |   +-------+   |                   +-----+               |\n *   I/P---^-->|  PLL  |---^--->pipe_clksrc--->| GCC |--->pipe_clk---+\n *    clk  |   +-------+   |                   +-----+\n *         +---------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/drivers/phy/qualcomm/phy-qcom-qmp-usb.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/pinctrl/mediatek/pinctrl-mt7986.c#L19-L58",
    "ascii": "/**\n * enum - Locking variants of the iocfg bases\n *\n * MT7986 have multiple bases to program pin configuration listed as the below:\n * iocfg_rt:0x11c30000, iocfg_rb:0x11c40000, iocfg_lt:0x11e20000,\n * iocfg_lb:0x11e30000, iocfg_tr:0x11f00000, iocfg_tl:0x11f10000,\n * _i_based could be used to indicate what base the pin should be mapped into.\n *\n * Each iocfg register base control different group of pads on the SoC\n *\n *\n *  chip carrier\n *\n *      A  B  C  D  E  F  G  H\n *    +------------------------+\n *  8 | o  o  o  o  o  o  o  o |\n *  7 | o  o  o  o  o  o  o  o |\n *  6 | o  o  o  o  o  o  o  o |\n *  5 | o  o  o  o  o  o  o  o |\n *  4 | o  o  o  o  o  o  o  o |\n *  3 | o  o  o  o  o  o  o  o |\n *  2 | o  o  o  o  o  o  o  o |\n *  1 | o  o  o  o  o  o  o  o |\n *    +------------------------+\n *\n *  inside Chip carrier\n *\n *      A  B  C  D  E  F  G  H\n *    +------------------------+\n *  8 |                        |\n *  7 |        TL  TR          |\n *  6 |      +---------+       |\n *  5 |   LT |         | RT    |\n *  4 |      |         |       |\n *  3 |   LB |         | RB    |\n *  2 |      +---------+       |\n *  1 |                        |\n *    +------------------------+\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/pinctrl/mediatek/pinctrl-mt7986.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/pinctrl/mediatek/pinctrl-paris.c#L56-L71",
    "ascii": "/*\n * This section supports converting to/from custom MTK_PIN_CONFIG_DRV_ADV\n * and standard PIN_CONFIG_DRIVE_STRENGTH_UA pin configs.\n *\n * The custom value encodes three hardware bits as follows:\n *\n *   |           Bits           |\n *   | 2 (E1) | 1 (E0) | 0 (EN) | drive strength (uA)\n *   ------------------------------------------------\n *   |    x   |    x   |    0   | disabled, use standard drive strength\n *   -------------------------------------\n *   |    0   |    0   |    1   |  125 uA\n *   |    0   |    1   |    1   |  250 uA\n *   |    1   |    0   |    1   |  500 uA\n *   |    1   |    1   |    1   | 1000 uA\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/pinctrl/mediatek/pinctrl-paris.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/power/supply/bd99954-charger.c#L13-L56",
    "ascii": "/*\n *   The battery charging profile of BD99954.\n *\n *   Curve (1) represents charging current.\n *   Curve (2) represents battery voltage.\n *\n *   The BD99954 data sheet divides charging to three phases.\n *   a) Trickle-charge with constant current (8).\n *   b) pre-charge with constant current (6)\n *   c) fast-charge, first with constant current (5) phase. After\n *      the battery voltage has reached target level (4) we have constant\n *      voltage phase until charging current has dropped to termination\n *      level (7)\n *\n *    V ^                                                        ^ I\n *      .                                                        .\n *      .                                                        .\n *(4)` `.` ` ` ` ` ` ` ` ` ` ` ` ` ` ----------------------------.\n *      .                           :/                           .\n *      .                     o----+/:/ ` ` ` ` ` ` ` ` ` ` ` ` `.` ` (5)\n *      .                     +   ::  +                          .\n *      .                     +  /-   --                         .\n *      .                     +`/-     +                         .\n *      .                     o/-      -:                        .\n *      .                    .s.        +`                       .\n *      .                  .--+         `/                       .\n *      .               ..``  +          .:                      .\n *      .             -`      +           --                     .\n *      .    (2)  ...``       +            :-                    .\n *      .    ...``            +             -:                   .\n *(3)` `.`.\"\"  ` ` ` `+-------- ` ` ` ` ` ` `.:` ` ` ` ` ` ` ` ` .` ` (6)\n *      .             +                       `:.                .\n *      .             +                         -:               .\n *      .             +                           -:.            .\n *      .             +                             .--.         .\n *      .   (1)       +                                `.+` ` ` `.` ` (7)\n *      -..............` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` + ` ` ` .` ` (8)\n *      .                                                +       -\n *      -------------------------------------------------+++++++++-->\n *      |   trickle   |  pre  |          fast            |\n *\n * Details of DT properties for different limits can be found from BD99954\n * device tree binding documentation.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/power/supply/bd99954-charger.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/pwm/pwm-stm32.c#L75-L107",
    "ascii": "/*\n * Capture using PWM input mode:\n *                              ___          ___\n * TI[1, 2, 3 or 4]: ........._|   |________|\n *                             ^0  ^1       ^2\n *                              .   .        .\n *                              .   .        XXXXX\n *                              .   .   XXXXX     |\n *                              .  XXXXX     .    |\n *                            XXXXX .        .    |\n * COUNTER:        ______XXXXX  .   .        .    |_XXX\n *                 start^       .   .        .        ^stop\n *                      .       .   .        .\n *                      v       v   .        v\n *                                  v\n * CCR1/CCR3:       tx..........t0...........t2\n * CCR2/CCR4:       tx..............t1.........\n *\n * DMA burst transfer:          |            |\n *                              v            v\n * DMA buffer:                  { t0, tx }   { t2, t1 }\n * DMA done:                                 ^\n *\n * 0: IC1/3 snapchot on rising edge: counter value -> CCR1/CCR3\n *    + DMA transfer CCR[1/3] & CCR[2/4] values (t0, tx: doesn't care)\n * 1: IC2/4 snapchot on falling edge: counter value -> CCR2/CCR4\n * 2: IC1/3 snapchot on rising edge: counter value -> CCR1/CCR3\n *    + DMA transfer CCR[1/3] & CCR[2/4] values (t2, t1)\n *\n * DMA done, compute:\n * - Period     = t2 - t0\n * - Duty cycle = t1 - t0\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/pwm/pwm-stm32.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/scsi/advansys.c#L2748-L2770",
    "ascii": "/*\n * Add serial number to information bar if signature AAh\n * is found in at bit 15-9 (7 bits) of word 1.\n *\n * Serial Number consists fo 12 alpha-numeric digits.\n *\n *       1 - Product type (A,B,C,D..)  Word0: 15-13 (3 bits)\n *       2 - MFG Location (A,B,C,D..)  Word0: 12-10 (3 bits)\n *     3-4 - Product ID (0-99)         Word0: 9-0 (10 bits)\n *       5 - Product revision (A-J)    Word0:  \"         \"\n *\n *           Signature                 Word1: 15-9 (7 bits)\n *       6 - Year (0-9)                Word1: 8-6 (3 bits) & Word2: 15 (1 bit)\n *     7-8 - Week of the year (1-52)   Word1: 5-0 (6 bits)\n *\n *    9-12 - Serial Number (A001-Z999) Word2: 14-0 (15 bits)\n *\n * Note 1: Only production cards will have a serial number.\n *\n * Note 2: Signature is most significant 7 bits (0xFE).\n *\n * Returns ASC_TRUE if serial number found, otherwise returns ASC_FALSE.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/scsi/advansys.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/spi/spi-dw-dma.c#L497-L527",
    "ascii": "/*\n * In case if at least one of the requested DMA channels doesn't support the\n * hardware accelerated SG list entries traverse, the DMA driver will most\n * likely work that around by performing the IRQ-based SG list entries\n * resubmission. That might and will cause a problem if the DMA Tx channel is\n * recharged and re-executed before the Rx DMA channel. Due to\n * non-deterministic IRQ-handler execution latency the DMA Tx channel will\n * start pushing data to the SPI bus before the Rx DMA channel is even\n * reinitialized with the next inbound SG list entry. By doing so the DMA Tx\n * channel will implicitly start filling the DW APB SSI Rx FIFO up, which while\n * the DMA Rx channel being recharged and re-executed will eventually be\n * overflown.\n *\n * In order to solve the problem we have to feed the DMA engine with SG list\n * entries one-by-one. It shall keep the DW APB SSI Tx and Rx FIFOs\n * synchronized and prevent the Rx FIFO overflow. Since in general the tx_sg\n * and rx_sg lists may have different number of entries of different lengths\n * (though total length should match) let's virtually split the SG-lists to the\n * set of DMA transfers, which length is a minimum of the ordered SG-entries\n * lengths. An ASCII-sketch of the implemented algo is following:\n *                  xfer->len\n *                |___________|\n * tx_sg list:    |___|____|__|\n * rx_sg list:    |_|____|____|\n * DMA transfers: |_|_|__|_|__|\n *\n * Note in order to have this workaround solving the denoted problem the DMA\n * engine driver should properly initialize the max_sg_burst capability and set\n * the DMA device max segment size parameter with maximum data block size the\n * DMA engine supports.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/spi/spi-dw-dma.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/spi/spi-meson-spicc.c#L555-L581",
    "ascii": "/*\n * The Clock Mux\n *            x-----------------x   x------------x    x------\\\n *        |---| pow2 fixed div  |---| pow2 div   |----|      |\n *        |   x-----------------x   x------------x    |      |\n * src ---|                                           | mux  |-- out\n *        |   x-----------------x   x------------x    |      |\n *        |---| enh fixed div   |---| enh div    |0---|      |\n *            x-----------------x   x------------x    x------/\n *\n * Clk path for GX series:\n *    src -> pow2 fixed div -> pow2 div -> out\n *\n * Clk path for AXG series:\n *    src -> pow2 fixed div -> pow2 div -> mux -> out\n *    src -> enh fixed div -> enh div -> mux -> out\n *\n * Clk path for G12A series:\n *    pclk -> pow2 fixed div -> pow2 div -> mux -> out\n *    pclk -> enh fixed div -> enh div -> mux -> out\n *\n * The pow2 divider is tied to the controller HW state, and the\n * divider is only valid when the controller is initialized.\n *\n * A set of clock ops is added to make sure we don't read/set this\n * clock rate while the controller is in an unknown state.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/spi/spi-meson-spicc.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/spi/spi-nxp-fspi.c#L618-L655",
    "ascii": "/*\n * In FlexSPI controller, flash access is based on value of FSPI_FLSHXXCR0\n * register and start base address of the slave device.\n *\n *\t\t\t\t\t\t\t    (Higher address)\n *\t\t\t\t--------    <-- FLSHB2CR0\n *\t\t\t\t|  B2  |\n *\t\t\t\t|      |\n *\tB2 start address -->\t--------    <-- FLSHB1CR0\n *\t\t\t\t|  B1  |\n *\t\t\t\t|      |\n *\tB1 start address -->\t--------    <-- FLSHA2CR0\n *\t\t\t\t|  A2  |\n *\t\t\t\t|      |\n *\tA2 start address -->\t--------    <-- FLSHA1CR0\n *\t\t\t\t|  A1  |\n *\t\t\t\t|      |\n *\tA1 start address -->\t--------\t\t    (Lower address)\n *\n *\n * Start base address defines the starting address range for given CS and\n * FSPI_FLSHXXCR0 defines the size of the slave device connected at given CS.\n *\n * But, different targets are having different combinations of number of CS,\n * some targets only have single CS or two CS covering controller's full\n * memory mapped space area.\n * Thus, implementation is being done as independent of the size and number\n * of the connected slave device.\n * Assign controller memory mapped space size as the size to the connected\n * slave device.\n * Mark FLSHxxCR0 as zero initially and then assign value only to the selected\n * chip-select Flash configuration register.\n *\n * For e.g. to access CS2 (B1), FLSHB1CR0 register would be equal to the\n * memory mapped size of the controller.\n * Value for rest of the CS FLSHxxCR0 register would be zero.\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/spi/spi-nxp-fspi.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/staging/fieldbus/anybuss/host.c#L8-L140",
    "ascii": "/*\n * Architecture Overview\n * =====================\n * This driver (running on the CPU/SoC) and the Anybus-S card communicate\n * by reading and writing data to/from the Anybus-S Dual-Port RAM (dpram).\n * This is memory connected to both the SoC and Anybus-S card, which both sides\n * can access freely and concurrently.\n *\n * Synchronization happens by means of two registers located in the dpram:\n * IND_AB: written exclusively by the Anybus card; and\n * IND_AP: written exclusively by this driver.\n *\n * Communication happens using one of the following mechanisms:\n * 1. reserve, read/write, release dpram memory areas:\n *\tusing an IND_AB/IND_AP protocol, the driver is able to reserve certain\n *\tmemory areas. no dpram memory can be read or written except if reserved.\n *\t(with a few limited exceptions)\n * 2. send and receive data structures via a shared mailbox:\n *\tusing an IND_AB/IND_AP protocol, the driver and Anybus card are able to\n *\texchange commands and responses using a shared mailbox.\n * 3. receive software interrupts:\n *\tusing an IND_AB/IND_AP protocol, the Anybus card is able to notify the\n *\tdriver of certain events such as: bus online/offline, data available.\n *\tnote that software interrupt event bits are located in a memory area\n *\twhich must be reserved before it can be accessed.\n *\n * The manual[1] is silent on whether these mechanisms can happen concurrently,\n * or how they should be synchronized. However, section 13 (Driver Example)\n * provides the following suggestion for developing a driver:\n * a) an interrupt handler which updates global variables;\n * b) a continuously-running task handling area requests (1 above)\n * c) a continuously-running task handling mailbox requests (2 above)\n * The example conspicuously leaves out software interrupts (3 above), which\n * is the thorniest issue to get right (see below).\n *\n * The naive, straightforward way to implement this would be:\n * - create an isr which updates shared variables;\n * - create a work_struct which handles software interrupts on a queue;\n * - create a function which does reserve/update/unlock in a loop;\n * - create a function which does mailbox send/receive in a loop;\n * - call the above functions from the driver's read/write/ioctl;\n * - synchronize using mutexes/spinlocks:\n *\t+ only one area request at a time\n *\t+ only one mailbox request at a time\n *\t+ protect AB_IND, AB_IND against data hazards (e.g. read-after-write)\n *\n * Unfortunately, the presence of the software interrupt causes subtle yet\n * considerable synchronization issues; especially problematic is the\n * requirement to reserve/release the area which contains the status bits.\n *\n * The driver architecture presented here sidesteps these synchronization issues\n * by accessing the dpram from a single kernel thread only. User-space throws\n * \"tasks\" (i.e. 1, 2 above) into a task queue, waits for their completion,\n * and the kernel thread runs them to completion.\n *\n * Each task has a task_function, which is called/run by the queue thread.\n * That function communicates with the Anybus card, and returns either\n * 0 (OK), a negative error code (error), or -EINPROGRESS (waiting).\n * On OK or error, the queue thread completes and dequeues the task,\n * which also releases the user space thread which may still be waiting for it.\n * On -EINPROGRESS (waiting), the queue thread will leave the task on the queue,\n * and revisit (call again) whenever an interrupt event comes in.\n *\n * Each task has a state machine, which is run by calling its task_function.\n * It ensures that the task will go through its various stages over time,\n * returning -EINPROGRESS if it wants to wait for an event to happen.\n *\n * Note that according to the manual's driver example, the following operations\n * may run independent of each other:\n * - area reserve/read/write/release\t(point 1 above)\n * - mailbox operations\t\t\t(point 2 above)\n * - switching power on/off\n *\n * To allow them to run independently, each operation class gets its own queue.\n *\n * Userspace processes A, B, C, D post tasks to the appropriate queue,\n * and wait for task completion:\n *\n *\tprocess A\tB\tC\tD\n *\t\t|\t|\t|\t|\n *\t\tv\tv\tv\tv\n *\t|<-----\t========================================\n *\t|\t\t|\t   |\t\t|\n *\t|\t\tv\t   v\t\tv-------<-------+\n *\t|\t+--------------------------------------+\t|\n *\t|\t| power q     | mbox q    | area q     |\t|\n *\t|\t|------------|------------|------------|\t|\n *\t|\t| task       | task       | task       |\t|\n *\t|\t| task       | task       | task       |\t|\n *\t|\t| task wait  | task wait  | task wait  |\t|\n *\t|\t+--------------------------------------+\t|\n *\t|\t\t^\t   ^\t\t^\t\t|\n *\t|\t\t|\t   |\t\t|\t\t^\n *\t|\t+--------------------------------------+\t|\n *\t|\t|\t     queue thread\t       |\t|\n *\t|\t|--------------------------------------|\t|\n *\t|\t| single-threaded:\t\t       |\t|\n *\t|\t| loop:\t\t\t\t       |\t|\n *\tv\t|   for each queue:\t\t       |\t|\n *\t|\t|     run task state machine\t       |\t|\n *\t|\t|     if task waiting:\t\t       |\t|\n *\t|\t|       leave on queue\t\t       |\t|\n *\t|\t|     if task done:\t\t       |\t|\n *\t|\t|       complete task, remove from q   |\t|\n *\t|\t|   if software irq event bits set:    |\t|\n *\t|\t|     notify userspace\t\t       |\t|\n *\t|\t|     post clear event bits task------>|>-------+\n *\t|\t|   wait for IND_AB changed event OR   |\n *\t|\t|            task added event\t  OR   |\n *\t|\t|\t     timeout\t\t       |\n *\t|\t| end loop\t\t\t       |\n *\t|\t+--------------------------------------+\n *\t|\t+\t\twake up\t\t       +\n *\t|\t+--------------------------------------+\n *\t|\t\t^\t\t\t^\n *\t|\t\t|\t\t\t|\n *\t+-------->-------\t\t\t|\n *\t\t\t\t\t\t|\n *\t\t+--------------------------------------+\n *\t\t|\tinterrupt service routine      |\n *\t\t|--------------------------------------|\n *\t\t| wake up queue thread on IND_AB change|\n *\t\t+--------------------------------------+\n *\n * Note that the Anybus interrupt is dual-purpose:\n * - after a reset, triggered when the card becomes ready;\n * - during normal operation, triggered when AB_IND changes.\n * This is why the interrupt service routine doesn't just wake up the\n * queue thread, but also completes the card_boot completion.\n *\n * [1] https://www.anybus.com/docs/librariesprovider7/default-document-library/\n *\tmanuals-design-guides/hms-hmsi-27-275.pdf\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/drivers/staging/fieldbus/anybuss/host.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/staging/media/atomisp/pci/sh_css_params.c#L752-L766",
    "ascii": "/* ****************************************************\n * Each coefficient is stored as 7bits to fit 2 of them into one\n * ISP vector element, so we will store 4 coefficents on every\n * memory word (32bits)\n *\n * 0: Coefficient 0 used bits\n * 1: Coefficient 1 used bits\n * 2: Coefficient 2 used bits\n * 3: Coefficient 3 used bits\n * x: not used\n *\n * xx33333332222222 | xx11111110000000\n *\n * ***************************************************\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/staging/media/atomisp/pci/sh_css_params.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/staging/media/atomisp/pci/sh_css_param_shading.c#L32-L73",
    "ascii": "/* Bilinear interpolation on shading tables:\n * For each target point T, we calculate the 4 surrounding source points:\n * ul (upper left), ur (upper right), ll (lower left) and lr (lower right).\n * We then calculate the distances from the T to the source points: x0, x1,\n * y0 and y1.\n * We then calculate the value of T:\n *   dx0*dy0*Slr + dx0*dy1*Sur + dx1*dy0*Sll + dx1*dy1*Sul.\n * We choose a grid size of 1x1 which means:\n *   dx1 = 1-dx0\n *   dy1 = 1-dy0\n *\n *   Sul dx0         dx1      Sur\n *    .<----->|<------------->.\n *    ^\n * dy0|\n *    v        T\n *    -        .\n *    ^\n *    |\n * dy1|\n *    v\n *    .                        .\n *   Sll                      Slr\n *\n * Padding:\n * The area that the ISP operates on can include padding both on the left\n * and the right. We need to padd the shading table such that the shading\n * values end up on the correct pixel values. This means we must padd the\n * shading table to match the ISP padding.\n * We can have 5 cases:\n * 1. All 4 points fall in the left padding.\n * 2. The left 2 points fall in the left padding.\n * 3. All 4 points fall in the cropped (target) region.\n * 4. The right 2 points fall in the right padding.\n * 5. All 4 points fall in the right padding.\n * Cases 1 and 5 are easy to handle: we simply use the\n * value 1 in the shading table.\n * Cases 2 and 4 require interpolation that takes into\n * account how far into the padding area the pixels\n * fall. We extrapolate the shading table into the\n * padded area and then interpolate.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/staging/media/atomisp/pci/sh_css_param_shading.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/staging/rtl8192u/ieee80211/ieee80211_tx.c#L41-L136",
    "ascii": "/*\n *\n *\n * 802.11 Data Frame\n *\n *\n * 802.11 frame_contorl for data frames - 2 bytes\n *      ,-----------------------------------------------------------------------------------------.\n * bits | 0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  a  |  b  |  c  |  d  |  e   |\n *      |----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|------|\n * val  | 0  |  0  |  0  |  1  |  x  |  0  |  0  |  0  |  1  |  0  |  x  |  x  |  x  |  x  |  x   |\n *      |----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|------|\n * desc | ^-ver-^  |  ^type-^  |  ^-----subtype-----^  | to  |from |more |retry| pwr |more |wep   |\n *      |          |           | x=0 data,x=1 data+ack | DS  | DS  |frag |     | mgm |data |      |\n *      '-----------------------------------------------------------------------------------------'\n *                                                    /\\\n *                                                    |\n * 802.11 Data Frame                                  |\n *           ,--------- 'ctrl' expands to >-----------'\n *           |\n *        ,--'---,-------------------------------------------------------------.\n *  Bytes |  2   |  2   |    6    |    6    |    6    |  2   | 0..2312 |   4  |\n *        |------|------|---------|---------|---------|------|---------|------|\n *  Desc. | ctrl | dura |  DA/RA  |   TA    |    SA   | Sequ |  Frame  |  fcs |\n *        |      | tion | (BSSID) |         |         | ence |  data   |      |\n *        `--------------------------------------------------|         |------'\n *  Total: 28 non-data bytes                                 `----.----'\n *                                                                |\n *         .- 'Frame data' expands to <---------------------------'\n *         |\n *         V\n *        ,---------------------------------------------------.\n *  Bytes |  1   |  1   |    1    |    3     |  2   |  0-2304 |\n *        |------|------|---------|----------|------|---------|\n *  Desc. | SNAP | SNAP | Control |Eth Tunnel| Type | IP      |\n *        | DSAP | SSAP |         |          |      | Packet  |\n *        | 0xAA | 0xAA |0x03 (UI)|0x00-00-F8|      |         |\n *        `-----------------------------------------|         |\n *  Total: 8 non-data bytes                         `----.----'\n *                                                       |\n *         .- 'IP Packet' expands, if WEP enabled, to <--'\n *         |\n *         V\n *        ,-----------------------.\n *  Bytes |  4  |   0-2296  |  4  |\n *        |-----|-----------|-----|\n *  Desc. | IV  | Encrypted | ICV |\n *        |     | IP Packet |     |\n *        `-----------------------'\n *  Total: 8 non-data bytes\n *\n *\n *  802.3 Ethernet Data Frame\n *\n *        ,-----------------------------------------.\n *  Bytes |   6   |   6   |  2   |  Variable |   4  |\n *        |-------|-------|------|-----------|------|\n *  Desc. | Dest. | Source| Type | IP Packet |  fcs |\n *        |  MAC  |  MAC  |      |           |      |\n *        `-----------------------------------------'\n *  Total: 18 non-data bytes\n *\n *  In the event that fragmentation is required, the incoming payload is split into\n *  N parts of size ieee->fts.  The first fragment contains the SNAP header and the\n *  remaining packets are just data.\n *\n *  If encryption is enabled, each fragment payload size is reduced by enough space\n *  to add the prefix and postfix (IV and ICV totalling 8 bytes in the case of WEP)\n *  So if you have 1500 bytes of payload with ieee->fts set to 500 without\n *  encryption it will take 3 frames.  With WEP it will take 4 frames as the\n *  payload of each frame is reduced to 492 bytes.\n *\n * SKB visualization\n *\n *  ,- skb->data\n * |\n * |    ETHERNET HEADER        ,-<-- PAYLOAD\n * |                           |     14 bytes from skb->data\n * |  2 bytes for Type --> ,T. |     (sizeof ethhdr)\n * |                       | | |\n * |,-Dest.--. ,--Src.---. | | |\n * |  6 bytes| | 6 bytes | | | |\n * v         | |         | | | |\n * 0         | v       1 | v | v           2\n * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n *     ^     | ^         | ^ |\n *     |     | |         | | |\n *     |     | |         | `T' <---- 2 bytes for Type\n *     |     | |         |\n *     |     | '---SNAP--' <-------- 6 bytes for SNAP\n *     |     |\n *     `-IV--' <-------------------- 4 bytes for IV (WEP)\n *\n *      SNAP HEADER\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": true,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/staging/rtl8192u/ieee80211/ieee80211_tx.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/staging/sm750fb/ddk750_swi2c.c#L15-L51",
    "ascii": "/*\n * I2C Software Master Driver:\n * ===========================\n * Each i2c cycle is split into 4 sections. Each of these section marks\n * a point in time where the SCL or SDA may be changed.\n *\n * 1 Cycle == |  Section I. |  Section 2. |  Section 3. |  Section 4. |\n *            +-------------+-------------+-------------+-------------+\n *            | SCL set LOW |SCL no change| SCL set HIGH|SCL no change|\n *\n *                                          ____________ _____________\n * SCL == XXXX _____________ ____________ /\n *\n * I.e. the SCL may only be changed in section 1. and section 3. while\n * the SDA may only be changed in section 2. and section 4. The table\n * below gives the changes for these 2 lines in the varios sections.\n *\n * Section changes Table:\n * ======================\n * blank = no change, L = set bit LOW, H = set bit HIGH\n *\n *                                | 1.| 2.| 3.| 4.|\n *                 ---------------+---+---+---+---+\n *                 Tx Start   SDA |   | H |   | L |\n *                            SCL | L |   | H |   |\n *                 ---------------+---+---+---+---+\n *                 Tx Stop    SDA |   | L |   | H |\n *                            SCL | L |   | H |   |\n *                 ---------------+---+---+---+---+\n *                 Tx bit H   SDA |   | H |   |   |\n *                            SCL | L |   | H |   |\n *                 ---------------+---+---+---+---+\n *                 Tx bit L   SDA |   | L |   |   |\n *                            SCL | L |   | H |   |\n *                 ---------------+---+---+---+---+\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/staging/sm750fb/ddk750_swi2c.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/thermal/gov_bang_bang.c#L68-L94",
    "ascii": "/**\n * bang_bang_control - controls devices associated with the given zone\n * @tz: thermal_zone_device\n * @trip: the trip point\n *\n * Regulation Logic: a two point regulation, deliver cooling state depending\n * on the previous state shown in this diagram:\n *\n *                Fan:   OFF    ON\n *\n *                              |\n *                              |\n *          trip_temp:    +---->+\n *                        |     |        ^\n *                        |     |        |\n *                        |     |   Temperature\n * (trip_temp - hyst):    +<----+\n *                        |\n *                        |\n *                        |\n *\n *   * If the fan is not running and temperature exceeds trip_temp, the fan\n *     gets turned on.\n *   * In case the fan is running, temperature must fall below\n *     (trip_temp - hyst) so that the fan gets turned off again.\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/thermal/gov_bang_bang.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/thermal/ti-soc-thermal/ti-bandgap.h#L22-L61",
    "ascii": "/**\n * DOC: bandgap driver data structure\n * ==================================\n *\n *   +----------+----------------+\n *   | struct temp_sensor_regval |\n *   +---------------------------+\n *              * (Array of)\n *              |\n *              |\n *   +-------------------+   +-----------------+\n *   | struct ti_bandgap |-->| struct device * |\n *   +----------+--------+   +-----------------+\n *              |\n *              |\n *              V\n *   +------------------------+\n *   | struct ti_bandgap_data |\n *   +------------------------+\n *              |\n *              |\n *              * (Array of)\n * +------------+------------------------------------------------------+\n * | +----------+------------+   +-------------------------+           |\n * | | struct ti_temp_sensor |-->| struct temp_sensor_data |           |\n * | +-----------------------+   +------------+------------+           |\n * |            |                                                      |\n * |            +                                                      |\n * |            V                                                      |\n * | +----------+-------------------+                                  |\n * | | struct temp_sensor_registers |                                  |\n * | +------------------------------+                                  |\n * |                                                                   |\n * +-------------------------------------------------------------------+\n *\n * Above is a simple diagram describing how the data structure below\n * are organized. For each bandgap device there should be a ti_bandgap_data\n * containing the device instance configuration, as well as, an array of\n * sensors, representing every sensor instance present in this bandgap.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/thermal/ti-soc-thermal/ti-bandgap.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm64/include/asm/mmu.h#L30-L55",
    "ascii": "/*\n * We use atomic64_read() here because the ASID for an 'mm_struct' can\n * be reallocated when scheduling one of its threads following a\n * rollover event (see new_context() and flush_context()). In this case,\n * a concurrent TLBI (e.g. via try_to_unmap_one() and ptep_clear_flush())\n * may use a stale ASID. This is fine in principle as the new ASID is\n * guaranteed to be clean in the TLB, but the TLBI routines have to take\n * care to handle the following race:\n *\n *    CPU 0                    CPU 1                          CPU 2\n *\n *    // ptep_clear_flush(mm)\n *    xchg_relaxed(pte, 0)\n *    DSB ISHST\n *    old = ASID(mm)\n *         |                                                  <rollover>\n *         |                   new = new_context(mm)\n *         \\-----------------> atomic_set(mm->context.id, new)\n *                             cpu_switch_mm(mm)\n *                             // Hardware walk of pte using new ASID\n *    TLBI(old)\n *\n * In this scenario, the barrier on CPU 0 and the dependency on CPU 1\n * ensure that the page-table walker on CPU 1 *must* see the invalid PTE\n * written by CPU 0.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm64/include/asm/mmu.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/usb/dwc2/hcd_queue.c#L111-L201",
    "ascii": "/**\n * pmap_schedule() - Schedule time in a periodic bitmap (pmap).\n *\n * @map:             The bitmap representing the schedule; will be updated\n *                   upon success.\n * @bits_per_period: The schedule represents several periods.  This is how many\n *                   bits are in each period.  It's assumed that the beginning\n *                   of the schedule will repeat after its end.\n * @periods_in_map:  The number of periods in the schedule.\n * @num_bits:        The number of bits we need per period we want to reserve\n *                   in this function call.\n * @interval:        How often we need to be scheduled for the reservation this\n *                   time.  1 means every period.  2 means every other period.\n *                   ...you get the picture?\n * @start:           The bit number to start at.  Normally 0.  Must be within\n *                   the interval or we return failure right away.\n * @only_one_period: Normally we'll allow picking a start anywhere within the\n *                   first interval, since we can still make all repetition\n *                   requirements by doing that.  However, if you pass true\n *                   here then we'll return failure if we can't fit within\n *                   the period that \"start\" is in.\n *\n * The idea here is that we want to schedule time for repeating events that all\n * want the same resource.  The resource is divided into fixed-sized periods\n * and the events want to repeat every \"interval\" periods.  The schedule\n * granularity is one bit.\n *\n * To keep things \"simple\", we'll represent our schedule with a bitmap that\n * contains a fixed number of periods.  This gets rid of a lot of complexity\n * but does mean that we need to handle things specially (and non-ideally) if\n * the number of the periods in the schedule doesn't match well with the\n * intervals that we're trying to schedule.\n *\n * Here's an explanation of the scheme we'll implement, assuming 8 periods.\n * - If interval is 1, we need to take up space in each of the 8\n *   periods we're scheduling.  Easy.\n * - If interval is 2, we need to take up space in half of the\n *   periods.  Again, easy.\n * - If interval is 3, we actually need to fall back to interval 1.\n *   Why?  Because we might need time in any period.  AKA for the\n *   first 8 periods, we'll be in slot 0, 3, 6.  Then we'll be\n *   in slot 1, 4, 7.  Then we'll be in 2, 5.  Then we'll be back to\n *   0, 3, and 6.  Since we could be in any frame we need to reserve\n *   for all of them.  Sucks, but that's what you gotta do.  Note that\n *   if we were instead scheduling 8 * 3 = 24 we'd do much better, but\n *   then we need more memory and time to do scheduling.\n * - If interval is 4, easy.\n * - If interval is 5, we again need interval 1.  The schedule will be\n *   0, 5, 2, 7, 4, 1, 6, 3, 0\n * - If interval is 6, we need interval 2.  0, 6, 4, 2.\n * - If interval is 7, we need interval 1.\n * - If interval is 8, we need interval 8.\n *\n * If you do the math, you'll see that we need to pretend that interval is\n * equal to the greatest_common_divisor(interval, periods_in_map).\n *\n * Note that at the moment this function tends to front-pack the schedule.\n * In some cases that's really non-ideal (it's hard to schedule things that\n * need to repeat every period).  In other cases it's perfect (you can easily\n * schedule bigger, less often repeating things).\n *\n * Here's the algorithm in action (8 periods, 5 bits per period):\n *  |**   |     |**   |     |**   |     |**   |     |   OK 2 bits, intv 2 at 0\n *  |*****|  ***|*****|  ***|*****|  ***|*****|  ***|   OK 3 bits, intv 3 at 2\n *  |*****|* ***|*****|  ***|*****|* ***|*****|  ***|   OK 1 bits, intv 4 at 5\n *  |**   |*    |**   |     |**   |*    |**   |     | Remv 3 bits, intv 3 at 2\n *  |***  |*    |***  |     |***  |*    |***  |     |   OK 1 bits, intv 6 at 2\n *  |**** |*  * |**** |   * |**** |*  * |**** |   * |   OK 1 bits, intv 1 at 3\n *  |**** |**** |**** | *** |**** |**** |**** | *** |   OK 2 bits, intv 2 at 6\n *  |*****|*****|*****| ****|*****|*****|*****| ****|   OK 1 bits, intv 1 at 4\n *  |*****|*****|*****| ****|*****|*****|*****| ****| FAIL 1 bits, intv 1\n *  |  ***|*****|  ***| ****|  ***|*****|  ***| ****| Remv 2 bits, intv 2 at 0\n *  |  ***| ****|  ***| ****|  ***| ****|  ***| ****| Remv 1 bits, intv 4 at 5\n *  |   **| ****|   **| ****|   **| ****|   **| ****| Remv 1 bits, intv 6 at 2\n *  |    *| ** *|    *| ** *|    *| ** *|    *| ** *| Remv 1 bits, intv 1 at 3\n *  |    *|    *|    *|    *|    *|    *|    *|    *| Remv 2 bits, intv 2 at 6\n *  |     |     |     |     |     |     |     |     | Remv 1 bits, intv 1 at 4\n *  |**   |     |**   |     |**   |     |**   |     |   OK 2 bits, intv 2 at 0\n *  |***  |     |**   |     |***  |     |**   |     |   OK 1 bits, intv 4 at 2\n *  |*****|     |** **|     |*****|     |** **|     |   OK 2 bits, intv 2 at 3\n *  |*****|*    |** **|     |*****|*    |** **|     |   OK 1 bits, intv 4 at 5\n *  |*****|***  |** **| **  |*****|***  |** **| **  |   OK 2 bits, intv 2 at 6\n *  |*****|*****|** **| ****|*****|*****|** **| ****|   OK 2 bits, intv 2 at 8\n *  |*****|*****|*****| ****|*****|*****|*****| ****|   OK 1 bits, intv 4 at 12\n *\n * This function is pretty generic and could be easily abstracted if anything\n * needed similar scheduling.\n *\n * Returns either -ENOSPC or a >= 0 start bit which should be passed to the\n * unschedule routine.  The map bitmap will be updated on a non-error result.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/usb/dwc2/hcd_queue.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/usb/musb/musb_host.c#L1495-L1528",
    "ascii": "/* Host side RX (IN) using Mentor DMA works as follows:\n\tsubmit_urb ->\n\t\t- if queue was empty, ProgramEndpoint\n\t\t- first IN token is sent out (by setting ReqPkt)\n\tLinuxIsr -> RxReady()\n\t/\\\t=> first packet is received\n\t|\t- Set in mode 0 (DmaEnab, ~ReqPkt)\n\t|\t\t-> DMA Isr (transfer complete) -> RxReady()\n\t|\t\t    - Ack receive (~RxPktRdy), turn off DMA (~DmaEnab)\n\t|\t\t    - if urb not complete, send next IN token (ReqPkt)\n\t|\t\t\t   |\t\telse complete urb.\n\t|\t\t\t   |\n\t---------------------------\n *\n * Nuances of mode 1:\n *\tFor short packets, no ack (+RxPktRdy) is sent automatically\n *\t(even if AutoClear is ON)\n *\tFor full packets, ack (~RxPktRdy) and next IN token (+ReqPkt) is sent\n *\tautomatically => major problem, as collecting the next packet becomes\n *\tdifficult. Hence mode 1 is not used.\n *\n * REVISIT\n *\tAll we care about at this driver level is that\n *       (a) all URBs terminate with REQPKT cleared and fifo(s) empty;\n *       (b) termination conditions are: short RX, or buffer full;\n *       (c) fault modes include\n *           - iff URB_SHORT_NOT_OK, short RX status is -EREMOTEIO.\n *             (and that endpoint's dma queue stops immediately)\n *           - overflow (full, PLUS more bytes in the terminal packet)\n *\n *\tSo for example, usb-storage sets URB_SHORT_NOT_OK, and would\n *\tthus be a great candidate for using mode 1 ... for all but the\n *\tlast packet of one URB's transfer.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/usb/musb/musb_host.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/usb/renesas_usbhs/mod_host.c#L30-L58",
    "ascii": "/*\n *\t\timage of mod_host\n *\n * +--------+\n * | udev 0 | --> it is used when set address\n * +--------+\n *\n * +--------+\t\t\t\t\tpipes are reused for each uep.\n * | udev 1 |-+- [uep 0 (dcp) ] --+\t\tpipe will be switched when\n * +--------+ |\t\t\t  |\t\tother device requested\n *\t      +- [uep 1 (bulk)]\t--|---+\t\t   +--------------+\n *\t      |\t\t\t  +--------------> | pipe0 (dcp)  |\n *\t      +- [uep 2 (bulk)]\t-@    |\t\t   +--------------+\n *\t\t\t\t      |\t\t   | pipe1 (isoc) |\n * +--------+\t\t\t      |\t\t   +--------------+\n * | udev 2 |-+- [uep 0 (dcp) ]\t-@    +----------> | pipe2 (bulk) |\n * +--------+ |\t\t\t\t\t   +--------------+\n *\t      +- [uep 1 (int) ]\t----+\t  +------> | pipe3 (bulk) |\n *\t\t\t\t    |\t  |\t   +--------------+\n * +--------+\t\t\t    +-----|------> | pipe4 (int)  |\n * | udev 3 |-+- [uep 0 (dcp) ]\t-@\t  |\t   +--------------+\n * +--------+ |\t\t\t\t  |\t   | ....\t  |\n *\t      +- [uep 1 (bulk)]\t-@\t  |\t   | ....\t  |\n *\t      |\t\t\t\t  |\n *\t      +- [uep 2 (bulk)]-----------+\n *\n * @ :\tuep requested free pipe, but all have been used.\n *\tnow it is waiting for free pipe\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/usb/renesas_usbhs/mod_host.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/acornfb.c#L246-L263",
    "ascii": "/*\n * We have to take note of the VIDC20's 16-bit palette here.\n * The VIDC20 looks up a 16 bit pixel as follows:\n *\n *   bits   111111\n *          5432109876543210\n *   red            ++++++++  (8 bits,  7 to 0)\n *  green       ++++++++      (8 bits, 11 to 4)\n *   blue   ++++++++          (8 bits, 15 to 8)\n *\n * We use a pixel which looks like:\n *\n *   bits   111111\n *          5432109876543210\n *   red               +++++  (5 bits,  4 to  0)\n *  green         +++++       (5 bits,  9 to  5)\n *   blue    +++++            (5 bits, 14 to 10)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/video/fbdev/acornfb.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/amifb.c#L103-L366",
    "ascii": "/*******************************************************************************\n\n\n   Generic video timings\n   ---------------------\n\n   Timings used by the frame buffer interface:\n   +----------+---------------------------------------------+----------+-------+\n   |          |                ^                            |          |       |\n   |          |                |upper_margin                |          |       |\n   |          |                v                            |          |       |\n   +----------###############################################----------+-------+\n   |          #                ^                            #          |       |\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |   left   #                |                            #  right   | hsync |\n   |  margin  #                |       xres                 #  margin  |  len  |\n   |<-------->#<---------------+--------------------------->#<-------->|<----->|\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |          #                |yres                        #          |       |\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |          #                |                            #          |       |\n   |          #                v                            #          |       |\n   +----------###############################################----------+-------+\n   |          |                ^                            |          |       |\n   |          |                |lower_margin                |          |       |\n   |          |                v                            |          |       |\n   +----------+---------------------------------------------+----------+-------+\n   |          |                ^                            |          |       |\n   |          |                |vsync_len                   |          |       |\n   |          |                v                            |          |       |\n   +----------+---------------------------------------------+----------+-------+\n   Amiga video timings\n   -------------------\n\n   The Amiga native chipsets uses another timing scheme:\n\n      - hsstrt:   Start of horizontal synchronization pulse\n      - hsstop:   End of horizontal synchronization pulse\n      - htotal:   Last value on the line (i.e. line length = htotal + 1)\n      - vsstrt:   Start of vertical synchronization pulse\n      - vsstop:   End of vertical synchronization pulse\n      - vtotal:   Last line value (i.e. number of lines = vtotal + 1)\n      - hcenter:  Start of vertical retrace for interlace\n\n   You can specify the blanking timings independently. Currently I just set\n   them equal to the respective synchronization values:\n\n      - hbstrt:   Start of horizontal blank\n      - hbstop:   End of horizontal blank\n      - vbstrt:   Start of vertical blank\n      - vbstop:   End of vertical blank\n\n   Horizontal values are in color clock cycles (280 ns), vertical values are in\n   scanlines.\n\n   (0, 0) is somewhere in the upper-left corner :-)\n\n\n   Amiga visible window definitions\n   --------------------------------\n\n   Currently I only have values for AGA, SHRES (28 MHz dotclock). Feel free to\n   make corrections and/or additions.\n\n   Within the above synchronization specifications, the visible window is\n   defined by the following parameters (actual register resolutions may be\n   different; all horizontal values are normalized with respect to the pixel\n   clock):\n\n      - diwstrt_h:   Horizontal start of the visible window\n      - diwstop_h:   Horizontal stop + 1(*) of the visible window\n      - diwstrt_v:   Vertical start of the visible window\n      - diwstop_v:   Vertical stop of the visible window\n      - ddfstrt:     Horizontal start of display DMA\n      - ddfstop:     Horizontal stop of display DMA\n      - hscroll:     Horizontal display output delay\n\n   Sprite positioning:\n\n      - sprstrt_h:   Horizontal start - 4 of sprite\n      - sprstrt_v:   Vertical start of sprite\n\n   (*) Even Commodore did it wrong in the AGA monitor drivers by not adding 1.\n\n   Horizontal values are in dotclock cycles (35 ns), vertical values are in\n   scanlines.\n\n   (0, 0) is somewhere in the upper-left corner :-)\n\n\n   Dependencies (AGA, SHRES (35 ns dotclock))\n   -------------------------------------------\n\n   Since there are much more parameters for the Amiga display than for the\n   frame buffer interface, there must be some dependencies among the Amiga\n   display parameters. Here's what I found out:\n\n      - ddfstrt and ddfstop are best aligned to 64 pixels.\n      - the chipset needs 64 + 4 horizontal pixels after the DMA start before\n\tthe first pixel is output, so diwstrt_h = ddfstrt + 64 + 4 if you want\n\tto display the first pixel on the line too. Increase diwstrt_h for\n\tvirtual screen panning.\n      - the display DMA always fetches 64 pixels at a time (fmode = 3).\n      - ddfstop is ddfstrt+#pixels - 64.\n      - diwstop_h = diwstrt_h + xres + 1. Because of the additional 1 this can\n\tbe 1 more than htotal.\n      - hscroll simply adds a delay to the display output. Smooth horizontal\n\tpanning needs an extra 64 pixels on the left to prefetch the pixels that\n\t`fall off' on the left.\n      - if ddfstrt < 192, the sprite DMA cycles are all stolen by the bitplane\n\tDMA, so it's best to make the DMA start as late as possible.\n      - you really don't want to make ddfstrt < 128, since this will steal DMA\n\tcycles from the other DMA channels (audio, floppy and Chip RAM refresh).\n      - I make diwstop_h and diwstop_v as large as possible.\n\n   General dependencies\n   --------------------\n\n      - all values are SHRES pixel (35ns)\n\t\t  table 1:fetchstart  table 2:prefetch    table 3:fetchsize\n\t\t  ------------------  ----------------    -----------------\n   Pixclock     # SHRES|HIRES|LORES # SHRES|HIRES|LORES # SHRES|HIRES|LORES\n   -------------#------+-----+------#------+-----+------#------+-----+------\n   Bus width 1x #   16 |  32 |  64  #   16 |  32 |  64  #   64 |  64 |  64\n   Bus width 2x #   32 |  64 | 128  #   32 |  64 |  64  #   64 |  64 | 128\n   Bus width 4x #   64 | 128 | 256  #   64 |  64 |  64  #   64 | 128 | 256\n      - chipset needs 4 pixels before the first pixel is output\n      - ddfstrt must be aligned to fetchstart (table 1)\n      - chipset needs also prefetch (table 2) to get first pixel data, so\n\tddfstrt = ((diwstrt_h - 4) & -fetchstart) - prefetch\n      - for horizontal panning decrease diwstrt_h\n      - the length of a fetchline must be aligned to fetchsize (table 3)\n      - if fetchstart is smaller than fetchsize, then ddfstrt can a little bit\n\tmoved to optimize use of dma (useful for OCS/ECS overscan displays)\n      - ddfstop is ddfstrt + ddfsize - fetchsize\n      - If C= didn't change anything for AGA, then at following positions the\n\tdma bus is already used:\n\tddfstrt <  48 -> memory refresh\n\t\t<  96 -> disk dma\n\t\t< 160 -> audio dma\n\t\t< 192 -> sprite 0 dma\n\t\t< 416 -> sprite dma (32 per sprite)\n      - in accordance with the hardware reference manual a hardware stop is at\n\t192, but AGA (ECS?) can go below this.\n\n   DMA priorities\n   --------------\n\n   Since there are limits on the earliest start value for display DMA and the\n   display of sprites, I use the following policy on horizontal panning and\n   the hardware cursor:\n\n      - if you want to start display DMA too early, you lose the ability to\n\tdo smooth horizontal panning (xpanstep 1 -> 64).\n      - if you want to go even further, you lose the hardware cursor too.\n\n   IMHO a hardware cursor is more important for X than horizontal scrolling,\n   so that's my motivation.\n\n\n   Implementation\n   --------------\n\n   ami_decode_var() converts the frame buffer values to the Amiga values. It's\n   just a `straightforward' implementation of the above rules.\n\n\n   Standard VGA timings\n   --------------------\n\t       xres  yres    left  right  upper  lower    hsync    vsync\n\t       ----  ----    ----  -----  -----  -----    -----    -----\n      80x25     720   400      27     45     35     12      108        2\n      80x30     720   480      27     45     30      9      108        2\n   These were taken from a XFree86 configuration file, recalculated for a 28 MHz\n   dotclock (Amigas don't have a 25 MHz dotclock) and converted to frame buffer\n   generic timings.\n\n   As a comparison, graphics/monitor.h suggests the following:\n\t       xres  yres    left  right  upper  lower    hsync    vsync\n\t       ----  ----    ----  -----  -----  -----    -----    -----\n\n      VGA       640   480      52    112     24     19    112 -      2 +\n      VGA70     640   400      52    112     27     21    112 -      2 -\n   Sync polarities\n   ---------------\n      VSYNC    HSYNC    Vertical size    Vertical total\n      -----    -----    -------------    --------------\n\t+        +           Reserved          Reserved\n\t+        -                400               414\n\t-        +                350               362\n\t-        -                480               496\n   Source: CL-GD542X Technical Reference Manual, Cirrus Logic, Oct 1992\n\n\n   Broadcast video timings\n   -----------------------\n\n   According to the CCIR and RETMA specifications, we have the following values:\n\n   CCIR -> PAL\n   -----------\n\n      - a scanline is 64 µs long, of which 52.48 µs are visible. This is about\n\t736 visible 70 ns pixels per line.\n      - we have 625 scanlines, of which 575 are visible (interlaced); after\n\trounding this becomes 576.\n\n   RETMA -> NTSC\n   -------------\n\n      - a scanline is 63.5 µs long, of which 53.5 µs are visible.  This is about\n\t736 visible 70 ns pixels per line.\n      - we have 525 scanlines, of which 485 are visible (interlaced); after\n\trounding this becomes 484.\n\n   Thus if you want a PAL compatible display, you have to do the following:\n\n      - set the FB_SYNC_BROADCAST flag to indicate that standard broadcast\n\ttimings are to be used.\n      - make sure upper_margin + yres + lower_margin + vsync_len = 625 for an\n\tinterlaced, 312 for a non-interlaced and 156 for a doublescanned\n\tdisplay.\n      - make sure left_margin + xres + right_margin + hsync_len = 1816 for a\n\tSHRES, 908 for a HIRES and 454 for a LORES display.\n      - the left visible part begins at 360 (SHRES; HIRES:180, LORES:90),\n\tleft_margin + 2 * hsync_len must be greater or equal.\n      - the upper visible part begins at 48 (interlaced; non-interlaced:24,\n\tdoublescanned:12), upper_margin + 2 * vsync_len must be greater or\n\tequal.\n      - ami_encode_var() calculates margins with a hsync of 5320 ns and a vsync\n\tof 4 scanlines\n\n   The settings for a NTSC compatible display are straightforward.\n\n   Note that in a strict sense the PAL and NTSC standards only define the\n   encoding of the color part (chrominance) of the video signal and don't say\n   anything about horizontal/vertical synchronization nor refresh rates.\n\n\n\t\t\t\t\t\t\t    -- Geert --\n\n*******************************************************************************/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/video/fbdev/amifb.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/pxafb.c#L988-L1017",
    "ascii": "/*\n * Calculate the PCD value from the clock rate (in picoseconds).\n * We take account of the PPCR clock setting.\n * From PXA Developer's Manual:\n *\n *   PixelClock =      LCLK\n *                -------------\n *                2 ( PCD + 1 )\n *\n *   PCD =      LCLK\n *         ------------- - 1\n *         2(PixelClock)\n *\n * Where:\n *   LCLK = LCD/Memory Clock\n *   PCD = LCCR3[7:0]\n *\n * PixelClock here is in Hz while the pixclock argument given is the\n * period in picoseconds. Hence PixelClock = 1 / ( pixclock * 10^-12 )\n *\n * The function get_lclk_frequency_10khz returns LCLK in units of\n * 10khz. Calling the result of this function lclk gives us the\n * following\n *\n *    PCD = (lclk * 10^4 ) * ( pixclock * 10^-12 )\n *          -------------------------------------- - 1\n *                          2\n *\n * Factoring the 10^4 and 10^-12 out gives 10^-8 == 1 / 100000000 as used below.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/video/fbdev/pxafb.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/aty/mach64_cursor.c#L20-L58",
    "ascii": "/*\n * The hardware cursor definition requires 2 bits per pixel. The\n * Cursor size reguardless of the visible cursor size is 64 pixels\n * by 64 lines. The total memory required to define the cursor is\n * 16 bytes / line for 64 lines or 1024 bytes of data. The data\n * must be in a contigiuos format. The 2 bit cursor code values are\n * as follows:\n *\n *\t00 - pixel colour = CURSOR_CLR_0\n *\t01 - pixel colour = CURSOR_CLR_1\n *\t10 - pixel colour = transparent (current display pixel)\n *\t11 - pixel colour = 1's complement of current display pixel\n *\n *\tCursor Offset        64 pixels\t\t Actual Displayed Area\n *            \\_________________________/\n *\t      |\t\t\t|\t|\t|\n *\t      |<--------------->|\t|\t|\n *\t      | CURS_HORZ_OFFSET|\t|\t|\n *\t      |\t\t\t|_______|\t|  64 Lines\n *\t      |\t\t\t   ^\t|\t|\n *\t      |\t\t\t   |\t|\t|\n *\t      |\t\tCURS_VERT_OFFSET|\t|\n *\t      |\t\t\t   |\t|\t|\n *\t      |____________________|____|\t|\n *\n *\n * The Screen position of the top left corner of the displayed\n * cursor is specificed by CURS_HORZ_VERT_POSN. Care must be taken\n * when the cursor hot spot is not the top left corner and the\n * physical cursor position becomes negative. It will be displayed\n * if either the horizontal or vertical cursor position is negative\n *\n * If x becomes negative the cursor manager must adjust the CURS_HORZ_OFFSET\n * to a larger number and saturate CUR_HORZ_POSN to zero.\n *\n * if Y becomes negative, CUR_VERT_OFFSET must be adjusted to a larger number,\n * CUR_OFFSET must be adjusted to a point to the appropriate line in the cursor\n * definitation and CUR_VERT_POSN must be saturated to zero.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/video/fbdev/aty/mach64_cursor.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/core/fbmon.c#L1085-L1104",
    "ascii": "/**\n * fb_get_hblank_by_dclk - get horizontal blank time given pixelclock\n * @dclk: pixelclock in Hz\n * @xres: horizontal resolution in pixels\n *\n * DESCRIPTION:\n *\n *           xres * duty_cycle\n * hblank = ------------------\n *           100 - duty_cycle\n *\n * duty cycle = percent of htotal assigned to inactive display\n * duty cycle = C - (M * h_period)\n *\n * where: h_period = SQRT(100 - C + (0.4 * xres * M)/dclk) + C - 100\n *                   -----------------------------------------------\n *                                    2 * M\n *        M = 300;\n *        C = 30;\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": true
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/video/fbdev/core/fbmon.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/omap2/omapfb/dss/apply.c#L21-L48",
    "ascii": "/*\n * We have 4 levels of cache for the dispc settings. First two are in SW and\n * the latter two in HW.\n *\n *       set_info()\n *          v\n * +--------------------+\n * |     user_info      |\n * +--------------------+\n *          v\n *        apply()\n *          v\n * +--------------------+\n * |       info         |\n * +--------------------+\n *          v\n *      write_regs()\n *          v\n * +--------------------+\n * |  shadow registers  |\n * +--------------------+\n *          v\n * VFP or lcd/digit_enable\n *          v\n * +--------------------+\n * |      registers     |\n * +--------------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/drivers/video/fbdev/omap2/omapfb/dss/apply.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/fs-writeback.c#L1416-L1426",
    "ascii": "/*\n * Queue all expired dirty inodes for io, eldest first.\n * Before\n *         newly dirtied     b_dirty    b_io    b_more_io\n *         =============>    gf         edc     BA\n * After\n *         newly dirtied     b_dirty    b_io    b_more_io\n *         =============>    g          fBAedc\n *                                           |\n *                                           +--> dequeue for IO\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/fs-writeback.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/btrfs/ctree.c#L2596-L2615",
    "ascii": "/*\n * Check key order of two sibling extent buffers.\n *\n * Return true if something is wrong.\n * Return false if everything is fine.\n *\n * Tree-checker only works inside one tree block, thus the following\n * corruption can not be detected by tree-checker:\n *\n * Leaf @left\t\t\t| Leaf @right\n * --------------------------------------------------------------\n * | 1 | 2 | 3 | 4 | 5 | f6 |   | 7 | 8 |\n *\n * Key f6 in leaf @left itself is valid, but not valid when the next\n * key in leaf @right is 7.\n * This can only be checked at tree block merge time.\n * And since tree checker has ensured all key order in each tree block\n * is correct, we only need to bother the last key of @left and the first\n * key of @right.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/btrfs/ctree.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/btrfs/qgroup.c#L1980-L2025",
    "ascii": "/*\n * Helper function to trace a subtree tree block swap.\n *\n * The swap will happen in highest tree block, but there may be a lot of\n * tree blocks involved.\n *\n * For example:\n *  OO = Old tree blocks\n *  NN = New tree blocks allocated during balance\n *\n *           File tree (257)                  Reloc tree for 257\n * L2              OO                                NN\n *               /    \\                            /    \\\n * L1          OO      OO (a)                    OO      NN (a)\n *            / \\     / \\                       / \\     / \\\n * L0       OO   OO OO   OO                   OO   OO NN   NN\n *                  (b)  (c)                          (b)  (c)\n *\n * When calling qgroup_trace_extent_swap(), we will pass:\n * @src_eb = OO(a)\n * @dst_path = [ nodes[1] = NN(a), nodes[0] = NN(c) ]\n * @dst_level = 0\n * @root_level = 1\n *\n * In that case, qgroup_trace_extent_swap() will search from OO(a) to\n * reach OO(c), then mark both OO(c) and NN(c) as qgroup dirty.\n *\n * The main work of qgroup_trace_extent_swap() can be split into 3 parts:\n *\n * 1) Tree search from @src_eb\n *    It should acts as a simplified btrfs_search_slot().\n *    The key for search can be extracted from @dst_path->nodes[dst_level]\n *    (first key).\n *\n * 2) Mark the final tree blocks in @src_path and @dst_path qgroup dirty\n *    NOTE: In above case, OO(a) and NN(a) won't be marked qgroup dirty.\n *    They should be marked during previous (@dst_level = 1) iteration.\n *\n * 3) Mark file extents in leaves dirty\n *    We don't have good way to pick out new file extents only.\n *    So we still follow the old method by scanning all file extents in\n *    the leave.\n *\n * This function can free us from keeping two paths, thus later we only need\n * to care about how to iterate all new tree blocks in reloc tree.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/btrfs/qgroup.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm64/include/uapi/asm/ptrace.h#L171-L198",
    "ascii": "/*\n * (flags & SVE_PT_REGS_MASK) == SVE_PT_REGS_SVE case:\n *\n * The payload starts at offset SVE_PT_SVE_OFFSET, and is of size\n * SVE_PT_SVE_SIZE(vq, flags).\n *\n * Additional macros describe the contents and layout of the payload.\n * For each, SVE_PT_SVE_x_OFFSET(args) is the start offset relative to\n * the start of struct user_sve_header, and SVE_PT_SVE_x_SIZE(args) is\n * the size in bytes:\n *\n *\tx\ttype\t\t\t\tdescription\n *\t-\t----\t\t\t\t-----------\n *\tZREGS\t\t\\\n *\tZREG\t\t|\n *\tPREGS\t\t| refer to <asm/sigcontext.h>\n *\tPREG\t\t|\n *\tFFR\t\t/\n *\n *\tFPSR\tuint32_t\t\t\tFPSR\n *\tFPCR\tuint32_t\t\t\tFPCR\n *\n * Additional data might be appended in the future.\n *\n * The Z-, P- and FFR registers are represented in memory in an endianness-\n * invariant layout which differs from the layout used for the FPSIMD\n * V-registers on big-endian systems: see sigcontext.h for more explanation.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm64/include/uapi/asm/ptrace.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/btrfs/transaction.c#L42-L112",
    "ascii": "/*\n * Transaction states and transitions\n *\n * No running transaction (fs tree blocks are not modified)\n * |\n * | To next stage:\n * |  Call start_transaction() variants. Except btrfs_join_transaction_nostart().\n * V\n * Transaction N [[TRANS_STATE_RUNNING]]\n * |\n * | New trans handles can be attached to transaction N by calling all\n * | start_transaction() variants.\n * |\n * | To next stage:\n * |  Call btrfs_commit_transaction() on any trans handle attached to\n * |  transaction N\n * V\n * Transaction N [[TRANS_STATE_COMMIT_START]]\n * |\n * | Will wait for previous running transaction to completely finish if there\n * | is one\n * |\n * | Then one of the following happes:\n * | - Wait for all other trans handle holders to release.\n * |   The btrfs_commit_transaction() caller will do the commit work.\n * | - Wait for current transaction to be committed by others.\n * |   Other btrfs_commit_transaction() caller will do the commit work.\n * |\n * | At this stage, only btrfs_join_transaction*() variants can attach\n * | to this running transaction.\n * | All other variants will wait for current one to finish and attach to\n * | transaction N+1.\n * |\n * | To next stage:\n * |  Caller is chosen to commit transaction N, and all other trans handle\n * |  haven been released.\n * V\n * Transaction N [[TRANS_STATE_COMMIT_DOING]]\n * |\n * | The heavy lifting transaction work is started.\n * | From running delayed refs (modifying extent tree) to creating pending\n * | snapshots, running qgroups.\n * | In short, modify supporting trees to reflect modifications of subvolume\n * | trees.\n * |\n * | At this stage, all start_transaction() calls will wait for this\n * | transaction to finish and attach to transaction N+1.\n * |\n * | To next stage:\n * |  Until all supporting trees are updated.\n * V\n * Transaction N [[TRANS_STATE_UNBLOCKED]]\n * |\t\t\t\t\t\t    Transaction N+1\n * | All needed trees are modified, thus we only    [[TRANS_STATE_RUNNING]]\n * | need to write them back to disk and update\t    |\n * | super blocks.\t\t\t\t    |\n * |\t\t\t\t\t\t    |\n * | At this stage, new transaction is allowed to   |\n * | start.\t\t\t\t\t    |\n * | All new start_transaction() calls will be\t    |\n * | attached to transid N+1.\t\t\t    |\n * |\t\t\t\t\t\t    |\n * | To next stage:\t\t\t\t    |\n * |  Until all tree blocks are super blocks are    |\n * |  written to block devices\t\t\t    |\n * V\t\t\t\t\t\t    |\n * Transaction N [[TRANS_STATE_COMPLETED]]\t    V\n *   All tree blocks and super blocks are written.  Transaction N+1\n *   This transaction is finished and all its\t    [[TRANS_STATE_COMMIT_START]]\n *   data structures will be cleaned up.\t    | Life goes on\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/btrfs/transaction.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/btrfs/tests/extent-map-tests.c#L39-L54",
    "ascii": "/*\n * Test scenario:\n *\n * Suppose that no extent map has been loaded into memory yet, there is a file\n * extent [0, 16K), followed by another file extent [16K, 20K), two dio reads\n * are entering btrfs_get_extent() concurrently, t1 is reading [8K, 16K), t2 is\n * reading [0, 8K)\n *\n *     t1                            t2\n *  btrfs_get_extent()              btrfs_get_extent()\n *    -> lookup_extent_mapping()      ->lookup_extent_mapping()\n *    -> add_extent_mapping(0, 16K)\n *    -> return em\n *                                    ->add_extent_mapping(0, 16K)\n *                                    -> #handle -EEXIST\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/fs/btrfs/tests/extent-map-tests.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/dlm/midcomms.c#L12-L122",
    "ascii": "/*\n * midcomms.c\n *\n * This is the appallingly named \"mid-level\" comms layer. It takes care about\n * deliver an on application layer \"reliable\" communication above the used\n * lowcomms transport layer.\n *\n * How it works:\n *\n * Each nodes keeps track of all send DLM messages in send_queue with a sequence\n * number. The receive will send an DLM_ACK message back for every DLM message\n * received at the other side. If a reconnect happens in lowcomms we will send\n * all unacknowledged dlm messages again. The receiving side might drop any already\n * received message by comparing sequence numbers.\n *\n * How version detection works:\n *\n * Due the fact that dlm has pre-configured node addresses on every side\n * it is in it's nature that every side connects at starts to transmit\n * dlm messages which ends in a race. However DLM_RCOM_NAMES, DLM_RCOM_STATUS\n * and their replies are the first messages which are exchanges. Due backwards\n * compatibility these messages are not covered by the midcomms re-transmission\n * layer. These messages have their own re-transmission handling in the dlm\n * application layer. The version field of every node will be set on these RCOM\n * messages as soon as they arrived and the node isn't yet part of the nodes\n * hash. There exists also logic to detect version mismatched if something weird\n * going on or the first messages isn't an expected one.\n *\n * Termination:\n *\n * The midcomms layer does a 4 way handshake for termination on DLM protocol\n * like TCP supports it with half-closed socket support. SCTP doesn't support\n * half-closed socket, so we do it on DLM layer. Also socket shutdown() can be\n * interrupted by .e.g. tcp reset itself. Additional there exists the othercon\n * paradigm in lowcomms which cannot be easily without breaking backwards\n * compatibility. A node cannot send anything to another node when a DLM_FIN\n * message was send. There exists additional logic to print a warning if\n * DLM wants to do it. There exists a state handling like RFC 793 but reduced\n * to termination only. The event \"member removal event\" describes the cluster\n * manager removed the node from internal lists, at this point DLM does not\n * send any message to the other node. There exists two cases:\n *\n * 1. The cluster member was removed and we received a FIN\n * OR\n * 2. We received a FIN but the member was not removed yet\n *\n * One of these cases will do the CLOSE_WAIT to LAST_ACK change.\n *\n *\n *                              +---------+\n *                              | CLOSED  |\n *                              +---------+\n *                                   | add member/receive RCOM version\n *                                   |            detection msg\n *                                   V\n *                              +---------+\n *                              |  ESTAB  |\n *                              +---------+\n *                       CLOSE    |     |    rcv FIN\n *                      -------   |     |    -------\n * +---------+          snd FIN  /       \\   snd ACK          +---------+\n * |  FIN    |<-----------------           ------------------>|  CLOSE  |\n * | WAIT-1  |------------------                              |   WAIT  |\n * +---------+          rcv FIN  \\                            +---------+\n * | rcv ACK of FIN   -------   |                            CLOSE  | member\n * | --------------   snd ACK   |                           ------- | removal\n * V        x                   V                           snd FIN V event\n * +---------+                  +---------+                   +---------+\n * |FINWAIT-2|                  | CLOSING |                   | LAST-ACK|\n * +---------+                  +---------+                   +---------+\n * |                rcv ACK of FIN |                 rcv ACK of FIN |\n * |  rcv FIN       -------------- |                 -------------- |\n * |  -------              x       V                        x       V\n *  \\ snd ACK                 +---------+                   +---------+\n *   ------------------------>| CLOSED  |                   | CLOSED  |\n *                            +---------+                   +---------+\n *\n * NOTE: any state can interrupted by midcomms_close() and state will be\n * switched to CLOSED in case of fencing. There exists also some timeout\n * handling when we receive the version detection RCOM messages which is\n * made by observation.\n *\n * Future improvements:\n *\n * There exists some known issues/improvements of the dlm handling. Some\n * of them should be done in a next major dlm version bump which makes\n * it incompatible with previous versions.\n *\n * Unaligned memory access:\n *\n * There exists cases when the dlm message buffer length is not aligned\n * to 8 byte. However seems nobody detected any problem with it. This\n * can be fixed in the next major version bump of dlm.\n *\n * Version detection:\n *\n * The version detection and how it's done is related to backwards\n * compatibility. There exists better ways to make a better handling.\n * However this should be changed in the next major version bump of dlm.\n *\n * Tail Size checking:\n *\n * There exists a message tail payload in e.g. DLM_MSG however we don't\n * check it against the message length yet regarding to the receive buffer\n * length. That need to be validated.\n *\n * Fencing bad nodes:\n *\n * At timeout places or weird sequence number behaviours we should send\n * a fencing request to the cluster manager.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/dlm/midcomms.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/erofs/erofs_fs.h#L205-L215",
    "ascii": "/*\n * inline xattrs (n == i_xattr_icount):\n * erofs_xattr_ibody_header(1) + (n - 1) * 4 bytes\n *          12 bytes           /                   \\\n *                            /                     \\\n *                           /-----------------------\\\n *                           |  erofs_xattr_entries+ |\n *                           +-----------------------+\n * inline xattrs must starts in erofs_xattr_ibody_header,\n * for read-only fs, no need to introduce h_refcount\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/erofs/erofs_fs.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/ext4/fast_commit.c#L15-L166",
    "ascii": "/*\n * Ext4 Fast Commits\n * -----------------\n *\n * Ext4 fast commits implement fine grained journalling for Ext4.\n *\n * Fast commits are organized as a log of tag-length-value (TLV) structs. (See\n * struct ext4_fc_tl). Each TLV contains some delta that is replayed TLV by\n * TLV during the recovery phase. For the scenarios for which we currently\n * don't have replay code, fast commit falls back to full commits.\n * Fast commits record delta in one of the following three categories.\n *\n * (A) Directory entry updates:\n *\n * - EXT4_FC_TAG_UNLINK\t\t- records directory entry unlink\n * - EXT4_FC_TAG_LINK\t\t- records directory entry link\n * - EXT4_FC_TAG_CREAT\t\t- records inode and directory entry creation\n *\n * (B) File specific data range updates:\n *\n * - EXT4_FC_TAG_ADD_RANGE\t- records addition of new blocks to an inode\n * - EXT4_FC_TAG_DEL_RANGE\t- records deletion of blocks from an inode\n *\n * (C) Inode metadata (mtime / ctime etc):\n *\n * - EXT4_FC_TAG_INODE\t\t- record the inode that should be replayed\n *\t\t\t\t  during recovery. Note that iblocks field is\n *\t\t\t\t  not replayed and instead derived during\n *\t\t\t\t  replay.\n * Commit Operation\n * ----------------\n * With fast commits, we maintain all the directory entry operations in the\n * order in which they are issued in an in-memory queue. This queue is flushed\n * to disk during the commit operation. We also maintain a list of inodes\n * that need to be committed during a fast commit in another in memory queue of\n * inodes. During the commit operation, we commit in the following order:\n *\n * [1] Lock inodes for any further data updates by setting COMMITTING state\n * [2] Submit data buffers of all the inodes\n * [3] Wait for [2] to complete\n * [4] Commit all the directory entry updates in the fast commit space\n * [5] Commit all the changed inode structures\n * [6] Write tail tag (this tag ensures the atomicity, please read the following\n *     section for more details).\n * [7] Wait for [4], [5] and [6] to complete.\n *\n * All the inode updates must call ext4_fc_start_update() before starting an\n * update. If such an ongoing update is present, fast commit waits for it to\n * complete. The completion of such an update is marked by\n * ext4_fc_stop_update().\n *\n * Fast Commit Ineligibility\n * -------------------------\n *\n * Not all operations are supported by fast commits today (e.g extended\n * attributes). Fast commit ineligibility is marked by calling\n * ext4_fc_mark_ineligible(): This makes next fast commit operation to fall back\n * to full commit.\n *\n * Atomicity of commits\n * --------------------\n * In order to guarantee atomicity during the commit operation, fast commit\n * uses \"EXT4_FC_TAG_TAIL\" tag that marks a fast commit as complete. Tail\n * tag contains CRC of the contents and TID of the transaction after which\n * this fast commit should be applied. Recovery code replays fast commit\n * logs only if there's at least 1 valid tail present. For every fast commit\n * operation, there is 1 tail. This means, we may end up with multiple tails\n * in the fast commit space. Here's an example:\n *\n * - Create a new file A and remove existing file B\n * - fsync()\n * - Append contents to file A\n * - Truncate file A\n * - fsync()\n *\n * The fast commit space at the end of above operations would look like this:\n *      [HEAD] [CREAT A] [UNLINK B] [TAIL] [ADD_RANGE A] [DEL_RANGE A] [TAIL]\n *             |<---  Fast Commit 1   --->|<---      Fast Commit 2     ---->|\n *\n * Replay code should thus check for all the valid tails in the FC area.\n *\n * Fast Commit Replay Idempotence\n * ------------------------------\n *\n * Fast commits tags are idempotent in nature provided the recovery code follows\n * certain rules. The guiding principle that the commit path follows while\n * committing is that it stores the result of a particular operation instead of\n * storing the procedure.\n *\n * Let's consider this rename operation: 'mv /a /b'. Let's assume dirent '/a'\n * was associated with inode 10. During fast commit, instead of storing this\n * operation as a procedure \"rename a to b\", we store the resulting file system\n * state as a \"series\" of outcomes:\n *\n * - Link dirent b to inode 10\n * - Unlink dirent a\n * - Inode <10> with valid refcount\n *\n * Now when recovery code runs, it needs \"enforce\" this state on the file\n * system. This is what guarantees idempotence of fast commit replay.\n *\n * Let's take an example of a procedure that is not idempotent and see how fast\n * commits make it idempotent. Consider following sequence of operations:\n *\n *     rm A;    mv B A;    read A\n *  (x)     (y)        (z)\n *\n * (x), (y) and (z) are the points at which we can crash. If we store this\n * sequence of operations as is then the replay is not idempotent. Let's say\n * while in replay, we crash at (z). During the second replay, file A (which was\n * actually created as a result of \"mv B A\" operation) would get deleted. Thus,\n * file named A would be absent when we try to read A. So, this sequence of\n * operations is not idempotent. However, as mentioned above, instead of storing\n * the procedure fast commits store the outcome of each procedure. Thus the fast\n * commit log for above procedure would be as follows:\n *\n * (Let's assume dirent A was linked to inode 10 and dirent B was linked to\n * inode 11 before the replay)\n *\n *    [Unlink A]   [Link A to inode 11]   [Unlink B]   [Inode 11]\n * (w)          (x)                    (y)          (z)\n *\n * If we crash at (z), we will have file A linked to inode 11. During the second\n * replay, we will remove file A (inode 11). But we will create it back and make\n * it point to inode 11. We won't find B, so we'll just skip that step. At this\n * point, the refcount for inode 11 is not reliable, but that gets fixed by the\n * replay of last inode 11 tag. Crashes at points (w), (x) and (y) get handled\n * similarly. Thus, by converting a non-idempotent procedure into a series of\n * idempotent outcomes, fast commits ensured idempotence during the replay.\n *\n * TODOs\n * -----\n *\n * 0) Fast commit replay path hardening: Fast commit replay code should use\n *    journal handles to make sure all the updates it does during the replay\n *    path are atomic. With that if we crash during fast commit replay, after\n *    trying to do recovery again, we will find a file system where fast commit\n *    area is invalid (because new full commit would be found). In order to deal\n *    with that, fast commit replay code should ensure that the \"FC_REPLAY\"\n *    superblock state is persisted before starting the replay, so that after\n *    the crash, fast commit recovery code can look at that flag and perform\n *    fast commit recovery even if that area is invalidated by later full\n *    commits.\n *\n * 1) Fast commit's commit path locks the entire file system during fast\n *    commit. This has significant performance penalty. Instead of that, we\n *    should use ext4_fc_start/stop_update functions to start inode level\n *    updates from ext4_journal_start/stop. Once we do that we can drop file\n *    system locking during commit path.\n *\n * 2) Handle more ineligible cases.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/fs/ext4/fast_commit.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/f2fs/node.h#L327-L347",
    "ascii": "/*\n * f2fs assigns the following node offsets described as (num).\n * N = NIDS_PER_BLOCK\n *\n *  Inode block (0)\n *    |- direct node (1)\n *    |- direct node (2)\n *    |- indirect node (3)\n *    |            `- direct node (4 => 4 + N - 1)\n *    |- indirect node (4 + N)\n *    |            `- direct node (5 + N => 5 + 2N - 1)\n *    `- double indirect node (5 + 2N)\n *                 `- indirect node (6 + 2N)\n *                       `- direct node\n *                 ......\n *                 `- indirect node ((6 + 2N) + x(N + 1))\n *                       `- direct node\n *                 ......\n *                 `- indirect node ((6 + 2N) + (N - 1)(N + 1))\n *                       `- direct node\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": true
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/f2fs/node.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/jfs/jfs_mount.c#L6-L35",
    "ascii": "/*\n * Module: jfs_mount.c\n *\n * note: file system in transition to aggregate/fileset:\n *\n * file system mount is interpreted as the mount of aggregate,\n * if not already mounted, and mount of the single/only fileset in\n * the aggregate;\n *\n * a file system/aggregate is represented by an internal inode\n * (aka mount inode) initialized with aggregate superblock;\n * each vfs represents a fileset, and points to its \"fileset inode\n * allocation map inode\" (aka fileset inode):\n * (an aggregate itself is structured recursively as a filset:\n * an internal vfs is constructed and points to its \"fileset inode\n * allocation map inode\" (aka aggregate inode) where each inode\n * represents a fileset inode) so that inode number is mapped to\n * on-disk inode in uniform way at both aggregate and fileset level;\n *\n * each vnode/inode of a fileset is linked to its vfs (to facilitate\n * per fileset inode operations, e.g., unmount of a fileset, etc.);\n * each inode points to the mount inode (to facilitate access to\n * per aggregate information, e.g., block size, etc.) as well as\n * its file set inode.\n *\n *   aggregate\n *   ipmnt\n *   mntvfs -> fileset ipimap+ -> aggregate ipbmap -> aggregate ipaimap;\n *             fileset vfs     -> vp(1) <-> ... <-> vp(n) <->vproot;\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/jfs/jfs_mount.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/nfs/pnfs.c#L622-L628",
    "ascii": "/*\n * is l2 fully contained in l1?\n *   start1                             end1\n *   [----------------------------------)\n *           start2           end2\n *           [----------------)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/nfs/pnfs.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/nfs/pnfs.h#L656-L662",
    "ascii": "/*\n * Are 2 ranges intersecting?\n *   start1                             end1\n *   [----------------------------------)\n *                                start2           end2\n *                                [----------------)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/nfs/pnfs.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm64/kvm/hyp/nvhe/page_alloc.c#L12-L32",
    "ascii": "/*\n * Index the hyp_vmemmap to find a potential buddy page, but make no assumption\n * about its current state.\n *\n * Example buddy-tree for a 4-pages physically contiguous pool:\n *\n *                 o : Page 3\n *                /\n *               o-o : Page 2\n *              /\n *             /   o : Page 1\n *            /   /\n *           o---o-o : Page 0\n *    Order  2   1 0\n *\n * Example of requests on this pool:\n *   __find_buddy_nocheck(pool, page 0, order 0) => page 1\n *   __find_buddy_nocheck(pool, page 0, order 1) => page 2\n *   __find_buddy_nocheck(pool, page 1, order 0) => page 0\n *   __find_buddy_nocheck(pool, page 2, order 0) => page 3\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm64/kvm/hyp/nvhe/page_alloc.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/unicode/mkutf8data.c#L202-L249",
    "ascii": "/*\n * UTF8 valid ranges.\n *\n * The UTF-8 encoding spreads the bits of a 32bit word over several\n * bytes. This table gives the ranges that can be held and how they'd\n * be represented.\n *\n * 0x00000000 0x0000007F: 0xxxxxxx\n * 0x00000000 0x000007FF: 110xxxxx 10xxxxxx\n * 0x00000000 0x0000FFFF: 1110xxxx 10xxxxxx 10xxxxxx\n * 0x00000000 0x001FFFFF: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n * 0x00000000 0x03FFFFFF: 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n * 0x00000000 0x7FFFFFFF: 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n *\n * There is an additional requirement on UTF-8, in that only the\n * shortest representation of a 32bit value is to be used.  A decoder\n * must not decode sequences that do not satisfy this requirement.\n * Thus the allowed ranges have a lower bound.\n *\n * 0x00000000 0x0000007F: 0xxxxxxx\n * 0x00000080 0x000007FF: 110xxxxx 10xxxxxx\n * 0x00000800 0x0000FFFF: 1110xxxx 10xxxxxx 10xxxxxx\n * 0x00010000 0x001FFFFF: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n * 0x00200000 0x03FFFFFF: 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n * 0x04000000 0x7FFFFFFF: 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n *\n * Actual unicode characters are limited to the range 0x0 - 0x10FFFF,\n * 17 planes of 65536 values.  This limits the sequences actually seen\n * even more, to just the following.\n *\n *          0 -     0x7f: 0                     0x7f\n *       0x80 -    0x7ff: 0xc2 0x80             0xdf 0xbf\n *      0x800 -   0xffff: 0xe0 0xa0 0x80        0xef 0xbf 0xbf\n *    0x10000 - 0x10ffff: 0xf0 0x90 0x80 0x80   0xf4 0x8f 0xbf 0xbf\n *\n * Even within those ranges not all values are allowed: the surrogates\n * 0xd800 - 0xdfff should never be seen.\n *\n * Note that the longest sequence seen with valid usage is 4 bytes,\n * the same a single UTF-32 character.  This makes the UTF-8\n * representation of Unicode strictly smaller than UTF-32.\n *\n * The shortest sequence requirement was introduced by:\n *    Corrigendum #1: UTF-8 Shortest Form\n * It can be found here:\n *    http://www.unicode.org/versions/corrigendum1.html\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/unicode/mkutf8data.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/xfs/libxfs/xfs_attr.h#L83-L425",
    "ascii": "/*\n * Below is a state machine diagram for attr remove operations. The  XFS_DAS_*\n * states indicate places where the function would return -EAGAIN, and then\n * immediately resume from after being called by the calling function. States\n * marked as a \"subroutine state\" indicate that they belong to a subroutine, and\n * so the calling function needs to pass them back to that subroutine to allow\n * it to finish where it left off. But they otherwise do not have a role in the\n * calling function other than just passing through.\n *\n * xfs_attr_remove_iter()\n *              │\n *              v\n *        have attr to remove? ──n──> done\n *              │\n *              y\n *              │\n *              v\n *        are we short form? ──y──> xfs_attr_shortform_remove ──> done\n *              │\n *              n\n *              │\n *              V\n *        are we leaf form? ──y──> xfs_attr_leaf_removename ──> done\n *              │\n *              n\n *              │\n *              V\n *   ┌── need to setup state?\n *   │          │\n *   n          y\n *   │          │\n *   │          v\n *   │ find attr and get state\n *   │ attr has remote blks? ──n─┐\n *   │          │                v\n *   │          │         find and invalidate\n *   │          y         the remote blocks.\n *   │          │         mark attr incomplete\n *   │          ├────────────────┘\n *   └──────────┤\n *              │\n *              v\n *   Have remote blks to remove? ───y─────┐\n *              │        ^          remove the blks\n *              │        │                │\n *              │        │                v\n *              │  XFS_DAS_RMTBLK <─n── done?\n *              │  re-enter with          │\n *              │  one less blk to        y\n *              │      remove             │\n *              │                         V\n *              │                  refill the state\n *              n                         │\n *              │                         v\n *              │                   XFS_DAS_RM_NAME\n *              │                         │\n *              ├─────────────────────────┘\n *              │\n *              v\n *       remove leaf and\n *       update hash with\n *   xfs_attr_node_remove_cleanup\n *              │\n *              v\n *           need to\n *        shrink tree? ─n─┐\n *              │         │\n *              y         │\n *              │         │\n *              v         │\n *          join leaf     │\n *              │         │\n *              v         │\n *      XFS_DAS_RM_SHRINK │\n *              │         │\n *              v         │\n *       do the shrink    │\n *              │         │\n *              v         │\n *          free state <──┘\n *              │\n *              v\n *            done\n *\n *\n * Below is a state machine diagram for attr set operations.\n *\n * It seems the challenge with understanding this system comes from trying to\n * absorb the state machine all at once, when really one should only be looking\n * at it with in the context of a single function. Once a state sensitive\n * function is called, the idea is that it \"takes ownership\" of the\n * state machine. It isn't concerned with the states that may have belonged to\n * it's calling parent. Only the states relevant to itself or any other\n * subroutines there in. Once a calling function hands off the state machine to\n * a subroutine, it needs to respect the simple rule that it doesn't \"own\" the\n * state machine anymore, and it's the responsibility of that calling function\n * to propagate the -EAGAIN back up the call stack. Upon reentry, it is\n * committed to re-calling that subroutine until it returns something other than\n * -EAGAIN. Once that subroutine signals completion (by returning anything other\n * than -EAGAIN), the calling function can resume using the state machine.\n *\n *  xfs_attr_set_iter()\n *              │\n *              v\n *   ┌─y─ has an attr fork?\n *   │          |\n *   │          n\n *   │          |\n *   │          V\n *   │       add a fork\n *   │          │\n *   └──────────┤\n *              │\n *              V\n *   ┌─── is shortform?\n *   │          │\n *   │          y\n *   │          │\n *   │          V\n *   │   xfs_attr_set_fmt\n *   │          |\n *   │          V\n *   │ xfs_attr_try_sf_addname\n *   │          │\n *   │          V\n *   │      had enough ──y──> done\n *   │        space?\n *   n          │\n *   │          n\n *   │          │\n *   │          V\n *   │   transform to leaf\n *   │          │\n *   │          V\n *   │   hold the leaf buffer\n *   │          │\n *   │          V\n *   │     return -EAGAIN\n *   │      Re-enter in\n *   │       leaf form\n *   │\n *   └─> release leaf buffer\n *          if needed\n *              │\n *              V\n *   ┌───n── fork has\n *   │      only 1 blk?\n *   │          │\n *   │          y\n *   │          │\n *   │          v\n *   │ xfs_attr_leaf_try_add()\n *   │          │\n *   │          v\n *   │      had enough ──────────────y─────────────┐\n *   │        space?                               │\n *   │          │                                  │\n *   │          n                                  │\n *   │          │                                  │\n *   │          v                                  │\n *   │    return -EAGAIN                           │\n *   │      re-enter in                            │\n *   │        node form                            │\n *   │          │                                  │\n *   └──────────┤                                  │\n *              │                                  │\n *              V                                  │\n * xfs_attr_node_addname_find_attr                 │\n *        determines if this                       │\n *       is create or rename                       │\n *     find space to store attr                    │\n *              │                                  │\n *              v                                  │\n *     xfs_attr_node_addname                       │\n *              │                                  │\n *              v                                  │\n *   fits in a node leaf? ────n─────┐              │\n *              │     ^             v              │\n *              │     │       single leaf node?    │\n *              │     │         │            │     │\n *              y     │         y            n     │\n *              │     │         │            │     │\n *              v     │         v            v     │\n *            update  │    grow the leaf  split if │\n *           hashvals └── return -EAGAIN   needed  │\n *              │         retry leaf add     │     │\n *              │           on reentry       │     │\n *              ├────────────────────────────┘     │\n *              │                                  │\n *              v                                  │\n *         need to alloc                           │\n *   ┌─y── or flip flag?                           │\n *   │          │                                  │\n *   │          n                                  │\n *   │          │                                  │\n *   │          v                                  │\n *   │         done                                │\n *   │                                             │\n *   │                                             │\n *   │         XFS_DAS_FOUND_LBLK <────────────────┘\n *   │                  │\n *   │                  V\n *   │        xfs_attr_leaf_addname()\n *   │                  │\n *   │                  v\n *   │      ┌──first time through?\n *   │      │          │\n *   │      │          y\n *   │      │          │\n *   │      n          v\n *   │      │    if we have rmt blks\n *   │      │    find space for them\n *   │      │          │\n *   │      └──────────┤\n *   │                 │\n *   │                 v\n *   │            still have\n *   │      ┌─n─ blks to alloc? <──┐\n *   │      │          │           │\n *   │      │          y           │\n *   │      │          │           │\n *   │      │          v           │\n *   │      │     alloc one blk    │\n *   │      │     return -EAGAIN ──┘\n *   │      │    re-enter with one\n *   │      │    less blk to alloc\n *   │      │\n *   │      │\n *   │      └───> set the rmt\n *   │               value\n *   │                 │\n *   │                 v\n *   │               was this\n *   │              a rename? ──n─┐\n *   │                 │          │\n *   │                 y          │\n *   │                 │          │\n *   │                 v          │\n *   │           flip incomplete  │\n *   │               flag         │\n *   │                 │          │\n *   │                 v          │\n *   │         XFS_DAS_FLIP_LFLAG │\n *   │                 │          │\n *   │                 v          │\n *   │          need to remove    │\n *   │              old bks? ──n──┤\n *   │                 │          │\n *   │                 y          │\n *   │                 │          │\n *   │                 V          │\n *   │               remove       │\n *   │        ┌───> old blks      │\n *   │        │        │          │\n *   │ XFS_DAS_RM_LBLK │          │\n *   │        ^        │          │\n *   │        │        v          │\n *   │        └──y── more to      │\n *   │              remove?       │\n *   │                 │          │\n *   │                 n          │\n *   │                 │          │\n *   │                 v          │\n *   │          XFS_DAS_RD_LEAF   │\n *   │                 │          │\n *   │                 v          │\n *   │            remove leaf     │\n *   │                 │          │\n *   │                 v          │\n *   │            shrink to sf    │\n *   │             if needed      │\n *   │                 │          │\n *   │                 v          │\n *   │                done <──────┘\n *   │\n *   └──────> XFS_DAS_FOUND_NBLK\n *                     │\n *                     v\n *       ┌─────n──  need to\n *       │        alloc blks?\n *       │             │\n *       │             y\n *       │             │\n *       │             v\n *       │        find space\n *       │             │\n *       │             v\n *       │  ┌─>XFS_DAS_ALLOC_NODE\n *       │  │          │\n *       │  │          v\n *       │  │      alloc blk\n *       │  │          │\n *       │  │          v\n *       │  └──y── need to alloc\n *       │         more blocks?\n *       │             │\n *       │             n\n *       │             │\n *       │             v\n *       │      set the rmt value\n *       │             │\n *       │             v\n *       │          was this\n *       └────────> a rename? ──n─┐\n *                     │          │\n *                     y          │\n *                     │          │\n *                     v          │\n *               flip incomplete  │\n *                   flag         │\n *                     │          │\n *                     v          │\n *             XFS_DAS_FLIP_NFLAG │\n *                     │          │\n *                     v          │\n *                 need to        │\n *               remove blks? ─n──┤\n *                     │          │\n *                     y          │\n *                     │          │\n *                     v          │\n *                   remove       │\n *        ┌────────> old blks     │\n *        │            │          │\n *  XFS_DAS_RM_NBLK    │          │\n *        ^            │          │\n *        │            v          │\n *        └──────y── more to      │\n *                   remove       │\n *                     │          │\n *                     n          │\n *                     │          │\n *                     v          │\n *              XFS_DAS_CLR_FLAG  │\n *                     │          │\n *                     v          │\n *                clear flags     │\n *                     │          │\n *                     ├──────────┘\n *                     │\n *                     v\n *                   done\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/xfs/libxfs/xfs_attr.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/xfs/libxfs/xfs_btree.c#L513-L585",
    "ascii": "/*\n * XFS btree block layout and addressing:\n *\n * There are two types of blocks in the btree: leaf and non-leaf blocks.\n *\n * The leaf record start with a header then followed by records containing\n * the values.  A non-leaf block also starts with the same header, and\n * then first contains lookup keys followed by an equal number of pointers\n * to the btree blocks at the previous level.\n *\n *\t\t+--------+-------+-------+-------+-------+-------+-------+\n * Leaf:\t| header | rec 1 | rec 2 | rec 3 | rec 4 | rec 5 | rec N |\n *\t\t+--------+-------+-------+-------+-------+-------+-------+\n *\n *\t\t+--------+-------+-------+-------+-------+-------+-------+\n * Non-Leaf:\t| header | key 1 | key 2 | key N | ptr 1 | ptr 2 | ptr N |\n *\t\t+--------+-------+-------+-------+-------+-------+-------+\n *\n * The header is called struct xfs_btree_block for reasons better left unknown\n * and comes in different versions for short (32bit) and long (64bit) block\n * pointers.  The record and key structures are defined by the btree instances\n * and opaque to the btree core.  The block pointers are simple disk endian\n * integers, available in a short (32bit) and long (64bit) variant.\n *\n * The helpers below calculate the offset of a given record, key or pointer\n * into a btree block (xfs_btree_*_offset) or return a pointer to the given\n * record, key or pointer (xfs_btree_*_addr).  Note that all addressing\n * inside the btree block is done using indices starting at one, not zero!\n *\n * If XFS_BTREE_OVERLAPPING is set, then this btree supports keys containing\n * overlapping intervals.  In such a tree, records are still sorted lowest to\n * highest and indexed by the smallest key value that refers to the record.\n * However, nodes are different: each pointer has two associated keys -- one\n * indexing the lowest key available in the block(s) below (the same behavior\n * as the key in a regular btree) and another indexing the highest key\n * available in the block(s) below.  Because records are /not/ sorted by the\n * highest key, all leaf block updates require us to compute the highest key\n * that matches any record in the leaf and to recursively update the high keys\n * in the nodes going further up in the tree, if necessary.  Nodes look like\n * this:\n *\n *\t\t+--------+-----+-----+-----+-----+-----+-------+-------+-----+\n * Non-Leaf:\t| header | lo1 | hi1 | lo2 | hi2 | ... | ptr 1 | ptr 2 | ... |\n *\t\t+--------+-----+-----+-----+-----+-----+-------+-------+-----+\n *\n * To perform an interval query on an overlapped tree, perform the usual\n * depth-first search and use the low and high keys to decide if we can skip\n * that particular node.  If a leaf node is reached, return the records that\n * intersect the interval.  Note that an interval query may return numerous\n * entries.  For a non-overlapped tree, simply search for the record associated\n * with the lowest key and iterate forward until a non-matching record is\n * found.  Section 14.3 (\"Interval Trees\") of _Introduction to Algorithms_ by\n * Cormen, Leiserson, Rivest, and Stein (2nd or 3rd ed. only) discuss this in\n * more detail.\n *\n * Why do we care about overlapping intervals?  Let's say you have a bunch of\n * reverse mapping records on a reflink filesystem:\n *\n * 1: +- file A startblock B offset C length D -----------+\n * 2:      +- file E startblock F offset G length H --------------+\n * 3:      +- file I startblock F offset J length K --+\n * 4:                                                        +- file L... --+\n *\n * Now say we want to map block (B+D) into file A at offset (C+D).  Ideally,\n * we'd simply increment the length of record 1.  But how do we find the record\n * that ends at (B+D-1) (i.e. record 1)?  A LE lookup of (B+D-1) would return\n * record 3 because the keys are ordered first by startblock.  An interval\n * query would return records 1 and 2 because they both overlap (B+D-1), and\n * from that we can pick out record 1 as the appropriate left neighbor.\n *\n * In the non-overlapped case you can do a LE lookup and decrement the cursor\n * because a record's interval must end before the next record.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/xfs/libxfs/xfs_btree.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/xfs/libxfs/xfs_refcount.c#L271-L346",
    "ascii": "/*\n * Adjusting the Reference Count\n *\n * As stated elsewhere, the reference count btree (refcbt) stores\n * >1 reference counts for extents of physical blocks.  In this\n * operation, we're either raising or lowering the reference count of\n * some subrange stored in the tree:\n *\n *      <------ adjustment range ------>\n * ----+   +---+-----+ +--+--------+---------\n *  2  |   | 3 |  4  | |17|   55   |   10\n * ----+   +---+-----+ +--+--------+---------\n * X axis is physical blocks number;\n * reference counts are the numbers inside the rectangles\n *\n * The first thing we need to do is to ensure that there are no\n * refcount extents crossing either boundary of the range to be\n * adjusted.  For any extent that does cross a boundary, split it into\n * two extents so that we can increment the refcount of one of the\n * pieces later:\n *\n *      <------ adjustment range ------>\n * ----+   +---+-----+ +--+--------+----+----\n *  2  |   | 3 |  2  | |17|   55   | 10 | 10\n * ----+   +---+-----+ +--+--------+----+----\n *\n * For this next step, let's assume that all the physical blocks in\n * the adjustment range are mapped to a file and are therefore in use\n * at least once.  Therefore, we can infer that any gap in the\n * refcount tree within the adjustment range represents a physical\n * extent with refcount == 1:\n *\n *      <------ adjustment range ------>\n * ----+---+---+-----+-+--+--------+----+----\n *  2  |\"1\"| 3 |  2  |1|17|   55   | 10 | 10\n * ----+---+---+-----+-+--+--------+----+----\n *      ^\n *\n * For each extent that falls within the interval range, figure out\n * which extent is to the left or the right of that extent.  Now we\n * have a left, current, and right extent.  If the new reference count\n * of the center extent enables us to merge left, center, and right\n * into one record covering all three, do so.  If the center extent is\n * at the left end of the range, abuts the left extent, and its new\n * reference count matches the left extent's record, then merge them.\n * If the center extent is at the right end of the range, abuts the\n * right extent, and the reference counts match, merge those.  In the\n * example, we can left merge (assuming an increment operation):\n *\n *      <------ adjustment range ------>\n * --------+---+-----+-+--+--------+----+----\n *    2    | 3 |  2  |1|17|   55   | 10 | 10\n * --------+---+-----+-+--+--------+----+----\n *          ^\n *\n * For all other extents within the range, adjust the reference count\n * or delete it if the refcount falls below 2.  If we were\n * incrementing, the end result looks like this:\n *\n *      <------ adjustment range ------>\n * --------+---+-----+-+--+--------+----+----\n *    2    | 4 |  3  |2|18|   56   | 11 | 10\n * --------+---+-----+-+--+--------+----+----\n *\n * The result of a decrement operation looks as such:\n *\n *      <------ adjustment range ------>\n * ----+   +---+       +--+--------+----+----\n *  2  |   | 2 |       |16|   54   |  9 | 10\n * ----+   +---+       +--+--------+----+----\n *      DDDD    111111DD\n *\n * The blocks marked \"D\" are freed; the blocks marked \"1\" are only\n * referenced once and therefore the record is removed from the\n * refcount btree.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/xfs/libxfs/xfs_refcount.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/drm/drm_atomic.h#L34-L71",
    "ascii": "/**\n * struct drm_crtc_commit - track modeset commits on a CRTC\n *\n * This structure is used to track pending modeset changes and atomic commit on\n * a per-CRTC basis. Since updating the list should never block, this structure\n * is reference counted to allow waiters to safely wait on an event to complete,\n * without holding any locks.\n *\n * It has 3 different events in total to allow a fine-grained synchronization\n * between outstanding updates::\n *\n *\tatomic commit thread\t\t\thardware\n *\n * \twrite new state into hardware\t---->\t...\n * \tsignal hw_done\n * \t\t\t\t\t\tswitch to new state on next\n * \t...\t\t\t\t\tv/hblank\n *\n *\twait for buffers to show up\t\t...\n *\n *\t...\t\t\t\t\tsend completion irq\n *\t\t\t\t\t\tirq handler signals flip_done\n *\tcleanup old buffers\n *\n * \tsignal cleanup_done\n *\n * \twait for flip_done\t\t<----\n * \tclean up atomic state\n *\n * The important bit to know is that &cleanup_done is the terminal event, but the\n * ordering between &flip_done and &hw_done is entirely up to the specific driver\n * and modeset state change.\n *\n * For an implementation of how to use this look at\n * drm_atomic_helper_setup_commit() from the atomic helper library.\n *\n * See also drm_crtc_commit_wait().\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/drm/drm_atomic.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/drm/drm_modes.h#L197-L251",
    "ascii": "/**\n * struct drm_display_mode - DRM kernel-internal display mode structure\n * @hdisplay: horizontal display size\n * @hsync_start: horizontal sync start\n * @hsync_end: horizontal sync end\n * @htotal: horizontal total size\n * @hskew: horizontal skew?!\n * @vdisplay: vertical display size\n * @vsync_start: vertical sync start\n * @vsync_end: vertical sync end\n * @vtotal: vertical total size\n * @vscan: vertical scan?!\n * @crtc_hdisplay: hardware mode horizontal display size\n * @crtc_hblank_start: hardware mode horizontal blank start\n * @crtc_hblank_end: hardware mode horizontal blank end\n * @crtc_hsync_start: hardware mode horizontal sync start\n * @crtc_hsync_end: hardware mode horizontal sync end\n * @crtc_htotal: hardware mode horizontal total size\n * @crtc_hskew: hardware mode horizontal skew?!\n * @crtc_vdisplay: hardware mode vertical display size\n * @crtc_vblank_start: hardware mode vertical blank start\n * @crtc_vblank_end: hardware mode vertical blank end\n * @crtc_vsync_start: hardware mode vertical sync start\n * @crtc_vsync_end: hardware mode vertical sync end\n * @crtc_vtotal: hardware mode vertical total size\n *\n * This is the kernel API display mode information structure. For the\n * user-space version see struct drm_mode_modeinfo.\n *\n * The horizontal and vertical timings are defined per the following diagram.\n *\n * ::\n *\n *\n *               Active                 Front           Sync           Back\n *              Region                 Porch                          Porch\n *     <-----------------------><----------------><-------------><-------------->\n *       //////////////////////|\n *      ////////////////////// |\n *     //////////////////////  |..................               ................\n *                                                _______________\n *     <----- [hv]display ----->\n *     <------------- [hv]sync_start ------------>\n *     <--------------------- [hv]sync_end --------------------->\n *     <-------------------------------- [hv]total ----------------------------->*\n *\n * This structure contains two copies of timings. First are the plain timings,\n * which specify the logical mode, as it would be for a progressive 1:1 scanout\n * at the refresh rate userspace can observe through vblank timestamps. Then\n * there's the hardware timings, which are corrected for interlacing,\n * double-clocking and similar things. They are provided as a convenience, and\n * can be appropriately computed using drm_mode_set_crtcinfo().\n *\n * For printing you can use %DRM_MODE_FMT and DRM_MODE_ARG().\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/drm/drm_modes.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/dt-bindings/pinctrl/pinctrl-starfive-jh7100.h#L14-L25",
    "ascii": "/*\n * GPIOMUX bits:\n *  | 31 - 24 | 23 - 16 | 15 - 8 |     7    |     6    |  5 - 0  |\n *  |  dout   |  doen   |  din   | dout rev | doen rev | gpio nr |\n *\n * dout:     output signal\n * doen:     output enable signal\n * din:      optional input signal, 0xff = none\n * dout rev: output signal reverse bit\n * doen rev: output enable signal reverse bit\n * gpio nr:  gpio number, 0 - 63\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/dt-bindings/pinctrl/pinctrl-starfive-jh7100.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/console_struct.h#L62-L93",
    "ascii": "/*\n * Example: vc_data of a console that was scrolled 3 lines down.\n *\n *                              Console buffer\n * vc_screenbuf ---------> +----------------------+-.\n *                         | initializing W       |  \\\n *                         | initializing X       |   |\n *                         | initializing Y       |    > scroll-back area\n *                         | initializing Z       |   |\n *                         |                      |  /\n * vc_visible_origin ---> ^+----------------------+-:\n * (changes by scroll)    || Welcome to linux     |  \\\n *                        ||                      |   |\n *           vc_rows --->< | login: root          |   |  visible on console\n *                        || password:            |    > (vc_screenbuf_size is\n * vc_origin -----------> ||                      |   |   vc_size_row * vc_rows)\n * (start when no scroll) || Last login: 12:28    |  /\n *                        v+----------------------+-:\n *                         | Have a lot of fun... |  \\\n * vc_pos -----------------|--------v             |   > scroll-front area\n *                         | ~ # cat_             |  /\n * vc_scr_end -----------> +----------------------+-:\n * (vc_origin +            |                      |  \\ EMPTY, to be filled by\n *  vc_screenbuf_size)     |                      |  / vc_video_erase_char\n *                         +----------------------+-'\n *                         <---- 2 * vc_cols ----->\n *                         <---- vc_size_row ----->\n *\n * Note that every character in the console buffer is accompanied with an\n * attribute in the buffer right after the character. This is not depicted\n * in the figure.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/console_struct.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/hyperv.h#L34-L70",
    "ascii": "/*\n * Types for GPADL, decides is how GPADL header is created.\n *\n * It doesn't make much difference between BUFFER and RING if PAGE_SIZE is the\n * same as HV_HYP_PAGE_SIZE.\n *\n * If PAGE_SIZE is bigger than HV_HYP_PAGE_SIZE, the headers of ring buffers\n * will be of PAGE_SIZE, however, only the first HV_HYP_PAGE will be put\n * into gpadl, therefore the number for HV_HYP_PAGE and the indexes of each\n * HV_HYP_PAGE will be different between different types of GPADL, for example\n * if PAGE_SIZE is 64K:\n *\n * BUFFER:\n *\n * gva:    |--       64k      --|--       64k      --| ... |\n * gpa:    | 4k | 4k | ... | 4k | 4k | 4k | ... | 4k |\n * index:  0    1    2     15   16   17   18 .. 31   32 ...\n *         |    |    ...   |    |    |   ...    |   ...\n *         v    V          V    V    V          V\n * gpadl:  | 4k | 4k | ... | 4k | 4k | 4k | ... | 4k | ... |\n * index:  0    1    2 ... 15   16   17   18 .. 31   32 ...\n *\n * RING:\n *\n *         | header  |           data           | header  |     data      |\n * gva:    |-- 64k --|--       64k      --| ... |-- 64k --|-- 64k --| ... |\n * gpa:    | 4k | .. | 4k | 4k | ... | 4k | ... | 4k | .. | 4k | .. | ... |\n * index:  0    1    16   17   18    31   ...   n   n+1  n+16 ...         2n\n *         |         /    /          /          |         /               /\n *         |        /    /          /           |        /               /\n *         |       /    /   ...    /    ...     |       /      ...      /\n *         |      /    /          /             |      /               /\n *         |     /    /          /              |     /               /\n *         V    V    V          V               V    V               v\n * gpadl:  | 4k | 4k |   ...    |    ...        | 4k | 4k |  ...     |\n * index:  0    1    2   ...    16   ...       n-15 n-14 n-13  ...  2n-30\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/hyperv.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/jump_label.h#L426-L480",
    "ascii": "/*\n * Combine the right initial value (type) with the right branch order\n * to generate the desired result.\n *\n *\n * type\\branch|\tlikely (1)\t      |\tunlikely (0)\n * -----------+-----------------------+------------------\n *            |                       |\n *  true (1)  |\t   ...\t\t      |\t   ...\n *            |    NOP\t\t      |\t   JMP L\n *            |    <br-stmts>\t      |\t1: ...\n *            |\tL: ...\t\t      |\n *            |\t\t\t      |\n *            |\t\t\t      |\tL: <br-stmts>\n *            |\t\t\t      |\t   jmp 1b\n *            |                       |\n * -----------+-----------------------+------------------\n *            |                       |\n *  false (0) |\t   ...\t\t      |\t   ...\n *            |    JMP L\t      |\t   NOP\n *            |    <br-stmts>\t      |\t1: ...\n *            |\tL: ...\t\t      |\n *            |\t\t\t      |\n *            |\t\t\t      |\tL: <br-stmts>\n *            |\t\t\t      |\t   jmp 1b\n *            |                       |\n * -----------+-----------------------+------------------\n *\n * The initial value is encoded in the LSB of static_key::entries,\n * type: 0 = false, 1 = true.\n *\n * The branch type is encoded in the LSB of jump_entry::key,\n * branch: 0 = unlikely, 1 = likely.\n *\n * This gives the following logic table:\n *\n *\tenabled\ttype\tbranch\t  instuction\n * -----------------------------+-----------\n *\t0\t0\t0\t| NOP\n *\t0\t0\t1\t| JMP\n *\t0\t1\t0\t| NOP\n *\t0\t1\t1\t| JMP\n *\n *\t1\t0\t0\t| JMP\n *\t1\t0\t1\t| NOP\n *\t1\t1\t0\t| JMP\n *\t1\t1\t1\t| NOP\n *\n * Which gives the following functions:\n *\n *   dynamic: instruction = enabled ^ branch\n *   static:  instruction = type ^ branch\n *\n * See jump_label_type() / jump_label_init_type().\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/jump_label.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/plist.h#L2-L72",
    "ascii": "/*\n * Descending-priority-sorted double-linked list\n *\n * (C) 2002-2003 Intel Corp\n * Inaky Perez-Gonzalez <inaky.perez-gonzalez@intel.com>.\n *\n * 2001-2005 (c) MontaVista Software, Inc.\n * Daniel Walker <dwalker@mvista.com>\n *\n * (C) 2005 Thomas Gleixner <tglx@linutronix.de>\n *\n * Simplifications of the original code by\n * Oleg Nesterov <oleg@tv-sign.ru>\n *\n * Based on simple lists (include/linux/list.h).\n *\n * This is a priority-sorted list of nodes; each node has a\n * priority from INT_MIN (highest) to INT_MAX (lowest).\n *\n * Addition is O(K), removal is O(1), change of priority of a node is\n * O(K) and K is the number of RT priority levels used in the system.\n * (1 <= K <= 99)\n *\n * This list is really a list of lists:\n *\n *  - The tier 1 list is the prio_list, different priority nodes.\n *\n *  - The tier 2 list is the node_list, serialized nodes.\n *\n * Simple ASCII art explanation:\n *\n * pl:prio_list (only for plist_node)\n * nl:node_list\n *   HEAD|             NODE(S)\n *       |\n *       ||------------------------------------|\n *       ||->|pl|<->|pl|<--------------->|pl|<-|\n *       |   |10|   |21|   |21|   |21|   |40|   (prio)\n *       |   |  |   |  |   |  |   |  |   |  |\n *       |   |  |   |  |   |  |   |  |   |  |\n * |->|nl|<->|nl|<->|nl|<->|nl|<->|nl|<->|nl|<-|\n * |-------------------------------------------|\n *\n * The nodes on the prio_list list are sorted by priority to simplify\n * the insertion of new nodes. There are no nodes with duplicate\n * priorites on the list.\n *\n * The nodes on the node_list are ordered by priority and can contain\n * entries which have the same priority. Those entries are ordered\n * FIFO\n *\n * Addition means: look for the prio_list node in the prio_list\n * for the priority of the node and insert it before the node_list\n * entry of the next prio_list node. If it is the first node of\n * that priority, add it to the prio_list in the right position and\n * insert it into the serialized node_list list\n *\n * Removal means remove it from the node_list and remove it from\n * the prio_list if the node_list list_head is non empty. In case\n * of removal from the prio_list it must be checked whether other\n * entries of the same priority are on the list or not. If there\n * is another entry of the same priority then this entry has to\n * replace the removed entry on the prio_list. If the entry which\n * is removed is the only entry of this priority then a simple\n * remove from both list is sufficient.\n *\n * INT_MIN is the highest priority, 0 is the medium highest, INT_MAX\n * is lowest priority.\n *\n * No locking is done, up to the caller.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/plist.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/power_supply.h#L357-L432",
    "ascii": "/**\n * struct power_supply_maintenance_charge_table - setting for maintenace charging\n * @charge_current_max_ua: maintenance charging current that is used to keep\n *   the charge of the battery full as current is consumed after full charging.\n *   The corresponding charge_voltage_max_uv is used as a safeguard: when we\n *   reach this voltage the maintenance charging current is turned off. It is\n *   turned back on if we fall below this voltage.\n * @charge_voltage_max_uv: maintenance charging voltage that is usually a bit\n *   lower than the constant_charge_voltage_max_uv. We can apply this settings\n *   charge_current_max_ua until we get back up to this voltage.\n * @safety_timer_minutes: maintenance charging safety timer, with an expiry\n *   time in minutes. We will only use maintenance charging in this setting\n *   for a certain amount of time, then we will first move to the next\n *   maintenance charge current and voltage pair in respective array and wait\n *   for the next safety timer timeout, or, if we reached the last maintencance\n *   charging setting, disable charging until we reach\n *   charge_restart_voltage_uv and restart ordinary CC/CV charging from there.\n *   These timers should be chosen to align with the typical discharge curve\n *   for the battery.\n *\n * Ordinary CC/CV charging will stop charging when the charge current goes\n * below charge_term_current_ua, and then restart it (if the device is still\n * plugged into the charger) at charge_restart_voltage_uv. This happens in most\n * consumer products because the power usage while connected to a charger is\n * not zero, and devices are not manufactured to draw power directly from the\n * charger: instead they will at all times dissipate the battery a little, like\n * the power used in standby mode. This will over time give a charge graph\n * such as this:\n *\n * Energy\n *  ^      ...        ...      ...      ...      ...      ...      ...\n *  |    .   .       .  .     .  .     .  .     .  .     .  .     .\n *  |  ..     .   ..     .  ..    .  ..    .  ..    .  ..    .  ..\n *  |.          ..        ..       ..       ..       ..       ..\n *  +-------------------------------------------------------------------> t\n *\n * Practically this means that the Li-ions are wandering back and forth in the\n * battery and this causes degeneration of the battery anode and cathode.\n * To prolong the life of the battery, maintenance charging is applied after\n * reaching charge_term_current_ua to hold up the charge in the battery while\n * consuming power, thus lowering the wear on the battery:\n *\n * Energy\n *  ^      .......................................\n *  |    .                                        ......................\n *  |  ..\n *  |.\n *  +-------------------------------------------------------------------> t\n *\n * Maintenance charging uses the voltages from this table: a table of settings\n * is traversed using a slightly lower current and voltage than what is used for\n * CC/CV charging. The maintenance charging will for safety reasons not go on\n * indefinately: we lower the current and voltage with successive maintenance\n * settings, then disable charging completely after we reach the last one,\n * and after that we do not restart charging until we reach\n * charge_restart_voltage_uv (see struct power_supply_battery_info) and restart\n * ordinary CC/CV charging from there.\n *\n * As an example, a Samsung EB425161LA Lithium-Ion battery is CC/CV charged\n * at 900mA to 4340mV, then maintenance charged at 600mA and 4150mV for up to\n * 60 hours, then maintenance charged at 600mA and 4100mV for up to 200 hours.\n * After this the charge cycle is restarted waiting for\n * charge_restart_voltage_uv.\n *\n * For most mobile electronics this type of maintenance charging is enough for\n * the user to disconnect the device and make use of it before both maintenance\n * charging cycles are complete, if the current and voltage has been chosen\n * appropriately. These need to be determined from battery discharge curves\n * and expected standby current.\n *\n * If the voltage anyway drops to charge_restart_voltage_uv during maintenance\n * charging, ordinary CC/CV charging is restarted. This can happen if the\n * device is e.g. actively used during charging, so more current is drawn than\n * the expected stand-by current. Also overvoltage protection will be applied\n * as usual.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/power_supply.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/rculist.h#L537-L546",
    "ascii": "/**\n * hlists_swap_heads_rcu - swap the lists the hlist heads point to\n * @left:  The hlist head on the left\n * @right: The hlist head on the right\n *\n * The lists start out as [@left  ][node1 ... ] and\n *                        [@right ][node2 ... ]\n * The lists end up as    [@left  ][node2 ... ]\n *                        [@right ][node1 ... ]\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/rculist.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/rcu_segcblist.h#L67-L117",
    "ascii": "/*\n *                     ==NOCB Offloading state machine==\n *\n *\n *  ----------------------------------------------------------------------------\n *  |                              SEGCBLIST_RCU_CORE                          |\n *  |                                                                          |\n *  |  Callbacks processed by rcu_core() from softirqs or local                |\n *  |  rcuc kthread, without holding nocb_lock.                                |\n *  ----------------------------------------------------------------------------\n *                                         |\n *                                         v\n *  ----------------------------------------------------------------------------\n *  |       SEGCBLIST_RCU_CORE | SEGCBLIST_LOCKING | SEGCBLIST_OFFLOADED       |\n *  |                                                                          |\n *  | Callbacks processed by rcu_core() from softirqs or local                 |\n *  | rcuc kthread, while holding nocb_lock. Waking up CB and GP kthreads,     |\n *  | allowing nocb_timer to be armed.                                         |\n *  ----------------------------------------------------------------------------\n *                                         |\n *                                         v\n *                        -----------------------------------\n *                        |                                 |\n *                        v                                 v\n *  ---------------------------------------  ----------------------------------|\n *  |        SEGCBLIST_RCU_CORE   |       |  |     SEGCBLIST_RCU_CORE   |      |\n *  |        SEGCBLIST_LOCKING    |       |  |     SEGCBLIST_LOCKING    |      |\n *  |        SEGCBLIST_OFFLOADED  |       |  |     SEGCBLIST_OFFLOADED  |      |\n *  |        SEGCBLIST_KTHREAD_CB         |  |     SEGCBLIST_KTHREAD_GP        |\n *  |                                     |  |                                 |\n *  |                                     |  |                                 |\n *  | CB kthread woke up and              |  | GP kthread woke up and          |\n *  | acknowledged SEGCBLIST_OFFLOADED.   |  | acknowledged SEGCBLIST_OFFLOADED|\n *  | Processes callbacks concurrently    |  |                                 |\n *  | with rcu_core(), holding            |  |                                 |\n *  | nocb_lock.                          |  |                                 |\n *  ---------------------------------------  -----------------------------------\n *                        |                                 |\n *                        -----------------------------------\n *                                         |\n *                                         v\n *  |--------------------------------------------------------------------------|\n *  |                           SEGCBLIST_LOCKING    |                         |\n *  |                           SEGCBLIST_OFFLOADED  |                         |\n *  |                           SEGCBLIST_KTHREAD_GP |                         |\n *  |                           SEGCBLIST_KTHREAD_CB                           |\n *  |                                                                          |\n *  |   Kthreads handle callbacks holding nocb_lock, local rcu_core() stops    |\n *  |   handling callbacks. Enable bypass queueing.                            |\n *  ----------------------------------------------------------------------------\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/rcu_segcblist.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/can/bittiming.h#L20-L77",
    "ascii": "/*\n * struct can_tdc - CAN FD Transmission Delay Compensation parameters\n *\n * At high bit rates, the propagation delay from the TX pin to the RX\n * pin of the transceiver causes measurement errors: the sample point\n * on the RX pin might occur on the previous bit.\n *\n * To solve this issue, ISO 11898-1 introduces in section 11.3.3\n * \"Transmitter delay compensation\" a SSP (Secondary Sample Point)\n * equal to the distance from the start of the bit time on the TX pin\n * to the actual measurement on the RX pin.\n *\n * This structure contains the parameters to calculate that SSP.\n *\n * -+----------- one bit ----------+-- TX pin\n *  |<--- Sample Point --->|\n *\n *                         --+----------- one bit ----------+-- RX pin\n *  |<-------- TDCV -------->|\n *                           |<------- TDCO ------->|\n *  |<----------- Secondary Sample Point ---------->|\n *\n * To increase precision, contrary to the other bittiming parameters\n * which are measured in time quanta, the TDC parameters are measured\n * in clock periods (also referred as \"minimum time quantum\" in ISO\n * 11898-1).\n *\n * @tdcv: Transmitter Delay Compensation Value. The time needed for\n *\tthe signal to propagate, i.e. the distance, in clock periods,\n *\tfrom the start of the bit on the TX pin to when it is received\n *\ton the RX pin. @tdcv depends on the controller modes:\n *\n *\t  CAN_CTRLMODE_TDC_AUTO is set: The transceiver dynamically\n *\t  measures @tdcv for each transmitted CAN FD frame and the\n *\t  value provided here should be ignored.\n *\n *\t  CAN_CTRLMODE_TDC_MANUAL is set: use the fixed provided @tdcv\n *\t  value.\n *\n *\tN.B. CAN_CTRLMODE_TDC_AUTO and CAN_CTRLMODE_TDC_MANUAL are\n *\tmutually exclusive. Only one can be set at a time. If both\n *\tCAN_TDC_CTRLMODE_AUTO and CAN_TDC_CTRLMODE_MANUAL are unset,\n *\tTDC is disabled and all the values of this structure should be\n *\tignored.\n *\n * @tdco: Transmitter Delay Compensation Offset. Offset value, in\n *\tclock periods, defining the distance between the start of the\n *\tbit reception on the RX pin of the transceiver and the SSP\n *\tposition such that SSP = @tdcv + @tdco.\n *\n * @tdcf: Transmitter Delay Compensation Filter window. Defines the\n *\tminimum value for the SSP position in clock periods. If the\n *\tSSP position is less than @tdcf, then no delay compensations\n *\toccur and the normal sampling point is used instead. The\n *\tfeature is enabled if and only if @tdcv is set to zero\n *\t(automatic mode) and @tdcf is configured to a value greater\n *\tthan @tdco.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/can/bittiming.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/can/dev.h#L95-L114",
    "ascii": "/*\n * can_get_relative_tdco() - TDCO relative to the sample point\n *\n * struct can_tdc::tdco represents the absolute offset from TDCV. Some\n * controllers use instead an offset relative to the Sample Point (SP)\n * such that:\n *\n * SSP = TDCV + absolute TDCO\n *     = TDCV + SP + relative TDCO\n *\n * -+----------- one bit ----------+-- TX pin\n *  |<--- Sample Point --->|\n *\n *                         --+----------- one bit ----------+-- RX pin\n *  |<-------- TDCV -------->|\n *                           |<------------------------>| absolute TDCO\n *                           |<--- Sample Point --->|\n *                           |                      |<->| relative TDCO\n *  |<------------- Secondary Sample Point ------------>|\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/can/dev.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/ceph/ceph_fs.h#L241-L245",
    "ascii": "/*\n * mds states\n *   > 0 -> in\n *  <= 0 -> out\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/ceph/ceph_fs.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/dma/sprd-dma.h#L117-L183",
    "ascii": "/*\n * struct sprd_dma_linklist - DMA link-list address structure\n * @virt_addr: link-list virtual address to configure link-list node\n * @phy_addr: link-list physical address to link DMA transfer\n * @wrap_addr: the wrap address for link-list mode, which means once the\n * transfer address reaches the wrap address, the next transfer address\n * will jump to the address specified by wrap_to register.\n *\n * The Spreadtrum DMA controller supports the link-list mode, that means slaves\n * can supply several groups configurations (each configuration represents one\n * DMA transfer) saved in memory, and DMA controller will link these groups\n * configurations by writing the physical address of each configuration into the\n * link-list register.\n *\n * Just as shown below, the link-list pointer register will be pointed to the\n * physical address of 'configuration 1', and the 'configuration 1' link-list\n * pointer will be pointed to 'configuration 2', and so on.\n * Once trigger the DMA transfer, the DMA controller will load 'configuration\n * 1' to its registers automatically, after 'configuration 1' transaction is\n * done, DMA controller will load 'configuration 2' automatically, until all\n * DMA transactions are done.\n *\n * Note: The last link-list pointer should point to the physical address\n * of 'configuration 1', which can avoid DMA controller loads incorrect\n * configuration when the last configuration transaction is done.\n *\n *     DMA controller                    linklist memory\n * ======================             -----------------------\n *|                      |           |    configuration 1    |<---\n *|   DMA controller     |   ------->|                       |   |\n *|                      |   |       |                       |   |\n *|                      |   |       |                       |   |\n *|                      |   |       |                       |   |\n *| linklist pointer reg |----   ----|    linklist pointer   |   |\n * ======================        |    -----------------------    |\n *                               |                               |\n *                               |    -----------------------    |\n *                               |   |    configuration 2    |   |\n *                               --->|                       |   |\n *                                   |                       |   |\n *                                   |                       |   |\n *                                   |                       |   |\n *                               ----|    linklist pointer   |   |\n *                               |    -----------------------    |\n *                               |                               |\n *                               |    -----------------------    |\n *                               |   |    configuration 3    |   |\n *                               --->|                       |   |\n *                                   |                       |   |\n *                                   |           .           |   |\n *                                               .               |\n *                                               .               |\n *                                               .               |\n *                               |               .               |\n *                               |    -----------------------    |\n *                               |   |    configuration n    |   |\n *                               --->|                       |   |\n *                                   |                       |   |\n *                                   |                       |   |\n *                                   |                       |   |\n *                                   |    linklist pointer   |----\n *                                    -----------------------\n *\n * To support the link-list mode, DMA slaves should allocate one segment memory\n * from always-on IRAM or dma coherent memory to store these groups of DMA\n * configuration, and pass the virtual and physical address to DMA controller.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/dma/sprd-dma.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/sched/topology.h#L246-L255",
    "ascii": "/**\n * arch_scale_cpu_capacity - get the capacity scale factor of a given CPU.\n * @cpu: the CPU in question.\n *\n * Return: the CPU scale factor normalized against SCHED_CAPACITY_SCALE, i.e.\n *\n *             max_perf(cpu)\n *      ----------------------------- * SCHED_CAPACITY_SCALE\n *      max(max_perf(c) : c \\in CPUs)\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/sched/topology.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/ia64/kernel/mca_drv.h#L9-L34",
    "ascii": "/*\n * Processor error section:\n *\n *  +-sal_log_processor_info_t *info-------------+\n *  | sal_log_section_hdr_t header;              |\n *  | ...                                        |\n *  | sal_log_mod_error_info_t info[0];          |\n *  +-+----------------+-------------------------+\n *    | CACHE_CHECK    |  ^ num_cache_check v\n *    +----------------+\n *    | TLB_CHECK      |  ^ num_tlb_check v\n *    +----------------+\n *    | BUS_CHECK      |  ^ num_bus_check v\n *    +----------------+\n *    | REG_FILE_CHECK |  ^ num_reg_file_check v\n *    +----------------+\n *    | MS_CHECK       |  ^ num_ms_check v\n *  +-struct cpuid_info *id----------------------+\n *  | regs[5];                                   |\n *  | reserved;                                  |\n *  +-sal_processor_static_info_t *regs----------+\n *  | valid;                                     |\n *  | ...                                        |\n *  | fr[128];                                   |\n *  +--------------------------------------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/ia64/kernel/mca_drv.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/sound/opl3.h#L160-L193",
    "ascii": "/*\n *    In the 4 OP mode there is four possible configurations how the\n *      operators can be connected together (in 2 OP modes there is just\n *      AM or FM). The 4 OP connection mode is defined by the rightmost\n *      bit of the FEEDBACK_CONNECTION (0xC0-0xC8) on the both halves.\n *\n *      First half      Second half     Mode\n *\n *                                       +---+\n *                                       v   |\n *      0               0               >+-1-+--2--3--4-->\n *\n *\n *                                      \n *                                       +---+\n *                                       |   |\n *      0               1               >+-1-+--2-+\n *                                                |->\n *                                      >--3----4-+\n *                                      \n *                                       +---+\n *                                       |   |\n *      1               0               >+-1-+-----+\n *                                                 |->\n *                                      >--2--3--4-+\n *\n *                                       +---+\n *                                       |   |\n *      1               1               >+-1-+--+\n *                                              |\n *                                      >--2--3-+->\n *                                              |\n *                                      >--4----+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/sound/opl3.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/uapi/linux/acrn.h#L86-L147",
    "ascii": "/**\n * struct acrn_io_request - 256-byte ACRN I/O request\n * @type:\t\tType of this request (ACRN_IOREQ_TYPE_*).\n * @completion_polling:\tPolling flag. Hypervisor will poll completion of the\n *\t\t\tI/O request if this flag set.\n * @reserved0:\t\tReserved fields.\n * @reqs:\t\tUnion of different types of request. Byte offset: 64.\n * @reqs.pio_request:\tPIO request data of the I/O request.\n * @reqs.pci_request:\tPCI configuration space request data of the I/O request.\n * @reqs.mmio_request:\tMMIO request data of the I/O request.\n * @reqs.data:\t\tRaw data of the I/O request.\n * @reserved1:\t\tReserved fields.\n * @kernel_handled:\tFlag indicates this request need be handled in kernel.\n * @processed:\t\tThe status of this request (ACRN_IOREQ_STATE_*).\n *\n * The state transitions of ACRN I/O request:\n *\n *    FREE -> PENDING -> PROCESSING -> COMPLETE -> FREE -> ...\n *\n * An I/O request in COMPLETE or FREE state is owned by the hypervisor. HSM and\n * ACRN userspace are in charge of processing the others.\n *\n * On basis of the states illustrated above, a typical lifecycle of ACRN IO\n * request would look like:\n *\n * Flow                 (assume the initial state is FREE)\n * |\n * |   Service VM vCPU 0     Service VM vCPU x      User vCPU y\n * |\n * |                                             hypervisor:\n * |                                               fills in type, addr, etc.\n * |                                               pauses the User VM vCPU y\n * |                                               sets the state to PENDING (a)\n * |                                               fires an upcall to Service VM\n * |\n * | HSM:\n * |  scans for PENDING requests\n * |  sets the states to PROCESSING (b)\n * |  assigns the requests to clients (c)\n * V\n * |                     client:\n * |                       scans for the assigned requests\n * |                       handles the requests (d)\n * |                     HSM:\n * |                       sets states to COMPLETE\n * |                       notifies the hypervisor\n * |\n * |                     hypervisor:\n * |                       resumes User VM vCPU y (e)\n * |\n * |                                             hypervisor:\n * |                                               post handling (f)\n * V                                               sets states to FREE\n *\n * Note that the procedures (a) to (f) in the illustration above require to be\n * strictly processed in the order.  One vCPU cannot trigger another request of\n * I/O emulation before completing the previous one.\n *\n * Atomic and barriers are required when HSM and hypervisor accessing the state\n * of &struct acrn_io_request.\n *\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/uapi/linux/acrn.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/uapi/linux/kvm.h#L2071-L2093",
    "ascii": "/*\n * KVM dirty GFN flags, defined as:\n *\n * |---------------+---------------+--------------|\n * | bit 1 (reset) | bit 0 (dirty) | Status       |\n * |---------------+---------------+--------------|\n * |             0 |             0 | Invalid GFN  |\n * |             0 |             1 | Dirty GFN    |\n * |             1 |             X | GFN to reset |\n * |---------------+---------------+--------------|\n *\n * Lifecycle of a dirty GFN goes like:\n *\n *      dirtied         harvested        reset\n * 00 -----------> 01 -------------> 1X -------+\n *  ^                                          |\n *  |                                          |\n *  +------------------------------------------+\n *\n * The userspace program is only responsible for the 01->1X state\n * conversion after harvesting an entry.  Also, it must not skip any\n * dirty bits, so that dirty bits are always harvested in sequence.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/uapi/linux/kvm.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/uapi/linux/map_to_14segment.h#L13-L58",
    "ascii": "/* This file provides translation primitives and tables for the conversion\n * of (ASCII) characters to a 14-segments notation.\n *\n * The 14 segment's wikipedia notation below is used as standard.\n * See: https://en.wikipedia.org/wiki/Fourteen-segment_display\n *\n * Notation:\t+---a---+\n *\t\t|\\  |  /|\n *\t\tf h i j b\n *\t\t|  \\|/  |\n *\t\t+-g1+-g2+\n *\t\t|  /|\\  |\n *\t\te k l m c\n *\t\t|/  |  \\|\n *\t\t+---d---+\n *\n * Usage:\n *\n *   Register a map variable, and fill it with a character set:\n *\tstatic SEG14_DEFAULT_MAP(map_seg14);\n *\n *\n *   Then use for conversion:\n *\tseg14 = map_to_seg14(&map_seg14, some_char);\n *\t...\n *\n * In device drivers it is recommended, if required, to make the char map\n * accessible via the sysfs interface using the following scheme:\n *\n * static ssize_t map_seg14_show(struct device *dev,\n *\t\t\t\t struct device_attribute *attr, char *buf)\n * {\n *\tmemcpy(buf, &map_seg14, sizeof(map_seg14));\n *\treturn sizeof(map_seg14);\n * }\n * static ssize_t map_seg14_store(struct device *dev,\n *\t\t\t\t  struct device_attribute *attr,\n *\t\t\t\t  const char *buf, size_t cnt)\n * {\n *\tif (cnt != sizeof(map_seg14))\n *\t\treturn -EINVAL;\n *\tmemcpy(&map_seg14, buf, cnt);\n *\treturn cnt;\n * }\n * static DEVICE_ATTR_RW(map_seg14);\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/uapi/linux/map_to_14segment.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/uapi/linux/omap3isp.h#L556-L563",
    "ascii": "/**\n * struct omap3isp_prev_rgbtorgb - RGB to RGB Blending\n * @matrix: Blending values(S12Q8 format)\n *              [RR] [GR] [BR]\n *              [RG] [GG] [BG]\n *              [RB] [GB] [BB]\n * @offset: Blending offset value for R,G,B in 2's complement integer format.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/uapi/linux/omap3isp.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/ia64/kernel/smpboot.c#L242-L273",
    "ascii": "/*\n * Synchronize ar.itc of the current (slave) CPU with the ar.itc of the MASTER CPU\n * (normally the time-keeper CPU).  We use a closed loop to eliminate the possibility of\n * unaccounted-for errors (such as getting a machine check in the middle of a calibration\n * step).  The basic idea is for the slave to ask the master what itc value it has and to\n * read its own itc before and after the master responds.  Each iteration gives us three\n * timestamps:\n *\n *\tslave\t\tmaster\n *\n *\tt0 ---\\\n *             ---\\\n *\t\t   --->\n *\t\t\ttm\n *\t\t   /---\n *\t       /---\n *\tt1 <---\n *\n *\n * The goal is to adjust the slave's ar.itc such that tm falls exactly half-way between t0\n * and t1.  If we achieve this, the clocks are synchronized provided the interconnect\n * between the slave and the master is symmetric.  Even if the interconnect were\n * asymmetric, we would still know that the synchronization error is smaller than the\n * roundtrip latency (t0 - t1).\n *\n * When the interconnect is quiet and symmetric, this lets us synchronize the itc to\n * within one or two cycles.  However, we can only *guarantee* that the synchronization is\n * accurate to within a round-trip time, which is typically in the range of several\n * hundred cycles (e.g., ~500 cycles).  In practice, this means that the itc's are usually\n * almost perfectly synchronized, but we shouldn't assume that the accuracy is much better\n * than half a micro second or so.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/ia64/kernel/smpboot.c"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/video/display_timing.h#L46-L62",
    "ascii": "/*\n * Single \"mode\" entry. This describes one set of signal timings a display can\n * have in one setting. This struct can later be converted to struct videomode\n * (see include/video/videomode.h). As each timing_entry can be defined as a\n * range, one struct display_timing may become multiple struct videomodes.\n *\n * Example: hsync active high, vsync active low\n *\n *\t\t\t\t    Active Video\n * Video  ______________________XXXXXXXXXXXXXXXXXXXXXX_____________________\n *\t  |<- sync ->|<- back ->|<----- active ----->|<- front ->|<- sync..\n *\t  |\t     |\t porch  |\t\t     |\t porch\t |\n *\n * HSync _|¯¯¯¯¯¯¯¯¯¯|___________________________________________|¯¯¯¯¯¯¯¯¯\n *\n * VSync ¯|__________|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|_________\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/video/display_timing.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/video/samsung_fimd.h#L458-L477",
    "ascii": "/* Notes on per-window bpp settings\n *\n * Value\tWin0\t Win1\t  Win2\t   Win3\t    Win 4\n * 0000\t\t1(P)\t 1(P)\t  1(P)\t   1(P)\t    1(P)\n * 0001\t\t2(P)\t 2(P)     2(P)\t   2(P)\t    2(P)\n * 0010\t\t4(P)\t 4(P)     4(P)\t   4(P)     -none-\n * 0011\t\t8(P)\t 8(P)     -none-   -none-   -none-\n * 0100\t\t-none-\t 8(A232)  8(A232)  -none-   -none-\n * 0101\t\t16(565)\t 16(565)  16(565)  16(565)   16(565)\n * 0110\t\t-none-\t 16(A555) 16(A555) 16(A555)  16(A555)\n * 0111\t\t16(I555) 16(I565) 16(I555) 16(I555)  16(I555)\n * 1000\t\t18(666)\t 18(666)  18(666)  18(666)   18(666)\n * 1001\t\t-none-\t 18(A665) 18(A665) 18(A665)  16(A665)\n * 1010\t\t-none-\t 19(A666) 19(A666) 19(A666)  19(A666)\n * 1011\t\t24(888)\t 24(888)  24(888)  24(888)   24(888)\n * 1100\t\t-none-\t 24(A887) 24(A887) 24(A887)  24(A887)\n * 1101\t\t-none-\t 25(A888) 25(A888) 25(A888)  25(A888)\n * 1110\t\t-none-\t -none-\t  -none-   -none-    -none-\n * 1111\t\t-none-\t -none-   -none-   -none-    -none-\n*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/video/samsung_fimd.h"
  },
  {
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/xen/interface/io/displif.h#L229-L331",
    "ascii": "/*\n ******************************************************************************\n *                               STATE DIAGRAMS\n ******************************************************************************\n *\n * Tool stack creates front and back state nodes with initial state\n * XenbusStateInitialising.\n * Tool stack creates and sets up frontend display configuration\n * nodes per domain.\n *\n *-------------------------------- Normal flow --------------------------------\n *\n * Front                                Back\n * =================================    =====================================\n * XenbusStateInitialising              XenbusStateInitialising\n *                                       o Query backend device identification\n *                                         data.\n *                                       o Open and validate backend device.\n *                                                |\n *                                                |\n *                                                V\n *                                      XenbusStateInitWait\n *\n * o Query frontend configuration\n * o Allocate and initialize\n *   event channels per configured\n *   connector.\n * o Publish transport parameters\n *   that will be in effect during\n *   this connection.\n *              |\n *              |\n *              V\n * XenbusStateInitialised\n *\n *                                       o Query frontend transport parameters.\n *                                       o Connect to the event channels.\n *                                                |\n *                                                |\n *                                                V\n *                                      XenbusStateConnected\n *\n *  o Create and initialize OS\n *    virtual display connectors\n *    as per configuration.\n *              |\n *              |\n *              V\n * XenbusStateConnected\n *\n *                                      XenbusStateUnknown\n *                                      XenbusStateClosed\n *                                      XenbusStateClosing\n * o Remove virtual display device\n * o Remove event channels\n *              |\n *              |\n *              V\n * XenbusStateClosed\n *\n *------------------------------- Recovery flow -------------------------------\n *\n * In case of frontend unrecoverable errors backend handles that as\n * if frontend goes into the XenbusStateClosed state.\n *\n * In case of backend unrecoverable errors frontend tries removing\n * the virtualized device. If this is possible at the moment of error,\n * then frontend goes into the XenbusStateInitialising state and is ready for\n * new connection with backend. If the virtualized device is still in use and\n * cannot be removed, then frontend goes into the XenbusStateReconfiguring state\n * until either the virtualized device is removed or backend initiates a new\n * connection. On the virtualized device removal frontend goes into the\n * XenbusStateInitialising state.\n *\n * Note on XenbusStateReconfiguring state of the frontend: if backend has\n * unrecoverable errors then frontend cannot send requests to the backend\n * and thus cannot provide functionality of the virtualized device anymore.\n * After backend is back to normal the virtualized device may still hold some\n * state: configuration in use, allocated buffers, client application state etc.\n * In most cases, this will require frontend to implement complex recovery\n * reconnect logic. Instead, by going into XenbusStateReconfiguring state,\n * frontend will make sure no new clients of the virtualized device are\n * accepted, allow existing client(s) to exit gracefully by signaling error\n * state etc.\n * Once all the clients are gone frontend can reinitialize the virtualized\n * device and get into XenbusStateInitialising state again signaling the\n * backend that a new connection can be made.\n *\n * There are multiple conditions possible under which frontend will go from\n * XenbusStateReconfiguring into XenbusStateInitialising, some of them are OS\n * specific. For example:\n * 1. The underlying OS framework may provide callbacks to signal that the last\n *    client of the virtualized device has gone and the device can be removed\n * 2. Frontend can schedule a deferred work (timer/tasklet/workqueue)\n *    to periodically check if this is the right time to re-try removal of\n *    the virtualized device.\n * 3. By any other means.\n *\n ******************************************************************************\n *                             REQUEST CODES\n ******************************************************************************\n * Request codes [0; 15] are reserved and must not be used\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/xen/interface/io/displif.h"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/WebAssembly/WebAssemblyExceptionInfo.h#L25-L40",
    "ascii": "// WebAssembly instructions for exception handling are structured as follows:\n//   try\n//     instructions*\n//   catch             ----|\n//     instructions*       | -> A WebAssemblyException consists of this region\n//   end               ----|\n//\n// A WebAssemblyException object contains BBs that belong to a 'catch' part of\n// the try-catch-end structure to be created later. 'try' and 'end' markers\n// are not present at this stage and will be generated in CFGStackify pass.\n// Because CFGSort requires all the BBs within a catch part to be sorted\n// together as it does for loops, this pass calculates the nesting structure of\n// catch part of exceptions in a function.\n//\n// An exception catch part is defined as a BB with catch instruction and all\n// other BBs dominated by this BB.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyExceptionInfo.h"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/X86/X86ExpandPseudo.cpp#L609-L622",
    "ascii": "// This function creates additional block for storing varargs guarded\n// registers. It adds check for %al into entry block, to skip\n// GuardedRegsBlk if xmm registers should not be stored.\n//\n//     EntryBlk[VAStartPseudoInstr]     EntryBlk\n//        |                              |     .\n//        |                              |        .\n//        |                              |   GuardedRegsBlk\n//        |                      =>      |        .\n//        |                              |     .\n//        |                             TailBlk\n//        |                              |\n//        |                              |\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/X86/X86LowerAMXType.cpp#L1-L40",
    "ascii": "//===- Target/X86/X86LowerAMXType.cpp - -------------------------*- C++ -*-===//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//\n//\n/// \\file Pass to transform <256 x i32> load/store\n/// <256 x i32> is bitcasted to x86_amx on X86, and AMX instruction set only\n/// provides simple operation on x86_amx. The basic elementwise operation\n/// is not supported by AMX. Since x86_amx is bitcasted from vector <256 x i32>\n/// and only AMX intrinsics can operate on the type, we need transform\n/// load/store <256 x i32> instruction to AMX load/store. If the bitcast can\n/// not be combined with load/store, we transform the bitcast to amx load/store\n/// and <256 x i32> store/load.\n///\n/// If Front End not use O0 but the Mid/Back end use O0, (e.g. \"Clang -O2 -S\n/// -emit-llvm t.c\" + \"llc t.ll\") we should make sure the amx data is volatile,\n/// because that is necessary for AMX fast register allocation. (In Fast\n/// registera allocation, register will be allocated before spill/reload, so\n/// there is no additional register for amx to identify the step in spill.)\n/// The volatileTileData() will handle this case.\n/// e.g.\n/// ----------------------------------------------------------\n/// | def %td = ...                                          |\n/// | ...                                                    |\n/// | \"use %td\"                                              |\n/// ----------------------------------------------------------\n/// will transfer to -->\n/// ----------------------------------------------------------\n/// | def %td = ...                                          |\n/// | call void @llvm.x86.tilestored64.internal(mem, %td)    |\n/// | ...                                                    |\n/// | %td2 = call x86_amx @llvm.x86.tileloadd64.internal(mem)|\n/// | \"use %td2\"                                             |\n/// ----------------------------------------------------------\n//\n//===----------------------------------------------------------------------===//\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/X86/X86LowerAMXType.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/libcxx/test/std/time/time.hms/time.hms.members/hours.pass.cpp#L16-L24",
    "ascii": "// Test values\n// duration     hours   minutes seconds fractional\n// 5000s            1       23      20      0\n// 5000 minutes     83      20      0       0\n// 123456789ms      34      17      36      789ms\n// 123456789us      0       2       3       456789us\n// 123456789ns      0       0       0       123456789ns\n// 1000mfn          0       20      9       0.6 (6000/10000)\n// 10000mfn         3       21      36      0\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/libcxx/test/std/time/time.hms/time.hms.members/hours.pass.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp#L1-L58",
    "ascii": "//===- DFAJumpThreading.cpp - Threads a switch statement inside a loop ----===//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//\n//\n// Transform each threading path to effectively jump thread the DFA. For\n// example, the CFG below could be transformed as follows, where the cloned\n// blocks unconditionally branch to the next correct case based on what is\n// identified in the analysis.\n//\n//          sw.bb                        sw.bb\n//        /   |   \\                    /   |   \\\n//   case1  case2  case3          case1  case2  case3\n//        \\   |   /                 |      |      |\n//       determinator            det.2   det.3  det.1\n//        br sw.bb                /        |        \\\n//                          sw.bb.2     sw.bb.3     sw.bb.1\n//                           br case2    br case3    br case1§\n//\n// Definitions and Terminology:\n//\n// * Threading path:\n//   a list of basic blocks, the exit state, and the block that determines\n//   the next state, for which the following notation will be used:\n//   < path of BBs that form a cycle > [ state, determinator ]\n//\n// * Predictable switch:\n//   The switch variable is always a known constant so that all conditional\n//   jumps based on switch variable can be converted to unconditional jump.\n//\n// * Determinator:\n//   The basic block that determines the next state of the DFA.\n//\n// Representing the optimization in C-like pseudocode: the code pattern on the\n// left could functionally be transformed to the right pattern if the switch\n// condition is predictable.\n//\n//  X = A                       goto A\n//  for (...)                   A:\n//    switch (X)                  ...\n//      case A                    goto B\n//        X = B                 B:\n//      case B                    ...\n//        X = C                   goto C\n//\n// The pass first checks that switch variable X is decided by the control flow\n// path taken in the loop; for example, in case B, the next value of X is\n// decided to be C. It then enumerates through all paths in the loop and labels\n// the basic blocks where the next state is decided.\n//\n// Using this information it creates new paths that unconditionally branch to\n// the next case. This involves cloning code, so it only gets triggered if the\n// amount of code duplicated is below a threshold.\n//\n//===----------------------------------------------------------------------===//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Scalar/GVNHoist.cpp#L131-L140",
    "ascii": "// CHI keeps information about values flowing out of a basic block.  It is\n// similar to PHI but in the inverse graph, and used for outgoing values on each\n// edge. For conciseness, it is computed only for instructions with multiple\n// occurrences in the CFG because they are the only hoistable candidates.\n//     A (CHI[{V, B, I1}, {V, C, I2}]\n//  /     \\\n// /       \\\n// B(I1)  C (I2)\n// The Value number for both I1 and I2 is V, the CHI node will save the\n// instruction as well as the edge where the value is flowing to.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp#L131-L147",
    "ascii": "// Given an element pointer \\p BasePtr to the start of a (sub) matrix, compute\n// the start address of vector \\p VecIdx with type (\\p EltType x \\p NumElements)\n// assuming \\p Stride elements between start two consecutive vectors.\n// \\p Stride must be >= \\p NumElements.\n// For column-major matrixes, the function computes the address of a column\n// vectors and \\p NumElements must be set to the number of elements in a column\n// (= number of rows of the matrix). For row-major matrixes, the function\n// computes the address of a row vector and \\p NumElements must be set to the\n// number of elements in a column (= number of columns of the matrix).\n//\n// Consider a 4x4 matrix in column-mjaor layout like below\n//\n//      0       1      2      3\n// 0   v_0_0  v_0_1  v_0_2  v_0_3\n// 1   v_1_0  v_1_1  v_1_2  v_1_3\n// 2   v_2_0  v_2_1  v_2_2  v_2_3\n// 3   v_3_0  v_3_1  v_3_2  v_3_3\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp#L1-L76",
    "ascii": "//===- MergedLoadStoreMotion.cpp - merge and hoist/sink load/stores -------===//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//\n//\n//! \\file\n//! This pass performs merges of loads and stores on both sides of a\n//  diamond (hammock). It hoists the loads and sinks the stores.\n//\n// The algorithm iteratively hoists two loads to the same address out of a\n// diamond (hammock) and merges them into a single load in the header. Similar\n// it sinks and merges two stores to the tail block (footer). The algorithm\n// iterates over the instructions of one side of the diamond and attempts to\n// find a matching load/store on the other side. New tail/footer block may be\n// insterted if the tail/footer block has more predecessors (not only the two\n// predecessors that are forming the diamond). It hoists / sinks when it thinks\n// it safe to do so.  This optimization helps with eg. hiding load latencies,\n// triggering if-conversion, and reducing static code size.\n//\n// NOTE: This code no longer performs load hoisting, it is subsumed by GVNHoist.\n//\n//===----------------------------------------------------------------------===//\n//\n//\n// Example:\n// Diamond shaped code before merge:\n//\n//            header:\n//                     br %cond, label %if.then, label %if.else\n//                        +                    +\n//                       +                      +\n//                      +                        +\n//            if.then:                         if.else:\n//               %lt = load %addr_l               %le = load %addr_l\n//               <use %lt>                        <use %le>\n//               <...>                            <...>\n//               store %st, %addr_s               store %se, %addr_s\n//               br label %if.end                 br label %if.end\n//                     +                         +\n//                      +                       +\n//                       +                     +\n//            if.end (\"footer\"):\n//                     <...>\n//\n// Diamond shaped code after merge:\n//\n//            header:\n//                     %l = load %addr_l\n//                     br %cond, label %if.then, label %if.else\n//                        +                    +\n//                       +                      +\n//                      +                        +\n//            if.then:                         if.else:\n//               <use %l>                         <use %l>\n//               <...>                            <...>\n//               br label %if.end                 br label %if.end\n//                      +                        +\n//                       +                      +\n//                        +                    +\n//            if.end (\"footer\"):\n//                     %s.sink = phi [%st, if.then], [%se, if.else]\n//                     <...>\n//                     store %s.sink, %addr_s\n//                     <...>\n//\n//\n//===----------------------- TODO -----------------------------------------===//\n//\n// 1) Generalize to regions other than diamonds\n// 2) Be more aggressive merging memory operations\n// Note that both changes require register pressure control\n//\n//===----------------------------------------------------------------------===//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Scalar/Reassociate.cpp#L387-L459",
    "ascii": "/// Given an associative binary expression, return the leaf\n/// nodes in Ops along with their weights (how many times the leaf occurs).  The\n/// original expression is the same as\n///   (Ops[0].first op Ops[0].first op ... Ops[0].first)  <- Ops[0].second times\n/// op\n///   (Ops[1].first op Ops[1].first op ... Ops[1].first)  <- Ops[1].second times\n/// op\n///   ...\n/// op\n///   (Ops[N].first op Ops[N].first op ... Ops[N].first)  <- Ops[N].second times\n///\n/// Note that the values Ops[0].first, ..., Ops[N].first are all distinct.\n///\n/// This routine may modify the function, in which case it returns 'true'.  The\n/// changes it makes may well be destructive, changing the value computed by 'I'\n/// to something completely different.  Thus if the routine returns 'true' then\n/// you MUST either replace I with a new expression computed from the Ops array,\n/// or use RewriteExprTree to put the values back in.\n///\n/// A leaf node is either not a binary operation of the same kind as the root\n/// node 'I' (i.e. is not a binary operator at all, or is, but with a different\n/// opcode), or is the same kind of binary operator but has a use which either\n/// does not belong to the expression, or does belong to the expression but is\n/// a leaf node.  Every leaf node has at least one use that is a non-leaf node\n/// of the expression, while for non-leaf nodes (except for the root 'I') every\n/// use is a non-leaf node of the expression.\n///\n/// For example:\n///           expression graph        node names\n///\n///                     +        |        I\n///                    / \\       |\n///                   +   +      |      A,  B\n///                  / \\ / \\     |\n///                 *   +   *    |    C,  D,  E\n///                / \\ / \\ / \\   |\n///                   +   *      |      F,  G\n///\n/// The leaf nodes are C, E, F and G.  The Ops array will contain (maybe not in\n/// that order) (C, 1), (E, 1), (F, 2), (G, 2).\n///\n/// The expression is maximal: if some instruction is a binary operator of the\n/// same kind as 'I', and all of its uses are non-leaf nodes of the expression,\n/// then the instruction also belongs to the expression, is not a leaf node of\n/// it, and its operands also belong to the expression (but may be leaf nodes).\n///\n/// NOTE: This routine will set operands of non-leaf non-root nodes to undef in\n/// order to ensure that every non-root node in the expression has *exactly one*\n/// use by a non-leaf node of the expression.  This destruction means that the\n/// caller MUST either replace 'I' with a new expression or use something like\n/// RewriteExprTree to put the values back in if the routine indicates that it\n/// made a change by returning 'true'.\n///\n/// In the above example either the right operand of A or the left operand of B\n/// will be replaced by undef.  If it is B's operand then this gives:\n///\n///                     +        |        I\n///                    / \\       |\n///                   +   +      |      A,  B - operand of B replaced with undef\n///                  / \\   \\     |\n///                 *   +   *    |    C,  D,  E\n///                / \\ / \\ / \\   |\n///                   +   *      |      F,  G\n///\n/// Note that such undef operands can only be reached by passing through 'I'.\n/// For example, if you visit operands recursively starting from a leaf node\n/// then you will never see such an undef operand unless you get back to 'I',\n/// which requires passing through a phi node.\n///\n/// Note that this routine may also mutate binary operators of the wrong type\n/// that have all uses inside the expression (i.e. only used by non-leaf nodes\n/// of the expression) if it can turn them into binary operators of the right\n/// type and thus make the expression bigger.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Utils/FixIrreducible.cpp#L1-L67",
    "ascii": "//===- FixIrreducible.cpp - Convert irreducible control-flow into loops ---===//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//\n//\n// An irreducible SCC is one which has multiple \"header\" blocks, i.e., blocks\n// with control-flow edges incident from outside the SCC.  This pass converts a\n// irreducible SCC into a natural loop by applying the following transformation:\n//\n// 1. Collect the set of headers H of the SCC.\n// 2. Collect the set of predecessors P of these headers. These may be inside as\n//    well as outside the SCC.\n// 3. Create block N and redirect every edge from set P to set H through N.\n//\n// This converts the SCC into a natural loop with N as the header: N is the only\n// block with edges incident from outside the SCC, and all backedges in the SCC\n// are incident on N, i.e., for every backedge, the head now dominates the tail.\n//\n// INPUT CFG: The blocks A and B form an irreducible loop with two headers.\n//\n//                        Entry\n//                       /     \\\n//                      v       v\n//                      A ----> B\n//                      ^      /|\n//                       `----' |\n//                              v\n//                             Exit\n//\n// OUTPUT CFG: Edges incident on A and B are now redirected through a\n// new block N, forming a natural loop consisting of N, A and B.\n//\n//                        Entry\n//                          |\n//                          v\n//                    .---> N <---.\n//                   /     / \\     \\\n//                  |     /   \\     |\n//                  \\    v     v    /\n//                   `-- A     B --'\n//                             |\n//                             v\n//                            Exit\n//\n// The transformation is applied to every maximal SCC that is not already\n// recognized as a loop. The pass operates on all maximal SCCs found in the\n// function body outside of any loop, as well as those found inside each loop,\n// including inside any newly created loops. This ensures that any SCC hidden\n// inside a maximal SCC is also transformed.\n//\n// The actual transformation is handled by function CreateControlFlowHub, which\n// takes a set of incoming blocks (the predecessors) and outgoing blocks (the\n// headers). The function also moves every PHINode in an outgoing block to the\n// hub. Since the hub dominates all the outgoing blocks, each such PHINode\n// continues to dominate its uses. Since every header in an SCC has at least two\n// predecessors, every value used in the header (or later) but defined in a\n// predecessor (or earlier) is represented by a PHINode in a header. Hence the\n// above handling of PHINodes is sufficient and no further processing is\n// required to restore SSA.\n//\n// Limitation: The pass cannot handle switch statements and indirect\n//             branches. Both must be lowered to plain branches first.\n//\n//===----------------------------------------------------------------------===//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Utils/FixIrreducible.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/tools/llvm-profgen/PerfReader.h#L707-L725",
    "ascii": "/*\n   Format of unsymbolized profile:\n    [frame1 @ frame2 @ ...]  # If it's a CS profile\n      number of entries in RangeCounter\n      from_1-to_1:count_1\n      from_2-to_2:count_2\n      ......\n      from_n-to_n:count_n\n      number of entries in BranchCounter\n      src_1->dst_1:count_1\n      src_2->dst_2:count_2\n      ......\n      src_n->dst_n:count_n\n    [frame1 @ frame2 @ ...]  # Next context\n      ......\nNote that non-CS profile doesn't have the empty `[]` context.\n*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/tools/llvm-profgen/PerfReader.h"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/tools/obj2yaml/macho2yaml.cpp#L475-L534",
    "ascii": "/*!\n * /brief processes a node from the export trie, and its children.\n *\n * To my knowledge there is no documentation of the encoded format of this data\n * other than in the heads of the Apple linker engineers. To that end hopefully\n * this comment and the implementation below can serve to light the way for\n * anyone crazy enough to come down this path in the future.\n *\n * This function reads and preserves the trie structure of the export trie. To\n * my knowledge there is no code anywhere else that reads the data and preserves\n * the Trie. LD64 (sources available at opensource.apple.com) has a similar\n * implementation that parses the export trie into a vector. That code as well\n * as LLVM's libObject MachO implementation were the basis for this.\n *\n * The export trie is an encoded trie. The node serialization is a bit awkward.\n * The below pseudo-code is the best description I've come up with for it.\n *\n * struct SerializedNode {\n *   ULEB128 TerminalSize;\n *   struct TerminalData { <-- This is only present if TerminalSize > 0\n *     ULEB128 Flags;\n *     ULEB128 Address; <-- Present if (! Flags & REEXPORT )\n *     ULEB128 Other; <-- Present if ( Flags & REEXPORT ||\n *                                     Flags & STUB_AND_RESOLVER )\n *     char[] ImportName; <-- Present if ( Flags & REEXPORT )\n *   }\n *   uint8_t ChildrenCount;\n *   Pair<char[], ULEB128> ChildNameOffsetPair[ChildrenCount];\n *   SerializedNode Children[ChildrenCount]\n * }\n *\n * Terminal nodes are nodes that represent actual exports. They can appear\n * anywhere in the tree other than at the root; they do not need to be leaf\n * nodes. When reading the data out of the trie this routine reads it in-order,\n * but it puts the child names and offsets directly into the child nodes. This\n * results in looping over the children twice during serialization and\n * de-serialization, but it makes the YAML representation more human readable.\n *\n * Below is an example of the graph from a \"Hello World\" executable:\n *\n * -------\n * | ''  |\n * -------\n *    |\n * -------\n * | '_' |\n * -------\n *    |\n *    |----------------------------------------|\n *    |                                        |\n *  ------------------------      ---------------------\n *  | '_mh_execute_header' |      | 'main'            |\n *  | Flags: 0x00000000    |      | Flags: 0x00000000 |\n *  | Addr:  0x00000000    |      | Addr:  0x00001160 |\n *  ------------------------      ---------------------\n *\n * This graph represents the trie for the exports \"__mh_execute_header\" and\n * \"_main\". In the graph only the \"_main\" and \"__mh_execute_header\" nodes are\n * terminal.\n*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/unittests/Analysis/LazyCallGraphTest.cpp#L42-L58",
    "ascii": "/*\n   IR forming a call graph with a diamond of triangle-shaped SCCs:\n           d1\n          /  \\\n         d3--d2\n        /     \\\n       b1     c1\n     /  \\    /  \\\n    b3--b2  c3--c2\n         \\  /\n          a1\n         /  \\\n        a3--a2\n   All call edges go up between SCCs, and clockwise around the SCC.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/unittests/Analysis/LazyCallGraphTest.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/unittests/Analysis/MemorySSATest.cpp#L689-L704",
    "ascii": "// Bug: During phi optimization, the walker wouldn't cache to the proper result\n// in the farthest-walked BB.\n//\n// Specifically, it would assume that whatever we walked to was a clobber.\n// \"Whatever we walked to\" isn't a clobber if we hit a cache entry.\n//\n// ...So, we need a test case that looks like:\n//    A\n//   / \\\n//  B   |\n//   \\ /\n//    C\n//\n// Where, when we try to optimize a thing in 'C', a blocker is found in 'B'.\n// The walk must determine that the blocker exists by using cache entries *while\n// walking* 'B'.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/unittests/Analysis/MemorySSATest.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/unittests/IR/DominatorTreeTest.cpp#L443-L484",
    "ascii": "// Verify that the PDT is correctly updated in case an edge removal results\n// in an infinite loop. Also make sure that the updated PDT is the\n// same as a freshly recalculated one.\n//\n// Test case:\n//\n//          CFG                   PDT\n//\n//           A                    Exit\n//           |                     |\n//          _B                     D\n//         / | \\                   |\n//        ^  v  \\                  B\n//        \\ /    D                / \\\n//         C      \\              C   A\n//        / \\      v\n//       ^  v      Exit\n//        \\_/\n//\n// After deleting the edge C->B, C is part of an infinite reverse-unreachable\n// loop:\n//\n//          CFG'                  PDT'\n//\n//           A                    Exit\n//           |                   / | \\\n//           B                  C  B  D\n//           | \\                   |\n//           v  \\                  A\n//          /    D\n//         C      \\\n//        / \\      v\n//       ^  v      Exit\n//        \\_/\n//\n// As C now becomes reverse-unreachable, it forms a new non-trivial root and\n// gets connected to the virtual exit.\n// D does not postdominate B anymore, because there are two forward paths from\n// B to the virtual exit:\n//  - B -> C -> VirtualExit\n//  - B -> D -> VirtualExit.\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/unittests/IR/DominatorTreeTest.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/examples/toy/Ch6/mlir/LowerToLLVM.cpp#L1-L23",
    "ascii": "//====- LowerToLLVM.cpp - Lowering from Toy+Affine+Std to LLVM ------------===//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//\n//\n// This file implements full lowering of Toy operations to LLVM MLIR dialect.\n// 'toy.print' is lowered to a loop nest that calls `printf` on each element of\n// the input array. The file also sets up the ToyToLLVMLoweringPass. This pass\n// lowers the combination of Arithmetic + Affine + SCF + Func dialects to the\n// LLVM one:\n//\n//                         Affine --\n//                                  |\n//                                  v\n//                       Arithmetic + Func --> LLVM (Dialect)\n//                                  ^\n//                                  |\n//     'toy.print' --> Loop (SCF) --\n//\n//===----------------------------------------------------------------------===//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "llvm-project/mlir/examples/toy/Ch6/mlir/LowerToLLVM.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/examples/toy/Ch7/mlir/LowerToLLVM.cpp#L1-L23",
    "ascii": "//====- LowerToLLVM.cpp - Lowering from Toy+Affine+Std to LLVM ------------===//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//\n//\n// This file implements full lowering of Toy operations to LLVM MLIR dialect.\n// 'toy.print' is lowered to a loop nest that calls `printf` on each element of\n// the input array. The file also sets up the ToyToLLVMLoweringPass. This pass\n// lowers the combination of Arithmetic + Affine + SCF + Func dialects to the\n// LLVM one:\n//\n//                         Affine --\n//                                  |\n//                                  v\n//                       Arithmetic + Func --> LLVM (Dialect)\n//                                  ^\n//                                  |\n//     'toy.print' --> Loop (SCF) --\n//\n//===----------------------------------------------------------------------===//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "llvm-project/mlir/examples/toy/Ch7/mlir/LowerToLLVM.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/include/mlir/Analysis/SliceAnalysis.h#L30-L70",
    "ascii": "/// Fills `forwardSlice` with the computed forward slice (i.e. all\n/// the transitive uses of op), **without** including that operation.\n///\n/// This additionally takes a TransitiveFilter which acts as a frontier:\n/// when looking at uses transitively, an operation that does not pass the\n/// filter is never propagated through. This allows in particular to carve out\n/// the scope within a ForOp or the scope within an IfOp.\n///\n/// The implementation traverses the use chains in postorder traversal for\n/// efficiency reasons: if an operation is already in `forwardSlice`, no\n/// need to traverse its uses again. Since use-def chains form a DAG, this\n/// terminates.\n///\n/// Upon return to the root call, `forwardSlice` is filled with a\n/// postorder list of uses (i.e. a reverse topological order). To get a proper\n/// topological order, we just just reverse the order in `forwardSlice` before\n/// returning.\n///\n/// Example starting from node 0\n/// ============================\n///\n///               0\n///    ___________|___________\n///    1       2      3      4\n///    |_______|      |______|\n///    |   |             |\n///    |   5             6\n///    |___|_____________|\n///      |               |\n///      7               8\n///      |_______________|\n///              |\n///              9\n///\n/// Assuming all local orders match the numbering order:\n/// 1. after getting back to the root getForwardSlice, `forwardSlice` may\n///    contain:\n///      {9, 7, 8, 5, 1, 2, 6, 3, 4}\n/// 2. reversing the result of 1. gives:\n///      {4, 3, 6, 2, 1, 5, 8, 7, 9}\n///\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/include/mlir/Analysis/SliceAnalysis.h"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/lib/Analysis/Presburger/PresburgerRelation.cpp#L680-L695",
    "ascii": "/// Given two polyhedra `a` and `b` at positions `i` and `j` in\n/// `disjuncts` and `redundantIneqsA` being the inequalities of `a` that\n/// are redundant for `b` (similarly for `cuttingIneqsA`, `redundantIneqsB`,\n/// and `cuttingIneqsB`), Checks whether the facets of all cutting\n/// inequalites of `a` are contained in `b`. If so, a new polyhedron\n/// consisting of all redundant inequalites of `a` and `b` and all\n/// equalities of both is created.\n///\n/// An example of this case:\n///    ___________        ___________\n///   /   /  |   /       /          /\n///   \\   \\  |  /   ==>  \\         /\n///    \\   \\ | /          \\       /\n///     \\___\\|/            \\_____/\n///\n///\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/lib/Analysis/Presburger/PresburgerRelation.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/lib/Dialect/SPIRV/IR/SPIRVCanonicalization.cpp#L304-L328",
    "ascii": "// Blocks from the given `spirv.mlir.selection` operation must satisfy the\n// following layout:\n//\n//       +-----------------------------------------------+\n//       | header block                                  |\n//       | spirv.BranchConditionalOp %cond, ^case0, ^case1 |\n//       +-----------------------------------------------+\n//                            /   \\\n//                             ...\n//\n//\n//   +------------------------+    +------------------------+\n//   | case #0                |    | case #1                |\n//   | spirv.Store %ptr %value0 |    | spirv.Store %ptr %value1 |\n//   | spirv.Branch ^merge      |    | spirv.Branch ^merge      |\n//   +------------------------+    +------------------------+\n//\n//\n//                             ...\n//                            \\   /\n//                              v\n//                       +-------------+\n//                       | merge block |\n//                       +-------------+\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/lib/Dialect/SPIRV/IR/SPIRVCanonicalization.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/test/Dialect/Bufferization/Transforms/buffer-deallocation.mlir#L7-L16",
    "ascii": "// Test Case:\n//    bb0\n//   /   \\\n//  bb1  bb2 <- Initial position of AllocOp\n//   \\   /\n//    bb3\n// BufferDeallocation expected behavior: bb2 contains an AllocOp which is\n// passed to bb3. In the latter block, there should be an deallocation.\n// Since bb1 does not contain an adequate alloc and the alloc in bb2 is not\n// moved to bb0, we need to insert allocs and copies.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/test/Dialect/Bufferization/Transforms/buffer-deallocation.mlir"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/libcxxabi/test/dynamic_cast3.pass.cpp#L283-L289",
    "ascii": "/*\nA1   A2\n \\  /\n  A3\n*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/libcxxabi/test/dynamic_cast3.pass.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/test/Integration/Dialect/Vector/CPU/test-sparse-dot-matvec.mlir#L6-L44",
    "ascii": "// Illustrates an 8x8 Sparse Matrix x Vector implemented with only operations\n// of the vector dialect (and some std/scf). Essentially, this example performs\n// the following multiplication:\n//\n//     0  1  2  3  4  5  6  7\n//   +------------------------+\n// 0 | 1  0  2  0  0  1  0  1 |   | 1 |   | 21 |\n// 1 | 1  8  0  0  3  0  1  0 |   | 2 |   | 39 |\n// 2 | 0  0  1  0  0  2  6  2 |   | 3 |   | 73 |\n// 3 | 0  3  0  1  0  1  0  1 | x | 4 | = | 24 |\n// 4 | 5  0  0  1  1  1  0  0 |   | 5 |   | 20 |\n// 5 | 0  3  0  0  2  1  2  0 |   | 6 |   | 36 |\n// 6 | 4  0  7  0  1  0  1  0 |   | 7 |   | 37 |\n// 7 | 0  3  0  2  0  0  1  1 |   | 8 |   | 29 |\n//   +------------------------+\n//\n// The sparse storage scheme used is an extended column scheme (also referred\n// to as jagged diagonal, which is essentially a vector friendly variant of\n// the general sparse row-wise scheme (also called compressed row storage),\n// using fixed length vectors and no explicit pointer indexing into the\n// value array to find the rows.\n//\n// The extended column storage for the matrix shown above is as follows.\n//\n//      VALUE           INDEX\n//   +---------+     +---------+\n// 0 | 1 2 1 1 |     | 0 2 5 7 |\n// 1 | 1 8 3 1 |     | 0 1 4 6 |\n// 2 | 1 2 6 2 |     | 2 5 6 7 |\n// 3 | 3 1 1 1 |     | 1 3 5 7 |\n// 4 | 5 1 1 1 |     | 0 3 4 5 |\n// 5 | 3 2 1 2 |     | 1 4 5 6 |\n// 6 | 4 7 1 1 |     | 0 2 4 6 |\n// 7 | 3 2 1 1 |     | 1 3 6 7 |\n//   +---------+     +---------+\n//\n// This example illustrates a DOT version for the operation. Another example\n// in this directory illustrates an effective SAXPY version that operates on the\n// transposed jagged diagonal storage to obtain higher vector lengths.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/test/Integration/Dialect/Vector/CPU/test-sparse-dot-matvec.mlir"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/test/Integration/Dialect/Vector/CPU/test-sparse-saxpy-jagged-matvec.mlir#L6-L45",
    "ascii": "// Illustrates an 8x8 Sparse Matrix x Vector implemented with only operations\n// of the vector dialect (and some std/scf). Essentially, this example performs\n// the following multiplication:\n//\n//     0  1  2  3  4  5  6  7\n//   +------------------------+\n// 0 | 1  0  2  0  0  1  0  1 |   | 1 |   | 21 |\n// 1 | 1  8  0  0  3  0  1  0 |   | 2 |   | 39 |\n// 2 | 0  0  1  0  0  2  6  2 |   | 3 |   | 73 |\n// 3 | 0  3  0  1  0  1  0  1 | x | 4 | = | 24 |\n// 4 | 5  0  0  1  1  1  0  0 |   | 5 |   | 20 |\n// 5 | 0  3  0  0  2  1  2  0 |   | 6 |   | 36 |\n// 6 | 4  0  7  0  1  0  1  0 |   | 7 |   | 37 |\n// 7 | 0  3  0  2  0  0  1  1 |   | 8 |   | 29 |\n//   +------------------------+\n//\n// The sparse storage scheme used is an extended column scheme (also referred\n// to as jagged diagonal, which is essentially a vector friendly variant of\n// the general sparse row-wise scheme (also called compressed row storage),\n// using fixed length vectors and no explicit pointer indexing into the\n// value array to find the rows.\n//\n// The extended column storage for the matrix shown above is as follows.\n//\n//      VALUE           INDEX\n//   +---------+     +---------+\n// 0 | 1 2 1 1 |     | 0 2 5 7 |\n// 1 | 1 8 3 1 |     | 0 1 4 6 |\n// 2 | 1 2 6 2 |     | 2 5 6 7 |\n// 3 | 3 1 1 1 |     | 1 3 5 7 |\n// 4 | 5 1 1 1 |     | 0 3 4 5 |\n// 5 | 3 2 1 2 |     | 1 4 5 6 |\n// 6 | 4 7 1 1 |     | 0 2 4 6 |\n// 7 | 3 2 1 1 |     | 1 3 6 7 |\n//   +---------+     +---------+\n//\n// This example illustrates an effective SAXPY version that operates\n// on the transposed jagged diagonal storage to obtain higher vector\n// lengths. Another example in this directory illustrates a DOT\n// version of the operation.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/test/Integration/Dialect/Vector/CPU/test-sparse-saxpy-jagged-matvec.mlir"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/test/Transforms/promote-buffers-to-stack.mlir#L8-L15",
    "ascii": "// Test Case:\n//    bb0\n//   /   \\\n//  bb1  bb2 <- Initial position of AllocOp\n//   \\   /\n//    bb3\n// PromoteBuffersToStack expected behavior: It should convert %0 into an\n// AllocaOp.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/test/Transforms/promote-buffers-to-stack.mlir"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/openmp/runtime/src/kmp_lock.cpp#L969-L1019",
    "ascii": "/* First the states\n   (head,tail) =              0, 0  means lock is unheld, nobody on queue\n                 UINT_MAX or -1, 0  means lock is held, nobody on queue\n                              h, h  means lock held or about to transition,\n                                    1 element on queue\n                              h, t  h <> t, means lock is held or about to\n                                    transition, >1 elements on queue\n\n   Now the transitions\n      Acquire(0,0)  = -1 ,0\n      Release(0,0)  = Error\n      Acquire(-1,0) =  h ,h    h > 0\n      Release(-1,0) =  0 ,0\n      Acquire(h,h)  =  h ,t    h > 0, t > 0, h <> t\n      Release(h,h)  = -1 ,0    h > 0\n      Acquire(h,t)  =  h ,t'   h > 0, t > 0, t' > 0, h <> t, h <> t', t <> t'\n      Release(h,t)  =  h',t    h > 0, t > 0, h <> t, h <> h', h' maybe = t\n\n   And pictorially\n\n           +-----+\n           | 0, 0|------- release -------> Error\n           +-----+\n             |  ^\n      acquire|  |release\n             |  |\n             |  |\n             v  |\n           +-----+\n           |-1, 0|\n           +-----+\n             |  ^\n      acquire|  |release\n             |  |\n             |  |\n             v  |\n           +-----+\n           | h, h|\n           +-----+\n             |  ^\n      acquire|  |release\n             |  |\n             |  |\n             v  |\n           +-----+\n           | h, t|----- acquire, release loopback ---+\n           +-----+                                   |\n                ^                                    |\n                |                                    |\n                +------------------------------------+\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/openmp/runtime/src/kmp_lock.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/openmp/runtime/src/kmp_stats.h#L582-L614",
    "ascii": "/* ****************************************************************\n    Class to implement an event\n\n    There are four components to an event: start time, stop time\n    nest_level, and timer_name.\n    The start and stop time should be obvious (recorded in clock ticks).\n    The nest_level relates to the bar width in the timeline graph.\n    The timer_name is used to determine which timer event triggered this event.\n\n    the interface to this class is through four read-only operations:\n    1) getStart()     -- returns the start time as 64 bit integer\n    2) getStop()      -- returns the stop time as 64 bit integer\n    3) getNestLevel() -- returns the nest level of the event\n    4) getTimerName() -- returns the timer name that triggered event\n\n    *MORE ON NEST_LEVEL*\n    The nest level is used in the bar graph that represents the timeline.\n    Its main purpose is for showing how events are nested inside eachother.\n    For example, say events, A, B, and C are recorded.  If the timeline\n    looks like this:\nBegin -------------------------------------------------------------> Time\n         |    |          |        |          |              |\n         A    B          C        C          B              A\n       start start     start     end        end            end\n       Then A, B, C will have a nest level of 1, 2, 3 respectively.\n       These values are then used to calculate the barwidth so you can\n       see that inside A, B has occurred, and inside B, C has occurred.\n       Currently, this is shown with A's bar width being larger than B's\n       bar width, and B's bar width being larger than C's bar width.\n\n**************************************************************** */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/openmp/runtime/src/kmp_stats.h"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/openmp/runtime/test/tasking/kmp_task_depend_all.c#L5-L22",
    "ascii": "// Tests OMP 5.x task dependence \"omp_all_memory\",\n// emulates compiler codegen versions for new dep kind\n//\n// Task tree created:\n//      task0 - task1 (in: i1, i2)\n//             \\\n//        task2 (inoutset: i2), (in: i1)\n//             /\n//        task3 (omp_all_memory) via flag=0x80\n//             /\n//      task4 - task5 (in: i1, i2)\n//           /\n//       task6 (omp_all_memory) via addr=-1\n//           /\n//       task7 (omp_all_memory) via flag=0x80\n//           /\n//       task8 (in: i3)\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/openmp/runtime/test/tasking/kmp_task_depend_all.c"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/openmp/runtime/test/worksharing/for/omp_for_schedule_guided.c#L3-L18",
    "ascii": "/* Test for guided scheduling\n * Ensure threads get chunks interleavely first\n * Then judge the chunk sizes are decreasing to a stable value\n * Modified by Chunhua Liao\n * For example, 100 iteration on 2 threads, chunksize 7\n * one line for each dispatch, 0/1 means thread id\n * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  24\n * 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1        18\n * 0 0 0 0 0 0 0 0 0 0 0 0 0 0            14\n * 1 1 1 1 1 1 1 1 1 1                10\n * 0 0 0 0 0 0 0 0                   8\n * 1 1 1 1 1 1 1                   7\n * 0 0 0 0 0 0 0                   7\n * 1 1 1 1 1 1 1                   7\n * 0 0 0 0 0                     5\n*/\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/openmp/runtime/test/worksharing/for/omp_for_schedule_guided.c"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/polly/lib/CodeGen/LoopGeneratorsKMP.cpp#L106-L130",
    "ascii": "// Create a subfunction of the following (preliminary) structure:\n//\n//        PrevBB\n//           |\n//           v\n//        HeaderBB\n//       /   |    _____\n//      /    v   v     |\n//     / PreHeaderBB   |\n//    |      |         |\n//    |      v         |\n//    |  CheckNextBB   |\n//     \\     |   \\_____/\n//      \\    |\n//       v   v\n//       ExitBB\n//\n// HeaderBB will hold allocations, loading of variables and kmp-init calls.\n// CheckNextBB will check for more work (dynamic / static chunked) or will be\n// empty (static non chunked).\n// If there is more work to do: go to PreHeaderBB, otherwise go to ExitBB.\n// PreHeaderBB loads the new boundaries (& will lead to the loop body later on).\n// Just like CheckNextBB: PreHeaderBB is (preliminary) empty in the static non\n// chunked scheduling case. ExitBB marks the end of the parallel execution.\n// The possibly empty BasicBlocks will automatically be removed.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/CodeGen/LoopGeneratorsKMP.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/flang/lib/Semantics/definable.cpp#L63-L72",
    "ascii": "// When a DataRef contains pointers, gets the rightmost one (unless it is\n// the entity being defined, in which case the last pointer above it);\n// otherwise, returns the leftmost symbol.  The resulting symbol is the\n// relevant base object for definabiliy checking.  Examples:\n//   ptr1%ptr2        => ...     -> ptr1\n//   nonptr%ptr       => ...     -> nonptr\n//   nonptr%ptr       =  ...     -> ptr\n//   ptr1%ptr2        =  ...     -> ptr2\n//   ptr1%ptr2%nonptr =  ...     -> ptr2\n//   nonptr1%nonptr2  =  ...     -> nonptr1\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/flang/lib/Semantics/definable.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/115c7beda74f3cfaf83b91d14bc97a39bff4cf19/polly/lib/CodeGen/ManagedMemoryRewrite.cpp#L82-L103",
    "ascii": "// Expand a constant expression `Cur`, which is used at instruction `Parent`\n// at index `index`.\n// Since a constant expression can expand to multiple instructions, store all\n// the expands into a set called `Expands`.\n// Note that this goes inorder on the constant expression tree.\n// A * ((B * D) + C)\n// will be processed with first A, then B * D, then B, then D, and then C.\n// Though ConstantExprs are not treated as \"trees\" but as DAGs, since you can\n// have something like this:\n//    *\n//   /  \\\n//   \\  /\n//    (D)\n//\n// For the purposes of this expansion, we expand the two occurences of D\n// separately. Therefore, we expand the DAG into the tree:\n//  *\n// / \\\n// D  D\n// TODO: We don't _have_to do this, but this is the simplest solution.\n// We can write a solution that keeps track of which constants have been\n// already expanded.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/CodeGen/ManagedMemoryRewrite.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/polly/lib/External/isl/isl_coalesce.c#L709-L759",
    "ascii": "/* Basic map \"i\" has an inequality \"k\" that is adjacent\n * to some inequality of basic map \"j\".  All the other inequalities\n * are valid for \"j\".\n * If not NULL, then \"extra\" contains extra wrapping constraints that are valid\n * for both \"i\" and \"j\".\n * Check if basic map \"j\" forms an extension of basic map \"i\",\n * taking into account the extra constraints, if any.\n *\n * Note that this function is only called if some of the equalities or\n * inequalities of basic map \"j\" do cut basic map \"i\".  The function is\n * correct even if there are no such cut constraints, but in that case\n * the additional checks performed by this function are overkill.\n *\n * In particular, we replace constraint k, say f >= 0, by constraint\n * f <= -1, add the inequalities of \"j\" that are valid for \"i\",\n * as well as the \"extra\" constraints, if any,\n * and check if the result is a subset of basic map \"j\".\n * To improve the chances of the subset relation being detected,\n * any variable that only attains a single integer value\n * in the tableau of \"i\" is first fixed to that value.\n * If the result is a subset, then we know that this result is exactly equal\n * to basic map \"j\" since all its constraints are valid for basic map \"j\".\n * By combining the valid constraints of \"i\" (all equalities and all\n * inequalities except \"k\"), the valid constraints of \"j\" and\n * the \"extra\" constraints, if any, we therefore\n * obtain a basic map that is equal to their union.\n * In this case, there is no need to perform a rollback of the tableau\n * since it is going to be destroyed in fuse().\n *\n *\n *\t|\\__\t\t\t|\\__\n *\t|   \\__\t\t\t|   \\__\n *\t|      \\_\t=>\t|      \\__\n *\t|_______| _\t\t|_________\\\n *\n *\n *\t|\\\t\t\t|\\\n *\t| \\\t\t\t| \\\n *\t|  \\\t\t\t|  \\\n *\t|  |\t\t\t|   \\\n *\t|  ||\\\t\t=>      |    \\\n *\t|  || \\\t\t\t|     \\\n *\t|  ||  |\t\t|      |\n *\t|__||_/\t\t\t|_____/\n *\n *\n *\t_______\t\t\t _______\n *     |       | __\t\t|       \\__\n *     |       ||__|\t=>\t|        __|\n *     |_______|\t\t|_______/\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/External/isl/isl_coalesce.c"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/polly/lib/External/isl/isl_mat.c#L2039-L2050",
    "ascii": "/* Return rows that extend a basis of \"mat1\" to one\n * that covers both \"mat1\" and \"mat2\".\n * The Hermite normal form of the concatenation of the two matrices is\n *\n *\t                     [ Q1 ]\n *\t[ M1 ] = [ H1 0  0 ] [ Q2 ]\n *\t[ M2 ] = [ H2 H3 0 ] [ Q3 ]\n *\n * The number of columns in H1 and H3 determine the number of rows\n * in Q1 and Q2.  Q1 is a basis for M1, while Q2 extends this basis\n * to also cover M2.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/External/isl/isl_mat.c"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/polly/lib/External/isl/isl_tab_pip.c#L3783-L3838",
    "ascii": "/* Determine the sign of the given row of the main tableau.\n * The result is one of\n *\tisl_tab_row_pos: always non-negative; no pivot needed\n *\tisl_tab_row_neg: always non-positive; pivot\n *\tisl_tab_row_any: can be both positive and negative; split\n *\n * We first handle some simple cases\n *\t- the row sign may be known already\n *\t- the row may be obviously non-negative\n *\t- the parametric constant may be equal to that of another row\n *\t  for which we know the sign.  This sign will be either \"pos\" or\n *\t  \"any\".  If it had been \"neg\" then we would have pivoted before.\n *\n * If none of these cases hold, we check the value of the row for each\n * of the currently active samples.  Based on the signs of these values\n * we make an initial determination of the sign of the row.\n *\n *\tall zero\t\t\t->\tunk(nown)\n *\tall non-negative\t\t->\tpos\n *\tall non-positive\t\t->\tneg\n *\tboth negative and positive\t->\tall\n *\n * If we end up with \"all\", we are done.\n * Otherwise, we perform a check for positive and/or negative\n * values as follows.\n *\n *\tsamples\t       neg\t       unk\t       pos\n *\t<0 ?\t\t\t    Y        N\t    Y        N\n *\t\t\t\t\t    pos    any      pos\n *\t>0 ?\t     Y      N\t Y     N\n *\t\t    any    neg  any   neg\n *\n * There is no special sign for \"zero\", because we can usually treat zero\n * as either non-negative or non-positive, whatever works out best.\n * However, if the row is \"critical\", meaning that pivoting is impossible\n * then we don't want to limp zero with the non-positive case, because\n * then we we would lose the solution for those values of the parameters\n * where the value of the row is zero.  Instead, we treat 0 as non-negative\n * ensuring a split if the row can attain both zero and negative values.\n * The same happens when the original constraint was one that could not\n * be satisfied with equality by any integer values of the parameters.\n * In this case, we normalize the constraint, but then a value of zero\n * for the normalized constraint is actually a positive value for the\n * original constraint, so again we need to treat zero as non-negative.\n * In both these cases, we have the following decision tree instead:\n *\n *\tall non-negative\t\t->\tpos\n *\tall negative\t\t\t->\tneg\n *\tboth negative and non-negative\t->\tall\n *\n *\tsamples\t       neg\t          \t       pos\n *\t<0 ?\t\t\t             \t    Y        N\n *\t\t\t\t\t           any      pos\n *\t>=0 ?\t     Y      N\n *\t\t    any    neg\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/External/isl/isl_tab_pip.c"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/115c7beda74f3cfaf83b91d14bc97a39bff4cf19/polly/lib/External/ppcg/gpu.c#L5599-L5657",
    "ascii": "/* Generate CUDA code for \"scop\" and print it to \"p\".\n * After generating an AST for the transformed scop as explained below,\n * we call \"gen->print\" to print the AST in the desired output format\n * to \"p\".\n *\n * If it turns out that it does not make sense to generate GPU code,\n * then we generate CPU code instead.\n *\n * The declarations of the arrays that are visible outside of the scop\n * are printed outside of the code generated from the schedule,\n * because the generated code may involve a guard around the entire code.\n *\n * We first compute a schedule that respects the dependences\n * of the original program and select the outermost bands\n * of tilable dimensions that have at least one parallel loop.\n * If the --load-schedule is specified, then the loaded schedule\n * is used instead of a computed schedule.\n *\n * Each of these bands B is then tiled according to \"tile\" sizes, resulting\n * in two nested bands, with a kernel marker on top\n *\n *\t\tK\n *\t\t|\n *\t\tT\n *\t\t|\n *\t\tP\n *\n * We then split off at most 2 parallel dimensions from the T band and\n * at most 3 parallel dimension from the P band\n *\n *\t\tK\n *\t\t|\n *\t\tT\n *\t\tT1\n *\t\t|\n *\t\tT2\n *\t\t|\n *\t\tP1\n *\t\t|\n *\t\tP2\n *\n * A filter is introduced in front of T1 that maps the domain instances\n * to block identifiers.  Similarly, a filter is introduced in front of P1\n * that maps the domain instances to thread identifiers.\n *\n * For each iteration of the T2 band and for each array, we compute\n * the array elements accessed by that iteration, construct a rectangular\n * box around it and shift it to the origin.  The result is used\n * as shared memory for the array.\n *\n * Copying and synchronization statements are added to this schedule tree.\n * In principle, these are added in front of the P1 band, but some of\n * them may get hoisted up to higher levels.\n *\n * The entire AST is then generated from the single resulting schedule tree.\n * During the generation the subtrees at kernel nodes (K) are saved\n * aside and replaced by kernel calls.  The result is printed as host code\n * while the saved subtrees are printed as device code.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/External/ppcg/gpu.c"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/115c7beda74f3cfaf83b91d14bc97a39bff4cf19/polly/lib/External/ppcg/hybrid.c#L565-L599",
    "ascii": "/* Construct the basic hexagonal tile shape.\n * \"space\" is the 2D space in which the hexagon should be constructed.\n * h is st-1, with st the tile size in the time dimension\n * s0 is the tile size in the space dimension\n * dl is a bound on the negative relative dependence distances, i.e.,\n *\n *\td_s >= -dl d_t\n *\n * du is a bound on the positive relative dependence distances, i.e.,\n *\n *\td_s <= du d_t\n *\n * with (d_t,d_s) any dependence distance vector.\n * dlh = floor(dl * h)\n * duh = floor(du * h)\n *\n * The shape of the hexagon is as follows:\n *\n *\t\t0 dlh   dlh+s0-1\n *\t\t   ______                __\n * 0\t\t  /      \\_             /\n *\t\t /         \\_          /\n * h\t\t/            \\ ______ /\n * h+1\t\t\\_           //      \\\\_\n *\t\t  \\_        //         \\\\_\n * 2h+1\t\t    \\______//            \\\\\n *\t\t0   duh   duh+s0-1\n *\t\t             duh+s0-1+dlh\n *\t\t                  duh+s0-1+dlh+1+s0+1\n *\n * The next hexagon is shifted by duh + dlh + 2 * s0.\n *\n * The slope of the \"/\" constraints is dl.\n * The slope of the \"\\_\" constraints is du.\n */\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/External/ppcg/hybrid.c"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/third-party/unittest/googlemock/src/gmock-matchers.cc#L60-L121",
    "ascii": "// FindMaxBipartiteMatching and its helper class.\n//\n// Uses the well-known Ford-Fulkerson max flow method to find a maximum\n// bipartite matching. Flow is considered to be from left to right.\n// There is an implicit source node that is connected to all of the left\n// nodes, and an implicit sink node that is connected to all of the\n// right nodes. All edges have unit capacity.\n//\n// Neither the flow graph nor the residual flow graph are represented\n// explicitly. Instead, they are implied by the information in 'graph' and\n// a vector<int> called 'left_' whose elements are initialized to the\n// value kUnused. This represents the initial state of the algorithm,\n// where the flow graph is empty, and the residual flow graph has the\n// following edges:\n//   - An edge from source to each left_ node\n//   - An edge from each right_ node to sink\n//   - An edge from each left_ node to each right_ node, if the\n//     corresponding edge exists in 'graph'.\n//\n// When the TryAugment() method adds a flow, it sets left_[l] = r for some\n// nodes l and r. This induces the following changes:\n//   - The edges (source, l), (l, r), and (r, sink) are added to the\n//     flow graph.\n//   - The same three edges are removed from the residual flow graph.\n//   - The reverse edges (l, source), (r, l), and (sink, r) are added\n//     to the residual flow graph, which is a directional graph\n//     representing unused flow capacity.\n//\n// When the method augments a flow (moving left_[l] from some r1 to some\n// other r2), this can be thought of as \"undoing\" the above steps with\n// respect to r1 and \"redoing\" them with respect to r2.\n//\n// It bears repeating that the flow graph and residual flow graph are\n// never represented explicitly, but can be derived by looking at the\n// information in 'graph' and in left_.\n//\n// As an optimization, there is a second vector<int> called right_ which\n// does not provide any new information. Instead, it enables more\n// efficient queries about edges entering or leaving the right-side nodes\n// of the flow or residual flow graphs. The following invariants are\n// maintained:\n//\n// left[l] == kUnused or right[left[l]] == l\n// right[r] == kUnused or left[right[r]] == r\n//\n// . [ source ]                                        .\n// .   |||                                             .\n// .   |||                                             .\n// .   ||\\--> left[0]=1  ---\\    right[0]=-1 ----\\     .\n// .   ||                   |                    |     .\n// .   |\\---> left[1]=-1    \\--> right[1]=0  ---\\|     .\n// .   |                                        ||     .\n// .   \\----> left[2]=2  ------> right[2]=2  --\\||     .\n// .                                           |||     .\n// .         elements           matchers       vvv     .\n// .                                         [ sink ]  .\n//\n// See Also:\n//   [1] Cormen, et al (2001). \"Section 26.2: The Ford-Fulkerson method\".\n//       \"Introduction to Algorithms (Second ed.)\", pp. 651-664.\n//   [2] \"Ford-Fulkerson algorithm\", Wikipedia,\n//       'http://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm'\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "llvm-project/third-party/unittest/googlemock/src/gmock-matchers.cc"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/flang/lib/Semantics/resolve-names.cpp#L133-L145",
    "ascii": "// Inheritance graph for the parse tree visitation classes that follow:\n//   BaseVisitor\n//   + AttrsVisitor\n//   | + DeclTypeSpecVisitor\n//   |   + ImplicitRulesVisitor\n//   |     + ScopeHandler -----------+--+\n//   |       + ModuleVisitor ========|==+\n//   |       + InterfaceVisitor      |  |\n//   |       +-+ SubprogramVisitor ==|==+\n//   + ArraySpecVisitor              |  |\n//     + DeclarationVisitor <--------+  |\n//       + ConstructVisitor             |\n//         + ResolveNamesVisitor <------+\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/flang/lib/Semantics/resolve-names.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/lld/MachO/ExportTrie.cpp#L1-L35",
    "ascii": "//===- ExportTrie.cpp -----------------------------------------------------===//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//\n//\n// This is a partial implementation of the Mach-O export trie format. It's\n// essentially a symbol table encoded as a compressed prefix trie, meaning that\n// the common prefixes of each symbol name are shared for a more compact\n// representation. The prefixes are stored on the edges of the trie, and one\n// edge can represent multiple characters. For example, given two exported\n// symbols _bar and _baz, we will have a trie like this (terminal nodes are\n// marked with an asterisk):\n//\n//              +-+-+\n//              |   | // root node\n//              +-+-+\n//                |\n//                | _ba\n//                |\n//              +-+-+\n//              |   |\n//              +-+-+\n//           r /     \\ z\n//            /       \\\n//        +-+-+       +-+-+\n//        | * |       | * |\n//        +-+-+       +-+-+\n//\n// More documentation of the format can be found in\n// llvm/tools/obj2yaml/macho2yaml.cpp.\n//\n//===----------------------------------------------------------------------===//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/lld/MachO/ExportTrie.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/include/llvm/ADT/IntervalTree.h#L28-L188",
    "ascii": "// IntervalTree is a light tree data structure to hold intervals. It allows\n// finding all intervals that overlap with any given point. At this time,\n// it does not support any deletion or rebalancing operations.\n//\n// The IntervalTree is designed to be set up once, and then queried without\n// any further additions.\n//\n// Synopsis:\n//   Closed intervals delimited by PointT objects are mapped to ValueT objects.\n//\n// Restrictions:\n//   PointT must be a fundamental type.\n//   ValueT must be a fundamental or pointer type.\n//\n// template <typename PointT, typename ValueT, typename DataT>\n// class IntervalTree {\n// public:\n//\n//   IntervalTree();\n//   ~IntervalTree():\n//\n//   using IntervalReferences = SmallVector<IntervalData *>;\n//\n//   void create();\n//   void insert(PointT Left, PointT Right, ValueT Value);\n//\n//   IntervalReferences getContaining(PointT Point);\n//   static void sortIntervals(IntervalReferences &Intervals, Sorting Sort);\n//\n//   find_iterator begin(PointType Point) const;\n//   find_iterator end() const;\n//\n//   bool empty() const;\n//   void clear();\n//\n//   void print(raw_ostream &OS, bool HexFormat = true);\n// };\n//\n//===----------------------------------------------------------------------===//\n//\n// In the below given dataset\n//\n//   [a, b] <- (x)\n//\n// 'a' and 'b' describe a range and 'x' the value for that interval.\n//\n// The following data are purely for illustrative purposes:\n//\n// [30, 35] <- (3035),    [39, 50] <- (3950),    [55, 61] <- (5561),\n// [31, 56] <- (3156),    [12, 21] <- (1221),    [25, 41] <- (2541),\n// [49, 65] <- (4965),    [71, 79] <- (7179),    [11, 16] <- (1116),\n// [20, 30] <- (2030),    [36, 54] <- (3654),    [60, 70] <- (6070),\n// [74, 80] <- (7480),    [15, 40] <- (1540),    [43, 43] <- (4343),\n// [50, 75] <- (5075),    [10, 85] <- (1085)\n//\n// The data represents a set of overlapping intervals:\n//\n//                    30--35  39------------50  55----61\n//                      31------------------------56\n//     12--------21 25------------41      49-------------65   71-----79\n//   11----16  20-----30    36----------------54    60------70  74---- 80\n//       15---------------------40  43--43  50--------------------75\n// 10----------------------------------------------------------------------85\n//\n// The items are stored in a binary tree with each node storing:\n//\n// MP: A middle point.\n// IL: All intervals whose left value are completely to the left of the middle\n//     point. They are sorted in ascending order by their beginning point.\n// IR: All intervals whose right value are completely to the right of the\n//     middle point. They are sorted in descending order by their ending point.\n// LS: Left subtree.\n// RS: Right subtree.\n//\n// As IL and IR will contain the same intervals, in order to optimize space,\n// instead of storing intervals on each node, we use two vectors that will\n// contain the intervals described by IL and IR. Each node will contain an\n// index into that vector (global bucket), to indicate the beginning of the\n// intervals assigned to the node.\n//\n// The following is the output from print():\n//\n// 0: MP:43 IR [10,85] [31,56] [36,54] [39,50] [43,43]\n// 0: MP:43 IL [10,85] [31,56] [36,54] [39,50] [43,43]\n// 1:   MP:25 IR [25,41] [15,40] [20,30]\n// 1:   MP:25 IL [15,40] [20,30] [25,41]\n// 2:     MP:15 IR [12,21] [11,16]\n// 2:     MP:15 IL [11,16] [12,21]\n// 2:     MP:36 IR []\n// 2:     MP:36 IL []\n// 3:       MP:31 IR [30,35]\n// 3:       MP:31 IL [30,35]\n// 1:   MP:61 IR [50,75] [60,70] [49,65] [55,61]\n// 1:   MP:61 IL [49,65] [50,75] [55,61] [60,70]\n// 2:     MP:74 IR [74,80] [71,79]\n// 2:     MP:74 IL [71,79] [74,80]\n//\n// with:\n//    0: Root Node.\n//   MP: Middle point.\n//   IL: Intervals to the left (in ascending order by beginning point).\n//   IR: Intervals to the right (in descending order by ending point).\n//\n//                                    Root\n//                                      |\n//                                      V\n//                       +------------MP:43------------+\n//                       |            IL IR            |\n//                       |       [10,85] [10,85]       |\n//                    LS |       [31,56] [31,56]       | RS\n//                       |       [36,54] [36,54]       |\n//                       |       [39,50] [39,50]       |\n//                       |       [43,43] [43,43]       |\n//                       V                             V\n//        +------------MP:25------------+            MP:61------------+\n//        |            IL IR            |            IL IR            |\n//        |       [15,40] [25,41]       |       [49,65] [50,75]       |\n//     LS |       [20,30] [15,40]       | RS    [50,75] [60,70]       | RS\n//        |       [25,41] [20,30]       |       [55,61] [49,65]       |\n//        |                             |       [60,70] [55,61]       |\n//        V                             V                             V\n//      MP:15                 +-------MP:36                         MP:74\n//      IL IR                 |       IL IR                         IL IR\n// [11,16] [12,21]         LS |       [] []                    [71,79] [74,80]\n// [12,21] [11,16]            |                                [74,80] [71,79]\n//                            V\n//                          MP:31\n//                          IL IR\n//                     [30,35] [30,35]\n//\n// The creation of an interval tree is done in 2 steps:\n// 1) Insert the interval items by calling\n//    void insert(PointT Left, PointT Right, ValueT Value);\n//    Left, Right: the interval left and right limits.\n//    Value: the data associated with that specific interval.\n//\n// 2) Create the interval tree by calling\n//    void create();\n//\n// Once the tree is created, it is switched to query mode.\n// Query the tree by using iterators or container.\n//\n// a) Iterators over intervals overlapping the given point with very weak\n//    ordering guarantees.\n//    find_iterator begin(PointType Point) const;\n//    find_iterator end() const;\n//    Point: a target point to be tested for inclusion in any interval.\n//\n// b) Container:\n//    IntervalReferences getContaining(PointT Point);\n//    Point: a target point to be tested for inclusion in any interval.\n//    Returns vector with all the intervals containing the target point.\n//\n// The returned intervals are in their natural tree location. They can\n// be sorted:\n//\n// static void sortIntervals(IntervalReferences &Intervals, Sorting Sort);\n//\n// Ability to print the constructed interval tree:\n//   void print(raw_ostream &OS, bool HexFormat = true);\n// Display the associated data in hexadecimal format.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/include/llvm/ADT/IntervalTree.h"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Analysis/SyncDependenceAnalysis.cpp#L1-L118",
    "ascii": "//===--- SyncDependenceAnalysis.cpp - Compute Control Divergence Effects --===//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//\n//\n// This file implements an algorithm that returns for a divergent branch\n// the set of basic blocks whose phi nodes become divergent due to divergent\n// control. These are the blocks that are reachable by two disjoint paths from\n// the branch or loop exits that have a reaching path that is disjoint from a\n// path to the loop latch.\n//\n// The SyncDependenceAnalysis is used in the DivergenceAnalysis to model\n// control-induced divergence in phi nodes.\n//\n//\n// -- Reference --\n// The algorithm is presented in Section 5 of \n//\n//   An abstract interpretation for SPMD divergence\n//       on reducible control flow graphs.\n//   Julian Rosemann, Simon Moll and Sebastian Hack\n//   POPL '21\n//\n//\n// -- Sync dependence --\n// Sync dependence characterizes the control flow aspect of the\n// propagation of branch divergence. For example,\n//\n//   %cond = icmp slt i32 %tid, 10\n//   br i1 %cond, label %then, label %else\n// then:\n//   br label %merge\n// else:\n//   br label %merge\n// merge:\n//   %a = phi i32 [ 0, %then ], [ 1, %else ]\n//\n// Suppose %tid holds the thread ID. Although %a is not data dependent on %tid\n// because %tid is not on its use-def chains, %a is sync dependent on %tid\n// because the branch \"br i1 %cond\" depends on %tid and affects which value %a\n// is assigned to.\n//\n//\n// -- Reduction to SSA construction --\n// There are two disjoint paths from A to X, if a certain variant of SSA\n// construction places a phi node in X under the following set-up scheme.\n//\n// This variant of SSA construction ignores incoming undef values.\n// That is paths from the entry without a definition do not result in\n// phi nodes.\n//\n//       entry\n//     /      \\\n//    A        \\\n//  /   \\       Y\n// B     C     /\n//  \\   /  \\  /\n//    D     E\n//     \\   /\n//       F\n//\n// Assume that A contains a divergent branch. We are interested\n// in the set of all blocks where each block is reachable from A\n// via two disjoint paths. This would be the set {D, F} in this\n// case.\n// To generally reduce this query to SSA construction we introduce\n// a virtual variable x and assign to x different values in each\n// successor block of A.\n//\n//           entry\n//         /      \\\n//        A        \\\n//      /   \\       Y\n// x = 0   x = 1   /\n//      \\  /   \\  /\n//        D     E\n//         \\   /\n//           F\n//\n// Our flavor of SSA construction for x will construct the following\n//\n//            entry\n//          /      \\\n//         A        \\\n//       /   \\       Y\n// x0 = 0   x1 = 1  /\n//       \\   /   \\ /\n//     x2 = phi   E\n//         \\     /\n//         x3 = phi\n//\n// The blocks D and F contain phi nodes and are thus each reachable\n// by two disjoins paths from A.\n//\n// -- Remarks --\n// * In case of loop exits we need to check the disjoint path criterion for loops.\n//   To this end, we check whether the definition of x differs between the\n//   loop exit and the loop header (_after_ SSA construction).\n//\n// -- Known Limitations & Future Work --\n// * The algorithm requires reducible loops because the implementation\n//   implicitly performs a single iteration of the underlying data flow analysis.\n//   This was done for pragmatism, simplicity and speed.\n//\n//   Relevant related work for extending the algorithm to irreducible control:\n//     A simple algorithm for global data flow analysis problems.\n//     Matthew S. Hecht and Jeffrey D. Ullman.\n//     SIAM Journal on Computing, 4(4):519–532, December 1975.\n//\n// * Another reason for requiring reducible loops is that points of\n//   synchronization in irreducible loops aren't 'obvious' - there is no unique\n//   header where threads 'should' synchronize when entering or coming back\n//   around from the latch.\n//\n//===----------------------------------------------------------------------===//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Analysis/SyncDependenceAnalysis.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/CodeGen/EarlyIfConversion.cpp#L60-L80",
    "ascii": "//===----------------------------------------------------------------------===//\n//                                 SSAIfConv\n//===----------------------------------------------------------------------===//\n//\n// The SSAIfConv class performs if-conversion on SSA form machine code after\n// determining if it is possible. The class contains no heuristics; external\n// code should be used to determine when if-conversion is a good idea.\n//\n// SSAIfConv can convert both triangles and diamonds:\n//\n//   Triangle: Head              Diamond: Head\n//              | \\                       /  \\_\n//              |  \\                     /    |\n//              |  [TF]BB              FBB    TBB\n//              |  /                     \\    /\n//              | /                       \\  /\n//             Tail                       Tail\n//\n// Instructions in the conditional blocks TBB and/or FBB are spliced into the\n// Head block, and phis in the Tail block are converted to select instructions.\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/CodeGen/IfConversion.cpp#L864-L876",
    "ascii": "/// ValidForkedDiamond - Returns true if the 'true' and 'false' blocks (along\n/// with their common predecessor) form a diamond if a common tail block is\n/// extracted.\n/// While not strictly a diamond, this pattern would form a diamond if\n/// tail-merging had merged the shared tails.\n///           EBB\n///         _/   \\_\n///         |     |\n///        TBB   FBB\n///        /  \\ /   \\\n///  FalseBB TrueBB FalseBB\n/// Currently only handles analyzable branches.\n/// Specifically excludes actual diamonds to avoid overlap.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/CodeGen/IfConversion.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/CodeGen/MachineBlockPlacement.cpp#L1893-L1906",
    "ascii": "// If bottom of block BB has only one successor OldTop, in most cases it is\n// profitable to move it before OldTop, except the following case:\n//\n//     -->OldTop<-\n//     |    .    |\n//     |    .    |\n//     |    .    |\n//     ---Pred   |\n//          |    |\n//         BB-----\n//\n// If BB is moved before OldTop, Pred needs a taken branch to BB, and it can't\n// layout the other successor below it, so it can't reduce taken branch.\n// In this case we keep its original layout.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/CodeGen/StackColoring.cpp#L97-L403",
    "ascii": "//===----------------------------------------------------------------------===//\n//                           StackColoring Pass\n//===----------------------------------------------------------------------===//\n//\n// Stack Coloring reduces stack usage by merging stack slots when they\n// can't be used together. For example, consider the following C program:\n//\n//     void bar(char *, int);\n//     void foo(bool var) {\n//         A: {\n//             char z[4096];\n//             bar(z, 0);\n//         }\n//\n//         char *p;\n//         char x[4096];\n//         char y[4096];\n//         if (var) {\n//             p = x;\n//         } else {\n//             bar(y, 1);\n//             p = y + 1024;\n//         }\n//     B:\n//         bar(p, 2);\n//     }\n//\n// Naively-compiled, this program would use 12k of stack space. However, the\n// stack slot corresponding to `z` is always destroyed before either of the\n// stack slots for `x` or `y` are used, and then `x` is only used if `var`\n// is true, while `y` is only used if `var` is false. So in no time are 2\n// of the stack slots used together, and therefore we can merge them,\n// compiling the function using only a single 4k alloca:\n//\n//     void foo(bool var) { // equivalent\n//         char x[4096];\n//         char *p;\n//         bar(x, 0);\n//         if (var) {\n//             p = x;\n//         } else {\n//             bar(x, 1);\n//             p = x + 1024;\n//         }\n//         bar(p, 2);\n//     }\n//\n// This is an important optimization if we want stack space to be under\n// control in large functions, both open-coded ones and ones created by\n// inlining.\n//\n// Implementation Notes:\n// ---------------------\n//\n// An important part of the above reasoning is that `z` can't be accessed\n// while the latter 2 calls to `bar` are running. This is justified because\n// `z`'s lifetime is over after we exit from block `A:`, so any further\n// accesses to it would be UB. The way we represent this information\n// in LLVM is by having frontends delimit blocks with `lifetime.start`\n// and `lifetime.end` intrinsics.\n//\n// The effect of these intrinsics seems to be as follows (maybe I should\n// specify this in the reference?):\n//\n//   L1) at start, each stack-slot is marked as *out-of-scope*, unless no\n//   lifetime intrinsic refers to that stack slot, in which case\n//   it is marked as *in-scope*.\n//   L2) on a `lifetime.start`, a stack slot is marked as *in-scope* and\n//   the stack slot is overwritten with `undef`.\n//   L3) on a `lifetime.end`, a stack slot is marked as *out-of-scope*.\n//   L4) on function exit, all stack slots are marked as *out-of-scope*.\n//   L5) `lifetime.end` is a no-op when called on a slot that is already\n//   *out-of-scope*.\n//   L6) memory accesses to *out-of-scope* stack slots are UB.\n//   L7) when a stack-slot is marked as *out-of-scope*, all pointers to it\n//   are invalidated, unless the slot is \"degenerate\". This is used to\n//   justify not marking slots as in-use until the pointer to them is\n//   used, but feels a bit hacky in the presence of things like LICM. See\n//   the \"Degenerate Slots\" section for more details.\n//\n// Now, let's ground stack coloring on these rules. We'll define a slot\n// as *in-use* at a (dynamic) point in execution if it either can be\n// written to at that point, or if it has a live and non-undef content\n// at that point.\n//\n// Obviously, slots that are never *in-use* together can be merged, and\n// in our example `foo`, the slots for `x`, `y` and `z` are never\n// in-use together (of course, sometimes slots that *are* in-use together\n// might still be mergable, but we don't care about that here).\n//\n// In this implementation, we successively merge pairs of slots that are\n// not *in-use* together. We could be smarter - for example, we could merge\n// a single large slot with 2 small slots, or we could construct the\n// interference graph and run a \"smart\" graph coloring algorithm, but with\n// that aside, how do we find out whether a pair of slots might be *in-use*\n// together?\n//\n// From our rules, we see that *out-of-scope* slots are never *in-use*,\n// and from (L7) we see that \"non-degenerate\" slots remain non-*in-use*\n// until their address is taken. Therefore, we can approximate slot activity\n// using dataflow.\n//\n// A subtle point: naively, we might try to figure out which pairs of\n// stack-slots interfere by propagating `S in-use` through the CFG for every\n// stack-slot `S`, and having `S` and `T` interfere if there is a CFG point in\n// which they are both *in-use*.\n//\n// That is sound, but overly conservative in some cases: in our (artificial)\n// example `foo`, either `x` or `y` might be in use at the label `B:`, but\n// as `x` is only in use if we came in from the `var` edge and `y` only\n// if we came from the `!var` edge, they still can't be in use together.\n// See PR32488 for an important real-life case.\n//\n// If we wanted to find all points of interference precisely, we could\n// propagate `S in-use` and `S&T in-use` predicates through the CFG. That\n// would be precise, but requires propagating `O(n^2)` dataflow facts.\n//\n// However, we aren't interested in the *set* of points of interference\n// between 2 stack slots, only *whether* there *is* such a point. So we\n// can rely on a little trick: for `S` and `T` to be in-use together,\n// one of them needs to become in-use while the other is in-use (or\n// they might both become in use simultaneously). We can check this\n// by also keeping track of the points at which a stack slot might *start*\n// being in-use.\n//\n// Exact first use:\n// ----------------\n//\n// Consider the following motivating example:\n//\n//     int foo() {\n//       char b1[1024], b2[1024];\n//       if (...) {\n//         char b3[1024];\n//         <uses of b1, b3>;\n//         return x;\n//       } else {\n//         char b4[1024], b5[1024];\n//         <uses of b2, b4, b5>;\n//         return y;\n//       }\n//     }\n//\n// In the code above, \"b3\" and \"b4\" are declared in distinct lexical\n// scopes, meaning that it is easy to prove that they can share the\n// same stack slot. Variables \"b1\" and \"b2\" are declared in the same\n// scope, meaning that from a lexical point of view, their lifetimes\n// overlap. From a control flow pointer of view, however, the two\n// variables are accessed in disjoint regions of the CFG, thus it\n// should be possible for them to share the same stack slot. An ideal\n// stack allocation for the function above would look like:\n//\n//     slot 0: b1, b2\n//     slot 1: b3, b4\n//     slot 2: b5\n//\n// Achieving this allocation is tricky, however, due to the way\n// lifetime markers are inserted. Here is a simplified view of the\n// control flow graph for the code above:\n//\n//                +------  block 0 -------+\n//               0| LIFETIME_START b1, b2 |\n//               1| <test 'if' condition> |\n//                +-----------------------+\n//                   ./              \\.\n//   +------  block 1 -------+   +------  block 2 -------+\n//  2| LIFETIME_START b3     |  5| LIFETIME_START b4, b5 |\n//  3| <uses of b1, b3>      |  6| <uses of b2, b4, b5>  |\n//  4| LIFETIME_END b3       |  7| LIFETIME_END b4, b5   |\n//   +-----------------------+   +-----------------------+\n//                   \\.              /.\n//                +------  block 3 -------+\n//               8| <cleanupcode>         |\n//               9| LIFETIME_END b1, b2   |\n//              10| return                |\n//                +-----------------------+\n//\n// If we create live intervals for the variables above strictly based\n// on the lifetime markers, we'll get the set of intervals on the\n// left. If we ignore the lifetime start markers and instead treat a\n// variable's lifetime as beginning with the first reference to the\n// var, then we get the intervals on the right.\n//\n//            LIFETIME_START      First Use\n//     b1:    [0,9]               [3,4] [8,9]\n//     b2:    [0,9]               [6,9]\n//     b3:    [2,4]               [3,4]\n//     b4:    [5,7]               [6,7]\n//     b5:    [5,7]               [6,7]\n//\n// For the intervals on the left, the best we can do is overlap two\n// variables (b3 and b4, for example); this gives us a stack size of\n// 4*1024 bytes, not ideal. When treating first-use as the start of a\n// lifetime, we can additionally overlap b1 and b5, giving us a 3*1024\n// byte stack (better).\n//\n// Degenerate Slots:\n// -----------------\n//\n// Relying entirely on first-use of stack slots is problematic,\n// however, due to the fact that optimizations can sometimes migrate\n// uses of a variable outside of its lifetime start/end region. Here\n// is an example:\n//\n//     int bar() {\n//       char b1[1024], b2[1024];\n//       if (...) {\n//         <uses of b2>\n//         return y;\n//       } else {\n//         <uses of b1>\n//         while (...) {\n//           char b3[1024];\n//           <uses of b3>\n//         }\n//       }\n//     }\n//\n// Before optimization, the control flow graph for the code above\n// might look like the following:\n//\n//                +------  block 0 -------+\n//               0| LIFETIME_START b1, b2 |\n//               1| <test 'if' condition> |\n//                +-----------------------+\n//                   ./              \\.\n//   +------  block 1 -------+    +------- block 2 -------+\n//  2| <uses of b2>          |   3| <uses of b1>          |\n//   +-----------------------+    +-----------------------+\n//              |                            |\n//              |                 +------- block 3 -------+ <-\\.\n//              |                4| <while condition>     |    |\n//              |                 +-----------------------+    |\n//              |               /          |                   |\n//              |              /  +------- block 4 -------+\n//              \\             /  5| LIFETIME_START b3     |    |\n//               \\           /   6| <uses of b3>          |    |\n//                \\         /    7| LIFETIME_END b3       |    |\n//                 \\        |    +------------------------+    |\n//                  \\       |                 \\                /\n//                +------  block 5 -----+      \\---------------\n//               8| <cleanupcode>       |\n//               9| LIFETIME_END b1, b2 |\n//              10| return              |\n//                +---------------------+\n//\n// During optimization, however, it can happen that an instruction\n// computing an address in \"b3\" (for example, a loop-invariant GEP) is\n// hoisted up out of the loop from block 4 to block 2.  [Note that\n// this is not an actual load from the stack, only an instruction that\n// computes the address to be loaded]. If this happens, there is now a\n// path leading from the first use of b3 to the return instruction\n// that does not encounter the b3 LIFETIME_END, hence b3's lifetime is\n// now larger than if we were computing live intervals strictly based\n// on lifetime markers. In the example above, this lengthened lifetime\n// would mean that it would appear illegal to overlap b3 with b2.\n//\n// To deal with this such cases, the code in ::collectMarkers() below\n// tries to identify \"degenerate\" slots -- those slots where on a single\n// forward pass through the CFG we encounter a first reference to slot\n// K before we hit the slot K lifetime start marker. For such slots,\n// we fall back on using the lifetime start marker as the beginning of\n// the variable's lifetime.  NB: with this implementation, slots can\n// appear degenerate in cases where there is unstructured control flow:\n//\n//    if (q) goto mid;\n//    if (x > 9) {\n//         int b[100];\n//         memcpy(&b[0], ...);\n//    mid: b[k] = ...;\n//         abc(&b);\n//    }\n//\n// If in RPO ordering chosen to walk the CFG  we happen to visit the b[k]\n// before visiting the memcpy block (which will contain the lifetime start\n// for \"b\" then it will appear that 'b' has a degenerate lifetime.\n//\n// Handle Windows Exception with LifetimeStartOnFirstUse:\n// -----------------\n//\n// There was a bug for using LifetimeStartOnFirstUse in win32.\n// class Type1 {\n// ...\n// ~Type1(){ write memory;}\n// }\n// ...\n// try{\n// Type1 V\n// ...\n// } catch (Type2 X){\n// ...\n// }\n// For variable X in catch(X), we put point pX=&(&X) into ConservativeSlots\n// to prevent using LifetimeStartOnFirstUse. Because pX may merged with\n// object V which may call destructor after implicitly writing pX. All these\n// are done in C++ EH runtime libs (through CxxThrowException), and can't\n// obviously check it in IR level.\n//\n// The loader of pX, without obvious writing IR, is usually the first LOAD MI\n// in EHPad, Some like:\n// bb.x.catch.i (landing-pad, ehfunclet-entry):\n// ; predecessors: %bb...\n//   successors: %bb...\n//  %n:gr32 = MOV32rm %stack.pX ...\n//  ...\n// The Type2** %stack.pX will only be written in EH runtime libs, so we\n// check the StoreSlots to screen it out.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/CodeGen/StackColoring.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h#L584-L620",
    "ascii": "/// Tracker for what values are in machine locations. Listens to the Things\n/// being Done by various instructions, and maintains a table of what machine\n/// locations have what values (as defined by a ValueIDNum).\n///\n/// There are potentially a much larger number of machine locations on the\n/// target machine than the actual working-set size of the function. On x86 for\n/// example, we're extremely unlikely to want to track values through control\n/// or debug registers. To avoid doing so, MLocTracker has several layers of\n/// indirection going on, described below, to avoid unnecessarily tracking\n/// any location.\n///\n/// Here's a sort of diagram of the indexes, read from the bottom up:\n///\n///           Size on stack   Offset on stack\n///                 \\              /\n///          Stack Idx (Where in slot is this?)\n///                         /\n///                        /\n/// Slot Num (%stack.0)   /\n/// FrameIdx => SpillNum /\n///              \\      /\n///           SpillID (int)              Register number (int)\n///                      \\                  /\n///                      LocationID => LocIdx\n///                                |\n///                       LocIdx => ValueIDNum\n///\n/// The aim here is that the LocIdx => ValueIDNum vector is just an array of\n/// values in numbered locations, so that later analyses can ignore whether the\n/// location is a register or otherwise. To map a register / spill location to\n/// a LocIdx, you have to use the (sparse) LocationID => LocIdx map. And to\n/// build a LocationID for a stack slot, you need to combine identifiers for\n/// which stack slot it is and where within that slot is being described.\n///\n/// Register mask operands cause trouble by technically defining every register;\n/// various hacks are used to avoid tracking registers that are never read and\n/// only written by regmasks.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp#L71-L134",
    "ascii": "//===----------------------------------------------------------------------===//\n//                                 SSACCmpConv\n//===----------------------------------------------------------------------===//\n//\n// The SSACCmpConv class performs ccmp-conversion on SSA form machine code\n// after determining if it is possible. The class contains no heuristics;\n// external code should be used to determine when ccmp-conversion is a good\n// idea.\n//\n// CCmp-formation works on a CFG representing chained conditions, typically\n// from C's short-circuit || and && operators:\n//\n//   From:         Head            To:         Head\n//                 / |                         CmpBB\n//                /  |                         / |\n//               |  CmpBB                     /  |\n//               |  / |                    Tail  |\n//               | /  |                      |   |\n//              Tail  |                      |   |\n//                |   |                      |   |\n//               ... ...                    ... ...\n//\n// The Head block is terminated by a br.cond instruction, and the CmpBB block\n// contains compare + br.cond. Tail must be a successor of both.\n//\n// The cmp-conversion turns the compare instruction in CmpBB into a conditional\n// compare, and merges CmpBB into Head, speculatively executing its\n// instructions. The AArch64 conditional compare instructions have an immediate\n// operand that specifies the NZCV flag values when the condition is false and\n// the compare isn't executed. This makes it possible to chain compares with\n// different condition codes.\n//\n// Example:\n//\n//    if (a == 5 || b == 17)\n//      foo();\n//\n//    Head:\n//       cmp  w0, #5\n//       b.eq Tail\n//    CmpBB:\n//       cmp  w1, #17\n//       b.eq Tail\n//    ...\n//    Tail:\n//      bl _foo\n//\n//  Becomes:\n//\n//    Head:\n//       cmp  w0, #5\n//       ccmp w1, #17, 4, ne  ; 4 = nZcv\n//       b.eq Tail\n//    ...\n//    Tail:\n//      bl _foo\n//\n// The ccmp condition code is the one that would cause the Head terminator to\n// branch to CmpBB.\n//\n// FIXME: It should also be possible to speculate a block on the critical edge\n// between Head and Tail, just like if-converting a diamond.\n//\n// FIXME: Handle PHIs in Tail by turning them into selects (if-conversion).\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp#L1-L58",
    "ascii": "//=- AArch64ConditionOptimizer.cpp - Remove useless comparisons for AArch64 -=//\n//\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n// See https://llvm.org/LICENSE.txt for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//===----------------------------------------------------------------------===//\n//\n// This pass tries to make consecutive compares of values use same operands to\n// allow CSE pass to remove duplicated instructions.  For this it analyzes\n// branches and adjusts comparisons with immediate values by converting:\n//  * GE -> GT\n//  * GT -> GE\n//  * LT -> LE\n//  * LE -> LT\n// and adjusting immediate values appropriately.  It basically corrects two\n// immediate values towards each other to make them equal.\n//\n// Consider the following example in C:\n//\n//   if ((a < 5 && ...) || (a > 5 && ...)) {\n//        ~~~~~             ~~~~~\n//          ^                 ^\n//          x                 y\n//\n// Here both \"x\" and \"y\" expressions compare \"a\" with \"5\".  When \"x\" evaluates\n// to \"false\", \"y\" can just check flags set by the first comparison.  As a\n// result of the canonicalization employed by\n// SelectionDAGBuilder::visitSwitchCase, DAGCombine, and other target-specific\n// code, assembly ends up in the form that is not CSE friendly:\n//\n//     ...\n//     cmp      w8, #4\n//     b.gt     .LBB0_3\n//     ...\n//   .LBB0_3:\n//     cmp      w8, #6\n//     b.lt     .LBB0_6\n//     ...\n//\n// Same assembly after the pass:\n//\n//     ...\n//     cmp      w8, #5\n//     b.ge     .LBB0_3\n//     ...\n//   .LBB0_3:\n//     cmp      w8, #5     // <-- CSE pass removes this instruction\n//     b.le     .LBB0_6\n//     ...\n//\n// Currently only SUBS and ADDS followed by b.?? are supported.\n//\n// TODO: maybe handle TBNZ/TBZ the same way as CMP when used instead for \"a < 0\"\n// TODO: handle other conditional instructions (e.g. CSET)\n// TODO: allow second branching to be anything if it doesn't require adjusting\n//\n//===----------------------------------------------------------------------===//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/d6e0ff60740e2297392a4bed3e5e43eff8e2713f/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp#L19825-L19884",
    "ascii": "// This function does a whole lot of voodoo to determine if the tests are\n// equivalent without and with a mask. Essentially what happens is that given a\n// DAG resembling:\n//\n//  +-------------+ +-------------+ +-------------+ +-------------+\n//  |    Input    | | AddConstant | | CompConstant| |     CC      |\n//  +-------------+ +-------------+ +-------------+ +-------------+\n//           |           |           |               |\n//           V           V           |    +----------+\n//          +-------------+  +----+  |    |\n//          |     ADD     |  |0xff|  |    |\n//          +-------------+  +----+  |    |\n//                  |           |    |    |\n//                  V           V    |    |\n//                 +-------------+   |    |\n//                 |     AND     |   |    |\n//                 +-------------+   |    |\n//                      |            |    |\n//                      +-----+      |    |\n//                            |      |    |\n//                            V      V    V\n//                           +-------------+\n//                           |     CMP     |\n//                           +-------------+\n//\n// The AND node may be safely removed for some combinations of inputs. In\n// particular we need to take into account the extension type of the Input,\n// the exact values of AddConstant, CompConstant, and CC, along with the nominal\n// width of the input (this can work for any width inputs, the above graph is\n// specific to 8 bits.\n//\n// The specific equations were worked out by generating output tables for each\n// AArch64CC value in terms of and AddConstant (w1), CompConstant(w2). The\n// problem was simplified by working with 4 bit inputs, which means we only\n// needed to reason about 24 distinct bit patterns: 8 patterns unique to zero\n// extension (8,15), 8 patterns unique to sign extensions (-8,-1), and 8\n// patterns present in both extensions (0,7). For every distinct set of\n// AddConstant and CompConstants bit patterns we can consider the masked and\n// unmasked versions to be equivalent if the result of this function is true for\n// all 16 distinct bit patterns of for the current extension type of Input (w0).\n//\n//   sub      w8, w0, w1\n//   and      w10, w8, #0x0f\n//   cmp      w8, w2\n//   cset     w9, AArch64CC\n//   cmp      w10, w2\n//   cset     w11, AArch64CC\n//   cmp      w9, w11\n//   cset     w0, eq\n//   ret\n//\n// Since the above function shows when the outputs are equivalent it defines\n// when it is safe to remove the AND. Unfortunately it only runs on AArch64 and\n// would be expensive to run during compiles. The equations below were written\n// in a test harness that confirmed they gave equivalent outputs to the above\n// for all inputs function, so they can be used determine if the removal is\n// legal instead.\n//\n// isEquivalentMaskless() is the code for testing if the AND can be removed\n// factored out of the DAG recognition as the DAG can take several forms.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/AArch64/AArch64SVEInstrInfo.td#L13-L26",
    "ascii": "// For predicated nodes where the entire operation is controlled by a governing\n// predicate, please stick to a similar naming convention as used for the\n// ISD nodes:\n//\n//    SDNode      <=>     AArch64ISD\n//    -------------------------------\n//    _m<n>       <=>     _MERGE_OP<n>\n//    _mt         <=>     _MERGE_PASSTHRU\n//    _z          <=>     _MERGE_ZERO\n//    _p          <=>     _PRED\n//\n//  Given the context of this file, it is not strictly necessary to use _p to\n//  distinguish predicated from unpredicated nodes given that most SVE\n//  instructions are predicated.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/AArch64/AArch64SVEInstrInfo.td"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp#L3616-L3695",
    "ascii": "// The diagram below shows the steps involved in the conversion of a predicated\n// store instruction to its .new predicated new-value form.\n//\n// Note: It doesn't include conditional new-value stores as they can't be\n// converted to .new predicate.\n//\n//               p.new NV store [ if(p0.new)memw(R0+#0)=R2.new ]\n//                ^           ^\n//               /             \\ (not OK. it will cause new-value store to be\n//              /               X conditional on p0.new while R2 producer is\n//             /                 \\ on p0)\n//            /                   \\.\n//     p.new store                 p.old NV store\n// [if(p0.new)memw(R0+#0)=R2]    [if(p0)memw(R0+#0)=R2.new]\n//            ^                  ^\n//             \\                /\n//              \\              /\n//               \\            /\n//                 p.old store\n//             [if (p0)memw(R0+#0)=R2]\n//\n// The following set of instructions further explains the scenario where\n// conditional new-value store becomes invalid when promoted to .new predicate\n// form.\n//\n// { 1) if (p0) r0 = add(r1, r2)\n//   2) p0 = cmp.eq(r3, #0) }\n//\n//   3) if (p0) memb(r1+#0) = r0  --> this instruction can't be grouped with\n// the first two instructions because in instr 1, r0 is conditional on old value\n// of p0 but its use in instr 3 is conditional on p0 modified by instr 2 which\n// is not valid for new-value stores.\n// Predicated new value stores (i.e. if (p0) memw(..)=r0.new) are excluded\n// from the \"Conditional Store\" list. Because a predicated new value store\n// would NOT be promoted to a double dot new store. See diagram below:\n// This function returns yes for those stores that are predicated but not\n// yet promoted to predicate dot new instructions.\n//\n//                          +---------------------+\n//                    /-----| if (p0) memw(..)=r0 |---------\\~\n//                   ||     +---------------------+         ||\n//          promote  ||       /\\       /\\                   ||  promote\n//                   ||      /||\\     /||\\                  ||\n//                  \\||/    demote     ||                  \\||/\n//                   \\/       ||       ||                   \\/\n//       +-------------------------+   ||   +-------------------------+\n//       | if (p0.new) memw(..)=r0 |   ||   | if (p0) memw(..)=r0.new |\n//       +-------------------------+   ||   +-------------------------+\n//                        ||           ||         ||\n//                        ||         demote      \\||/\n//                      promote        ||         \\/ NOT possible\n//                        ||           ||         /\\~\n//                       \\||/          ||        /||\\~\n//                        \\/           ||         ||\n//                      +-----------------------------+\n//                      | if (p0.new) memw(..)=r0.new |\n//                      +-----------------------------+\n//                           Double Dot New Store\n//\n// Returns the most basic instruction for the .new predicated instructions and\n// new-value stores.\n// For example, all of the following instructions will be converted back to the\n// same instruction:\n// 1) if (p0.new) memw(R0+#0) = R1.new  --->\n// 2) if (p0) memw(R0+#0)= R1.new      -------> if (p0) memw(R0+#0) = R1\n// 3) if (p0.new) memw(R0+#0) = R1      --->\n//\n// To understand the translation of instruction 1 to its original form, consider\n// a packet with 3 instructions.\n// { p0 = cmp.eq(R0,R1)\n//   if (p0.new) R2 = add(R3, R4)\n//   R5 = add (R3, R1)\n// }\n// if (p0) memw(R5+#0) = R2 <--- trying to include it in the previous packet\n//\n// This instruction can be part of the previous packet only if both p0 and R2\n// are promoted to .new values. This promotion happens in steps, first\n// predicate register is promoted to .new and in the next iteration R2 is\n// promoted. Therefore, in case of dependence check failure (due to R5) during\n// next iteration, it should be converted back to its most basic form.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp#L58-L102",
    "ascii": "// Here's a delta network for 8 inputs, only the switching routes are\n// shown:\n//\n//         Steps:\n//         |- 1 ---------------|- 2 -----|- 3 -|\n//\n// Inp[0] ***                 ***       ***   *** Out[0]\n//           \\               /   \\     /   \\ /\n//            \\             /     \\   /     X\n//             \\           /       \\ /     / \\\n// Inp[1] ***   \\         /   ***   X   ***   *** Out[1]\n//           \\   \\       /   /   \\ / \\ /\n//            \\   \\     /   /     X   X\n//             \\   \\   /   /     / \\ / \\\n// Inp[2] ***   \\   \\ /   /   ***   X   ***   *** Out[2]\n//           \\   \\   X   /   /     / \\     \\ /\n//            \\   \\ / \\ /   /     /   \\     X\n//             \\   X   X   /     /     \\   / \\\n// Inp[3] ***   \\ / \\ / \\ /   ***       ***   *** Out[3]\n//           \\   X   X   X   /\n//            \\ / \\ / \\ / \\ /\n//             X   X   X   X\n//            / \\ / \\ / \\ / \\\n//           /   X   X   X   \\\n// Inp[4] ***   / \\ / \\ / \\   ***       ***   *** Out[4]\n//             /   X   X   \\     \\     /   \\ /\n//            /   / \\ / \\   \\     \\   /     X\n//           /   /   X   \\   \\     \\ /     / \\\n// Inp[5] ***   /   / \\   \\   ***   X   ***   *** Out[5]\n//             /   /   \\   \\     \\ / \\ /\n//            /   /     \\   \\     X   X\n//           /   /       \\   \\   / \\ / \\\n// Inp[6] ***   /         \\   ***   X   ***   *** Out[6]\n//             /           \\       / \\     \\ /\n//            /             \\     /   \\     X\n//           /               \\   /     \\   / \\\n// Inp[7] ***                 ***       ***   *** Out[7]\n//\n//\n// Reverse delta network is same as delta network, with the steps in\n// the opposite order.\n//\n//\n// Benes network is a forward delta network immediately followed by\n// a reverse delta network.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/Hexagon/HexagonScheduleV60.td#L10-L53",
    "ascii": "// There are four SLOTS (four parallel pipelines) in Hexagon V60 machine.\n// This file describes that machine information.\n//\n//    |===========|==================================================|\n//    | PIPELINE  |              Instruction Classes                 |\n//    |===========|==================================================|\n//    | SLOT0     |  LD       ST    ALU32     MEMOP     NV    SYSTEM |\n//    |-----------|--------------------------------------------------|\n//    | SLOT1     |  LD       ST    ALU32                            |\n//    |-----------|--------------------------------------------------|\n//    | SLOT2     |  XTYPE          ALU32     J         JR           |\n//    |-----------|--------------------------------------------------|\n//    | SLOT3     |  XTYPE          ALU32     J         CR           |\n//    |===========|==================================================|\n//\n//\n// In addition to using the above SLOTS, there are also six vector pipelines\n// in the CVI co-processor in the Hexagon V60 machine.\n//\n//      |=========| |=========| |=========| |=========| |=========| |=========|\n// SLOT | CVI_LD  | |CVI_MPY3 | |CVI_MPY2 | |CVI_SHIFT| |CVI_XLANE| | CVI_ST  |\n// ==== |=========| |=========| |=========| |=========| |=========| |=========|\n// S0-3 |         | | CVI_VA  | | CVI_VA  | | CVI_VA  | | CVI_VA  | |         |\n// S2-3 |         | | CVI_VX  | | CVI_VX  | |         | |         | |         |\n// S0-3 |         | |         | |         | |         | | CVI_VP  | |         |\n// S0-3 |         | |         | |         | | CVI_VS  | |         | |         |\n// S0-1 |(CVI_LD) | | CVI_LD  | | CVI_LD  | | CVI_LD  | | CVI_LD  | |         |\n// S0-1 |(C*TMP_LD) |         | |         | |         | |         | |         |\n// S01  |(C*_LDU) | |         | |         | |         | | C*_LDU  | |         |\n// S0   |         | | CVI_ST  | | CVI_ST  | | CVI_ST  | | CVI_ST  | |(CVI_ST) |\n// S0   |         | |         | |         | |         | |         | |(C*TMP_ST)\n// S01  |         | |         | |         | |         | | VSTU    | |(C*_STU) |\n//      |=========| |=========| |=========| |=========| |=========| |=========|\n//                  |=====================| |=====================|\n//                  | CVI_MPY2 & CVI_MPY3 | |CVI_XLANE & CVI_SHIFT|\n//                  |=====================| |=====================|\n// S0-3             | CVI_VA_DV           | | CVI_VA_DV           |\n// S0-3             |                     | | CVI_VP_DV           |\n// S2-3             | CVI_VX_DV           | |                     |\n//                  |=====================| |=====================|\n//      |=====================================================================|\n// S0-3 | CVI_HIST   Histogram                                                |\n// S0123| CVI_VA_EXT Extract                                                  |\n//      |=====================================================================|\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/Hexagon/HexagonScheduleV60.td"
  },
  {
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/M68k/M68kInstrBits.td#L30-L34",
    "ascii": "/// ------------+---------+---------+---------+---------\n///  F  E  D  C | B  A  9 | 8  7  6 | 5  4  3 | 2  1  0\n/// ------------+---------+---------+---------+---------\n///  0  0  0  0 |   REG   | 1  0  0 |   MODE  |   REG\n/// ------------+---------+---------+---------+---------\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/M68k/M68kInstrBits.td"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/cc/framework/gradients_test.cc#L62-L85",
    "ascii": "// Example:\n//      ^             ^\n//    dy|           dx|        (MatMul Gradient Graph)\n//      |             |\n//   MatMul_1      MatMul_2\n//   ^   ^          ^    ^\n//   |   |----------|    |\n//   |        ^          |\n//   |      dz|          |\n//   |        |          |\n//   |     Const_3       |\n//   |                   |\n//   |        ^          |\n//   |       z|          |     (MatMul Forward Graph)\n//   |        |          |\n//   |      MatMul_0     |\n//   |     /        \\    |\n//   |    ^          ^   |\n//   |    |          |   |\n//   |---x|         y|---|\n//        |          |\n//        |          |\n//      Const_0   Const_1\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/cc/framework/gradients_test.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/delegates/gpu/common/gpu_model_test_util.h#L162-L168",
    "ascii": "//     input1\n//       |\n//     slice\n//       |\n//      cast\n//       |\n//     output\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/gpu/common/gpu_model_test_util.h"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5df523bc6c46c59b28ffda506ede94f14660997a/tensorflow/lite/delegates/gpu/common/model_builder.cc#L1350-L1377",
    "ascii": "// Basic LSTM Cell:\n//\n//  1name = name is at input  index 1\n//  name1 = name is at output index 1\n//\n//    0input     1prev_activ\n//       \\        /\n//        [[concat]]\n//             \\\n//       concat_temp2  2weights  3biases\n//              \\      /        /\n//             [[fully-connected]]\n//               \\\n//         activ_temp3    4prev_state\n//                 \\      /\n//                 [[LSTM]]\n//                 /      \\\n//           new_state1    activation0\n//\n// For full LSTM cells, see this blog post:\n// https://colah.github.io/posts/2015-08-Understanding-LSTMs/\n// In addition to Peephole connections and Combined Input Forget Gates (CIFG)\n// described in that post, this code also adds the following optional features:\n// - Configurable activations (sigmoid or TANH)\n// - L2 Normalization of gates: https://arxiv.org/abs/1607.06450\n// - Output projection:\n//     https://www.isca-speech.org/archive/interspeech_2014/i14_0338.html\n// - Configurable clipping of cell state and output state.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/gpu/common/model_builder.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/delegates/gpu/gl/compiler/fuse_auto_input.h#L26-L39",
    "ascii": "// Fuses nodes that have auto output with auto input node using the following\n// rules.\n//\n// Source graph:\n//   A B C\n//   \\ | /\n//     D\n//\n// - A, B and C each have a single output marked as AUTO\n// - Each output is used only by D\n// - D has all inputs marked as AUTO\n//\n// Result: in the best case a single node that does (A,B,C)+D operations.\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/gpu/gl/compiler/fuse_auto_input.h"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/delegates/gpu/gl/kernels/lstm.cc#L32-L44",
    "ascii": "// Basic LSTMCell gates.\n//\n//  inputs:  0             1\n//           activ_temp    prev_state\n//                  \\      /\n//               [[LSTM gates]]\n//                  /      \\\n//            new_state    activation\n//  outputs:  0            1\n//\n// The size of activ_temp should be 4x size of new_state.\n// The size of prev_state == new_state == activation.\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/gpu/gl/kernels/lstm.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/delegates/nnapi/nnapi_delegate_device_selection_test.cc#L364-L372",
    "ascii": "// This is a model with two ops:\n//\n//  input1 ---->\n//                ADD --\n//  input2   -->        |\n//                       -->\n//                          SUB --> output\n//  input3 ---------------->\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/nnapi/nnapi_delegate_device_selection_test.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/experimental/acceleration/mini_benchmark/model_modifier/custom_validation_embedder.h#L29-L52",
    "ascii": "// Create a model with custom validation graph.\n//\n// 'validation model' (new subgraph)\n// input (batch_size)\n//           |\n// +-----------------------+\n// |'main_model' (0)       |\n// | +---------------+     |\n// | |input          +---+ |\n// | +---------------+   | |\n// |                     ~ |\n// | +---------------+   | |\n// | |outputs        +<--+ |\n// | +---------------+     |\n// |                       |\n// +-----------------------+\n//           |\n// output (batch_size)\n//\n// The new model contains all the information from main_model, with an extra\n// subgraph for validation purposes. The validation graph calls the primary\n// subgraph with batch_size. The input data is embedded to the validation graph.\n// custom_input should have the same order as the input in the main_model. E.g.\n// custom_input[i] will be mapped to main_model.input[i].\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/experimental/acceleration/mini_benchmark/model_modifier/custom_validation_embedder.h"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/experimental/acceleration/mini_benchmark/model_modifier/validation_graph_builder.h#L36-L90",
    "ascii": "// Class for building the validation entry-point graph that calls into the main\n// graph and a metrics graph. Like this (boxes are tensors with plural names\n// meaning possibly multiple tensors, arrows are ops and numbers in parentheses\n// are subgraph indices):\n// +--------------------------------------+\n// | Graph created by this class (1)      |\n// |                                      |\n// | +-----------input-+                  |\n// | |jpeg input       |                  |\n// | +-----+-----------+                  |\n// |       |                              |\n// |       | decode                       |\n// |       v                              |\n// | +-----+-----------+                  |\n// | |quantized image  |                  |\n// | +-----+-----------+                  |  +-----------------------+\n// |       |                              |  |'main_model' (0)       |\n// |       | dequantize (optional)        |  | +---------------+     |\n// |       v                              |  | |input          +---+ |\n// | +-----+-----------+                  |  | +---------------+   | |\n// | |float image      |                  |  |                     ~ |\n// | +-----+-----------+                  |  | +---------------+   | |\n// |       |  call                        |  | |outputs        +<--+ |\n// |       +<------------------------------->+ +---------------+     |\n// |       v                              |  |                       |\n// | +-----+-----output+ +---------input+ |  +-----------------------+\n// | |actual outputs   | |golden outputs| |\n// | +-----+-----------+ +-----------+--+ |\n// |       |                         |    |\n// |       | dequantize (optional)   |    |\n// |       |                         |    |\n// | +-----+-------------------------+-+  |\n// | | dequantized actual and golden   |  |\n// | | outputs (validation inputs)     |  |\n// | +-----+---------------------------+  |  +-----------------------+\n// |       |  call                        |  |'validation model' (2) |\n// |       +<------------------------------->+                       |\n// |       v                              |  | +---------------+     |\n// | +-----+-----output+                  |  | |inputs         +---+ |\n// | |results          |                  |  | +---------------+   | |\n// | +-----------------+                  |  |                     ~ |\n// |                                      |  | +---------------+   | |\n// |                                      |  | |outputs        +<--+ |\n// |                                      |  | +---------------+     |\n// |                                      |  |                       |\n// +--------------------------------------+  +-----------------------+\n//\n// It's important the 'main_model' has subgraph index 0 so that it is used as\n// the primary subgraph by the TFLite interpreter. The other indices are\n// arbitrary.\n// TODO(b/172541832): Handle a main model with more than one subgraph.\n//\n// Note that the jpeg input is marked as an input in this graph, as TFLite\n// graphs must have inputs. However, it will be pre-filled from the jpeg_data\n// and doesn't need to be filled by the user of the model.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/experimental/acceleration/mini_benchmark/model_modifier/validation_graph_builder.h"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/mlir/tensorflow/transforms/legalize_hlo.cc#L1501-L1510",
    "ascii": "// Matches %iota generated from the following mlir codes (rank 2 example):\n//\n// %iota = mhlo.constant dense<[[0, 1, 2, ..., L],\n//                              [0, 1, 2, ..., L]\n//                              ...\n//                              [0, 1, 2, ..., L]]>,\n// where $dimensions is of size 1.\n//\n// StridedArrayViews are used to check the iota property across the constant\n// data so that the iota dimension does not need to be the (inner) z-dimension.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/mlir/tensorflow/transforms/legalize_hlo.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/mlir/tensorflow/transforms/legalize_hlo_patterns.td#L422-L446",
    "ascii": "// Converts a dag of HLOs representing floor_div to tf.FloorDiv.\n// The pattern matched executes the following computation:\n//\n// rem = remainder(arg0, arg1)\n// for i in 0 to len(arg1):\n//    rem[i] = arg0[i] - rem[i] / arg1[i]\n//    if (rem[i] != 0 && sign(arg1[i]) != sign(rem[i]))\n//       rem[i] -= 1.0\n// return round_nearest_afz(rem)\n// As a dag this looks like the following:\n//                       round\n//                         |\n//              -------- select\n//              |          |    \\\n//             &&          +    div\n//           /   |        / \\\n//        !=    !=       div -1\n//       / |   / |      / |\n//    rem 0.0 sn sn1    -  $1\n//   / |      |  |    / |\n// $0 $1     $1 rem  $0 rem\n// Note that named operators like 'sn' and 'sn1' are different values produced by\n// the same function in this case the sign function. Named values like 'div'\n// refer to the same value produced by the same function, in this case division.\n// Mathematical symbols do not indicate a re-use of the value.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/mlir/tensorflow/transforms/legalize_hlo_patterns.td"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/mlir/tensorflow/transforms/lower_tf.cc#L210-L248",
    "ascii": "// Lowers AddN op to a sequence of AddV2 ops to accumulate operands.\n//\n// Note that to improve the parallelism, AddN op uses tree-based reduction.\n// For example, tf.AddN([0, 1, 2, 3, 4]) behaves as follows:\n//\n//                 0     1     2     3     4\n//                 |     |     |     |     |\n//                 -------     -------     |\n//                    |           |        |\n//                    5           6        |\n//                    |           |        |\n//                    -------------        |\n//                          |              |\n//                          7              |\n//                          |              |\n//                          ----------------\n//                                 |\n//                                 8\n//\n// Example:\n//\n//   %result = \"tf.AddN\"(%0, %1, %2)\n//\n// is lowered to:\n//\n//   %sum0 = \"tf.AddV2\"(%0, %1)\n//   %result = \"tf.AddV2\"(%sum0, %2)\n//\n// While\n//\n//   %result = \"tf.AddN\"(%0, %1, %2, %3, %4)\n//\n// is lowered to:\n//\n//   %sum0 = \"tf.AddV2\"(%0, %1)\n//   %sum1 = \"tf.AddV2\"(%2, %3)\n//   %sum2 = \"tf.AddV2\"(%sum0, %sum1)\n//   %result = \"tf.AddV2\"(%sum2, %4)\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/mlir/tensorflow/transforms/lower_tf.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/mlir/tensorflow/transforms/merge_control_flow.cc#L218-L229",
    "ascii": "// Return the iterator of the IfRegion Op. This is the last IfRegion\n// in the segment.\n// For example, we have the following sequence of IfRegions\n// `````\n//      1          2          3         4           5\n// IfRegionA, IfRegionA, IfRegionA, IfRegionA, IfRegionA\n// `````\n// The first three IfRegionA are in one group and the last two are in another\n// group. Then when we call FindLastIfInSegment for the first segment, it\n// will return iterator of the 3rd IfRegionA.\n// In the same way, when we call it for the second segment, it will return\n// iterator of the 5th IfRegionA.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/mlir/tensorflow/transforms/merge_control_flow.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/tf2xla/kernels/image_resize_ops.cc#L41-L80",
    "ascii": "// We implement bilinear interpolation by upsampling followed by convolution.\n// The basic idea is as follows. To scale from NxN to RxR:\n//\n//    1. S := (N - 1) /  gcd(N-1, R-1)\n//    2. k := (R - 1) /  gcd(N-1, R-1)\n//    3. Convolution((2k-1)x(2k-1), stride=S, lhs_dilation=k, padding=k-1)\n//\n// For example, to Scale from 7x7 -> 15x15:\n//\n//    1. S := (7-1) / gcd(7-1, 15-1) = 6 / gcd(6, 14) = 6 / 2 = 3\n//    2. k := (15 - 1) / gcd(7-1, 15-1) = 14 / gcd(6, 14) = 14 / 2 = 7\n//    3. Convolution(15x15, stride=3, lhs_dilation=7, padding=2)\n//\n//\n// The 7x7 -> 15x15 case is much too large to write out in full as an\n// example. The smallest interesting example is 3x3 -> 4x4.\n//\n// S := 2\n// k := 3\n//\n// 00 03 06    00 00 00 00 00 00 00 00 00 00 00      00 02 04 06\n// 09 12 15 -> 00 00 00 00 00 00 00 00 00 00 00   -> 06 08 10 12\n// 18 21 24    00 00 00 00 00 03 00 00 06 00 00      12 14 16 18\n//             00 00 00 00 00 00 00 00 00 00 00      18 20 22 24\n//             00 00 00 00 00 00 00 00 00 00 00\n//             00 00 09 00 00 12 00 00 15 00 00\n//             00 00 00 00 00 00 00 00 00 00 00\n//             00 00 00 00 00 00 00 00 00 00 00\n//             00 00 18 00 00 21 00 00 24 00 00\n//             00 00 00 00 00 00 00 00 00 00 00\n//             00 00 00 00 00 00 00 00 00 00 00\n//\n// with the following convolutional kernel, with stride [2, 2]:\n//       1 2 3 2 1\n//       2 4 6 4 2\n// 1/9 * 3 6 9 6 3\n//       2 4 6 4 2\n//       1 2 3 2 1\n// Note that the convolution kernel matrix is separable and thus we can instead\n// use 2 consecutive 1D kernel of the dimension 2k-1, along each axis.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/tf2xla/kernels/image_resize_ops.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/jit/deadness_analysis.cc#L33-L112",
    "ascii": "// ALGORITHM OVERVIEW\n// ==================\n//\n// We map every output produced by each node in the TensorFlow graph (including\n// control dependence) into an instance of the Predicate class.  Instances of\n// Predicate denote logical formulas and mapping a node `n` to a predicate\n// `pred` implies that `n` is live whenever `pred` is true.  Then we can deduce\n// mismatching liveness in the inputs to node by comparing the predicate those\n// inputs are mapped to.  The core logic of this pass resides in creating the\n// map from TensorFlow nodes to predicates.\n//\n//\n// MAPPING NODES TO PREDICATES, MODULO CYCLES\n// ------------------------------------------\n//\n// If we ignore cycles for a moment, computing predicates is fairly\n// straightforward.  We traverse the graph in a topological order, mapping each\n// node to a predicate based on the predicates its inputs are mapped to.  For\n// instance a Merge(X, Y) node will be mapped to OR(PredicateFor(X),\n// PredicateFor(Y)).  Roughtly speaking, we abstractly interpret each node on\n// the \"liveness\" domain, where values in the domain represent if a tensor\n// carries a dead signal or not.\n//\n//\n// DEALING WITH CYCLES\n// -------------------\n//\n// We map Merge nodes that are the target of a backedge to AndRecurrence\n// instances.  An AndRecurrence with start() = S and step() = X, printed as\n// {S,&,X}, *roughly* represents the infinite list of predicates\n// [S,S&X,S&X&X,S&X&X, ...].  So {S,&,X} can be used to represent the predicate\n// for Merge in a graph like:\n//\n//     Init\n//       |\n//       v\n//     Merge <-----------+\n//       |               |\n//       v               |\n//      Incr             |\n//       |               |\n//       v               |\n//      Switch <- Cond   |\n//       |               |\n//       v (oidx: 1)     |\n//       |               |\n//       +---------------+\n//\n// Where S is the predicate for Init and X is the predicate that asserts that\n// Cond is true.  {S,&,X} states that Merge is live on the first \"iteration\" iff\n// S is true, live on the second iteration iff \"S&X\" is true, live on the third\n// iteration iff \"S&X&X\" is true etc.  There is a subtlety here, S&X&X would\n// normally be equivalent to S&X which isn't quite what we want to represent.\n// Instead we want {S,&,X} to denote the infinite list [S, S&X,\n// S&X&X',S&X&X'&X'', ...] where X, X', X'' are predicates that assert Cond is\n// true on iteration 0, 1, 2 respectively.  This is made more precise in the\n// comment on the AndRecurrence class.\n//\n// The general algorithm that deals with cycles does two topological-order\n// iterations over the graph.  On the first iteration it assigns a symbolic\n// predicate to merge nodes with backedges.  On the second iteration it tries\n// to pattern match the predicates for the backedges of these merges and infer\n// an AndRecurrence for the merge.  In other words, we do a data flow analysis\n// where the data-flow lattice has two elements, Symbolic and NonSymbolic with\n// Symbolic > NonSymbolic.  The lattice has height = 2 so two iterations are\n// sufficient to converge.\n//\n// We first do an optimistic analysis and, if it does not converge, we then fall\n// back to a pessimistic analysis.  The optimistic analysis assigns the same\n// symbolic predicate to all the merge nodes whose preceding enter nodes have\n// the same frame name on the first iteration.  On the second iteration, if all\n// the merge nodes are pattern matched into the same AndRecurrence predicate\n// instance, the optimistic assignment of the same symbolic predicate is correct\n// and the analyzed result is taken.\n//\n// Otherwise, if the optimistic analysis fails to converge, we then obtain the\n// result by falling back to the pessimistic analysis which assigns a unique\n// symbolic predicate to each merge on the first iteration.  We still use\n// symbolic predicates for merges for which we can't pattern match on the\n// backedge predicate.  This is conservatively correct.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/jit/deadness_analysis.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/tf2xla/kernels/tensor_list_utils.cc#L30-L107",
    "ascii": "// TensorList is represented by a tuple.\n// - The first part of the tuple is a buffer containing all the tensors,\n// - The following parts are push indices for all nested levels of\n//   TensorLists. The last part is push index for the outermost TensorList.\n//\n// TensorList, as it name suggests, is conceptually a list of tensors. In actual\n// representation of a non-nested TensorList, the buffer shape is\n// [element_shape, tensor_list_size]. We will call tensor_list_size \"leading\n// dimension\" below. Notice that the leading dimension must be a compile time\n// constant, since it's part of the buffer shape.\n//\n// Example: consider a 3-level nested TensorList whose element type is scalar.\n// Assume inner TensorList has leading dimension 4, middle TensorList has 3,\n// and outer TensorList has 3.\n// Assume that lower cased letter means there is data in that position, and \".\"\n// means there is no data in that position.\n// First element of outer TensorList:\n// [ a . . . ]\n// [ b c . . ]\n// [ d e f . ]\n// Second element of outer TensorList:\n// [ g h i . ]\n// [ j k . . ]\n// [ . . . . ]\n// Third element: not pushed yet.\n//\n// The first part of the tuple is an array of shape [3, 3, 4] containing data.\n// The second part is an array of shape [3, 3], each element is push index\n// for the inner TensorList. In this case, its values are:\n// [ 1 2 3 ]\n// [ 3 2 . ]\n// [ . . . ]\n// The third part is an array of shape [3], each element is push index for\n// the middle TensorList. In this case, its values are:\n// [ 3 ]\n// [ 2 ]\n// [ . ]\n// The forth (and last) part is a scalar. It's the push index for the outer\n// TensorList. In this case, its values is 2.\n//\n// Now imagine we need to push the following element to the outer TensorList:\n// [ l . . . ]\n// [ m n . . ]\n// [ . . . . ]\n// This element is represented by a tuple of 3 parts:\n// First part is all data.\n// Second part is push indices for the inner TensorList, which is [ 1 2 . ].\n// Third part is push index for the middle TensorList, which is 2.\n// Now let's do the push.\n// First, we append its data to outer TensorList's data.\n// Then we start to deal with push indices. Similar to data, we append push\n// indices for each level of TensorList.\n// For the inner TensorList: append push indices for the pushed element.\n// [ 1 2 3 ]               [ 1 2 3 ]\n// [ 3 2 . ] +           = [ 3 2 . ]\n// [ . . . ]   [ 1 2 . ]   [ 1 2 . ]\n// For the middle TensorList: append push indices for the pushed element.\n// [ 3 ]           [ 3 ]\n// [ 2 ] +       = [ 2 ]\n// [ . ]   [ 2 ]   [ 2 ]\n// For the outer TensorList: just add 1.\n// 2 + 1 = 3\n//\n// Popping an element from the outer TensorList also follows a similar process.\n// First part is data. We get data by slicing data with push index for outer\n// TensorList (which is 3).\n// Second part is push indices for inner TensorList. We get it by slicing\n// push indices for inner TensorList with push index for outer TensorList (which\n// is 3).\n// [ 1 2 3 ]\n// [ 3 2 . ]\n// [ 1 2 . ] ===> This is what we want\n// Third part is push index for middle TensorList. We get it by slicing\n// push indices for middle TensorList with push index for outer TensorList\n// (which is 3).\n// [ 3 ]\n// [ 2 ]\n// [ 2 ] ===> This is what we want\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/tf2xla/kernels/tensor_list_utils.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/70167ab277e1f2d6d62ff10df79d8af699d5ecaf/tensorflow/compiler/xla/service/algebraic_simplifier.cc#L5551-L5566",
    "ascii": "// Match on variadic reduce which computes and returns (min, arg_min).\n//\n//                   p0   p2    p1    p3\n//                  /|\\ \\/ |\\    |\\   /|\n//                 / | \\/\\ | \\   | \\ / |\n//                /  | /\\ \\|  |  |  /\\ |\n//               Ne  Lt |  \\  |  | |  ||\n//                 \\ /  |  |\\ |  | /  ||\n//                  Or /  /  Eq  Lt   ||\n//                  | /  /    \\  /    //\n//                  | |  |     And   //\n//                  | |  |      |  //\n//                  select     select\n//                      \\     /\n//                       tuple\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/algebraic_simplifier.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/convolution_group_converter.cc#L129-L165",
    "ascii": "// Create a mask for grouped convolution that will make a normal convolution\n// produce the same results as a grouped convolution. For a [2, 1, 6]\n// filter this returns a [2, 3, 6] mask\n//   1 1 0 0 0 0\n//   0 0 1 1 0 0\n//   0 0 0 0 1 1\n//\n//   1 1 0 0 0 0\n//   0 0 1 1 0 0\n//   0 0 0 0 1 1\n//\n// The first step is to create a rank 1 constant:\n//   0 1 2\n//\n// This is broadcasted to\n//   0 0 0 0 0 0\n//   1 1 1 1 1 1\n//   2 2 2 2 2 2\n//\n//   0 0 0 0 0 0\n//   1 1 1 1 1 1\n//   2 2 2 2 2 2\n//\n// Then we create another rank 1 constant\n//   0 0 1 1 2 2\n//\n// This is broadcasted to\n//   0 0 1 1 2 2\n//   0 0 1 1 2 2\n//   0 0 1 1 2 2\n//\n//   0 0 1 1 2 2\n//   0 0 1 1 2 2\n//   0 0 1 1 2 2\n//\n// Finally we use the Eq op of these two broadcasted constants and get the\n// desired mask.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/convolution_group_converter.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/copy_insertion.cc#L101-L138",
    "ascii": "// Deep copy the given instructions 'from' and 'to' at the ShapeIndexes given in\n// 'indices_to_copy'. Add control edges from the respective kCopy instructions\n// in deep copy of 'from' to the respective kCopy instruction in the deep copy\n// of 'to'.\n//\n// Requirements: 'from' and 'to' must have compatible shapes.\n//\n// For example, suppose 'from' and 'to' are two-element tuples where index 0 is\n// the only index to copy. Prior to deep-copying we have:\n//\n//\n//      'from'\n//         |\n//        ...\n//         |\n//       'to'\n//\n// DeepCopyAndAddControlEdges produces:\n//\n//       'from'\n//        /   \\\n//      GTE   GTE\n//       |     |\n//     Copy    |\n//    /   \\   /\n//   |    Tuple\n//   |      |\n//  ctrl   ...\n//  edge    |\n//   |      |\n//   |    'to'\n//   |    /   \\\n//   |  GTE   GTE\n//    \\  |     |\n//     Copy    |\n//        \\   /\n//        Tuple\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/copy_insertion.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/copy_insertion_test.cc#L722-L729",
    "ascii": "// Tests Copy Insertion when a while feeds another while\n//                         PARAMETER\n//                        |        |\n//                        GTE(0)   GTE(1)\n//                        |        |\n//                        X = CreateTuple(GTE(0), GTE(1))\n//                                 |\n//                        WHILE(X) (root)\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/copy_insertion_test.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/flatten_call_graph_test.cc#L194-L203",
    "ascii": "// Test flattening of a nested calling computations.\n//\n//   Entry\n//    / \\\n//    \\ /\n//     B\n//    / \\\n//    \\ /\n//     C\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/flatten_call_graph_test.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/hlo_memory_scheduler.cc#L47-L75",
    "ascii": "// Class implementing a list scheduler of HLO instructions which produces a\n// sequence which minimizes memory usage by preferring to schedule the node that\n// frees bigger buffer and defines smaller outputs.\n//\n// Note that list scheduler is a greedy algorithm which cannot guarantee a\n// global optimal solution. As a counterexample, considering the following\n// graph:\n//\n//      +--> B ===> C -------+\n// A -> |                    |\n//      |                    v\n//      +--> D ---> F=======>G\n//      |           ^\n//      |           |\n//      +--> E -----+\n//\n//  --> : Buffer with size 1\n//  ==> : Buffer with size 2\n//\n// The list scheduler will always try to defer scheduling B in a greedy way\n// since its output buffer is bigger than input. The sequence it creates will\n// be:\n//   A D E F B C G\n// , which has a maximum memory usage of 6 (B is alive while F is executing).\n//\n// An optimal way to schedule the previous graph is:\n//   A B C D E F G\n// , which has a maximum memory usage of 5 (when F is executing).\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/hlo_memory_scheduler.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/hlo_rematerialization.cc#L194-L205",
    "ascii": "// Class which maintains an ordered list of instructions with fast insertion\n// before arbitrary elements.\n//\n// This is a skip list structure that has two lanes: express lane and slow lane.\n// All nodes are presented on the slow lane but a node can be promoted into\n// express lane for fast iteration.\n//\n// In the following case, node 2 and node + 1 are connected via an express lane.\n//                    +--------------------------+----------->: Express lane\n//                    |                          |\n//       node1<-> node 2 <-> .. <-> node n <-> node n+1 <->...: Slow lane\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/hlo_rematerialization.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/reshape_mover_test.cc#L479-L491",
    "ascii": "// Tree looks like this:\n//\n// add1\n// |\n// +- reshape2 - param2\n// |\n// +- reshape3 - add0\n//               |\n//               + reshape0 - param0\n//               |\n//               + reshape1 - param1\n//\n// We expect reshape{0,1} AND reshape{2,3} to be lifted.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/reshape_mover_test.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/cpu/tiled_dot_emitter.cc#L160-L220",
    "ascii": "// Computes a dot product between \"[M,K]{0,1} lhs\" with a [K,1] vector (the\n// layout of the vector does not matter).  This implementation uses a tiling\n// scheme to improve performance.\n//\n// We logically separate the LHS matrix into four segments:\n//\n//   +----------------------+---+\n//   |                      |   |\n//   |                      |   |\n//   |         A            | B |\n//   |                      |   |\n//   |                      |   |\n//   |                      |   |\n//   +----------------------+---+\n//   |         C            | D |\n//   +----------------------+---+\n//\n// where A is the largest submatrix of the LHS that can be evenly divided into\n// tiles.  For each tile in A, assuming tile_rows_ == tile_cols_ == 4, we have:\n//\n//   +---+---+---+---+       +--+--+--+--+\n//   |M00|M10|M20|M30|       |V0|V1|V2|V3|\n//   +---+---+---+---+       +--+--+--+--+\n//   |M01|M11|M21|M31| and   |V0|V1|V2|V3|\n//   +---+---+---+---+       +--+--+--+--+\n//   |M02|M12|M22|M32|       |V0|V1|V2|V3|\n//   +---+---+---+---+       +--+--+--+--+\n//   |M03|M13|M23|M33|       |V0|V1|V2|V3|\n//   +---+---+---+---+       +--+--+--+--+\n//\n// (Legend: rows are horizontal and columns are vertical; and each column is one\n// llvm::Value of a vector type)\n//\n// where:\n//\n//   a. The left tile is from the column major left matrix.\n//   b. The right tile is an elementwise broadcast of a [V0, V1, V2, V3]\n//      vector loaded from the RHS vector.\n//\n// As we iterate through the column dimension, we compute the change to the\n// result vector by an elementwise multiplication between the two tiles above\n// followed by a reduction along the major dimension:\n//\n//                     +-----------------------------------+\n//                     | M00*V0 + M10*V1 + M20*V2 + M30*V3 |\n//                     +-----------------------------------+\n//                     | M01*V0 + M11*V1 + M21*V2 + M31*V3 |\n// Result[R:R+4] +=    +-----------------------------------+\n//                     | M02*V0 + M12*V1 + M22*V2 + M32*V3 |\n//                     +-----------------------------------+\n//                     | M03*V0 + M13*V1 + M23*V2 + M33*V3 |\n//                     +-----------------------------------+\n//\n// Where R is the starting row for the tile.\n//\n// We have an inner epilogue loop to deal with the \"C\" submatrix and an outer\n// epilogue loop to deal with the B,D submatrix.\n//\n// TODO(sanjoy): We should investigate if using gather loads and scatter stores\n// can be used here have the same inner loop for both column-major and row-major\n// matrix-vector products.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/cpu/tiled_dot_emitter.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/gpu/fusion_merger.h#L27-L60",
    "ascii": "// An HLO pass that attempts to merge fusion instructions to reduce memory\n// bandwidth requirements and kernel launch overhead.\n//\n// Consider the example below. On the left-hand side, op A is the producer and\n// ops B and C are its consumers. FusionMerger duplicates producer ops and fuses\n// them into all consumers. The result is depicted on the right-hand side below.\n//\n//        p                    p\n//        |                  /   \\\n//        v                 /     \\\n//        A            +fusion+  +fusion+\n//      /   \\          |  A'  |  |  A\"  |\n//     |     |         |  |   |  |  |   |\n//     v     v         |  v   |  |  v   |\n//     B     C         |  B   |  |  C   |\n//                     +------+  +------+\n//\n// Op A has been cloned twice and fused with B and C. The kernel launch overhead\n// is reduced from 3 to 2. The memory bandwidth requirements may be reduced.\n// We trade 1 read of input(A) + 1 write and 2 reads of output(A) for 2 reads of\n// input(A). In general the achieveable savings in memory bandwidth depend on\n// the differences in memory read and written and the number of consumers. The\n// FusionMeger pass takes this into account when making fusion decisions.\n//\n// The pass traverses the HLO module in reverse post-order (defs before uses).\n// Fusion instructions are merged into their users if some conditions are met:\n// * The result of merging the fusion instruction into its users would not\n//   increase bytes transferred.\n// * Producer ops are fusible with _all_ consumers. If they are not fusible with\n//   at least one consumers, they won't be fused at all.\n// * Producers are kLoop fusion ops.\n//\n// None of these restrictions are necessary for correctness. In fact, lifting\n// the latter two could be beneficial.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": true,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/gpu/fusion_merger.h"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/gpu/horizontal_loop_fusion.h#L27-L118",
    "ascii": "// This optimization pass horizontally fuses computations for reducing kernel\n// launch overhead while increasing kernel launch dims on GPU. The initial\n// motivation of this horizontal fusion is due to the observation that the\n// training optimizer phase (e.g., AdamOptimizer and L2Loss, etc.) typically\n// has many small kernels as a result of applying the same formula on many\n// training parameters (or variables in Tensorflow). Fusing these small\n// kernels, hence, provides performance gain.\n//\n// Theoretically speaking, we may implement a cycle detection algorithm to make\n// sure no cycles are created after fusion. However, cycle detection check is\n// somewhat cumbersome; also, we observe that naive horizontal fusion of\n// arbitrary kernels may not be profitable due to control divergence and\n// possible increase of memory bandwidth pressure due to uncoalesced memory\n// accesses (note that horizontal fusion does not change the amount of memory\n// read+written at all). In practice, a simple yet effective heuristic is used\n// to avoid these issues while addressing the known beneficial cases. That is,\n// we simply search for fusion candidates by looking for instructions whose\n// outputs are all consumed by the same instruction. This catches the cases in\n// the training optimizer phase, as the candidate instructions are typically\n// consumed only by the ROOT tuple of the entry computation.\n//\n// The following illustrates the mechanism of the horizontal fusion. Before\n// fusion, there are two trivial kernels in the illustrating example. One has\n// only a Mul op, while the other consists of only an Add op. Since they are\n// only consumed by the same (ROOT) tuple instruction, horizontal fusion is\n// triggered.\n//\n// i0 i1   i2 i3\n//  | |     | |\n//  v v     v v\n//  Mul     Add\n//   |       |\n//   v       v\n//  (ROOT) tuple\n//\n// We fuse into one of two possible patterns, depending on whether all the\n// fused operations have the same shape or not.\n//\n// case 1: if Mul and Add's output shape and type are the same, then we fuse\n// them into the below pattern: i0 i1   i2 i3\n//  | |     | |\n//  v v     v v\n//  Mul     Add\n//   |       |\n//   v       v\n//  (ROOT) tuple\n// the fused kernel will be kLoop type, i.e, GPU code is emitted through\n// IrEmitterUnnested::EmitLoopFusion\n//\n// case 2: if Mul and Add's output shape are diffent, then we fuse them into\n// the below pattern that adds extra indexing:\n// i0 i1   i2 i3       +++ (Slice) Input Fusion\n//  | |     | |          +\n//  v v     v v          +\n//  Mul     Add          +\n//   |       |           +\n//   v       v           +\n// Reshape0  Reshape1    +\n//   |       |           +\n//   v       v           +\n//  Concatenate          +\n//   |       |           +\n//   v       v           +\n//  Slice0  Slice1     +++\n//   |       |\n//   v       v\n// Reshape2  Reshape3\n//   |       |\n//   v       v\n//  (ROOT) tuple\n//\n// the fused kernel will be kInput type, and, the GPU code is emitted through\n// IrEmitterUnnested::EmitInputFusibleNonStridedSlices\n//\n// In theory, the pattern in case 1 could also be fused into the case2 target\n// graph, but we prefer to fuse into kLoop type, because the codegen for it does\n// not have the slicing range check cost introduced by case 2 pattern.\n//\n// Note that the fusion style by case 2 provides an important advantage that\n// kernels of different shapes can be horizontally fused. The first pair of\n// reshapes (i.e., Reshape0 and Reshape1) reshape the dims to 1 dimension, so\n// that the outputs of the fused kernels can (always) be concatenated. The\n// second pair of reshapes (Reshape2 and Reshape3) restore the original shapes\n// to the output tensors.\n//\n// No extra copies are introduced by the horizontal fusion. Besides Reshape2\n// and Reshape3, the other instructions are fused into an input fusion; the\n// output dims of the concatenate will be used as the kernel launch dims.\n// Instruction bitcasts can be used for Reshape2 and Reshape3 as long as the\n// outputs of Mul and Add are row-major.\n//\n// Note, reshapes are added only if the tensors isn't already a vector.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/gpu/horizontal_loop_fusion.h"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/gpu/multi_output_fusion.h#L36-L92",
    "ascii": "// Multi-output fusion of sibling and producer-consumer instructions for the\n// GPU backend to reduce memory bandwidth requirements.\n//\n//   0) Before multi-    1) Sibling multi-    2) Producer-consumer\n//      output fusion       output fusion        multi-output fusion\n//\n//          p                    p                    p\n//          |                    |                    |\n//          v                    v                    v\n//          A                    A               +-fusion--+\n//        /   \\                  |               |    A    |\n//       |     |            +-fusion--+          |   / \\   |\n//       v     v            |   / \\   |          |  B   |  |\n//       B     C            |  B   C  |          |  |   |  |\n//        \\   /             |  |   |  |          |  v   v  |\n//         v v              |  v   v  |          |  tuple  |\n//        ROOT              |  tuple  |          +---------+\n//                          +---------+            /    \\\n//                            /    \\            gte_b  gte_a\n//                         gte_b  gte_c           |      |\n//                           |      |             |      v\n//                            \\    /              |      C\n//                             v  v                \\    /\n//                             ROOT                 v  v\n//                                                  ROOT\n//\n// Multi-output fusion ops have a tuple op at their root containing multiple\n// elements as outputs. GetTupleElement ops (depicted as gte_* above) are\n// inserted to extract tuple elements for consumers.\n//\n// The two different flavors of multi-output fusion this pass performs are\n// depicted above.\n// 1) Fusion of sibling ops reduces memory bandwidth requirements, because\n//    common input parameters have to be read only once.\n// 2) Fusion of producer-consumer ops reduces memory bandwidth requirements by\n//    saving one read from memory. In the example above, B does not need to read\n//    the output of A from memory, while C still does (using gte_a).\n// Note that sibling (1) and producer-consumer (2) multi-output fusion can be\n// combined.\n//\n// The GpuMultiOutputFusion pass modifies the HLO in reverse post-order (defs\n// before uses). First, it attempts to fuse the consumer ops of the current op,\n// which are siblings (1). Hereafter, it attempts to fuse the current op with\n// one of its consumers (2). This order avoids a phase ordering issue (described\n// in go/fusionfusion). It ensures that all GetTupleElement ops inserted as a\n// by-product of multi-output fusion will occur before the current op in the\n// order of traversal, and hence, not get into the way of subsequent fusion\n// attempts.\n//\n// The GpuMultiOutputFusion pass ensures several conditions are met for fusion.\n// Some of them are relevant for correctness. In particular, no cycles must be\n// introduced into the HLO module. Moreover, the code emitters for multi-output\n// fusion must support the combination of ops and their shapes. Other\n// restrictions are rather arbitrary and lifting them could be beneficial.\n// * Sibling fusion (1) requires at least one op to be a kFusion.\n// * Sibling fusion (1) does not fuse kInput fusions with kLoop fusions, i.e.\n//   the fusion kinds must match.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/gpu/multi_output_fusion.h"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/spmd/dot_handler.cc#L3973-L3989",
    "ascii": "// Moves a cluster of memory-reducing nodes into the windowed dot-general loop\n// on contracting dimensions. Such a loop has a dynamic slice on the\n// non-windowed operand. If we move the input nodes into the loop, the\n// dynamic-slice could be merged with them by later optimization passes, which\n// reduces memory.\n//\n// small_operands             small_operands\n//        |                          |\n// input_nodes                loop { |\n//        |          =>         input_nodes\n// loop { |                          |\n//    dynamic-slice             dynamic-slice\n//    ...                       ...\n// }                          }\n//\n// Later optimization passes (TpuPadSliceMover) will merge the dynamic slice\n// with the input nodes.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/spmd/dot_handler.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/tests/concat_test.cc#L798-L806",
    "ascii": "// Regression test for b/31944287. x*y is used (at the same index) by all\n// operands of the concat. We should emit x*y in three incoming basic blocks of\n// the concat because these basic blocks are not control-equivalent.\n//\n//      x*y\n//    /  |   \\\n// add1 add2 add3\n//    \\  |   /\n//     concat\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/tests/concat_test.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/core/common_runtime/quantize_training.cc#L243-L247",
    "ascii": "// Add a restore subgraph for each variable and connect to the restore_all op.\n// For each variable we add the following subgraph:\n//           Assign----restore_all\n//          |      |\n//   RestoreV2    Variable\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/core/common_runtime/quantize_training.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/jit/partially_decluster_pass.cc#L162-L187",
    "ascii": "// Clones nodes to outside their cluster to avoid device-to-host copies.  For\n// instance, converts this:\n//\n//         .....\n//           |\n//           v\n//      A_Clustered ====> C_Unclustered\n//           |\n//           v\n//      B_Clustered\n//\n// to:\n//\n//         .....\n//          | |\n//          | +-------------+\n//          |               |\n//          v               v\n//      A_Clustered   A_Unclustered ====> C_Unclustered\n//           |\n//           v\n//      B_Clustered\n//\n// where the ===> arrow has a hostmem source and destination and would entail a\n// device to host copy if the source and destination were not in the same XLA\n// cluster.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/jit/partially_decluster_pass.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L517-L543",
    "ascii": "// Rewrite a tree of Add/AddN with a single AddN operation, consuming all the\n// original inputs of absorbed nodes.\n//\n// 1) All nodes must have the same device placement.\n//\n// 2) If All nodes in a Add/AddN subgraph have symbolically equal shape, tree is\n//    optimized to a single AddN node.\n//\n//                AddN_1\n//             /    |    \\\n//          Add_1   z   Add_2       -> AddN(x, y, z, w, q, e)\n//          /  \\        /  \\\n//         x    y      w    Add_3\n//                          / \\\n//                         q   e\n//\n// 3) If some nodes have different shape (it needs to be broadcastable to the\n//    shape of a \"root), tree is optimized to AddNs for symbolically equal\n//    shapes, and a tree of Add ops, that minimize broadcasts.\n//\n//                AddN_1                                 Add\n//             /    |    \\                              /  \\\n//          Add_1   z   Add_2       ->               Add    w\n//          /  \\        /  \\                        /   \\\n//         x    y      w    Add_3      AddN(x, y, q, e)  z\n//                          / \\\n//                         q   e\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/core/grappler/optimizers/implementation_selector.cc#L47-L100",
    "ascii": "// TODO(b/157615690): clean up function implementation swap code.\n// The overall idea for the function swap is like below:\n//          -----------                            -----------\n//  inp_1 ->|  P_C    | -> out_1         g_inp_1 ->|  P_C    | -> g_out_1\n//  inp_2 ->| forward | -> out_2         g_inp_2 ->| backward| -> g_out_2\n//          | FUNC_1  | -> out_3         g_inp_3 ->| FUNC_1  |\n//          -----------                            -----------\n//           |  |  |                                 ^  ^  ^\n//           v  v  v                                 |  |  |\n//           s1 s2 s3                                s1 s2 s3\n//           |                                       ^\n//           |                                       |\n//           |             --------------            |\n//           |-----------> | Identity_1 | ---------->|\n//                         --------------\n// P_C: op Partitioned_call or stateful_partitioned_call\n// FUNC1 (forward): TF function generated for the forward path.\n// FUNC1 (backward): TF function generated for the backward path.\n// inp_x: input tensors for the forward path.\n// out_x: output tensors for the forward path.\n// g_inp_x: gradient input tensors for the backward path.\n// g_out_x: gradient output tensors for the backward path.\n// s_x: intermediate result generated by forward tf function, which will be\n//      consumed by backward function for gradient calculation.\n//\n// In the example above, the FUNC_1 takes 2 inputs, and return 3 outputs, in the\n// meantime, generate 3 intermediate results for gradient calculation.\n// The backward function will take 6 inputs, 3 for the gradient value for out_x,\n// and 3 for the intermediate results s1/2/3. It returns 2 outputs for gradient\n// value wrt inp_x.\n//\n// Given the graph, especially after the device placement is done, we could\n// check if there is an alternative FUNC_2 that is better for the assigned\n// device type. Note that FUNC_2 (both forward and backward) should have same\n// amount of input output tensor with same dtype. However, it can generate\n// different intermediate state tensor, both number wise and type wise, since it\n// depends on the implementation detail.\n//\n// Also note that there might be some Identity op being added to the output of\n// the forward function by IsolatePlacerInspectionRequiredOps for device\n// placement. When the output DTYPE changes when switching from FUNC_1 to\n// FUNC_2, the Identity node down the stream also need to be updated with new\n// DTYPE.\n//\n// Based on this, the rewrite need to happen for following items:\n//\n// 1. P_C forward/backward need to use FUNC_2 instead of FUNC_1.\n// 2. The T_IN for P_C backward need to be updated since the s_x can be\n//    different between FUNC_1 and FUNC_2.\n// 3. The T_OUT for P_C forward need to be updated since the s_x can be\n//    different between FUNC_1 and FUNC_2.\n// 4. The input edge for P_C backward need to be updated since the amount of\n//    intermediate result can be different between FUNC_1 and FUNC_2.\n// 5. DTYPE of the Identity node after s_1/2/3 need to be updated if they exist.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/core/grappler/optimizers/implementation_selector.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/core/grappler/optimizers/scoped_allocator_optimizer.cc#L189-L214",
    "ascii": "// In certain cases, we would like to insert an identity op between `input` and\n// `op` to ensure correctness.  We currently do this in 2 cases: when `input` is\n// Exit node, or when `input` is already marked for allocation with another\n// scoped allocator op.\n//\n// If `input` is an Exit node, we add an identity to avoid the case when Exit\n// has inputs from different frames.\n//\n// If `input` is in `sa_opti->repeated_outputs()`, this means that it will be\n// potentially used by multiple scope ids.  Since there can be only one scope id\n// per output, we insert an identity between the input and op.  This will ensure\n// that the identity becomes the new input to op, and this identity can be\n// marked with a new scope id different from `input`.\n//\n// If the graph is rewritten, this function will perform the following change:\n//\n//  input                                  input\n//   |                                      |\n//   op                                  Identity\n//                                          |\n//                                          op\n//\n// This function returns the input to op in `new_input`, and the output index\n// from input to op in `new_output_index`.\n// `edge_name` gives the name of the edge from `input` to `op`, and\n// `output_index` is the output index of this edge on `input`.\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/core/grappler/optimizers/scoped_allocator_optimizer.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/core/grappler/utils/pattern_utils.h#L25-L117",
    "ascii": "//------------------------------------------------------------------------------\n// A pattern can be defined by the following grammar. Here, op_type is any valid\n// op name in the TensorFlow.\n//\n//    leaf_pattern ::= `{` op_type `}`\n//    pattern ::= leaf_pattern |\n//                `{` op_type `,` `{` pattern `,` ... `,` pattern `}` `}`\n//\n// (1) For example, the following pattern syntax describes a pattern for\n// _FusedConv2D (Conv2D + BiasAdd + Relu). Note that \"*\" means any type of op.\n//\n//  {\"Relu\",\n//    {\n//      \"BiasAdd\",\n//      {\n//        {\"Conv2D\"},\n//        {\"*\"}\n//      }\n//    }\n//  }\n//\n// The syntax above has a root (\"Relu\") and children (inputs), where each child\n// is a sub-pattern. Graph pattern matcher finds a match for the given pattern\n// syntax in a graph and returns a set of matched nodes.\n//\n// (2) In order to match a DAG with a given root, we extend pattern syntax with\n// labels. For example, a frequently found pattern in Deep Learning models is a\n// residual block like below.\n//\n//    Placeholder  Const\n//          |        |\n//    +-----+-----+  |\n//    |           |  |\n//    |           v  v\n//    |          Conv2D   Const\n//    |            |        |\n//    |            v  v-----+\n//    |          BiasAdd\n//    |            |\n//    v v----------+\n//   AddV2\n//\n// As shown above, it is the same input node (Placeholder) consumed by both\n// AddV2 and and Conv2D. This constrained can be put as labels in the following\n// augmented pattern syntax.\n//\n//  {\"AddV2\", \"my_add\",\n//    {\n//      {\"*\", \"my_residual_input\"},\n//      {\"BiasAdd\", \"my_bias_add\",\n//        {\n//          {\"Conv2D\", \"my_conv\",\n//            {\n//              {\"*\", \"my_residual_input\"},\n//              {\"*\", \"my_filter\"}\n//            }\n//          },\n//          {\"*\", my_bias\"}\n//        }\n//      }\n//    }\n//  }\n//\n// Note that the same label \"my_residual_input\" is used to tell that it is a\n// child of both \"AddV2\" and \"Conv2D\". Labels are arbitrary strings to associate\n// with the nodes to be matched as well as to uniquely identify those nodes.\n//\n// (3) The motivatation for a grammar based pattern matching in grappler is to\n// make easy for finding fusion pattern in the remapper. A subgraph that\n// matches a given pattern, however, is not fusable if any of the matched node,\n// that will be removed as a part of fusion, has a consumer outside the matched\n// subgraph. In order to check for such type of external dependencies, we\n// further extend pattern syntax by prospective action (NodeStatus) on the\n// matched nodes as shown below. This helps cross checking the nodes to be\n// removed with the nodes matched intially.\n//\n//  {\"AddV2\", \"my_add\", NodeStatus::kReplace,\n//    {\n//      {\"*\", \"my_residual_input\", NodeStatus::kRemain},\n//      {\"BiasAdd\", \"my_bias_add\", NodeStatus::kRemove,\n//        {\n//          {\"Conv2D\", \"my_conv\", NodeStatus::kRemove,\n//            {\n//              {\"*\", \"my_residual_input\", NodeStatus::kRemain},\n//              {\"*\", \"my_filter\", NodeStatus::Remain}\n//            }\n//          },\n//          {\"*\", my_bias\", NodeStatus::kRemain}\n//        }\n//      }\n//    }\n//  }\n//------------------------------------------------------------------------------\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/core/grappler/utils/pattern_utils.h"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/graph_info_test.cc#L606-L619",
    "ascii": "//                                         ________________\n// A more complex case: [tensor], (node), (partitioned node)\n//        _           _           _           _\n// [0]-->(0)-->[1]-->(1)-->[5]-->(4)-->[6]-->(5)-->[7]\n//                     \\\n//                      \\\n//                       \\>[2]-->(2)-->[3]-->(3)-->[4]\n//\n// Greedy partitioning;\n//         ____\n//  [0]-->(0145)-->[7]\n//            \\\n//             \\-->[2]-->(23)-->[4]\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/graph_info_test.cc"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/delegates/delegate_test_util.h#L137-L155",
    "ascii": "// Tests scenarios involving a single delegate and control edges.\n// Subgraph 0 has the form\n//\n//         /---OP2---\\\n//        /           \\\n// >---OP0             OP3--->\n//        \\           /\n//         \\---OP1---/\n//\n// Delegating OP0, OP2 will generate an execution graph with a \"super-node\"\n// {OP0->OP2}, which can be disabled by adding (in metadata) a control edge\n// between OP1 and OP2:\n//\n//         /->-OP2---\\\n//        /     ^     \\\n// >---OP0      ^      OP3--->\n//        \\     ^     /\n//         \\---OP1---/\n//\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/delegate_test_util.h"
  },
  {
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/mlir/lite/experimental/tac/transforms/compute_cost.cc#L44-L70",
    "ascii": "// We will caculate the total compute cost for each Func Op.\n//\n// The compute cost is simply an add-up of the costs of all the operations\n// within the FuncOp. (Excluding const ops since they're just \"data\".)\n// We will ignore quant/dequant/requant costs within the Func Op as well,\n// intuition:\n//\n// The assumpution is that quant/dequant/requant will only happen at the begin\n// and the end of the FuncOp (basically the \"boundaries\" of the subgraph).\n// So we can imagine if multiple \"same-inference-typed\" graph are presented at\n// the same time, the quant/dequant ops pair can be squashed:\n//\n//         dequant         ------------\n//            |\n//          ops...             FuncOp1\n//            |\n//         quant           -------------\n//           |         <--- can be squashed\n//         dequant         -------------\n//            |\n//        ops...               FuncOp2\n//           |\n//         quant          ---------------\n//\n// But it's true quant & dequant ops can happen \"within\" the FuncOp as well,\n// normally as \"quantization params\" adjust. We should check more careful to\n// include those as those ops wouldn't be \"squashed\".\n",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/mlir/lite/experimental/tac/transforms/compute_cost.cc"
  }
]