[
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// AwMetricsServiceClient is a singleton which manages WebView metrics</span></span>\n<span class=\"line\"><span style=\"\">// collection.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Metrics should be enabled iff all these conditions are met:</span></span>\n<span class=\"line\"><span style=\"\">//  - The user has not opted out (controlled by GMS).</span></span>\n<span class=\"line\"><span style=\"\">//  - The app has not opted out (controlled by manifest tag).</span></span>\n<span class=\"line\"><span style=\"\">//  - This client is in the 2% sample (controlled by client ID hash).</span></span>\n<span class=\"line\"><span style=\"\">// The first two are recorded in |user_consent_| and |app_consent_|, which are</span></span>\n<span class=\"line\"><span style=\"\">// set by SetHaveMetricsConsent(). The last is recorded in |is_in_sample_|.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Metrics are pseudonymously identified by a randomly-generated \"client ID\".</span></span>\n<span class=\"line\"><span style=\"\">// WebView stores this in prefs, written to the app's data directory. There's a</span></span>\n<span class=\"line\"><span style=\"\">// different such directory for each user, for each app, on each device. So the</span></span>\n<span class=\"line\"><span style=\"\">// ID should be unique per (device, app, user) tuple.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// To avoid the appearance that we're doing anything sneaky, the client ID</span></span>\n<span class=\"line\"><span style=\"\">// should only be created and retained when neither the user nor the app have</span></span>\n<span class=\"line\"><span style=\"\">// opted out. Otherwise, the presence of the ID could give the impression that</span></span>\n<span class=\"line\"><span style=\"\">// metrics were being collected.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// WebView metrics set up happens like so:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   startup</span></span>\n<span class=\"line\"><span style=\"\">//      │</span></span>\n<span class=\"line\"><span style=\"\">//      ├────────────┐</span></span>\n<span class=\"line\"><span style=\"\">//      │            ▼</span></span>\n<span class=\"line\"><span style=\"\">//      │         query GMS for consent</span></span>\n<span class=\"line\"><span style=\"\">//      ▼            │</span></span>\n<span class=\"line\"><span style=\"\">//   Initialize()    │</span></span>\n<span class=\"line\"><span style=\"\">//      │            ▼</span></span>\n<span class=\"line\"><span style=\"\">//      │         SetHaveMetricsConsent()</span></span>\n<span class=\"line\"><span style=\"\">//      │            │</span></span>\n<span class=\"line\"><span style=\"\">//      │ ┌──────────┘</span></span>\n<span class=\"line\"><span style=\"\">//      ▼ ▼</span></span>\n<span class=\"line\"><span style=\"\">//   MaybeStartMetrics()</span></span>\n<span class=\"line\"><span style=\"\">//      │</span></span>\n<span class=\"line\"><span style=\"\">//      ▼</span></span>\n<span class=\"line\"><span style=\"\">//   MetricsService::Start()</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// All the named functions in this diagram happen on the UI thread. Querying GMS</span></span>\n<span class=\"line\"><span style=\"\">// happens in the background, and the result is posted back to the UI thread, to</span></span>\n<span class=\"line\"><span style=\"\">// SetHaveMetricsConsent(). Querying GMS is slow, so SetHaveMetricsConsent()</span></span>\n<span class=\"line\"><span style=\"\">// typically happens after Initialize(), but it may happen before.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Each path sets a flag, |init_finished_| or |set_consent_finished_|, to show</span></span>\n<span class=\"line\"><span style=\"\">// that path has finished, and then calls MaybeStartMetrics(). When</span></span>\n<span class=\"line\"><span style=\"\">// MaybeStartMetrics() is called the first time, it sees only one flag is true,</span></span>\n<span class=\"line\"><span style=\"\">// and does nothing. When MaybeStartMetrics() is called the second time, it</span></span>\n<span class=\"line\"><span style=\"\">// decides whether to start metrics.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If consent was granted, MaybeStartMetrics() determines sampling by hashing</span></span>\n<span class=\"line\"><span style=\"\">// the client ID (generating a new ID if there was none). If this client is in</span></span>\n<span class=\"line\"><span style=\"\">// the sample, it then calls MetricsService::Start(). If consent was not</span></span>\n<span class=\"line\"><span style=\"\">// granted, MaybeStartMetrics() instead clears the client ID, if any.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Similarly, when</span></span>\n<span class=\"line\"><span style=\"\">// `android_webview::features::kWebViewAppsPackageNamesAllowlist` is enabled,</span></span>\n<span class=\"line\"><span style=\"\">// WebView will try to lookup the embedding app's package name in a list of apps</span></span>\n<span class=\"line\"><span style=\"\">// whose package names are allowed to be recorded. This operation takes place on</span></span>\n<span class=\"line\"><span style=\"\">// a background thread. The result of the lookup is then posted back on the UI</span></span>\n<span class=\"line\"><span style=\"\">// thread and SetAppPackageNameLoggingRule() will be called. Unlike user's</span></span>\n<span class=\"line\"><span style=\"\">// consent, the metrics service doesn't currently block on the allowlist lookup</span></span>\n<span class=\"line\"><span style=\"\">// result. If the result isn't present at the moment of creating a metrics log,</span></span>\n<span class=\"line\"><span style=\"\">// it assumes that the app package name isn't allowed to be logged.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/android_webview/browser/metrics/aw_metrics_service_client.h#L48-L111",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/android_webview/browser/metrics/aw_metrics_service_client.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This is a simple trie structure designed for handling host/domain matches</span></span>\n<span class=\"line\"><span style=\"\">// for Safebrowsing allowlisting. For the match rules, see the class header.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// It is easy to visualize the trie edges as hostname components of a url in</span></span>\n<span class=\"line\"><span style=\"\">// reverse order. For example an allowlist of google.com will have a tree</span></span>\n<span class=\"line\"><span style=\"\">// tree structure as below.</span></span>\n<span class=\"line\"><span style=\"\">//                       root</span></span>\n<span class=\"line\"><span style=\"\">//                         | com</span></span>\n<span class=\"line\"><span style=\"\">//                       Node1</span></span>\n<span class=\"line\"><span style=\"\">//                google/    \\ example</span></span>\n<span class=\"line\"><span style=\"\">//                   Node2   Node3</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Normally, a search in the tree should end in a leaf node for a positive</span></span>\n<span class=\"line\"><span style=\"\">// match. For example in the tree above com.google and com.example are matches.</span></span>\n<span class=\"line\"><span style=\"\">// However, the allowlisting also allows matching subdomains if there is a</span></span>\n<span class=\"line\"><span style=\"\">// leading dot,  for example, see .\"google.com\" and a.google.com below:</span></span>\n<span class=\"line\"><span style=\"\">//                       root</span></span>\n<span class=\"line\"><span style=\"\">//                         | com</span></span>\n<span class=\"line\"><span style=\"\">//                       Node1</span></span>\n<span class=\"line\"><span style=\"\">//                         | google</span></span>\n<span class=\"line\"><span style=\"\">//                       Node2</span></span>\n<span class=\"line\"><span style=\"\">//                         | a</span></span>\n<span class=\"line\"><span style=\"\">//                       Node3</span></span>\n<span class=\"line\"><span style=\"\">// Here, both Node2 and Node3 are valid terminal nodes to terminate a match.</span></span>\n<span class=\"line\"><span style=\"\">// The boolean is_terminal indicates whether a node can successfully terminate</span></span>\n<span class=\"line\"><span style=\"\">// a search (aka. whether this rule was entered to the allowlist) and</span></span>\n<span class=\"line\"><span style=\"\">// match_prefix indicate if this should match exactly, or just do a prefix</span></span>\n<span class=\"line\"><span style=\"\">// match.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/android_webview/browser/safe_browsing/aw_safe_browsing_allowlist_manager.cc#L24-L51",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/android_webview/browser/safe_browsing/aw_safe_browsing_allowlist_manager.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The service that runs in ARC and allows the browser to invoke the TWA payment</span></span>\n<span class=\"line\"><span style=\"\">// app that is installed in ARC, if it implements payment intents as described</span></span>\n<span class=\"line\"><span style=\"\">// in https://web.dev/android-payment-apps-overview/. At first, only</span></span>\n<span class=\"line\"><span style=\"\">// \"https://play.google.com/billing\" payment method is supported.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// --------------------      --------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">// |     Browser      |      |                      ARC                       |</span></span>\n<span class=\"line\"><span style=\"\">// |                  |      |                                                |</span></span>\n<span class=\"line\"><span style=\"\">// | ---------------  |      |  --------------    -------    ---------------- |</span></span>\n<span class=\"line\"><span style=\"\">// | | Web Payment |&#x3C;-|------|->| PaymentApp |&#x3C;-->| TWA |&#x3C;-->| Play Billing | |</span></span>\n<span class=\"line\"><span style=\"\">// | ---------------  |      |  --------------    -------    ---------------- |</span></span>\n<span class=\"line\"><span style=\"\">// |                  |      |                                                |</span></span>\n<span class=\"line\"><span style=\"\">// --------------------      --------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Next method ID: 3</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/components/arc/mojom/payment_app.mojom#L123-L137",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/components/arc/mojom/payment_app.mojom"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This class displays a modal dialog using the views system. The dialog asks</span></span>\n<span class=\"line\"><span style=\"\">// the user to give Chrome another try. This class only handles the UI so the</span></span>\n<span class=\"line\"><span style=\"\">// resulting actions are up to the caller.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The layout is as follows:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   +-----------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//   | |icon| Header text.                       [x] |</span></span>\n<span class=\"line\"><span style=\"\">//   |                                               |</span></span>\n<span class=\"line\"><span style=\"\">//   |        Body text.                             |</span></span>\n<span class=\"line\"><span style=\"\">//   |        [ Open Chrome ] [No Thanks]            |</span></span>\n<span class=\"line\"><span style=\"\">//   +-----------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Some variants do not have body text, or only have one button.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/views/try_chrome_dialog_win/try_chrome_dialog.h#L28-L41",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/views/try_chrome_dialog_win/try_chrome_dialog.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Note that speech recognition is activated on VR UI thread. This means it</span></span>\n<span class=\"line\"><span style=\"\">// usually involves 3 threads. In the simplest case, the thread communication</span></span>\n<span class=\"line\"><span style=\"\">// looks like the following:</span></span>\n<span class=\"line\"><span style=\"\">//     VR UI thread        Browser thread         IO thread</span></span>\n<span class=\"line\"><span style=\"\">//          |                    |                    |</span></span>\n<span class=\"line\"><span style=\"\">//          |----ActivateVS----->|                    |</span></span>\n<span class=\"line\"><span style=\"\">//          |                    |------Start------>  |</span></span>\n<span class=\"line\"><span style=\"\">//          |                    |                    |</span></span>\n<span class=\"line\"><span style=\"\">//          |                    |&#x3C;-NotifyStateChange-|</span></span>\n<span class=\"line\"><span style=\"\">//          |&#x3C;--OnSRStateChanged-|                    |</span></span>\n<span class=\"line\"><span style=\"\">//          |                    |                    |</span></span>\n<span class=\"line\"><span style=\"\">//          |                    |&#x3C;--OnSpeechResult---|</span></span>\n<span class=\"line\"><span style=\"\">//          |&#x3C;--OnSRStateChanged-|                    |</span></span>\n<span class=\"line\"><span style=\"\">//          |                 navigate                |</span></span>\n<span class=\"line\"><span style=\"\">//          |                    |                    |</span></span>\n<span class=\"line\"><span style=\"\">// VS = voice search, SR = speech recognition</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/vr/speech_recognizer.h#L26-L41",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/vr/speech_recognizer.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// clang-format off</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// A rounded rect is subdivided into a number of triangles.</span></span>\n<span class=\"line\"><span style=\"\">// _______________</span></span>\n<span class=\"line\"><span style=\"\">// | /    _,-' \\ |</span></span>\n<span class=\"line\"><span style=\"\">// |/_,,-'______\\|</span></span>\n<span class=\"line\"><span style=\"\">// |            /|</span></span>\n<span class=\"line\"><span style=\"\">// |           / |</span></span>\n<span class=\"line\"><span style=\"\">// |          /  |</span></span>\n<span class=\"line\"><span style=\"\">// |         /   |</span></span>\n<span class=\"line\"><span style=\"\">// |        /    |</span></span>\n<span class=\"line\"><span style=\"\">// |       /     |</span></span>\n<span class=\"line\"><span style=\"\">// |      /      |</span></span>\n<span class=\"line\"><span style=\"\">// |     /       |</span></span>\n<span class=\"line\"><span style=\"\">// |    /        |</span></span>\n<span class=\"line\"><span style=\"\">// |   /         |</span></span>\n<span class=\"line\"><span style=\"\">// |  /          |</span></span>\n<span class=\"line\"><span style=\"\">// | /           |</span></span>\n<span class=\"line\"><span style=\"\">// |/____________|</span></span>\n<span class=\"line\"><span style=\"\">// |\\     _,-'' /|</span></span>\n<span class=\"line\"><span style=\"\">// |_\\ ,-'____ /_|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Most of these do not contain an arc. To simplify the rendering of those</span></span>\n<span class=\"line\"><span style=\"\">// that do, we include a \"corner position\" attribute. The corner position is</span></span>\n<span class=\"line\"><span style=\"\">// the distance from the center of the nearest \"corner circle\". Only those</span></span>\n<span class=\"line\"><span style=\"\">// triangles containing arcs have a non-zero corner position set. The result</span></span>\n<span class=\"line\"><span style=\"\">// is that for interior triangles, their corner position is uniformly (0, 0).</span></span>\n<span class=\"line\"><span style=\"\">// I.e., they are always deemed \"inside\".</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// A further complication is that different corner radii will require these</span></span>\n<span class=\"line\"><span style=\"\">// various triangles to be sized differently relative to one another. We</span></span>\n<span class=\"line\"><span style=\"\">// would prefer not no continually recreate our vertex buffer, so we include</span></span>\n<span class=\"line\"><span style=\"\">// another attribute, the \"offset scalars\". These scalars are only ever 1.0,</span></span>\n<span class=\"line\"><span style=\"\">// 0.0, or -1.0 and control the addition or subtraction of the horizontal</span></span>\n<span class=\"line\"><span style=\"\">// and vertical corner offset. This lets the corners of the triangles be</span></span>\n<span class=\"line\"><span style=\"\">// computed in the vertex shader dynamically. It also happens that the</span></span>\n<span class=\"line\"><span style=\"\">// texture coordinates can also be easily computed in the vertex shader.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// So if the the corner offsets are vr and hr where</span></span>\n<span class=\"line\"><span style=\"\">//     vr = corner_radius / height;</span></span>\n<span class=\"line\"><span style=\"\">//     hr = corner_radius / width;</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Then the full position is then given by</span></span>\n<span class=\"line\"><span style=\"\">//   p = (x + osx * hr, y + osy * vr, 0.0, 1.0)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// And the full texture coordinate is given by</span></span>\n<span class=\"line\"><span style=\"\">//   (0.5 + p[0], 0.5 - p[1])</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/vr/renderers/textured_quad_renderer.cc#L14-L61",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/vr/renderers/textured_quad_renderer.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// For historical reasons, \"update\" policy has different enum values in Manage</span></span>\n<span class=\"line\"><span style=\"\">// Preferences from the Device Management. This function converts the former</span></span>\n<span class=\"line\"><span style=\"\">// to latter.</span></span>\n<span class=\"line\"><span style=\"\">// +----------------+---------------------+--------------------+</span></span>\n<span class=\"line\"><span style=\"\">// | Update policy  | Managed Preferences |  Device Management |</span></span>\n<span class=\"line\"><span style=\"\">// +----------------+---------------------+--------------------+</span></span>\n<span class=\"line\"><span style=\"\">// | Enabled        |          0          |         1          |</span></span>\n<span class=\"line\"><span style=\"\">// +----------------+---------------------+--------------------+</span></span>\n<span class=\"line\"><span style=\"\">// | Automatic only |          1          |         3          |</span></span>\n<span class=\"line\"><span style=\"\">// +----------------+---------------------+--------------------+</span></span>\n<span class=\"line\"><span style=\"\">// | Manual only    |          2          |         2          |</span></span>\n<span class=\"line\"><span style=\"\">// +----------------+---------------------+--------------------+</span></span>\n<span class=\"line\"><span style=\"\">// | Disabled       |          3          |         0          |</span></span>\n<span class=\"line\"><span style=\"\">// +----------------+---------------------+--------------------+</span></span>\n<span class=\"line\"><span style=\"\">// | Machine only   |          4          |         4          |</span></span>\n<span class=\"line\"><span style=\"\">// +----------------+---------------------+--------------------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/updater/policy/mac/managed_preference_policy_manager_impl.mm#L56-L71",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/updater/policy/mac/managed_preference_policy_manager_impl.mm"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//   Circular      _________________________________</span></span>\n<span class=\"line\"><span style=\"\">//   Throbber     |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//     View       |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//  ___________   |                                 |</span></span>\n<span class=\"line\"><span style=\"\">// |           |  |                                 |</span></span>\n<span class=\"line\"><span style=\"\">// |           |  |                                 |</span></span>\n<span class=\"line\"><span style=\"\">// |     .     |  |            Hint Box             |</span></span>\n<span class=\"line\"><span style=\"\">// |           |  |                                 |</span></span>\n<span class=\"line\"><span style=\"\">// |___________|  |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//                |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//                |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//                |_________________________________|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This view is set next to the throbber circle view such that their centers</span></span>\n<span class=\"line\"><span style=\"\">// align. The hint box has a label text and a sublabel text to assist the</span></span>\n<span class=\"line\"><span style=\"\">// user by informing them about the next step in the calibration process.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/display/touch_calibrator_view.cc#L254-L269",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/display/touch_calibrator_view.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// ContentAutofillRouter routes events between ContentAutofillDriver objects in</span></span>\n<span class=\"line\"><span style=\"\">// order to handle frame-transcending forms.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// A *frame-transcending* form is a form whose fields live in different frames.</span></span>\n<span class=\"line\"><span style=\"\">// For example, credit card forms often have the credit card number field in an</span></span>\n<span class=\"line\"><span style=\"\">// iframe hosted by a payment service provider.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// A frame-transcending form therefore consists of multiple *renderer forms*.</span></span>\n<span class=\"line\"><span style=\"\">// ContentAutofillRouter *flattens* these forms into a single *browser form*,</span></span>\n<span class=\"line\"><span style=\"\">// and maps all events concerning the renderer forms to that browser form, and</span></span>\n<span class=\"line\"><span style=\"\">// vice versa.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// That way, the collection of renderer forms appears as one ordinary form to</span></span>\n<span class=\"line\"><span style=\"\">// the browser.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For example, consider the following pseudo HTML code:</span></span>\n<span class=\"line\"><span style=\"\">//   &#x3C;html></span></span>\n<span class=\"line\"><span style=\"\">//   &#x3C;form id=\"Form-1\"></span></span>\n<span class=\"line\"><span style=\"\">//     &#x3C;input id=\"Field-1\"></span></span>\n<span class=\"line\"><span style=\"\">//     &#x3C;iframe id=\"Frame-1\"></span></span>\n<span class=\"line\"><span style=\"\">//       &#x3C;input id=\"Field-2\"></span></span>\n<span class=\"line\"><span style=\"\">//     &#x3C;/iframe></span></span>\n<span class=\"line\"><span style=\"\">//     &#x3C;iframe id=\"Frame-2\"></span></span>\n<span class=\"line\"><span style=\"\">//       &#x3C;iframe id=\"Frame-3\"></span></span>\n<span class=\"line\"><span style=\"\">//         &#x3C;form id=\"Form-2\"></span></span>\n<span class=\"line\"><span style=\"\">//           &#x3C;input id=\"Field-3\"></span></span>\n<span class=\"line\"><span style=\"\">//         &#x3C;/form></span></span>\n<span class=\"line\"><span style=\"\">//         &#x3C;form id=\"Form-3\"></span></span>\n<span class=\"line\"><span style=\"\">//           &#x3C;input id=\"Field-4\"></span></span>\n<span class=\"line\"><span style=\"\">//         &#x3C;/form></span></span>\n<span class=\"line\"><span style=\"\">//       &#x3C;/iframe></span></span>\n<span class=\"line\"><span style=\"\">//     &#x3C;/iframe></span></span>\n<span class=\"line\"><span style=\"\">//     &#x3C;input id=\"Field-5\"></span></span>\n<span class=\"line\"><span style=\"\">//   &#x3C;/form></span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Forms can be actual &#x3C;form> elements or synthetic forms: &#x3C;input>, &#x3C;select>,</span></span>\n<span class=\"line\"><span style=\"\">// and &#x3C;iframe> elements that are not in the scope of any &#x3C;form> belong to the</span></span>\n<span class=\"line\"><span style=\"\">// enclosing frame's synthetic form.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The five renderer forms are therefore, in pseudo C++ code:</span></span>\n<span class=\"line\"><span style=\"\">//   FormData{</span></span>\n<span class=\"line\"><span style=\"\">//     .host_frame = \"Frame-0\",  // The main frame.</span></span>\n<span class=\"line\"><span style=\"\">//     .name = \"Form-1\",</span></span>\n<span class=\"line\"><span style=\"\">//     .fields = { \"Field-1\", \"Field-5\" },</span></span>\n<span class=\"line\"><span style=\"\">//     .child_frames = { \"Frame-1\", \"Frame-2\" }</span></span>\n<span class=\"line\"><span style=\"\">//   }</span></span>\n<span class=\"line\"><span style=\"\">//   FormData{</span></span>\n<span class=\"line\"><span style=\"\">//     .host_frame = \"Frame-1\",</span></span>\n<span class=\"line\"><span style=\"\">//     .name = \"synthetic\",</span></span>\n<span class=\"line\"><span style=\"\">//     .fields = { \"Field-2\" },</span></span>\n<span class=\"line\"><span style=\"\">//     .child_frames = { }</span></span>\n<span class=\"line\"><span style=\"\">//   }</span></span>\n<span class=\"line\"><span style=\"\">//   FormData{</span></span>\n<span class=\"line\"><span style=\"\">//     .host_frame = \"Frame-2\",</span></span>\n<span class=\"line\"><span style=\"\">//     .name = \"synthetic\",</span></span>\n<span class=\"line\"><span style=\"\">//     .fields = { },</span></span>\n<span class=\"line\"><span style=\"\">//     .child_frames = { \"Frame-3\" }</span></span>\n<span class=\"line\"><span style=\"\">//   }</span></span>\n<span class=\"line\"><span style=\"\">//   FormData{</span></span>\n<span class=\"line\"><span style=\"\">//     .host_frame = \"Frame-3\",</span></span>\n<span class=\"line\"><span style=\"\">//     .name = \"Form-2\",</span></span>\n<span class=\"line\"><span style=\"\">//     .fields = { \"Field-3\" },</span></span>\n<span class=\"line\"><span style=\"\">//     .child_frames = { }</span></span>\n<span class=\"line\"><span style=\"\">//   }</span></span>\n<span class=\"line\"><span style=\"\">//   FormData{</span></span>\n<span class=\"line\"><span style=\"\">//     .host_frame = \"Frame-3\",</span></span>\n<span class=\"line\"><span style=\"\">//     .name = \"Form-3\",</span></span>\n<span class=\"line\"><span style=\"\">//     .fields = { \"Field-4\" },</span></span>\n<span class=\"line\"><span style=\"\">//     .child_frames = { }</span></span>\n<span class=\"line\"><span style=\"\">//   }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The browser form of these renderer forms is obtained by flattening the fields</span></span>\n<span class=\"line\"><span style=\"\">// into the root form:</span></span>\n<span class=\"line\"><span style=\"\">//   FormData{</span></span>\n<span class=\"line\"><span style=\"\">//     .name = \"Form-1\",</span></span>\n<span class=\"line\"><span style=\"\">//     .fields = { \"Field-1\", \"Field-2\", \"Field-3\", \"Field-4\", \"Field-5\" }</span></span>\n<span class=\"line\"><span style=\"\">//   }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Let AutofillAgent-N, ContentAutofillRouter-N, and AutofillManager-N</span></span>\n<span class=\"line\"><span style=\"\">// correspond to the Frame-N. ContentAutofillRouter would route an event</span></span>\n<span class=\"line\"><span style=\"\">// concerning any of the forms in Frame-3 from ContentAutofillDriver-3 to</span></span>\n<span class=\"line\"><span style=\"\">// ContentAutofillDriver-0:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   +---Tab---+            +---Tab----+            +----Tab----+</span></span>\n<span class=\"line\"><span style=\"\">//   | Agent-0 |      +---> | Driver-0 | ---------> | Manager-0 |</span></span>\n<span class=\"line\"><span style=\"\">//   |         |      |     |          |            |           |</span></span>\n<span class=\"line\"><span style=\"\">//   | Agent-1 |      |     | Driver-1 |            | Manager-1 |</span></span>\n<span class=\"line\"><span style=\"\">//   |         |      |     |          |            |           |</span></span>\n<span class=\"line\"><span style=\"\">//   | Agent-2 |      |     | Driver-2 |            | Manager-2 |</span></span>\n<span class=\"line\"><span style=\"\">//   |         |      |     |          |            |           |</span></span>\n<span class=\"line\"><span style=\"\">//   | Agent-3 | -----|---> | Driver-3 | -----+     | Manager-3 |</span></span>\n<span class=\"line\"><span style=\"\">//   +---------+      |     +----------+      |     +-----------+</span></span>\n<span class=\"line\"><span style=\"\">//                    |                       |</span></span>\n<span class=\"line\"><span style=\"\">//                    |      +--Tab---+       |</span></span>\n<span class=\"line\"><span style=\"\">//                    +----- | Router | &#x3C;-----+</span></span>\n<span class=\"line\"><span style=\"\">//                           +--------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If the event name is `f`, the control flow is as follows:</span></span>\n<span class=\"line\"><span style=\"\">//   Driver-3's ContentAutofillDriver::f(args...) calls</span></span>\n<span class=\"line\"><span style=\"\">//   Router's   ContentAutofillRouter::f(this, args..., callback) calls</span></span>\n<span class=\"line\"><span style=\"\">//   Driver-0's ContentAutofillDriver::callback(args...).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Every function in ContentAutofillRouter takes a |source| parameter, which</span></span>\n<span class=\"line\"><span style=\"\">// points to the ContentAutofillDriver that triggered the event. In events</span></span>\n<span class=\"line\"><span style=\"\">// triggered by the renderer, the source driver is the driver the associated</span></span>\n<span class=\"line\"><span style=\"\">// renderer form originates from.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// See ContentAutofillDriver for details on the naming pattern and an example.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// See FormForest for details on (un)flattening.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/autofill/content/browser/content_autofill_router.h#L28-L137",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/autofill/content/browser/content_autofill_router.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The laser segment calcuates the path needed to draw a laser segment. A laser</span></span>\n<span class=\"line\"><span style=\"\">// segment is used instead of just a regular line segments to avoid overlapping.</span></span>\n<span class=\"line\"><span style=\"\">// A laser segment looks as follows:</span></span>\n<span class=\"line\"><span style=\"\">//    _______         _________       _________        _________</span></span>\n<span class=\"line\"><span style=\"\">//   /       \\        \\       /      /         /      /         \\       |</span></span>\n<span class=\"line\"><span style=\"\">//   |   A   |       2|.  B  .|1    2|.   C   .|1    2|.   D     \\.1    |</span></span>\n<span class=\"line\"><span style=\"\">//   |       |        |       |      |         |      |          /      |</span></span>\n<span class=\"line\"><span style=\"\">//    \\_____/         /_______\\      \\_________\\      \\_________/       |</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Given a start and end point (represented by the periods in the above</span></span>\n<span class=\"line\"><span style=\"\">// diagrams), we create each segment by projecting each point along the normal</span></span>\n<span class=\"line\"><span style=\"\">// to the line segment formed by the start(1) and end(2) points. We then</span></span>\n<span class=\"line\"><span style=\"\">// create a path using arcs and lines. There are three types of laser segments:</span></span>\n<span class=\"line\"><span style=\"\">// head(B), regular(C) and tail(D). A typical laser is created by rendering one</span></span>\n<span class=\"line\"><span style=\"\">// tail(D), zero or more regular segments(C), one head(B) and a circle at the</span></span>\n<span class=\"line\"><span style=\"\">// end(A). They are meant to fit perfectly with the previous and next segments,</span></span>\n<span class=\"line\"><span style=\"\">// so that no whitespace/overlap is shown.</span></span>\n<span class=\"line\"><span style=\"\">// A more detailed version of this is located at https://goo.gl/qixdux.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/fast_ink/laser/laser_pointer_view.cc#L45-L63",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/fast_ink/laser/laser_pointer_view.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// MessagePortAdapters are used to adapt between two different implementations</span></span>\n<span class=\"line\"><span style=\"\">// of cast_api_bindings::MessagePort.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// PostMessageWithTransferables flow including adaptation:</span></span>\n<span class=\"line\"><span style=\"\">//+---+     +-------+    +---------+        +---------+   +-------+   +---+</span></span>\n<span class=\"line\"><span style=\"\">//| A |     | PortA |    | AdptrA  |        | AdptrB  |   | PortB |   | B |</span></span>\n<span class=\"line\"><span style=\"\">//+---+     +-------+    +---------+        +---------+   +-------+   +---+</span></span>\n<span class=\"line\"><span style=\"\">//  | Post      |             |                  |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |---------->|             |                  |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           | OnMsg       |                  |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |------------>|                  |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             | Adapt Ports      |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |-----------|      |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |&#x3C;----------|      |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             | Post             |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |----------------->|            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  | OnMsg      |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  |----------->|         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  |            | OnMsg   |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  |            |-------->|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Error flow including deletion, for example when OnMessage fails</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  |            |   false |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  |            |&#x3C;--------|</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  |      OnErr |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  |&#x3C;-----------|         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |           delete |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |&#x3C;-----------------|            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |      delete |                  |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |&#x3C;------------|                  |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |     OnErr |             |                  |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |&#x3C;----------|             |                  |            |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  | delete     |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  |------|     |         |</span></span>\n<span class=\"line\"><span style=\"\">//  |           |             |                  |&#x3C;-----|     |         |</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/cast/message_port/blink_message_port_adapter.cc#L14-L48",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/cast/message_port/blink_message_port_adapter.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// AndroidMetricsServiceClient is a singleton which manages metrics collection</span></span>\n<span class=\"line\"><span style=\"\">// intended for use by WebView &#x26; WebLayer.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Metrics should be enabled iff all these conditions are met:</span></span>\n<span class=\"line\"><span style=\"\">//  - The user has not opted out.</span></span>\n<span class=\"line\"><span style=\"\">//  - The app has not opted out.</span></span>\n<span class=\"line\"><span style=\"\">//  - This client is in the 10% sample (controlled by client ID hash).</span></span>\n<span class=\"line\"><span style=\"\">// The first two are recorded in |user_consent_| and |app_consent_|, which are</span></span>\n<span class=\"line\"><span style=\"\">// set by SetHaveMetricsConsent(). The last is recorded in |is_in_sample_|.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Metrics are pseudonymously identified by a randomly-generated \"client ID\".</span></span>\n<span class=\"line\"><span style=\"\">// AndroidMetricsServiceClient stores this in prefs, written to the app's data</span></span>\n<span class=\"line\"><span style=\"\">// directory. There's a different such directory for each user, for each app,</span></span>\n<span class=\"line\"><span style=\"\">// on each device. So the ID should be unique per (device, app, user) tuple.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In order to be transparent about not associating an ID with an opted out user</span></span>\n<span class=\"line\"><span style=\"\">// or app, the client ID should only be created and retained when neither the</span></span>\n<span class=\"line\"><span style=\"\">// user nor the app have opted out. Otherwise, the presence of the ID could give</span></span>\n<span class=\"line\"><span style=\"\">// the impression that metrics were being collected.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// AndroidMetricsServiceClient metrics set up happens like so:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   startup</span></span>\n<span class=\"line\"><span style=\"\">//      │</span></span>\n<span class=\"line\"><span style=\"\">//      ├────────────┐</span></span>\n<span class=\"line\"><span style=\"\">//      │            ▼</span></span>\n<span class=\"line\"><span style=\"\">//      │         query for consent</span></span>\n<span class=\"line\"><span style=\"\">//      ▼            │</span></span>\n<span class=\"line\"><span style=\"\">//   Initialize()    │</span></span>\n<span class=\"line\"><span style=\"\">//      │            ▼</span></span>\n<span class=\"line\"><span style=\"\">//      │         SetHaveMetricsConsent()</span></span>\n<span class=\"line\"><span style=\"\">//      │            │</span></span>\n<span class=\"line\"><span style=\"\">//      │ ┌──────────┘</span></span>\n<span class=\"line\"><span style=\"\">//      ▼ ▼</span></span>\n<span class=\"line\"><span style=\"\">//   MaybeStartMetrics()</span></span>\n<span class=\"line\"><span style=\"\">//      │</span></span>\n<span class=\"line\"><span style=\"\">//      ▼</span></span>\n<span class=\"line\"><span style=\"\">//   MetricsService::Start()</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// All the named functions in this diagram happen on the UI thread. Querying GMS</span></span>\n<span class=\"line\"><span style=\"\">// happens in the background, and the result is posted back to the UI thread, to</span></span>\n<span class=\"line\"><span style=\"\">// SetHaveMetricsConsent(). Querying GMS is slow, so SetHaveMetricsConsent()</span></span>\n<span class=\"line\"><span style=\"\">// typically happens after Initialize(), but it may happen before.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Each path sets a flag, |init_finished_| or |set_consent_finished_|, to show</span></span>\n<span class=\"line\"><span style=\"\">// that path has finished, and then calls MaybeStartMetrics(). When</span></span>\n<span class=\"line\"><span style=\"\">// MaybeStartMetrics() is called the first time, it sees only one flag is true,</span></span>\n<span class=\"line\"><span style=\"\">// and does nothing. When MaybeStartMetrics() is called the second time, it</span></span>\n<span class=\"line\"><span style=\"\">// decides whether to start metrics.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If consent was granted, MaybeStartMetrics() determines sampling by hashing</span></span>\n<span class=\"line\"><span style=\"\">// the client ID (generating a new ID if there was none). If this client is in</span></span>\n<span class=\"line\"><span style=\"\">// the sample, it then calls MetricsService::Start(). If consent was not</span></span>\n<span class=\"line\"><span style=\"\">// granted, MaybeStartMetrics() instead clears the client ID, if any.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// To match chrome on other platforms (including android), the MetricsService is</span></span>\n<span class=\"line\"><span style=\"\">// always created.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/embedder_support/android/metrics/android_metrics_service_client.h#L38-L94",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/embedder_support/android/metrics/android_metrics_service_client.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// How history autocomplete works</span></span>\n<span class=\"line\"><span style=\"\">// ==============================</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Read down this diagram for temporal ordering.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   Main thread                History thread</span></span>\n<span class=\"line\"><span style=\"\">//   -----------                --------------</span></span>\n<span class=\"line\"><span style=\"\">//   AutocompleteController::Start</span></span>\n<span class=\"line\"><span style=\"\">//     -> HistoryURLProvider::Start</span></span>\n<span class=\"line\"><span style=\"\">//       -> VerbatimMatchForInput</span></span>\n<span class=\"line\"><span style=\"\">//       [params_ allocated]</span></span>\n<span class=\"line\"><span style=\"\">//       -> DoAutocomplete (for inline autocomplete)</span></span>\n<span class=\"line\"><span style=\"\">//         -> URLDatabase::AutocompleteForPrefix (on in-memory DB)</span></span>\n<span class=\"line\"><span style=\"\">//       -> HistoryService::ScheduleAutocomplete</span></span>\n<span class=\"line\"><span style=\"\">//       (return to controller) ----</span></span>\n<span class=\"line\"><span style=\"\">//                                 /</span></span>\n<span class=\"line\"><span style=\"\">//                            HistoryBackend::ScheduleAutocomplete</span></span>\n<span class=\"line\"><span style=\"\">//                              -> HistoryURLProvider::ExecuteWithDB</span></span>\n<span class=\"line\"><span style=\"\">//                                -> DoAutocomplete</span></span>\n<span class=\"line\"><span style=\"\">//                                  -> URLDatabase::AutocompleteForPrefix</span></span>\n<span class=\"line\"><span style=\"\">//                              /</span></span>\n<span class=\"line\"><span style=\"\">//   HistoryService::QueryComplete</span></span>\n<span class=\"line\"><span style=\"\">//     [params_ destroyed]</span></span>\n<span class=\"line\"><span style=\"\">//     -> AutocompleteProviderListener::OnProviderUpdate</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The autocomplete controller calls us, and must be called back, on the main</span></span>\n<span class=\"line\"><span style=\"\">// thread.  When called, we run two autocomplete passes.  The first pass runs</span></span>\n<span class=\"line\"><span style=\"\">// synchronously on the main thread and queries the in-memory URL database.</span></span>\n<span class=\"line\"><span style=\"\">// This pass promotes matches for inline autocomplete if applicable.  We do</span></span>\n<span class=\"line\"><span style=\"\">// this synchronously so that users get consistent behavior when they type</span></span>\n<span class=\"line\"><span style=\"\">// quickly and hit enter, no matter how loaded the main history database is.</span></span>\n<span class=\"line\"><span style=\"\">// Doing this synchronously also prevents inline autocomplete from being</span></span>\n<span class=\"line\"><span style=\"\">// \"flickery\" in the AutocompleteEdit.  Because the in-memory DB does not have</span></span>\n<span class=\"line\"><span style=\"\">// redirect data, results other than the top match might change between the</span></span>\n<span class=\"line\"><span style=\"\">// two passes, so we can't just decide to use this pass' matches as the final</span></span>\n<span class=\"line\"><span style=\"\">// results.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The second autocomplete pass uses the full history database, which must be</span></span>\n<span class=\"line\"><span style=\"\">// queried on the history thread.  Start() asks the history service schedule to</span></span>\n<span class=\"line\"><span style=\"\">// callback on the history thread with a pointer to the main database.  When we</span></span>\n<span class=\"line\"><span style=\"\">// are done doing queries, we schedule a task on the main thread that notifies</span></span>\n<span class=\"line\"><span style=\"\">// the AutocompleteController that we're done.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The communication between these threads is done using a</span></span>\n<span class=\"line\"><span style=\"\">// HistoryURLProviderParams object.  This is allocated in the main thread, and</span></span>\n<span class=\"line\"><span style=\"\">// normally deleted in QueryComplete().  So that both autocomplete passes can</span></span>\n<span class=\"line\"><span style=\"\">// use the same code, we also use this to hold results during the first</span></span>\n<span class=\"line\"><span style=\"\">// autocomplete pass.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// While the second pass is running, the AutocompleteController may cancel the</span></span>\n<span class=\"line\"><span style=\"\">// request.  This can happen frequently when the user is typing quickly.  In</span></span>\n<span class=\"line\"><span style=\"\">// this case, the main thread sets params_->cancel, which the background thread</span></span>\n<span class=\"line\"><span style=\"\">// checks periodically.  If it finds the flag set, it stops what it's doing</span></span>\n<span class=\"line\"><span style=\"\">// immediately and calls back to the main thread.  (We don't delete the params</span></span>\n<span class=\"line\"><span style=\"\">// on the history thread, because we should only do that when we can safely</span></span>\n<span class=\"line\"><span style=\"\">// NULL out params_, and that must be done on the main thread.)</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/omnibox/browser/history_url_provider.h#L38-L93",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/omnibox/browser/history_url_provider.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// -----------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//     |                          |                          |</span></span>\n<span class=\"line\"><span style=\"\">//     1s                         2s                         3s</span></span>\n<span class=\"line\"><span style=\"\">//     Subframe1                  Main Frame                 Subframe2</span></span>\n<span class=\"line\"><span style=\"\">//     LID (15ms)                 LID (100ms)                LID (200ms)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Delivery order: Main Frame -> Subframe1 -> Subframe2.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/page_load_metrics/browser/metrics_web_contents_observer_unittest.cc#L1139-L1145",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/components/page_load_metrics/browser/metrics_web_contents_observer_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The following tests verify both typical and edge case behavior of Prefetch()</span></span>\n<span class=\"line\"><span style=\"\">// requests: they should prevent the FacetManager from being discarded, and keep</span></span>\n<span class=\"line\"><span style=\"\">// the data fresh by initial fetches and refetches (scheduled as described in</span></span>\n<span class=\"line\"><span style=\"\">// facet_manager.cc).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Legend:</span></span>\n<span class=\"line\"><span style=\"\">//   [---): Interval representing a finite Prefetch request (open from right).</span></span>\n<span class=\"line\"><span style=\"\">//          The data should be kept fresh, the FacetManager not discarded.</span></span>\n<span class=\"line\"><span style=\"\">//   [--->: Interval representing a indefinite Prefetch request.</span></span>\n<span class=\"line\"><span style=\"\">//          The data should be kept fresh, the FacetManager not discarded.</span></span>\n<span class=\"line\"><span style=\"\">//   F:     Fetch (initial or refetch) should take place here.</span></span>\n<span class=\"line\"><span style=\"\">//   Fn:    The time of the n-th fetch (starting from 1).</span></span>\n<span class=\"line\"><span style=\"\">//   D:     Time interval equal to GetShortTestPeriod().</span></span>\n<span class=\"line\"><span style=\"\">//   N:     Fetch is signaled to be needed here.</span></span>\n<span class=\"line\"><span style=\"\">//   X:     A corresponding CancelPrefetch call is placed here.</span></span>\n<span class=\"line\"><span style=\"\">//   S:     |kCacheSoftExpiryInHours| hours</span></span>\n<span class=\"line\"><span style=\"\">//   H:     |kCacheHardExpiryInHours| hours</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note: It is guaranteed that S &#x3C; H and that H &#x3C; 2*S.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Prefetches with the cache is initially stale/empty:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      t=0                        S       H               F2+S   F2+H</span></span>\n<span class=\"line\"><span style=\"\">//      /                          /       /               /      /</span></span>\n<span class=\"line\"><span style=\"\">//  ---o--------------------------o-------o---------------o-------o---------> t</span></span>\n<span class=\"line\"><span style=\"\">//     :                          :       :               :       :</span></span>\n<span class=\"line\"><span style=\"\">//     [)                         :       :               :       :</span></span>\n<span class=\"line\"><span style=\"\">//     [F--)                      :       :               :       :</span></span>\n<span class=\"line\"><span style=\"\">//     [F------------------------):       :               :       :</span></span>\n<span class=\"line\"><span style=\"\">//     [F--------------------------------):               :       :</span></span>\n<span class=\"line\"><span style=\"\">//     [F-------------------------F----------)            :       :</span></span>\n<span class=\"line\"><span style=\"\">//     [F-------------------------F----------------------):       :</span></span>\n<span class=\"line\"><span style=\"\">//     [F-------------------------F------------------------------):</span></span>\n<span class=\"line\"><span style=\"\">//     [F-------------------------F-----------------------F------------------></span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/password_manager/core/browser/affiliation/facet_manager_unittest.cc#L542-L576",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/password_manager/core/browser/affiliation/facet_manager_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// A property key to store the PIP snap fraction for this window.</span></span>\n<span class=\"line\"><span style=\"\">// The fraction is defined in a clockwise fashion against the PIP movement area.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//            0   1</span></span>\n<span class=\"line\"><span style=\"\">//          4 +---+ 1</span></span>\n<span class=\"line\"><span style=\"\">//            |   |</span></span>\n<span class=\"line\"><span style=\"\">//          3 +---+ 2</span></span>\n<span class=\"line\"><span style=\"\">//            3   2</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/public/cpp/window_properties.h#L120-L128",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/public/cpp/window_properties.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The native bridge for Java to interact with the payment handler host.</span></span>\n<span class=\"line\"><span style=\"\">// Object relationship diagram:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// ChromePaymentRequestService.java --- implements ---></span></span>\n<span class=\"line\"><span style=\"\">// PaymentRequestUpdateEventListener</span></span>\n<span class=\"line\"><span style=\"\">//       |        ^</span></span>\n<span class=\"line\"><span style=\"\">//      owns      |________________________</span></span>\n<span class=\"line\"><span style=\"\">//       |                                |</span></span>\n<span class=\"line\"><span style=\"\">//       v                                |</span></span>\n<span class=\"line\"><span style=\"\">// PaymentHandlerHost.java                |</span></span>\n<span class=\"line\"><span style=\"\">//       |                                |</span></span>\n<span class=\"line\"><span style=\"\">//      owns                              |</span></span>\n<span class=\"line\"><span style=\"\">//       |                             listener</span></span>\n<span class=\"line\"><span style=\"\">//       v                                |</span></span>\n<span class=\"line\"><span style=\"\">// android/payment_handler_host.h         |</span></span>\n<span class=\"line\"><span style=\"\">//       |        |                       |</span></span>\n<span class=\"line\"><span style=\"\">//      owns      |                       |</span></span>\n<span class=\"line\"><span style=\"\">//       |       owns                     |</span></span>\n<span class=\"line\"><span style=\"\">//       |        |                       |</span></span>\n<span class=\"line\"><span style=\"\">//       |        v                       |</span></span>\n<span class=\"line\"><span style=\"\">//       |    android/payment_request_update_event_listener.h</span></span>\n<span class=\"line\"><span style=\"\">//       |        ^        \\ ---- implements ---> PaymentHandlerHost::Delegate</span></span>\n<span class=\"line\"><span style=\"\">//       |        |</span></span>\n<span class=\"line\"><span style=\"\">//       |     delegate</span></span>\n<span class=\"line\"><span style=\"\">//       v        |</span></span>\n<span class=\"line\"><span style=\"\">// payment_handler_host.h</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/payments/content/android/payment_handler_host.h#L18-L43",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/payments/content/android/payment_handler_host.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// A bridge for Android to own a C++ PaymentRequestSpec object.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Object ownership diagram:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// ChromePaymentRequestService.java</span></span>\n<span class=\"line\"><span style=\"\">//       |</span></span>\n<span class=\"line\"><span style=\"\">//       v</span></span>\n<span class=\"line\"><span style=\"\">// PaymentRequestSpec.java</span></span>\n<span class=\"line\"><span style=\"\">//       |</span></span>\n<span class=\"line\"><span style=\"\">//       v</span></span>\n<span class=\"line\"><span style=\"\">// android/payment_request_spec.h</span></span>\n<span class=\"line\"><span style=\"\">//       |</span></span>\n<span class=\"line\"><span style=\"\">//       v</span></span>\n<span class=\"line\"><span style=\"\">// payment_request_spec.h</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/payments/content/android/payment_request_spec.h#L17-L30",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/payments/content/android/payment_request_spec.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The following graph topology is created to emulate a scenario where a page</span></span>\n<span class=\"line\"><span style=\"\">// contains a single frame that creates a single dedicated worker.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Pg  Pr_</span></span>\n<span class=\"line\"><span style=\"\">//  \\ /   |</span></span>\n<span class=\"line\"><span style=\"\">//   F    |</span></span>\n<span class=\"line\"><span style=\"\">//    \\   |</span></span>\n<span class=\"line\"><span style=\"\">//     W__|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Where:</span></span>\n<span class=\"line\"><span style=\"\">// Pg: page</span></span>\n<span class=\"line\"><span style=\"\">// F: frame(frame_tree_id:0)</span></span>\n<span class=\"line\"><span style=\"\">// W: worker</span></span>\n<span class=\"line\"><span style=\"\">// Pr: process(pid:1)</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/performance_manager/test_support/mock_graphs.h#L119-L132",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/performance_manager/test_support/mock_graphs.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This file contains the top-level class for the RulesetService.  There are</span></span>\n<span class=\"line\"><span style=\"\">// associated classes that tie this into the dealer as well as the filter</span></span>\n<span class=\"line\"><span style=\"\">// agents.  The distribution pipeline looks like this:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                      RulesetService</span></span>\n<span class=\"line\"><span style=\"\">//                           |</span></span>\n<span class=\"line\"><span style=\"\">//                           v                  Browser</span></span>\n<span class=\"line\"><span style=\"\">//                 RulesetPublisher(Impl)</span></span>\n<span class=\"line\"><span style=\"\">//                     |              |</span></span>\n<span class=\"line\"><span style=\"\">//        - - - - - - -|- - - - - - - |- - - - - - - - - -</span></span>\n<span class=\"line\"><span style=\"\">//                     |       |      |</span></span>\n<span class=\"line\"><span style=\"\">//                     v              v</span></span>\n<span class=\"line\"><span style=\"\">//          *RulesetDealer     |  *RulesetDealer</span></span>\n<span class=\"line\"><span style=\"\">//                 |                |       |</span></span>\n<span class=\"line\"><span style=\"\">//                 |           |    |       v</span></span>\n<span class=\"line\"><span style=\"\">//                 v                |      SubresourceFilterAgent</span></span>\n<span class=\"line\"><span style=\"\">//    SubresourceFilterAgent   |    v</span></span>\n<span class=\"line\"><span style=\"\">//                                SubresourceFilterAgent</span></span>\n<span class=\"line\"><span style=\"\">//                             |</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         Renderer #1         |          Renderer #n</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note: UnverifiedRulesetDealer is shortened to *RulesetDealer above. There is</span></span>\n<span class=\"line\"><span style=\"\">// also a VerifiedRulesetDealer which is used similarly on the browser side.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/subresource_filter/content/browser/ruleset_service.h#L5-L28",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/subresource_filter/content/browser/ruleset_service.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The class BackgroundDownloader in this module is an adapter between</span></span>\n<span class=\"line\"><span style=\"\">// the CrxDownloader interface and the BITS service interfaces.</span></span>\n<span class=\"line\"><span style=\"\">// The interface exposed on the CrxDownloader code runs on the main sequence,</span></span>\n<span class=\"line\"><span style=\"\">// while the BITS specific code runs in a separate sequence bound to a</span></span>\n<span class=\"line\"><span style=\"\">// COM apartment. For every url to download, a BITS job is created, unless</span></span>\n<span class=\"line\"><span style=\"\">// there is already an existing job for that url, in which case, the downloader</span></span>\n<span class=\"line\"><span style=\"\">// connects to it. Once a job is associated with the url, the code looks for</span></span>\n<span class=\"line\"><span style=\"\">// changes in the BITS job state. The checks are triggered by a timer.</span></span>\n<span class=\"line\"><span style=\"\">// The BITS job contains just one file to download. There could only be one</span></span>\n<span class=\"line\"><span style=\"\">// download in progress at a time. If Chrome closes down before the download is</span></span>\n<span class=\"line\"><span style=\"\">// complete, the BITS job remains active and finishes in the background, without</span></span>\n<span class=\"line\"><span style=\"\">// any intervention. The job can be completed next time the code runs, if the</span></span>\n<span class=\"line\"><span style=\"\">// file is still needed, otherwise it will be cleaned up on a periodic basis.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// To list the BITS jobs for a user, use the |bitsadmin| tool. The command line</span></span>\n<span class=\"line\"><span style=\"\">// to do that is: \"bitsadmin /list /verbose\". Another useful command is</span></span>\n<span class=\"line\"><span style=\"\">// \"bitsadmin /info\" and provide the job id returned by the previous /list</span></span>\n<span class=\"line\"><span style=\"\">// command.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Ignoring the suspend/resume issues since this code is not using them, the</span></span>\n<span class=\"line\"><span style=\"\">// job state machine implemented by BITS is something like this:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  Suspended--->Queued--->Connecting---->Transferring--->Transferred</span></span>\n<span class=\"line\"><span style=\"\">//       |          ^         |                 |               |</span></span>\n<span class=\"line\"><span style=\"\">//       |          |         V                 V               | (complete)</span></span>\n<span class=\"line\"><span style=\"\">//       +----------|---------+-----------------+-----+         V</span></span>\n<span class=\"line\"><span style=\"\">//                  |         |                 |     |    Acknowledged</span></span>\n<span class=\"line\"><span style=\"\">//                  |         V                 V     |</span></span>\n<span class=\"line\"><span style=\"\">//                  |  Transient Error------->Error   |</span></span>\n<span class=\"line\"><span style=\"\">//                  |         |                 |     |(cancel)</span></span>\n<span class=\"line\"><span style=\"\">//                  |         +-------+---------+--->-+</span></span>\n<span class=\"line\"><span style=\"\">//                  |                 V               |</span></span>\n<span class=\"line\"><span style=\"\">//                  |   (resume)      |               |</span></span>\n<span class=\"line\"><span style=\"\">//                  +------&#x3C;----------+               +---->Cancelled</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The job is created in the \"suspended\" state. Once |Resume| is called,</span></span>\n<span class=\"line\"><span style=\"\">// BITS queues up the job, then tries to connect, begins transferring the</span></span>\n<span class=\"line\"><span style=\"\">// job bytes, and moves the job to the \"transferred state, after the job files</span></span>\n<span class=\"line\"><span style=\"\">// have been transferred. When calling |Complete| for a job, the job files are</span></span>\n<span class=\"line\"><span style=\"\">// made available to the caller, and the job is moved to the \"acknowledged\"</span></span>\n<span class=\"line\"><span style=\"\">// state.</span></span>\n<span class=\"line\"><span style=\"\">// At any point, the job can be cancelled, in which case, the job is moved</span></span>\n<span class=\"line\"><span style=\"\">// to the \"cancelled state\" and the job object is removed from the BITS queue.</span></span>\n<span class=\"line\"><span style=\"\">// Along the way, the job can encounter recoverable and non-recoverable errors.</span></span>\n<span class=\"line\"><span style=\"\">// BITS moves the job to \"transient error\" or \"error\", depending on which kind</span></span>\n<span class=\"line\"><span style=\"\">// of error has occured.</span></span>\n<span class=\"line\"><span style=\"\">// If  the job has reached the \"transient error\" state, BITS retries the</span></span>\n<span class=\"line\"><span style=\"\">// job after a certain programmable delay. If the job can't be completed in a</span></span>\n<span class=\"line\"><span style=\"\">// certain time interval, BITS stops retrying and errors the job out. This time</span></span>\n<span class=\"line\"><span style=\"\">// interval is also programmable.</span></span>\n<span class=\"line\"><span style=\"\">// If the job is in either of the error states, the job parameters can be</span></span>\n<span class=\"line\"><span style=\"\">// adjusted to handle the error, after which the job can be resumed, and the</span></span>\n<span class=\"line\"><span style=\"\">// whole cycle starts again.</span></span>\n<span class=\"line\"><span style=\"\">// Jobs that are not touched in 90 days (or a value set by group policy) are</span></span>\n<span class=\"line\"><span style=\"\">// automatically disposed off by BITS. This concludes the brief description of</span></span>\n<span class=\"line\"><span style=\"\">// a job lifetime, according to BITS.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In addition to how BITS is managing the life time of the job, there are a</span></span>\n<span class=\"line\"><span style=\"\">// couple of special cases defined by the BackgroundDownloader.</span></span>\n<span class=\"line\"><span style=\"\">// First, if the job encounters any of the 5xx HTTP responses, the job is</span></span>\n<span class=\"line\"><span style=\"\">// not retried, in order to avoid DDOS-ing the servers.</span></span>\n<span class=\"line\"><span style=\"\">// Second, there is a simple mechanism to detect stuck jobs, and allow the rest</span></span>\n<span class=\"line\"><span style=\"\">// of the code to move on to trying other urls or trying other components.</span></span>\n<span class=\"line\"><span style=\"\">// Last, after completing a job, irrespective of the outcome, the jobs older</span></span>\n<span class=\"line\"><span style=\"\">// than a week are proactively cleaned up.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/update_client/background_downloader_win.cc#L39-L103",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/update_client/background_downloader_win.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The state machine representing how a CRX component changes during an update.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     +------------------------- kNew</span></span>\n<span class=\"line\"><span style=\"\">//     |                            |</span></span>\n<span class=\"line\"><span style=\"\">//     |                            V</span></span>\n<span class=\"line\"><span style=\"\">//     |                        kChecking</span></span>\n<span class=\"line\"><span style=\"\">//     |                            |</span></span>\n<span class=\"line\"><span style=\"\">//     V                error       V     no           no</span></span>\n<span class=\"line\"><span style=\"\">//  kUpdateError &#x3C;------------- [update?] -> [action?] -> kUpToDate  kUpdated</span></span>\n<span class=\"line\"><span style=\"\">//     ^                            |           |            ^        ^</span></span>\n<span class=\"line\"><span style=\"\">//     |                        yes |           | yes        |        |</span></span>\n<span class=\"line\"><span style=\"\">//     |     update disabled        V           |            |        |</span></span>\n<span class=\"line\"><span style=\"\">//     +-&#x3C;--------------------- kCanUpdate      +--------> kRun       |</span></span>\n<span class=\"line\"><span style=\"\">//     |                            |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//     |                no          V                                 |</span></span>\n<span class=\"line\"><span style=\"\">//     |               +-&#x3C;- [differential update?]                    |</span></span>\n<span class=\"line\"><span style=\"\">//     |               |               |                              |</span></span>\n<span class=\"line\"><span style=\"\">//     |               |           yes |                              |</span></span>\n<span class=\"line\"><span style=\"\">//     |               | error         V                              |</span></span>\n<span class=\"line\"><span style=\"\">//     |               +-&#x3C;----- kDownloadingDiff            kRun---->-+</span></span>\n<span class=\"line\"><span style=\"\">//     |               |               |                     ^        |</span></span>\n<span class=\"line\"><span style=\"\">//     |               |               |                 yes |        |</span></span>\n<span class=\"line\"><span style=\"\">//     |               | error         V                     |        |</span></span>\n<span class=\"line\"><span style=\"\">//     |               +-&#x3C;----- kUpdatingDiff ---------> [action?] ->-+</span></span>\n<span class=\"line\"><span style=\"\">//     |               |                                     ^     no</span></span>\n<span class=\"line\"><span style=\"\">//     |    error      V                                     |</span></span>\n<span class=\"line\"><span style=\"\">//     +-&#x3C;-------- kDownloading                              |</span></span>\n<span class=\"line\"><span style=\"\">//     |               |                                     |</span></span>\n<span class=\"line\"><span style=\"\">//     |               |                                     |</span></span>\n<span class=\"line\"><span style=\"\">//     |    error      V                                     |</span></span>\n<span class=\"line\"><span style=\"\">//     +-&#x3C;-------- kUpdating --------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/update_client/component.cc#L45-L75",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/update_client/component.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// In charge of unpacking the component CRX package and verifying that it is</span></span>\n<span class=\"line\"><span style=\"\">// well formed and the cryptographic signature is correct.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This class should be used only by the component updater. It is inspired by</span></span>\n<span class=\"line\"><span style=\"\">// and overlaps with code in the extension's SandboxedUnpacker.</span></span>\n<span class=\"line\"><span style=\"\">// The main differences are:</span></span>\n<span class=\"line\"><span style=\"\">// - The public key hash is full SHA256.</span></span>\n<span class=\"line\"><span style=\"\">// - Does not use a sandboxed unpacker. A valid component is fully trusted.</span></span>\n<span class=\"line\"><span style=\"\">// - The manifest can have different attributes and resources are not</span></span>\n<span class=\"line\"><span style=\"\">//   transcoded.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If the CRX is a delta CRX, the flow is:</span></span>\n<span class=\"line\"><span style=\"\">//   [ComponentUpdater]      [ComponentPatcher]</span></span>\n<span class=\"line\"><span style=\"\">//   Unpack</span></span>\n<span class=\"line\"><span style=\"\">//     \\_ Verify</span></span>\n<span class=\"line\"><span style=\"\">//     \\_ Unzip</span></span>\n<span class=\"line\"><span style=\"\">//     \\_ BeginPatching ---> DifferentialUpdatePatch</span></span>\n<span class=\"line\"><span style=\"\">//                             ...</span></span>\n<span class=\"line\"><span style=\"\">//   EndPatching &#x3C;------------ ...</span></span>\n<span class=\"line\"><span style=\"\">//     \\_ EndUnpacking</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For a full CRX, the flow is:</span></span>\n<span class=\"line\"><span style=\"\">//   [ComponentUpdater]</span></span>\n<span class=\"line\"><span style=\"\">//   Unpack</span></span>\n<span class=\"line\"><span style=\"\">//     \\_ Verify</span></span>\n<span class=\"line\"><span style=\"\">//     \\_ Unzip</span></span>\n<span class=\"line\"><span style=\"\">//     \\_ BeginPatching</span></span>\n<span class=\"line\"><span style=\"\">//          |</span></span>\n<span class=\"line\"><span style=\"\">//          V</span></span>\n<span class=\"line\"><span style=\"\">//   EndPatching</span></span>\n<span class=\"line\"><span style=\"\">//     \\_ EndUnpacking</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// During unzip step we also check for verified_contents.json in the header</span></span>\n<span class=\"line\"><span style=\"\">// of crx file and unpack it to metadata_ folder if it doesn't already contain</span></span>\n<span class=\"line\"><span style=\"\">// verified_contents file.</span></span>\n<span class=\"line\"><span style=\"\">// In both cases, if there is an error at any point, the remaining steps will</span></span>\n<span class=\"line\"><span style=\"\">// be skipped and EndUnpacking will be called.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/update_client/component_unpacker.h#L33-L69",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/update_client/component_unpacker.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// One surface.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  +e---------+</span></span>\n<span class=\"line\"><span style=\"\">//  |          |</span></span>\n<span class=\"line\"><span style=\"\">//  |          |</span></span>\n<span class=\"line\"><span style=\"\">//  |          |</span></span>\n<span class=\"line\"><span style=\"\">//  +----------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/viz/host/hit_test/hit_test_query_unittest.cc#L37-L44",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/viz/host/hit_test/hit_test_query_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Check if draw occlusion works well with rotation transform.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  +-----+                                  +----+</span></span>\n<span class=\"line\"><span style=\"\">//  |     |   rotation (by 45 on y-axis) ->  |    |     same height</span></span>\n<span class=\"line\"><span style=\"\">//  +-----+                                  +----+     reduced weight</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/viz/service/display/display_unittest.cc#L1975-L1979",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/viz/service/display/display_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Tests that the overlay will be partially rendered (clipped) when any part of</span></span>\n<span class=\"line\"><span style=\"\">// it extends outside the video frame's content region.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For this test, the content region is a rectangle, centered within the frame</span></span>\n<span class=\"line\"><span style=\"\">// (e.g., the content is being letterboxed), and the test attempts to locate the</span></span>\n<span class=\"line\"><span style=\"\">// overlay such that part of it should be clipped. The test succeeds if the</span></span>\n<span class=\"line\"><span style=\"\">// overlay is clipped to the content region in the center. For example:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    +-------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//    |                               |</span></span>\n<span class=\"line\"><span style=\"\">//    |     ......                    |</span></span>\n<span class=\"line\"><span style=\"\">//    |     ..****////////////        |  **** the drawn part of the overlay</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/viz/service/frame_sinks/video_capture/video_capture_overlay_unittest.cc#L600-L611",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/viz/service/frame_sinks/video_capture/video_capture_overlay_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// One surface.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  +----------+</span></span>\n<span class=\"line\"><span style=\"\">//  |          |</span></span>\n<span class=\"line\"><span style=\"\">//  |          |</span></span>\n<span class=\"line\"><span style=\"\">//  |          |</span></span>\n<span class=\"line\"><span style=\"\">//  +----------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/components/viz/service/hit_test/hit_test_aggregator_unittest.cc#L245-L252",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/components/viz/service/hit_test/hit_test_aggregator_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Test the race condition where a document is evicted from the BackForwardCache</span></span>\n<span class=\"line\"><span style=\"\">// while it is in the middle of being restored and before URL loader starts a</span></span>\n<span class=\"line\"><span style=\"\">// response.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// ┌───────┐                 ┌────────┐</span></span>\n<span class=\"line\"><span style=\"\">// │Browser│                 │Renderer│</span></span>\n<span class=\"line\"><span style=\"\">// └───┬───┘                 └───┬────┘</span></span>\n<span class=\"line\"><span style=\"\">// (Freeze &#x26; store the cache)    │</span></span>\n<span class=\"line\"><span style=\"\">//     │────────────────────────>│</span></span>\n<span class=\"line\"><span style=\"\">//     │                         │</span></span>\n<span class=\"line\"><span style=\"\">// (Navigate to cached document) │</span></span>\n<span class=\"line\"><span style=\"\">//     │──┐                      │</span></span>\n<span class=\"line\"><span style=\"\">//     │  │                      │</span></span>\n<span class=\"line\"><span style=\"\">//     │EvictFromBackForwardCache│</span></span>\n<span class=\"line\"><span style=\"\">//     │&#x3C;────────────────────────│</span></span>\n<span class=\"line\"><span style=\"\">//     │  │                      │</span></span>\n<span class=\"line\"><span style=\"\">//     │  x Navigation cancelled │</span></span>\n<span class=\"line\"><span style=\"\">//     │    and reissued         │</span></span>\n<span class=\"line\"><span style=\"\">// ┌───┴───┐                 ┌───┴────┐</span></span>\n<span class=\"line\"><span style=\"\">// │Browser│                 │Renderer│</span></span>\n<span class=\"line\"><span style=\"\">// └───────┘                 └────────┘</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// When the eviction occurs, the in flight NavigationRequest to the cached</span></span>\n<span class=\"line\"><span style=\"\">// document should be reissued (cancelled and replaced by a normal navigation).</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/back_forward_cache_internal_browsertest.cc#L835-L858",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/content/browser/back_forward_cache_internal_browsertest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Test that unload handlers in iframes are run, even when the removed subtree</span></span>\n<span class=\"line\"><span style=\"\">// is complicated with nested iframes in different processes.</span></span>\n<span class=\"line\"><span style=\"\">//     A1                         A1</span></span>\n<span class=\"line\"><span style=\"\">//    / \\                        / \\</span></span>\n<span class=\"line\"><span style=\"\">//   B1  D  --- Navigate --->   E   D</span></span>\n<span class=\"line\"><span style=\"\">//  / \\</span></span>\n<span class=\"line\"><span style=\"\">// C1  C2</span></span>\n<span class=\"line\"><span style=\"\">// |   |</span></span>\n<span class=\"line\"><span style=\"\">// B2  A2</span></span>\n<span class=\"line\"><span style=\"\">//     |</span></span>\n<span class=\"line\"><span style=\"\">//     C3</span></span>\n<span class=\"line\"><span style=\"\">// TODO(crbug.com/1012185): Flaky timeouts on Linux and Mac.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/site_per_process_unload_browsertest.cc#L395-L406",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/site_per_process_unload_browsertest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Now is at 11 PM.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      20:00               23:00                      5:00</span></span>\n<span class=\"line\"><span style=\"\">// &#x3C;----- + ----------------- + ----------------------- + -------></span></span>\n<span class=\"line\"><span style=\"\">//        |                   |                         |</span></span>\n<span class=\"line\"><span style=\"\">//      sunset               now                     sunrise</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Tests that when the user logs in for the first time between sunset and</span></span>\n<span class=\"line\"><span style=\"\">// sunrise with Auto Night Light enabled, and the notification has never been</span></span>\n<span class=\"line\"><span style=\"\">// dismissed before, the notification should be shown.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/system/night_light/night_light_controller_unittest.cc#L1745-L1754",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/system/night_light/night_light_controller_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// For the synchronous compositor feature of webview it is necessary</span></span>\n<span class=\"line\"><span style=\"\">// that the UI thread to block until the renderer process has processed</span></span>\n<span class=\"line\"><span style=\"\">// certain messages entirely. (beginframe and resulting compositor frames).</span></span>\n<span class=\"line\"><span style=\"\">// This object is used to manage the waiting and signaling behavior on the UI</span></span>\n<span class=\"line\"><span style=\"\">// thread. The UI thread will wait on a WaitableEvent (via FrameFuture class)</span></span>\n<span class=\"line\"><span style=\"\">// or condition variable which is then signal by handlers in this class.</span></span>\n<span class=\"line\"><span style=\"\">// This object is a cross thread object accessed both on the UI and IO threads.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Examples of call graphs are:</span></span>\n<span class=\"line\"><span style=\"\">//    Browser UI Thread         Browser IO Thread       Renderer</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  ->VSync Java</span></span>\n<span class=\"line\"><span style=\"\">//      ----------------------------------------------->BeginFrame</span></span>\n<span class=\"line\"><span style=\"\">//      CV Wait</span></span>\n<span class=\"line\"><span style=\"\">//                                BeginFrameRes&#x3C;----------</span></span>\n<span class=\"line\"><span style=\"\">//                                CVSignal</span></span>\n<span class=\"line\"><span style=\"\">//      WakeUp</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  ->DrawHwAsync</span></span>\n<span class=\"line\"><span style=\"\">//      RegisterFrameFuture</span></span>\n<span class=\"line\"><span style=\"\">//      ----------------------------------------------->DrawHwAsync</span></span>\n<span class=\"line\"><span style=\"\">//      Do some stuff</span></span>\n<span class=\"line\"><span style=\"\">//      FrameFuture::GetFrame()</span></span>\n<span class=\"line\"><span style=\"\">//        WaitableEvent::Wait()</span></span>\n<span class=\"line\"><span style=\"\">//                             ReceiveFrame&#x3C;---------------</span></span>\n<span class=\"line\"><span style=\"\">//                             WaitableEvent::Signal()</span></span>\n<span class=\"line\"><span style=\"\">//      WakeUp</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This may seem simple but it gets a little more complicated when</span></span>\n<span class=\"line\"><span style=\"\">// multiple views are involved. Each view will have it's own SyncCallBridge.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   Once example is:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    Browser UI Thread         Browser IO Thread       Renderer1    Renderer2</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  ->VSync Java</span></span>\n<span class=\"line\"><span style=\"\">//      ----------------------------------------------->BeginFrame</span></span>\n<span class=\"line\"><span style=\"\">//                                BeginFrameRes&#x3C;----------</span></span>\n<span class=\"line\"><span style=\"\">//                                CVSignal</span></span>\n<span class=\"line\"><span style=\"\">//      ------------------------------------------------------------>BeginFrame</span></span>\n<span class=\"line\"><span style=\"\">//      CV Wait</span></span>\n<span class=\"line\"><span style=\"\">//                                BeginFrameRes&#x3C;----------------------------</span></span>\n<span class=\"line\"><span style=\"\">//                                CVSignal</span></span>\n<span class=\"line\"><span style=\"\">//      WakeUp</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Notice that it is possible that before we wait on a CV variable a renderer</span></span>\n<span class=\"line\"><span style=\"\">// may have already responded to the BeginFrame request.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/android/synchronous_compositor_sync_call_bridge.h#L23-L71",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/android/synchronous_compositor_sync_call_bridge.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Information about a physical attribute of the screen which that creates a</span></span>\n<span class=\"line\"><span style=\"\">// Logical separator or divider (e.g. a fold or mask).</span></span>\n<span class=\"line\"><span style=\"\">// This is a visual example of a vertically oriented display feature that masks</span></span>\n<span class=\"line\"><span style=\"\">// content underneath</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    Orientation: vertical</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                 offset</span></span>\n<span class=\"line\"><span style=\"\">//                   |</span></span>\n<span class=\"line\"><span style=\"\">//         +---------|===|---------+</span></span>\n<span class=\"line\"><span style=\"\">//         |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\">//         |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\">//         |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\">//         |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\">//         |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\">//         +---------|===|---------+</span></span>\n<span class=\"line\"><span style=\"\">//                      \\</span></span>\n<span class=\"line\"><span style=\"\">//                      mask_length</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that the implicit height of the display feature is the entire height of</span></span>\n<span class=\"line\"><span style=\"\">// the screen on which it exists.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/renderer_host/display_feature.h#L17-L37",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/renderer_host/display_feature.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Build the following frame opener graph and see that it can be properly</span></span>\n<span class=\"line\"><span style=\"\">// traversed when creating opener proxies:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     +-> root4 &#x3C;--+   root3 &#x3C;---- root2    +--- root1</span></span>\n<span class=\"line\"><span style=\"\">//     |     /      |     ^         /  \\     |    /  \\     .</span></span>\n<span class=\"line\"><span style=\"\">//     |    42      +-----|------- 22  23 &#x3C;--+   12  13</span></span>\n<span class=\"line\"><span style=\"\">//     |     +------------+            |             | ^</span></span>\n<span class=\"line\"><span style=\"\">//     +-------------------------------+             +-+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The test starts traversing openers from root1 and expects to discover all</span></span>\n<span class=\"line\"><span style=\"\">// four FrameTrees.  Nodes 13 (with cycle to itself) and 42 (with back link to</span></span>\n<span class=\"line\"><span style=\"\">// root3) should be put on the list of nodes that will need their frame openers</span></span>\n<span class=\"line\"><span style=\"\">// set separately in a second pass, since their opener routing IDs won't be</span></span>\n<span class=\"line\"><span style=\"\">// available during the first pass of CreateOpenerProxies.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/renderer_host/render_frame_host_manager_unittest.cc#L2449-L2462",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/renderer_host/render_frame_host_manager_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This class is related to ForwardingAudioStreamFactory as follows:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     WebContentsImpl       &#x3C;--        RenderFrameHostImpl</span></span>\n<span class=\"line\"><span style=\"\">//           ^                                  ^</span></span>\n<span class=\"line\"><span style=\"\">//           |                                  |</span></span>\n<span class=\"line\"><span style=\"\">//  ForwardingAudioStreamFactory   RenderFrameAudioOutputStreamFactory</span></span>\n<span class=\"line\"><span style=\"\">//           ^                                  ^</span></span>\n<span class=\"line\"><span style=\"\">//           |                                  |</span></span>\n<span class=\"line\"><span style=\"\">//      FASF::Core           &#x3C;--          RFAOSF::Core</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Both FASF::Core and RFAOSF::Core live on (and are destructed on) the IO</span></span>\n<span class=\"line\"><span style=\"\">// thread. A weak pointer to ForwardingAudioStreamFactory is used since</span></span>\n<span class=\"line\"><span style=\"\">// WebContentsImpl is sometimes destructed shortly before RenderFrameHostImpl.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/renderer_host/media/render_frame_audio_output_stream_factory.h#L24-L36",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/renderer_host/media/render_frame_audio_output_stream_factory.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Manages network requests and maintains relevant state for interaction with</span></span>\n<span class=\"line\"><span style=\"\">// the Identity Provider across a FedCM transaction. Owned by</span></span>\n<span class=\"line\"><span style=\"\">// FederatedAuthRequestImpl and has a lifetime limited to a single identity</span></span>\n<span class=\"line\"><span style=\"\">// transaction between an RP and an IDP.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Diagram of the permission-based data flows between the browser and the IDP:</span></span>\n<span class=\"line\"><span style=\"\">//  .-------.                           .---.</span></span>\n<span class=\"line\"><span style=\"\">//  |Browser|                           |IDP|</span></span>\n<span class=\"line\"><span style=\"\">//  '-------'                           '---'</span></span>\n<span class=\"line\"><span style=\"\">//      |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//      |     GET /fedcm.json             |</span></span>\n<span class=\"line\"><span style=\"\">//      |-------------------------------->|</span></span>\n<span class=\"line\"><span style=\"\">//      |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//      |        JSON{idp_url}            |</span></span>\n<span class=\"line\"><span style=\"\">//      |&#x3C;--------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//      |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//      | POST /idp_url with OIDC request |</span></span>\n<span class=\"line\"><span style=\"\">//      |-------------------------------->|</span></span>\n<span class=\"line\"><span style=\"\">//      |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//      |       token or signin_url       |</span></span>\n<span class=\"line\"><span style=\"\">//      |&#x3C;--------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//  .-------.                           .---.</span></span>\n<span class=\"line\"><span style=\"\">//  |Browser|                           |IDP|</span></span>\n<span class=\"line\"><span style=\"\">//  '-------'                           '---'</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If the IDP returns an token, the sequence finishes. If it returns a</span></span>\n<span class=\"line\"><span style=\"\">// signin_url, that URL is loaded as a rendered Document into a new window for</span></span>\n<span class=\"line\"><span style=\"\">// the user to interact with the IDP.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/browser/webid/idp_network_request_manager.h#L36-L63",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/browser/webid/idp_network_request_manager.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Creates compact textual representations of the state of the frame tree that</span></span>\n<span class=\"line\"><span style=\"\">// is appropriate for use in assertions.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The diagrams show frame tree structure, the SiteInstance of current frames,</span></span>\n<span class=\"line\"><span style=\"\">// presence of pending frames, and the SiteInstances of any and all proxies.</span></span>\n<span class=\"line\"><span style=\"\">// They look like this:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//        Site A (D pending) -- proxies for B C</span></span>\n<span class=\"line\"><span style=\"\">//          |--Site B --------- proxies for A C</span></span>\n<span class=\"line\"><span style=\"\">//          +--Site C --------- proxies for B A</span></span>\n<span class=\"line\"><span style=\"\">//               |--Site A ---- proxies for B</span></span>\n<span class=\"line\"><span style=\"\">//               +--Site A ---- proxies for B</span></span>\n<span class=\"line\"><span style=\"\">//                    +--Site A -- proxies for B</span></span>\n<span class=\"line\"><span style=\"\">//       Where A = http://127.0.0.1/</span></span>\n<span class=\"line\"><span style=\"\">//             B = http://foo.com/ (no process)</span></span>\n<span class=\"line\"><span style=\"\">//             C = http://bar.com/</span></span>\n<span class=\"line\"><span style=\"\">//             D = http://next.com/</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// SiteInstances are assigned single-letter names (A, B, C) which are remembered</span></span>\n<span class=\"line\"><span style=\"\">// across invocations of the pretty-printer.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/content/test/content_browser_test_utils_internal.h#L109-L128",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/content/test/content_browser_test_utils_internal.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Input signature:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Name                 Index   Mask Register SysValue  Format   Used</span></span>\n<span class=\"line\"><span style=\"\">// -------------------- ----- ------ -------- -------- ------- ------</span></span>\n<span class=\"line\"><span style=\"\">// POSITION                 0   xy          0     NONE   float   xy</span></span>\n<span class=\"line\"><span style=\"\">// TEXCOORD                 0   xy          1     NONE   float   xy</span></span>\n<span class=\"line\"><span style=\"\">// TEXCOORD                 1   x           2     NONE    uint   x</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Output signature:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Name                 Index   Mask Register SysValue  Format   Used</span></span>\n<span class=\"line\"><span style=\"\">// -------------------- ----- ------ -------- -------- ------- ------</span></span>\n<span class=\"line\"><span style=\"\">// SV_POSITION              0   xyzw        0      POS   float   xyzw</span></span>\n<span class=\"line\"><span style=\"\">// TEXCOORD                 0   xy          1     NONE   float   xy</span></span>\n<span class=\"line\"><span style=\"\">// TEXCOORD                 1   x           2     NONE    uint   x</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Runtime generated constant mappings:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Target Reg                               Constant Description</span></span>\n<span class=\"line\"><span style=\"\">// ---------- --------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">// c0                              Vertex Shader position offset</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Level9 shader bytecode:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/device/vr/windows/vertex_shader.h#L10-L41",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/device/vr/windows/vertex_shader.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Cell representation for SettingsCheckItem.</span></span>\n<span class=\"line\"><span style=\"\">//  +---------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//  \u0010| +--------+                                +---------+   |</span></span>\n<span class=\"line\"><span style=\"\">//  | |        |  One line title                |trailing |   |</span></span>\n<span class=\"line\"><span style=\"\">//  | | leading|                                |image    |   |</span></span>\n<span class=\"line\"><span style=\"\">//  | | image  |  Multiline detail text         |spinner  |   |</span></span>\n<span class=\"line\"><span style=\"\">//  | |        |  Multiline detail text         |or button|   |</span></span>\n<span class=\"line\"><span style=\"\">//  | +--------+                                +---------+   |</span></span>\n<span class=\"line\"><span style=\"\">//  +---------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ios/chrome/browser/ui/settings/cells/settings_check_cell.h#L12-L20",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ios/chrome/browser/ui/settings/cells/settings_check_cell.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Bottom toolbar for TabGrid. The appearance of the toolbar is decided by</span></span>\n<span class=\"line\"><span style=\"\">// screen size, current TabGrid page and mode:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Horizontal-compact and vertical-regular screen size:</span></span>\n<span class=\"line\"><span style=\"\">//   Small newTabButton, translucent background.</span></span>\n<span class=\"line\"><span style=\"\">//   Incognito &#x26; Regular page: [CloseAllButton  newTabButton  DoneButton]</span></span>\n<span class=\"line\"><span style=\"\">//   Remote page:              [                              DoneButton]</span></span>\n<span class=\"line\"><span style=\"\">//   Selection mode:           [CloseTabButton  shareButton  AddToButton]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Other screen size:</span></span>\n<span class=\"line\"><span style=\"\">//   Large newTabButton, floating layout without UIToolbar.</span></span>\n<span class=\"line\"><span style=\"\">//   Normal mode:    [                                      newTabButton]</span></span>\n<span class=\"line\"><span style=\"\">//   Remote page:    [                                                  ]</span></span>\n<span class=\"line\"><span style=\"\">//   Selection mode: [CloseTabButton       shareButton       AddToButton]</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ios/chrome/browser/ui/tab_switcher/tab_grid/tab_grid_bottom_toolbar.h#L14-L27",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ios/chrome/browser/ui/tab_switcher/tab_grid/tab_grid_bottom_toolbar.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Top toolbar for TabGrid. The appearance of the toolbar is decided by screen</span></span>\n<span class=\"line\"><span style=\"\">// size, current TabGrid page and mode:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Horizontal-compact and vertical-regular screen size:</span></span>\n<span class=\"line\"><span style=\"\">//   Normal mode:    [               PageControl      Select]</span></span>\n<span class=\"line\"><span style=\"\">//   Remote page:    [               PageControl            ]</span></span>\n<span class=\"line\"><span style=\"\">//   Selection mode: [SelectAll    SelectedTabsCount    Done]</span></span>\n<span class=\"line\"><span style=\"\">// Other screen size:</span></span>\n<span class=\"line\"><span style=\"\">//   Normal mode:    [CloseAll           PageControl      Select Done]</span></span>\n<span class=\"line\"><span style=\"\">//   Remote page:    [                   PageControl             Done]</span></span>\n<span class=\"line\"><span style=\"\">//   Selection mode: [SelectAll        SelectedTabsCount         Done]</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ios/chrome/browser/ui/tab_switcher/tab_grid/tab_grid_top_toolbar.h#L14-L24",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ios/chrome/browser/ui/tab_switcher/tab_grid/tab_grid_top_toolbar.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// A manager for audio debug recording that handles registration of data</span></span>\n<span class=\"line\"><span style=\"\">// sources and hands them a recorder (AudioDebugRecordingHelper) to feed data</span></span>\n<span class=\"line\"><span style=\"\">// to. The recorder will unregister with the manager automatically when deleted.</span></span>\n<span class=\"line\"><span style=\"\">// When debug recording is enabled, it is enabled on all recorders and</span></span>\n<span class=\"line\"><span style=\"\">// constructs a unique file name for each recorder by using a running ID.</span></span>\n<span class=\"line\"><span style=\"\">// A somewhat simplified diagram of the the debug recording infrastructure,</span></span>\n<span class=\"line\"><span style=\"\">// interfaces omitted:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                                AudioDebugFileWriter</span></span>\n<span class=\"line\"><span style=\"\">//                                        ^</span></span>\n<span class=\"line\"><span style=\"\">//                                        | owns</span></span>\n<span class=\"line\"><span style=\"\">//                        owns            |                     owns</span></span>\n<span class=\"line\"><span style=\"\">//   OnMoreDataConverter  ---->  AudioDebugRecordingHelper &#x3C;---------</span></span>\n<span class=\"line\"><span style=\"\">//            ^                           ^                          |</span></span>\n<span class=\"line\"><span style=\"\">//            | owns several              | raw pointer to several   |</span></span>\n<span class=\"line\"><span style=\"\">//            |                   AudioDebugRecordingManager         |</span></span>\n<span class=\"line\"><span style=\"\">//   AudioOutputResampler                 ^                          |</span></span>\n<span class=\"line\"><span style=\"\">//            ^                           |      AudioInputStreamDataInterceptor</span></span>\n<span class=\"line\"><span style=\"\">//            |                           |                          ^</span></span>\n<span class=\"line\"><span style=\"\">//            | owns several              | owns        owns several |</span></span>\n<span class=\"line\"><span style=\"\">//             ------------------  AudioManagerBase  ----------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// AudioDebugRecordingManager is created when</span></span>\n<span class=\"line\"><span style=\"\">// AudioManager::InitializeDebugRecording() is called. That is done in</span></span>\n<span class=\"line\"><span style=\"\">// AudioManager::Create() in WebRTC enabled builds, but not in non WebRTC</span></span>\n<span class=\"line\"><span style=\"\">// enabled builds. If AudioDebugRecordingManager is not created, neither is</span></span>\n<span class=\"line\"><span style=\"\">// AudioDebugRecordingHelper or AudioDebugFileWriter. In this case the pointers</span></span>\n<span class=\"line\"><span style=\"\">// to AudioDebugRecordingManager and AudioDebugRecordingHelper are null.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/audio/audio_debug_recording_manager.h#L26-L53",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/audio/audio_debug_recording_manager.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Overview of operation:</span></span>\n<span class=\"line\"><span style=\"\">// 1) An object of CrasUnifiedStream is created by the AudioManager</span></span>\n<span class=\"line\"><span style=\"\">// factory: audio_man->MakeAudioStream().</span></span>\n<span class=\"line\"><span style=\"\">// 2) Next some thread will call Open(), at that point a client is created and</span></span>\n<span class=\"line\"><span style=\"\">// configured for the correct format and sample rate.</span></span>\n<span class=\"line\"><span style=\"\">// 3) Then Start(source) is called and a stream is added to the CRAS client</span></span>\n<span class=\"line\"><span style=\"\">// which will create its own thread that periodically calls the source for more</span></span>\n<span class=\"line\"><span style=\"\">// data as buffers are being consumed.</span></span>\n<span class=\"line\"><span style=\"\">// 4) When finished Stop() is called, which is handled by stopping the stream.</span></span>\n<span class=\"line\"><span style=\"\">// 5) Finally Close() is called. It cleans up and notifies the audio manager,</span></span>\n<span class=\"line\"><span style=\"\">// which likely will destroy this object.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Simplified data flow for output only streams:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------+                  +------------------+</span></span>\n<span class=\"line\"><span style=\"\">//   | CRAS Server |                  | Chrome Client    |</span></span>\n<span class=\"line\"><span style=\"\">//   +------+------+    Add Stream    +---------+--------+</span></span>\n<span class=\"line\"><span style=\"\">//          |&#x3C;----------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//          |                                   |</span></span>\n<span class=\"line\"><span style=\"\">//          | Near out of samples, request more |</span></span>\n<span class=\"line\"><span style=\"\">//          |---------------------------------->|</span></span>\n<span class=\"line\"><span style=\"\">//          |                                   |  UnifiedCallback()</span></span>\n<span class=\"line\"><span style=\"\">//          |                                   |  WriteAudio()</span></span>\n<span class=\"line\"><span style=\"\">//          |                                   |</span></span>\n<span class=\"line\"><span style=\"\">//          |  buffer_frames written to shm     |</span></span>\n<span class=\"line\"><span style=\"\">//          |&#x3C;----------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//          |                                   |</span></span>\n<span class=\"line\"><span style=\"\">//         ...  Repeats for each block.        ...</span></span>\n<span class=\"line\"><span style=\"\">//          |                                   |</span></span>\n<span class=\"line\"><span style=\"\">//          |                                   |</span></span>\n<span class=\"line\"><span style=\"\">//          |  Remove stream                    |</span></span>\n<span class=\"line\"><span style=\"\">//          |&#x3C;----------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//          |                                   |</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For Unified streams the Chrome client is notified whenever buffer_frames have</span></span>\n<span class=\"line\"><span style=\"\">// been captured.  For Output streams the client is notified a few milliseconds</span></span>\n<span class=\"line\"><span style=\"\">// before the hardware buffer underruns and fills the buffer with another block</span></span>\n<span class=\"line\"><span style=\"\">// of audio.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/audio/cras/cras_unified.cc#L64-L101",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/audio/cras/cras_unified.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Crops an image such that its aspect ratio matches that of a target size, but</span></span>\n<span class=\"line\"><span style=\"\">// does not perform any \"scaling\". The cropping is calculated with the image</span></span>\n<span class=\"line\"><span style=\"\">// and the target rect \"center-aligned\". The image dimension with the smaller</span></span>\n<span class=\"line\"><span style=\"\">// (target_size / original_size) ratio gets cropped.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// A visual example with a portrait image whose dimensions exceeds a landscape</span></span>\n<span class=\"line\"><span style=\"\">// target size:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Before:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         Portrait Image</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// |      Landscape Target     |</span></span>\n<span class=\"line\"><span style=\"\">// |    +-----------------+    |</span></span>\n<span class=\"line\"><span style=\"\">// |    |                 |    |</span></span>\n<span class=\"line\"><span style=\"\">// |    |                 |    |</span></span>\n<span class=\"line\"><span style=\"\">// |    |                 |    |</span></span>\n<span class=\"line\"><span style=\"\">// |    |                 |    |</span></span>\n<span class=\"line\"><span style=\"\">// |    |                 |    |</span></span>\n<span class=\"line\"><span style=\"\">// |    +-----------------+    |</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// After (ok, maybe it's not the exact same aspect ratio, but you get the idea):</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         Cropped Image</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// |      Landscape Target     |</span></span>\n<span class=\"line\"><span style=\"\">// |    +-----------------+    |</span></span>\n<span class=\"line\"><span style=\"\">// |    |                 |    |</span></span>\n<span class=\"line\"><span style=\"\">// |    |                 |    |</span></span>\n<span class=\"line\"><span style=\"\">// |    |                 |    |</span></span>\n<span class=\"line\"><span style=\"\">// |    |                 |    |</span></span>\n<span class=\"line\"><span style=\"\">// |    |                 |    |</span></span>\n<span class=\"line\"><span style=\"\">// |    +-----------------+    |</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// |                           |</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The ultimate result is always a cropped image whose aspect ratio matches that</span></span>\n<span class=\"line\"><span style=\"\">// of the target size. Therefore, the cropped image can subsequently be scaled</span></span>\n<span class=\"line\"><span style=\"\">// up or down to match the dimensions of the target size.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// There are no requirements for the image and target dimensions other than that</span></span>\n<span class=\"line\"><span style=\"\">// they're non-empty. This function cannot fail; the returned SkBitmap is always</span></span>\n<span class=\"line\"><span style=\"\">// non-null and points to ref-counted pixel memory shared with |image|.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/utility/cropping_util.h#L17-L71",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/utility/cropping_util.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This module provides a display of frame-level performance metrics, rendered</span></span>\n<span class=\"line\"><span style=\"\">// in the lower-right corner of a VideoFrame.  It looks like this:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |                         @@@@@@@@@@@@@@@@@@@@@@@                     |</span></span>\n<span class=\"line\"><span style=\"\">// |                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     |</span></span>\n<span class=\"line\"><span style=\"\">// |              @@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@                   |</span></span>\n<span class=\"line\"><span style=\"\">// |             @@@@@@@@@@@@@                    @@@@                   |</span></span>\n<span class=\"line\"><span style=\"\">// |            @@@@@@@@@@                        @@@@                   |</span></span>\n<span class=\"line\"><span style=\"\">// |           @@@@@  @@@               @@@       @@@@                   |</span></span>\n<span class=\"line\"><span style=\"\">// |           @@@     @    @@@         @@@@      @@@@                   |</span></span>\n<span class=\"line\"><span style=\"\">// |          @@@@          @@@@                  @@@@                   |</span></span>\n<span class=\"line\"><span style=\"\">// |          @@@@                  @@@           @@@                    |</span></span>\n<span class=\"line\"><span style=\"\">// |            @@@@                 @@           @@@                    |</span></span>\n<span class=\"line\"><span style=\"\">// |             @@@@@      @@@            @@@   @@@                     |</span></span>\n<span class=\"line\"><span style=\"\">// |              @@@@@     @@@@@        @@@@   @@@@                     |</span></span>\n<span class=\"line\"><span style=\"\">// |               @@@@@      @@@@@@@@@@@@@    @@@@                      |</span></span>\n<span class=\"line\"><span style=\"\">// |                @@@@@@                    @@@@           1  45%  75% |</span></span>\n<span class=\"line\"><span style=\"\">// |                    @@@@@@@@         @@@@@@            22  400. 4000 |</span></span>\n<span class=\"line\"><span style=\"\">// |                         @@@@@@@@@@@@@@@@      16.7 1280x720 0:15.12 |</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Line 1: Reads as, \"1 frame ago, the encoder utilization for the frame was 45%</span></span>\n<span class=\"line\"><span style=\"\">// and the lossy utilization was 75%.\"  For CPU-bound encoders, encoder</span></span>\n<span class=\"line\"><span style=\"\">// utilization is usually measured as the amount of real-world time it took to</span></span>\n<span class=\"line\"><span style=\"\">// encode the frame, divided by the maximum amount of time allowed.  Lossy</span></span>\n<span class=\"line\"><span style=\"\">// utilization is the amount of \"complexity\" in the frame's content versus the</span></span>\n<span class=\"line\"><span style=\"\">// target encoded byte size, where a value over 100% means the frame's content</span></span>\n<span class=\"line\"><span style=\"\">// is too complex to encode within the target number of bytes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Line 2: Reads as, \"Capture of this frame took 22 ms.  The current target</span></span>\n<span class=\"line\"><span style=\"\">// playout delay is 400 ms and low-latency adjustment mode is not active.  The</span></span>\n<span class=\"line\"><span style=\"\">// target bitrate for this frame is 4000 kbps.\"  If there were an exclamation</span></span>\n<span class=\"line\"><span style=\"\">// mark (!) after the playout delay number instead of a period (.), it would</span></span>\n<span class=\"line\"><span style=\"\">// indicate low-latency adjustment mode is active.  See VideoSender for more</span></span>\n<span class=\"line\"><span style=\"\">// details.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Line 3: Contains the frame's duration (16.7 milliseconds), resolution, and</span></span>\n<span class=\"line\"><span style=\"\">// media timestamp in minutes:seconds.hundredths format.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/cast/sender/performance_metrics_overlay.h#L11-L49",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": true
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/cast/sender/performance_metrics_overlay.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Routines for encoding and decoding a small number of bits into an image</span></span>\n<span class=\"line\"><span style=\"\">// in a way that is decodable even after scaling/encoding/cropping.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The encoding is very simple:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   ####    ####    ########    ####        ####    ####</span></span>\n<span class=\"line\"><span style=\"\">//   ####    ####    ########    ####        ####    ####</span></span>\n<span class=\"line\"><span style=\"\">//   ####    ####    ########    ####        ####    ####</span></span>\n<span class=\"line\"><span style=\"\">//   ####    ####    ########    ####        ####    ####</span></span>\n<span class=\"line\"><span style=\"\">//   1   2   3   4   5   6   7   8   9   10  11  12  13  14</span></span>\n<span class=\"line\"><span style=\"\">//   &#x3C;-----start---->&#x3C;--one-bit->&#x3C;-zero bit->&#x3C;----stop----></span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// We use a basic unit, depicted here as four characters wide.</span></span>\n<span class=\"line\"><span style=\"\">// We start with 1u black 1u white 1u black 1u white. (1-4 above)</span></span>\n<span class=\"line\"><span style=\"\">// From there on, a \"one\" bit is encoded as 2u black and 1u white,</span></span>\n<span class=\"line\"><span style=\"\">// and a zero bit is encoded as 1u black and 2u white. After</span></span>\n<span class=\"line\"><span style=\"\">// all the bits we end the pattern with the same pattern as the</span></span>\n<span class=\"line\"><span style=\"\">// start of the pattern.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/cast/test/utility/barcode.cc#L5-L22",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/cast/test/utility/barcode.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Using position based test API:</span></span>\n<span class=\"line\"><span style=\"\">// DTS  :  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20</span></span>\n<span class=\"line\"><span style=\"\">// PTS  :  0  4  1  2  3  5  9  6  7  8 10 14 11 12 13 15 19 16 17 18 20</span></span>\n<span class=\"line\"><span style=\"\">// old  :                                A  a  a  a  a  A  a  a  a  a</span></span>\n<span class=\"line\"><span style=\"\">// new  :                 B  b  b  b  b  B  b  b</span></span>\n<span class=\"line\"><span style=\"\">// after:                 B  b  b  b  b  B  b  b        A  a  a  a  a</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/filters/source_buffer_stream_unittest.cc#L844-L849",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/filters/source_buffer_stream_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\">Window shape (global coordinates)</span></span>\n<span class=\"line\"><span style=\"\">(0,0)_____________</span></span>\n<span class=\"line\"><span style=\"\">    |.   * | *    | &#x3C;- mouse move (1,1)</span></span>\n<span class=\"line\"><span style=\"\">    | *    |    * |</span></span>\n<span class=\"line\"><span style=\"\">    |*_____|     *|</span></span>\n<span class=\"line\"><span style=\"\">    |*     (r,r) *|</span></span>\n<span class=\"line\"><span style=\"\">    | *        *  |</span></span>\n<span class=\"line\"><span style=\"\">    |____*___*____|</span></span>\n<span class=\"line\"><span style=\"\">                  (2r, 2r)</span></span>\n<span class=\"line\"><span style=\"\">This mouse event hits the square but not the circular window targeter.*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/utility/rounded_window_targeter_unittest.cc#L47-L57",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/utility/rounded_window_targeter_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Implementation notes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This class provides audio decoding via MediaCodec.  It allocates the</span></span>\n<span class=\"line\"><span style=\"\">// MediaCodecBridge instance, and hands ownership to MediaCodecLoop to drive I/O</span></span>\n<span class=\"line\"><span style=\"\">// with the codec.  For encrypted streams, we also talk to the DRM bridge.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Because both dequeuing and enqueuing of an input buffer can fail, the</span></span>\n<span class=\"line\"><span style=\"\">// implementation puts the input |DecoderBuffer|s and the corresponding decode</span></span>\n<span class=\"line\"><span style=\"\">// callbacks into an input queue. The decoder has a timer that periodically</span></span>\n<span class=\"line\"><span style=\"\">// fires the decoding cycle that has two steps. The first step tries to send the</span></span>\n<span class=\"line\"><span style=\"\">// front buffer from the input queue to MediaCodecLoop. In the case of success</span></span>\n<span class=\"line\"><span style=\"\">// the element is removed from the queue, the decode callback is fired and the</span></span>\n<span class=\"line\"><span style=\"\">// decoding process advances. The second step tries to dequeue an output buffer,</span></span>\n<span class=\"line\"><span style=\"\">// and uses it in the case of success.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// An EOS buffer is handled differently.  Success is not signalled to the decode</span></span>\n<span class=\"line\"><span style=\"\">// callback until the EOS is received at the output.  So, for EOS, the decode</span></span>\n<span class=\"line\"><span style=\"\">// callback indicates that all previous decodes have completed.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The failures in both steps are normal and they happen periodically since</span></span>\n<span class=\"line\"><span style=\"\">// both input and output buffers become available at unpredictable moments. The</span></span>\n<span class=\"line\"><span style=\"\">// timer is here to repeat the dequeueing attempts.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// State diagram.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   [Uninitialized] &#x3C;-> (init failed)</span></span>\n<span class=\"line\"><span style=\"\">//     |         |</span></span>\n<span class=\"line\"><span style=\"\">//   (no enc.)  (encrypted)</span></span>\n<span class=\"line\"><span style=\"\">//     |         |</span></span>\n<span class=\"line\"><span style=\"\">//     |        [WaitingForMediaCrypto] -- (OMCR failure) --> [Uninitialized]</span></span>\n<span class=\"line\"><span style=\"\">//     |               | (OnMediaCryptoReady success)</span></span>\n<span class=\"line\"><span style=\"\">//     v               v</span></span>\n<span class=\"line\"><span style=\"\">//   (Create Codec and MediaCodecLoop)</span></span>\n<span class=\"line\"><span style=\"\">//     |</span></span>\n<span class=\"line\"><span style=\"\">//     \\--> [Ready] -(any error)-> [Error]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     -[Any state]-</span></span>\n<span class=\"line\"><span style=\"\">//    |             |</span></span>\n<span class=\"line\"><span style=\"\">// (Reset ok) (Reset fails)</span></span>\n<span class=\"line\"><span style=\"\">//    |             |</span></span>\n<span class=\"line\"><span style=\"\">// [Ready]       [Error]</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/filters/android/media_codec_audio_decoder.h#L29-L69",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/filters/android/media_codec_audio_decoder.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// A VA-API-specific decode surface used by VaapiH264Decoder to decode into</span></span>\n<span class=\"line\"><span style=\"\">// and use as reference for decoding other surfaces. It is also handed by the</span></span>\n<span class=\"line\"><span style=\"\">// decoder to VaapiVideoDecodeAccelerator when the contents of the surface are</span></span>\n<span class=\"line\"><span style=\"\">// ready and should be displayed. VAVDA converts the surface contents into an</span></span>\n<span class=\"line\"><span style=\"\">// X/Drm Pixmap bound to a texture for display and releases its reference to it.</span></span>\n<span class=\"line\"><span style=\"\">// Decoder releases its references to the surface when it's done decoding and</span></span>\n<span class=\"line\"><span style=\"\">// using it as reference. Note that a surface may still be used for reference</span></span>\n<span class=\"line\"><span style=\"\">// after it's been sent to output and also after it is no longer used by VAVDA.</span></span>\n<span class=\"line\"><span style=\"\">// Thus, the surface can be in use by both VAVDA and the Decoder at the same</span></span>\n<span class=\"line\"><span style=\"\">// time, or by either of them, with the restriction that VAVDA will never get</span></span>\n<span class=\"line\"><span style=\"\">// the surface until the contents are ready, and it is guaranteed that the</span></span>\n<span class=\"line\"><span style=\"\">// contents will not change after that.</span></span>\n<span class=\"line\"><span style=\"\">// When both the decoder and VAVDA release their references to the surface,</span></span>\n<span class=\"line\"><span style=\"\">// it is freed and the release callback is executed to put the surface back</span></span>\n<span class=\"line\"><span style=\"\">// into available surfaces pool, which is managed externally.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   VASurfaceID is allocated in VaapiWrapper.</span></span>\n<span class=\"line\"><span style=\"\">//        |</span></span>\n<span class=\"line\"><span style=\"\">// +----->|</span></span>\n<span class=\"line\"><span style=\"\">// |      v</span></span>\n<span class=\"line\"><span style=\"\">// | VASurfaceID is put onto VaapiVideoDecodeAccelerator::available_va_surfaces_</span></span>\n<span class=\"line\"><span style=\"\">// |      |      list.</span></span>\n<span class=\"line\"><span style=\"\">// |      v</span></span>\n<span class=\"line\"><span style=\"\">// | VASurfaceID is taken off of the VVDA:available_va_surfaces_ when</span></span>\n<span class=\"line\"><span style=\"\">// |      |      VaapiH264Decoder requests more output surfaces, is wrapped into</span></span>\n<span class=\"line\"><span style=\"\">// |      |      a VASurface and passed to VaapiH264Decoder.</span></span>\n<span class=\"line\"><span style=\"\">// |      v</span></span>\n<span class=\"line\"><span style=\"\">// | VASurface is put onto VaapiH264Decoder::available_va_surfaces_, keeping</span></span>\n<span class=\"line\"><span style=\"\">// |      |      the only reference to it until it's needed for decoding.</span></span>\n<span class=\"line\"><span style=\"\">// |      v</span></span>\n<span class=\"line\"><span style=\"\">// | VaapiH264Decoder starts decoding a new frame. It takes a VASurface off of</span></span>\n<span class=\"line\"><span style=\"\">// |      |      VHD::available_va_surfaces_ and assigns it to a DecodeSurface,</span></span>\n<span class=\"line\"><span style=\"\">// |      |      which now keeps the only reference.</span></span>\n<span class=\"line\"><span style=\"\">// |      v</span></span>\n<span class=\"line\"><span style=\"\">// | DecodeSurface is used for decoding, putting data into associated VASurface.</span></span>\n<span class=\"line\"><span style=\"\">// |      |</span></span>\n<span class=\"line\"><span style=\"\">// |      |--------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |      |                                                  |</span></span>\n<span class=\"line\"><span style=\"\">// |      v                                                  v</span></span>\n<span class=\"line\"><span style=\"\">// | DecodeSurface is to be output.              VaapiH264Decoder uses the</span></span>\n<span class=\"line\"><span style=\"\">// | VaapiH264Decoder passes the associated      DecodeSurface and associated</span></span>\n<span class=\"line\"><span style=\"\">// | VASurface to VaapiVideoDecodeAccelerator,   VASurface as reference for</span></span>\n<span class=\"line\"><span style=\"\">// | which stores it (taking a ref) on           decoding more frames.</span></span>\n<span class=\"line\"><span style=\"\">// | pending_output_cbs_ queue until an output               |</span></span>\n<span class=\"line\"><span style=\"\">// | VaapiPicture becomes available.                         v</span></span>\n<span class=\"line\"><span style=\"\">// |                 |                           Once the DecodeSurface is not</span></span>\n<span class=\"line\"><span style=\"\">// |                 |                           needed as reference anymore,</span></span>\n<span class=\"line\"><span style=\"\">// |                 v                           it is released, releasing the</span></span>\n<span class=\"line\"><span style=\"\">// | A VaapiPicture becomes available after      associated VASurface reference.</span></span>\n<span class=\"line\"><span style=\"\">// | the client of VVDA returns                              |</span></span>\n<span class=\"line\"><span style=\"\">// | a PictureBuffer associated with it. VVDA                |</span></span>\n<span class=\"line\"><span style=\"\">// | puts the contents of the VASurface into                 |</span></span>\n<span class=\"line\"><span style=\"\">// | it and releases the reference to VASurface.             |</span></span>\n<span class=\"line\"><span style=\"\">// |                 |                                       |</span></span>\n<span class=\"line\"><span style=\"\">// |                 '---------------------------------------'</span></span>\n<span class=\"line\"><span style=\"\">// |                                     |</span></span>\n<span class=\"line\"><span style=\"\">// |                                     v</span></span>\n<span class=\"line\"><span style=\"\">// | Neither VVDA nor VHD hold a reference to VASurface. VASurface is released,</span></span>\n<span class=\"line\"><span style=\"\">// | ReleaseCB gets called in its destructor, which puts the associated</span></span>\n<span class=\"line\"><span style=\"\">// | VASurfaceID back onto VVDA::available_va_surfaces_.</span></span>\n<span class=\"line\"><span style=\"\">// |                                     |</span></span>\n<span class=\"line\"><span style=\"\">// '-------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//                                       |</span></span>\n<span class=\"line\"><span style=\"\">//                                       v</span></span>\n<span class=\"line\"><span style=\"\">//                       VaapiWrapper frees VASurfaceID.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/gpu/vaapi/va_surface.h#L19-L84",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "chromium/media/gpu/vaapi/va_surface.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This file is the Mojo version of the media::VideoEncodeAccelerator interface</span></span>\n<span class=\"line\"><span style=\"\">// and describes the communication between a Client and a remote \"service\"</span></span>\n<span class=\"line\"><span style=\"\">// VideoEncodeAccelerator (VEA) with the purpose of encoding Video Frames by</span></span>\n<span class=\"line\"><span style=\"\">// means of hardware accelerated features.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   Client                                    VideoEncodeAccelerator</span></span>\n<span class=\"line\"><span style=\"\">//      | ---> Initialize                                       |</span></span>\n<span class=\"line\"><span style=\"\">//      |                     RequireBitstreamBuffers(N) &#x3C;---   |</span></span>\n<span class=\"line\"><span style=\"\">//      | ---> UseOutputBitstreamBuffer(0)                      |</span></span>\n<span class=\"line\"><span style=\"\">//      | ---> UseOutputBitstreamBuffer(1)                      |</span></span>\n<span class=\"line\"><span style=\"\">//      |  ...                                                  |</span></span>\n<span class=\"line\"><span style=\"\">//      =                                                       =</span></span>\n<span class=\"line\"><span style=\"\">// The Client requests a remote Encode() and eventually the VEA will leave the</span></span>\n<span class=\"line\"><span style=\"\">// encoded results in a pre-shared BitstreamBuffer, that is then restored to the</span></span>\n<span class=\"line\"><span style=\"\">// VEA when the Client is finished with it. Note that there might not be a 1:1</span></span>\n<span class=\"line\"><span style=\"\">// relationship between Encode() and BitstreamBufferReady() calls.</span></span>\n<span class=\"line\"><span style=\"\">//      | ---> Encode()                                         |</span></span>\n<span class=\"line\"><span style=\"\">//      |                        BitstreamBufferReady(k) &#x3C;---   |</span></span>\n<span class=\"line\"><span style=\"\">//      | ---> UseOutputBitstreamBuffer(k)                      |</span></span>\n<span class=\"line\"><span style=\"\">//      =                                                       =</span></span>\n<span class=\"line\"><span style=\"\">// At any time the VEA can send a NotifyError() to the Client. Similarly at any</span></span>\n<span class=\"line\"><span style=\"\">// time the Client can send a RequestEncodingParametersChange() to the VEA. None</span></span>\n<span class=\"line\"><span style=\"\">// of these messages are acknowledged.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/media/mojo/mojom/video_encode_accelerator.mojom#L15-L37",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/media/mojo/mojom/video_encode_accelerator.mojom"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Data pipe attachments come in two parts within a message's handle list: the</span></span>\n<span class=\"line\"><span style=\"\">// DataPipe object wherever it was placed by the sender, and its control portal</span></span>\n<span class=\"line\"><span style=\"\">// as a separate attachment at the end of the handle list. For a message with</span></span>\n<span class=\"line\"><span style=\"\">// two data pipes endpoints (X and Y) and two message pipe endpoints(A and B),</span></span>\n<span class=\"line\"><span style=\"\">// sent in the order AXBY, a well-formed message will have 6 total handles</span></span>\n<span class=\"line\"><span style=\"\">// attached:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Message Pipe A   Message Pipe B   DataPipe X's portal</span></span>\n<span class=\"line\"><span style=\"\">//      |               |              |</span></span>\n<span class=\"line\"><span style=\"\">//     0:A     1:X     2:B     3:Y    4:x    5:y</span></span>\n<span class=\"line\"><span style=\"\">//              |               |             |</span></span>\n<span class=\"line\"><span style=\"\">//          DataPipe X       DataPipe Y      DataPipe Y's portal</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This function validates that each DataPipe in `handles` has an associated</span></span>\n<span class=\"line\"><span style=\"\">// portal, and it fixes up `handles` by stripping those portals off the end of</span></span>\n<span class=\"line\"><span style=\"\">// the list and passing ownership to their corresponding DataPipe object.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Returns true if and only if the handle list is well-formed in this regard.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// TODO(https://crbug.com/1382170): Since boxes now support application objects,</span></span>\n<span class=\"line\"><span style=\"\">// DataPipe can be migrated out of the driver and we can avoid this whole</span></span>\n<span class=\"line\"><span style=\"\">// serialization hack.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/mojo/core/ipcz_driver/mojo_message.cc#L24-L45",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/mojo/core/ipcz_driver/mojo_message.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// An interface proxy can represent either end of a cross-process interface</span></span>\n<span class=\"line\"><span style=\"\">// call. The \"source\" side is where the call is invoked, and the \"target\" side</span></span>\n<span class=\"line\"><span style=\"\">// is where the call ends up being executed.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Plugin side                          | Browser side</span></span>\n<span class=\"line\"><span style=\"\">// -------------------------------------|--------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//                                      |</span></span>\n<span class=\"line\"><span style=\"\">//    \"Source\"                          |    \"Target\"</span></span>\n<span class=\"line\"><span style=\"\">//    InterfaceProxy ----------------------> InterfaceProxy</span></span>\n<span class=\"line\"><span style=\"\">//                                      |</span></span>\n<span class=\"line\"><span style=\"\">//                                      |</span></span>\n<span class=\"line\"><span style=\"\">//    \"Target\"                          |    \"Source\"</span></span>\n<span class=\"line\"><span style=\"\">//    InterfaceProxy &#x3C;---------------------- InterfaceProxy</span></span>\n<span class=\"line\"><span style=\"\">//                                      |</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ppapi/proxy/dispatcher.h#L33-L46",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ppapi/proxy/dispatcher.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Transposes matrix [ m0, m1, m2, m3, m4, m5, m6, m7, m8 ]:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// | m0, m1, m2, |   | x |</span></span>\n<span class=\"line\"><span style=\"\">// | m3, m4, m5, | * | y |</span></span>\n<span class=\"line\"><span style=\"\">// | m6, m7, m8  |   | 1 |</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Into [ m0, m3, m6, m1, m4, m7, m2, m5, m8 ].</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/client/display/gl_math.h#L13-L19",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/client/display/gl_math.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// A 2D non-skew equally scaled transformation matrix.</span></span>\n<span class=\"line\"><span style=\"\">// | SCALE, 0,     OFFSET_X, |</span></span>\n<span class=\"line\"><span style=\"\">// | 0,     SCALE, OFFSET_Y, |</span></span>\n<span class=\"line\"><span style=\"\">// | 0,     0,     1         |</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/client/ui/view_matrix.h#L12-L15",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/client/ui/view_matrix.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Set up multiple displays:</span></span>\n<span class=\"line\"><span style=\"\">// +-----------+</span></span>\n<span class=\"line\"><span style=\"\">// |  800x600  |---------------+</span></span>\n<span class=\"line\"><span style=\"\">// |     0     |   1024x768    |</span></span>\n<span class=\"line\"><span style=\"\">// +-----------+       1       |</span></span>\n<span class=\"line\"><span style=\"\">//             |               |</span></span>\n<span class=\"line\"><span style=\"\">//             +---------------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/host/client_session_unittest.cc#L387-L393",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/host/client_session_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Calculate the offset from the origin of the desktop to the origin of the</span></span>\n<span class=\"line\"><span style=\"\">// specified display.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For Mac and ChromeOS, the origin of the desktop is the origin of the default</span></span>\n<span class=\"line\"><span style=\"\">// display.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For Windows/Linux, the origin of the desktop is the upper-left of the</span></span>\n<span class=\"line\"><span style=\"\">// entire desktop region.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// x         b-----------+            ---</span></span>\n<span class=\"line\"><span style=\"\">//           |           |             |  y-offset to c</span></span>\n<span class=\"line\"><span style=\"\">// a---------+           |             |</span></span>\n<span class=\"line\"><span style=\"\">// |         +-------c---+-------+    ---</span></span>\n<span class=\"line\"><span style=\"\">// |         |       |           |</span></span>\n<span class=\"line\"><span style=\"\">// +---------+       |           |</span></span>\n<span class=\"line\"><span style=\"\">//                   +-----------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// |-----------------|</span></span>\n<span class=\"line\"><span style=\"\">//    x-offset to c</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// x = upper left of desktop</span></span>\n<span class=\"line\"><span style=\"\">// a,b,c = origin of display A,B,C</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/host/desktop_display_info.cc#L81-L102",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/host/desktop_display_info.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// o---------+</span></span>\n<span class=\"line\"><span style=\"\">// | 0       |</span></span>\n<span class=\"line\"><span style=\"\">// | 300x200 |</span></span>\n<span class=\"line\"><span style=\"\">// +---------+</span></span>\n<span class=\"line\"><span style=\"\">// o = desktop origin</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/host/desktop_display_info_unittest.cc#L46-L50",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/host/desktop_display_info_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// A view that shows the contents of the corresponding desk in its mini_view.</span></span>\n<span class=\"line\"><span style=\"\">// This view has the following layer hierarchy:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                +---------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                |             &#x3C;-------------+------  This view's layer.</span></span>\n<span class=\"line\"><span style=\"\">//                +---------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//              /    |          |               \\  ----->>>>> Higher in Z-order.</span></span>\n<span class=\"line\"><span style=\"\">//             /     |          |                \\</span></span>\n<span class=\"line\"><span style=\"\">//     +-----+    +-----+    +-----+               +-----+</span></span>\n<span class=\"line\"><span style=\"\">//     |     |    |     |    |     |               |     |</span></span>\n<span class=\"line\"><span style=\"\">//     +-----+    +-----+    +-----+               +-----+</span></span>\n<span class=\"line\"><span style=\"\">//        ^          ^          ^    \\                ^</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |     \\ +-----+       |</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |       |     |       |</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |       +-----+       |</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |          ^          |</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |          |   `highlight_overlay_`'s layer:</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |          |   A solid color layer that is</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |          |   visible when `mini_view_`'s</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |          |   `DeskActionContextMenu` is open.</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |          |</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |          |</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |    The root layer of the desk's mirrored</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |    contents layer tree. This tree is owned by</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |    `desk_mirrored_contents_layer_tree_owner_`.</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |</span></span>\n<span class=\"line\"><span style=\"\">//        |          |          |</span></span>\n<span class=\"line\"><span style=\"\">//        |          |     `desk_mirrored_contents_view_`'s layer: Will be the</span></span>\n<span class=\"line\"><span style=\"\">//        |          |      parent layer of the desk's contents mirrored layer</span></span>\n<span class=\"line\"><span style=\"\">//        |          |      tree.</span></span>\n<span class=\"line\"><span style=\"\">//        |          |</span></span>\n<span class=\"line\"><span style=\"\">//        |          |</span></span>\n<span class=\"line\"><span style=\"\">//        |     `wallpaper_preview_`'s layer: On which the wallpaper is painted</span></span>\n<span class=\"line\"><span style=\"\">//        |      without the dimming and blur that overview mode adds.</span></span>\n<span class=\"line\"><span style=\"\">//        |</span></span>\n<span class=\"line\"><span style=\"\">//        |</span></span>\n<span class=\"line\"><span style=\"\">//     `shadow_layer_`: A layer that paints a shadow behind this view.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that `desk_mirrored_contents_view_`, `wallpaper_preview_`, and</span></span>\n<span class=\"line\"><span style=\"\">// `highlight_overlay_` paint to layers with rounded corners. In order to use</span></span>\n<span class=\"line\"><span style=\"\">// the fast rounded corners implementation we must make them sibling layers,</span></span>\n<span class=\"line\"><span style=\"\">// rather than one being a descendant of the other. Otherwise, this will trigger</span></span>\n<span class=\"line\"><span style=\"\">// a render surface.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/wm/desks/desk_preview_view.h#L27-L69",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/wm/desks/desk_preview_view.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Default display = Left (A)</span></span>\n<span class=\"line\"><span style=\"\">// o-------------+-----------------+</span></span>\n<span class=\"line\"><span style=\"\">// | A           | B               |</span></span>\n<span class=\"line\"><span style=\"\">// | 2560x1440   | 3840x2160       |</span></span>\n<span class=\"line\"><span style=\"\">// |             |                 |</span></span>\n<span class=\"line\"><span style=\"\">// |-------------+                 |</span></span>\n<span class=\"line\"><span style=\"\">//               +-----------------+</span></span>\n<span class=\"line\"><span style=\"\">// o = desktop origin</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/protocol/mouse_input_filter_unittest.cc#L200-L207",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/protocol/mouse_input_filter_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Class responsible for scheduling frame captures from a screen capturer,</span></span>\n<span class=\"line\"><span style=\"\">// delivering them to a VideoEncoder to encode, and finally passing the encoded</span></span>\n<span class=\"line\"><span style=\"\">// video packets to the specified VideoStub to send on the network.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// THREADING</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This class is supplied TaskRunners to use for capture, encode and network</span></span>\n<span class=\"line\"><span style=\"\">// operations.  Capture, encode and network transmission tasks are interleaved</span></span>\n<span class=\"line\"><span style=\"\">// as illustrated below:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// |       CAPTURE       ENCODE     NETWORK</span></span>\n<span class=\"line\"><span style=\"\">// |    .............</span></span>\n<span class=\"line\"><span style=\"\">// |    .  Capture  .</span></span>\n<span class=\"line\"><span style=\"\">// |    .............</span></span>\n<span class=\"line\"><span style=\"\">// |                  ............</span></span>\n<span class=\"line\"><span style=\"\">// |                  .          .</span></span>\n<span class=\"line\"><span style=\"\">// |    ............. .          .</span></span>\n<span class=\"line\"><span style=\"\">// |    .  Capture  . .  Encode  .</span></span>\n<span class=\"line\"><span style=\"\">// |    ............. .          .</span></span>\n<span class=\"line\"><span style=\"\">// |                  .          .</span></span>\n<span class=\"line\"><span style=\"\">// |                  ............</span></span>\n<span class=\"line\"><span style=\"\">// |    ............. ............ ..........</span></span>\n<span class=\"line\"><span style=\"\">// |    .  Capture  . .          . .  Send  .</span></span>\n<span class=\"line\"><span style=\"\">// |    ............. .          . ..........</span></span>\n<span class=\"line\"><span style=\"\">// |                  .  Encode  .</span></span>\n<span class=\"line\"><span style=\"\">// |                  .          .</span></span>\n<span class=\"line\"><span style=\"\">// |                  .          .</span></span>\n<span class=\"line\"><span style=\"\">// |                  ............</span></span>\n<span class=\"line\"><span style=\"\">// | Time</span></span>\n<span class=\"line\"><span style=\"\">// v</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// VideoFramePump would ideally schedule captures so as to saturate the slowest</span></span>\n<span class=\"line\"><span style=\"\">// of the capture, encode and network processes.  However, it also needs to</span></span>\n<span class=\"line\"><span style=\"\">// rate-limit captures to avoid overloading the host system, either by consuming</span></span>\n<span class=\"line\"><span style=\"\">// too much CPU, or hogging the host's graphics subsystem.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/remoting/protocol/video_frame_pump.h#L33-L67",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/remoting/protocol/video_frame_pump.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// | path + null_byte |</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/sandbox/linux/syscall_broker/remote_syscall_arg_handler_unittest.cc#L117-L117",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/sandbox/linux/syscall_broker/remote_syscall_arg_handler_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This is the IPC server interface for CrossCall: The  IPC for the Sandbox</span></span>\n<span class=\"line\"><span style=\"\">// On the server, CrossCall needs two things:</span></span>\n<span class=\"line\"><span style=\"\">// 1) threads: Or better said, someone to provide them, that is what the</span></span>\n<span class=\"line\"><span style=\"\">//             ThreadPool is for. These thread(s) are</span></span>\n<span class=\"line\"><span style=\"\">//             the ones that will actually execute the IPC data retrieval.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 2) a dispatcher: This interface represents the way to route and process</span></span>\n<span class=\"line\"><span style=\"\">//                  an  IPC call given the  IPC tag.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The other class included here CrossCallParamsEx is the server side version</span></span>\n<span class=\"line\"><span style=\"\">// of the CrossCallParams class of /sandbox/crosscall_params.h The difference</span></span>\n<span class=\"line\"><span style=\"\">// is that the sever version is paranoid about the correctness of the IPC</span></span>\n<span class=\"line\"><span style=\"\">// message and will do all sorts of verifications.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// A general diagram of the interaction is as follows:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                                 ------------</span></span>\n<span class=\"line\"><span style=\"\">//                                 |          |</span></span>\n<span class=\"line\"><span style=\"\">//  ThreadPool&#x3C;-------(1)Register--|  IPC     |</span></span>\n<span class=\"line\"><span style=\"\">//      |                          | Implemen |</span></span>\n<span class=\"line\"><span style=\"\">//      |                          | -tation  |</span></span>\n<span class=\"line\"><span style=\"\">//     (2)                         |          |  OnMessage</span></span>\n<span class=\"line\"><span style=\"\">//     IPC fired --callback ------>|          |--(3)---> Dispatcher</span></span>\n<span class=\"line\"><span style=\"\">//                                 |          |</span></span>\n<span class=\"line\"><span style=\"\">//                                 ------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  The  IPC implementation sits as a middleman between the handling of the</span></span>\n<span class=\"line\"><span style=\"\">//  specifics of scheduling a thread to service the  IPC and the multiple</span></span>\n<span class=\"line\"><span style=\"\">//  entities that can potentially serve each particular IPC.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/sandbox/win/src/crosscall_server.h#L18-L46",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/sandbox/win/src/crosscall_server.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Performs the desk switch animation on a root window (i.e. display). Since a</span></span>\n<span class=\"line\"><span style=\"\">// desk spans all displays, one instance of this object will be created for each</span></span>\n<span class=\"line\"><span style=\"\">// display when a new desk is activated.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Screenshots of the starting and ending desks are taken, and we animate</span></span>\n<span class=\"line\"><span style=\"\">// between them such that the starting desk can appear sliding out of the</span></span>\n<span class=\"line\"><span style=\"\">// screen, while the ending desk is sliding in. We take screenshots to make the</span></span>\n<span class=\"line\"><span style=\"\">// visible state of the desks seem constant to the user (e.g. if the starting</span></span>\n<span class=\"line\"><span style=\"\">// desk is in overview, it appears to remain in overview while sliding out).</span></span>\n<span class=\"line\"><span style=\"\">// This approach makes it possible to show an empty black space separating both</span></span>\n<span class=\"line\"><span style=\"\">// desks while we animate them (See |kDesksSpacing|). The ending desk may change</span></span>\n<span class=\"line\"><span style=\"\">// after the animation has started. In this case, a new animation will replace</span></span>\n<span class=\"line\"><span style=\"\">// the current one and animate to the new ending desk, requesting a new</span></span>\n<span class=\"line\"><span style=\"\">// screenshot if necessary.</span></span>\n<span class=\"line\"><span style=\"\">// - `starting` desk: is the currently activated desk which will be deactivated</span></span>\n<span class=\"line\"><span style=\"\">//    shortly.</span></span>\n<span class=\"line\"><span style=\"\">// - `ending` desk: is the desk desired to be activated with this animation.</span></span>\n<span class=\"line\"><span style=\"\">// These can be changed if the enhanced desk animations feature is enabled using</span></span>\n<span class=\"line\"><span style=\"\">// ReplaceAnimation() or UpdateSwipeAnimation().</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The animation goes through the following phases:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// - Phase (1) begins by calling TakeStartingDeskScreenshot(), which should be</span></span>\n<span class=\"line\"><span style=\"\">//   called before the ending desk is activated.</span></span>\n<span class=\"line\"><span style=\"\">//   * Once the screenshot is taken, it is placed in a layer that covers</span></span>\n<span class=\"line\"><span style=\"\">//     everything on the screen, so that desk activation can happen without</span></span>\n<span class=\"line\"><span style=\"\">//     being seen.</span></span>\n<span class=\"line\"><span style=\"\">//   * Delegate::OnStartingDeskScreenshotTaken() is called, and the owner of</span></span>\n<span class=\"line\"><span style=\"\">//     this object can check that all animators of all root windows have</span></span>\n<span class=\"line\"><span style=\"\">//     finished taking the starting desk screenshots (through checking</span></span>\n<span class=\"line\"><span style=\"\">//     starting_desk_screenshot_taken()), upon which the actual ending desk</span></span>\n<span class=\"line\"><span style=\"\">//     activation can take place, and phase (2) of the animation can be</span></span>\n<span class=\"line\"><span style=\"\">//     triggered.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// - Phase (2) should begin after the ending desk had been activated,</span></span>\n<span class=\"line\"><span style=\"\">//   by calling TakeEndingDeskScreenshot().</span></span>\n<span class=\"line\"><span style=\"\">//   * Once the screenshot is taken, it is placed in a sibling layer to the</span></span>\n<span class=\"line\"><span style=\"\">//     starting desk screenshot layer, with an offset of |kDesksSpacing| between</span></span>\n<span class=\"line\"><span style=\"\">//     the two layers.</span></span>\n<span class=\"line\"><span style=\"\">//   * Delegate::OnEndingDeskScreenshotTaken() will be called, upon which the</span></span>\n<span class=\"line\"><span style=\"\">//     owner of this object can check if all ending desks screenshots on all</span></span>\n<span class=\"line\"><span style=\"\">//     roots are taken by all animators (through checking</span></span>\n<span class=\"line\"><span style=\"\">//     ending_desk_screenshot_taken()), so that it can start phase (3) on all of</span></span>\n<span class=\"line\"><span style=\"\">//     them at the same time.</span></span>\n<span class=\"line\"><span style=\"\">//   * Phase (2) can be rentered after starting phase (3) by calling</span></span>\n<span class=\"line\"><span style=\"\">//     ReplaceAnimation() or UpdateSwipeAnimation(). The new ending desk will</span></span>\n<span class=\"line\"><span style=\"\">//     change, and if it does not have an associated screenshot layer, the</span></span>\n<span class=\"line\"><span style=\"\">//     caller will be responsible for requesting one using</span></span>\n<span class=\"line\"><span style=\"\">//     TakeEndingDeskScreenshot(). The screenshots are taken as needed since</span></span>\n<span class=\"line\"><span style=\"\">//     their layers are fullscreen and require activating a desk which may be a</span></span>\n<span class=\"line\"><span style=\"\">//     large operation for something that the user may not see. Once the</span></span>\n<span class=\"line\"><span style=\"\">//     screenshot is taken, it is kept until |this| is destroyed. If an</span></span>\n<span class=\"line\"><span style=\"\">//     associated screenshot layer exists already, ReplaceAnimation() and</span></span>\n<span class=\"line\"><span style=\"\">//     UpdateSwipeAnimation() can proceed without returning to phase (2).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// - Phase (3) begins when StartAnimation() is called.</span></span>\n<span class=\"line\"><span style=\"\">//   * The parent layer of both screenshot layers is animated, either:</span></span>\n<span class=\"line\"><span style=\"\">//     - To the left (starting_desk_index_ &#x3C; ending_desk_index_); when the</span></span>\n<span class=\"line\"><span style=\"\">//       starting desk is on the left.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//              &#x3C;&#x3C;&#x3C;&#x3C;&#x3C;-------------------------- move left.</span></span>\n<span class=\"line\"><span style=\"\">//                       +-----------+</span></span>\n<span class=\"line\"><span style=\"\">//                       | Animation |</span></span>\n<span class=\"line\"><span style=\"\">//                       |  layer    |</span></span>\n<span class=\"line\"><span style=\"\">//                       +-----------+</span></span>\n<span class=\"line\"><span style=\"\">//                         /        \\</span></span>\n<span class=\"line\"><span style=\"\">//              +------------+      +------------+</span></span>\n<span class=\"line\"><span style=\"\">//              | start desk |      | end desk   |</span></span>\n<span class=\"line\"><span style=\"\">//              | screenshot |      | screenshot |</span></span>\n<span class=\"line\"><span style=\"\">//              |  layer     |      |  layer     |</span></span>\n<span class=\"line\"><span style=\"\">//              +------------+      +------------+</span></span>\n<span class=\"line\"><span style=\"\">//                    ^</span></span>\n<span class=\"line\"><span style=\"\">//                start here</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//       Animation layer transforms:</span></span>\n<span class=\"line\"><span style=\"\">//       * Begin transform: The transform that will make the starting desk</span></span>\n<span class=\"line\"><span style=\"\">//         screenshot visible. In this case it is a transform with translation</span></span>\n<span class=\"line\"><span style=\"\">//         (edge_padding_width_dp_, 0).</span></span>\n<span class=\"line\"><span style=\"\">//       * End transform: The transform that will make the ending desk</span></span>\n<span class=\"line\"><span style=\"\">//         screenshot visible. In this case it is a transform with translation</span></span>\n<span class=\"line\"><span style=\"\">//         (-|edge_padding_width_dp_| - |x_translation_offset_| -</span></span>\n<span class=\"line\"><span style=\"\">//         |kDesksSpacing|, 0).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     - Or to the right (starting_desk_index_ > ending_desk_index_), when the</span></span>\n<span class=\"line\"><span style=\"\">//       starting desk is on the right.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//          move right. -------------------------->>>>></span></span>\n<span class=\"line\"><span style=\"\">//                       +-----------+</span></span>\n<span class=\"line\"><span style=\"\">//                       | Animation |</span></span>\n<span class=\"line\"><span style=\"\">//                       |  layer    |</span></span>\n<span class=\"line\"><span style=\"\">//                       +-----------+</span></span>\n<span class=\"line\"><span style=\"\">//                         /        \\</span></span>\n<span class=\"line\"><span style=\"\">//              +------------+      +------------+</span></span>\n<span class=\"line\"><span style=\"\">//              | end desk   |      | start desk |</span></span>\n<span class=\"line\"><span style=\"\">//              | screenshot |      | screenshot |</span></span>\n<span class=\"line\"><span style=\"\">//              |  layer     |      |  layer     |</span></span>\n<span class=\"line\"><span style=\"\">//              +------------+      +------------+</span></span>\n<span class=\"line\"><span style=\"\">//                                        ^</span></span>\n<span class=\"line\"><span style=\"\">//                                    start here</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//       Animation layer transforms:</span></span>\n<span class=\"line\"><span style=\"\">//       * Begin transform: The transform that will make the starting desk</span></span>\n<span class=\"line\"><span style=\"\">//         screenshot visible. In this case it is a transform with translation</span></span>\n<span class=\"line\"><span style=\"\">//         (-|edge_padding_width_dp_| - |x_translation_offset_| -</span></span>\n<span class=\"line\"><span style=\"\">//         |kDesksSpacing|, 0).</span></span>\n<span class=\"line\"><span style=\"\">//       * End transform: The transform that will make the ending desk</span></span>\n<span class=\"line\"><span style=\"\">//         screenshot visible. In this case it is a transform with translation</span></span>\n<span class=\"line\"><span style=\"\">//         (edge_padding_width_dp_, 0).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   * The animation always begins such that the starting desk screenshot layer</span></span>\n<span class=\"line\"><span style=\"\">//     is the one visible on the screen, and the parent (animation layer) always</span></span>\n<span class=\"line\"><span style=\"\">//     moves in the direction such that the ending desk screenshot becomes</span></span>\n<span class=\"line\"><span style=\"\">//     visible on the screen.</span></span>\n<span class=\"line\"><span style=\"\">//   * The children (screenshot layers) are always placed left to right to match</span></span>\n<span class=\"line\"><span style=\"\">//     desk order. For example, if there are three desks and this class has been</span></span>\n<span class=\"line\"><span style=\"\">//     instructed to create a screenshot for all three desks, desk 1's</span></span>\n<span class=\"line\"><span style=\"\">//     screenshot will be on the left, desk 2's screenshot will be in the middle</span></span>\n<span class=\"line\"><span style=\"\">//     and desk 3's screenshot will be on the right.</span></span>\n<span class=\"line\"><span style=\"\">//   * Once the animation finishes, Delegate::OnDeskSwitchAnimationFinished() is</span></span>\n<span class=\"line\"><span style=\"\">//     triggered. The owner of this object can then check that all animators on</span></span>\n<span class=\"line\"><span style=\"\">//     all roots have finished their animations (by checking</span></span>\n<span class=\"line\"><span style=\"\">//     animation_finished()), upon which it can delete these animators which</span></span>\n<span class=\"line\"><span style=\"\">//     will destroy all the screenshot layers and the real screen contents will</span></span>\n<span class=\"line\"><span style=\"\">//     be visible again.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This cooperative interaction between the animators and their owner</span></span>\n<span class=\"line\"><span style=\"\">// (DesksController::AbstractDeskSwitchAnimation) is needed for the following</span></span>\n<span class=\"line\"><span style=\"\">// reasons:</span></span>\n<span class=\"line\"><span style=\"\">// 1- The new desk is only activated after all starting desk screenshots on all</span></span>\n<span class=\"line\"><span style=\"\">//    roots have been taken and placed on top of everything (between phase (1)</span></span>\n<span class=\"line\"><span style=\"\">//    and (2)), so that the effects of desk activation (windows hiding and</span></span>\n<span class=\"line\"><span style=\"\">//    showing, overview exiting .. etc.) are not visible to the user.</span></span>\n<span class=\"line\"><span style=\"\">// 2- The animation doesn't start until all ending desk screenshots on all</span></span>\n<span class=\"line\"><span style=\"\">//    root windows are ready (between phase (2) and (3)). This is needed to</span></span>\n<span class=\"line\"><span style=\"\">//    synchronize the animations on all displays together (otherwise the</span></span>\n<span class=\"line\"><span style=\"\">//    animations will lag behind each other).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// When this animator is used to implement the remove-active-desk animation</span></span>\n<span class=\"line\"><span style=\"\">// (which also involves switching desks; from the to-be-removed desk to another</span></span>\n<span class=\"line\"><span style=\"\">// desk), `for_remove` is set to true in the constructor. The animation is</span></span>\n<span class=\"line\"><span style=\"\">// slightly tweaked to do the following:</span></span>\n<span class=\"line\"><span style=\"\">// - Instead of taking a screenshot of the starting desk, we replace it by a</span></span>\n<span class=\"line\"><span style=\"\">//   black solid color layer, to indicate the desk is being removed.</span></span>\n<span class=\"line\"><span style=\"\">// - The layer tree of the active-desk container is recreated, and the old</span></span>\n<span class=\"line\"><span style=\"\">//   layers are detached and animated vertically by</span></span>\n<span class=\"line\"><span style=\"\">//   `kRemovedDeskWindowYTranslation`.</span></span>\n<span class=\"line\"><span style=\"\">// - That old layer tree is then translated back down by the same amount while</span></span>\n<span class=\"line\"><span style=\"\">//   the desks screenshots are animating horizontally.</span></span>\n<span class=\"line\"><span style=\"\">// This gives the effect that the removed desk windows are jumping from their</span></span>\n<span class=\"line\"><span style=\"\">// desk to the target desk.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/wm/desks/root_window_desk_switch_animator.h#L30-L179",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/wm/desks/root_window_desk_switch_animator.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// An OutputController controls an AudioOutputStream and provides data to this</span></span>\n<span class=\"line\"><span style=\"\">// output stream. It executes audio operations like play, pause, stop, etc. on</span></span>\n<span class=\"line\"><span style=\"\">// the audio manager thread, while the audio data flow occurs on the platform's</span></span>\n<span class=\"line\"><span style=\"\">// realtime audio thread.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Here is a state transition diagram for the OutputController:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   *[ Empty ]  -->  [ Created ]  -->  [ Playing ]  -------.</span></span>\n<span class=\"line\"><span style=\"\">//        |                |               |    ^           |</span></span>\n<span class=\"line\"><span style=\"\">//        |                |               |    |           |</span></span>\n<span class=\"line\"><span style=\"\">//        |                |               |    |           v</span></span>\n<span class=\"line\"><span style=\"\">//        |                |               |    `-----  [ Paused ]</span></span>\n<span class=\"line\"><span style=\"\">//        |                |               |                |</span></span>\n<span class=\"line\"><span style=\"\">//        |                v               v                |</span></span>\n<span class=\"line\"><span style=\"\">//        `----------->  [      Closed       ]  &#x3C;-----------'</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// * Initial state</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// At any time after reaching the Created state but before Closed, the</span></span>\n<span class=\"line\"><span style=\"\">// OutputController may be notified of a device change via OnDeviceChange().  As</span></span>\n<span class=\"line\"><span style=\"\">// the OnDeviceChange() is processed, state transitions will occur, ultimately</span></span>\n<span class=\"line\"><span style=\"\">// ending up in an equivalent pre-call state.  E.g., if the state was Paused,</span></span>\n<span class=\"line\"><span style=\"\">// the new state will be Created, since these states are all functionally</span></span>\n<span class=\"line\"><span style=\"\">// equivalent and require a Play() call to continue to the next state.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The AudioOutputStream can request data from the OutputController via the</span></span>\n<span class=\"line\"><span style=\"\">// AudioSourceCallback interface. OutputController uses the SyncReader passed to</span></span>\n<span class=\"line\"><span style=\"\">// it via construction to synchronously fulfill this read request.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/services/audio/output_controller.h#L30-L57",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/services/audio/output_controller.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The Perfetto tracing backend mediates between the Perfetto client library and</span></span>\n<span class=\"line\"><span style=\"\">// the mojo-based tracing service. It allows any process to emit trace data</span></span>\n<span class=\"line\"><span style=\"\">// through Perfetto and privileged processes (i.e., the browser) to start</span></span>\n<span class=\"line\"><span style=\"\">// tracing sessions and read back the resulting data.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      Perfetto         :   Tracing backend     :    Tracing service</span></span>\n<span class=\"line\"><span style=\"\">//                       :                       :</span></span>\n<span class=\"line\"><span style=\"\">//                       :                      mojo</span></span>\n<span class=\"line\"><span style=\"\">//                calls  : .------------------.  :  .--------------.</span></span>\n<span class=\"line\"><span style=\"\">//             .---------->| ConsumerEndpoint |&#x3C;--->| ConsumerHost |</span></span>\n<span class=\"line\"><span style=\"\">//  .--------------.     : `------------------'  :  `--------------'</span></span>\n<span class=\"line\"><span style=\"\">//  | TracingMuxer |     :                       :</span></span>\n<span class=\"line\"><span style=\"\">//  `--------------'     : .------------------.  :  .--------------.</span></span>\n<span class=\"line\"><span style=\"\">//             `---------->| ProducerEndpoint |&#x3C;--->| ProducerHost |</span></span>\n<span class=\"line\"><span style=\"\">//                       : `------------------'  :  `--------------'</span></span>\n<span class=\"line\"><span style=\"\">//                       :                       :</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/services/tracing/public/cpp/perfetto/perfetto_tracing_backend.h#L24-L39",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/services/tracing/public/cpp/perfetto/perfetto_tracing_backend.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">/* From http://www.khronos.org/registry/gles/extensions/OES/OES_compressed_ETC1_RGB8_texture.txt</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> The number of bits that represent a 4x4 texel block is 64 bits if</span></span>\n<span class=\"line\"><span style=\"\"> &#x3C;internalformat> is given by ETC1_RGB8_OES.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> The data for a block is a number of bytes,</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> {q0, q1, q2, q3, q4, q5, q6, q7}</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> where byte q0 is located at the lowest memory address and q7 at</span></span>\n<span class=\"line\"><span style=\"\"> the highest. The 64 bits specifying the block is then represented</span></span>\n<span class=\"line\"><span style=\"\"> by the following 64 bit integer:</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> int64bit = 256*(256*(256*(256*(256*(256*(256*q0+q1)+q2)+q3)+q4)+q5)+q6)+q7;</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> ETC1_RGB8_OES:</span></span>\n<span class=\"line\"><span style=\"\"> a) bit layout in bits 63 through 32 if diffbit = 0</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48</span></span>\n<span class=\"line\"><span style=\"\"> -----------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> | base col1 | base col2 | base col1 | base col2 |</span></span>\n<span class=\"line\"><span style=\"\"> | R1 (4bits)| R2 (4bits)| G1 (4bits)| G2 (4bits)|</span></span>\n<span class=\"line\"><span style=\"\"> -----------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> 47 46 45 44 43 42 41 40 39 38 37 36 35 34  33  32</span></span>\n<span class=\"line\"><span style=\"\"> ---------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> | base col1 | base col2 | table  | table  |diff|flip|</span></span>\n<span class=\"line\"><span style=\"\"> | B1 (4bits)| B2 (4bits)| cw 1   | cw 2   |bit |bit |</span></span>\n<span class=\"line\"><span style=\"\"> ---------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> b) bit layout in bits 63 through 32 if diffbit = 1</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48</span></span>\n<span class=\"line\"><span style=\"\"> -----------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> | base col1    | dcol 2 | base col1    | dcol 2 |</span></span>\n<span class=\"line\"><span style=\"\"> | R1' (5 bits) | dR2    | G1' (5 bits) | dG2    |</span></span>\n<span class=\"line\"><span style=\"\"> -----------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> 47 46 45 44 43 42 41 40 39 38 37 36 35 34  33  32</span></span>\n<span class=\"line\"><span style=\"\"> ---------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> | base col 1   | dcol 2 | table  | table  |diff|flip|</span></span>\n<span class=\"line\"><span style=\"\"> | B1' (5 bits) | dB2    | cw 1   | cw 2   |bit |bit |</span></span>\n<span class=\"line\"><span style=\"\"> ---------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> c) bit layout in bits 31 through 0 (in both cases)</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16</span></span>\n<span class=\"line\"><span style=\"\"> -----------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> |       most significant pixel index bits       |</span></span>\n<span class=\"line\"><span style=\"\"> | p| o| n| m| l| k| j| i| h| g| f| e| d| c| b| a|</span></span>\n<span class=\"line\"><span style=\"\"> -----------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> 15 14 13 12 11 10  9  8  7  6  5  4  3   2   1  0</span></span>\n<span class=\"line\"><span style=\"\"> --------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> |         least significant pixel index bits       |</span></span>\n<span class=\"line\"><span style=\"\"> | p| o| n| m| l| k| j| i| h| g| f| e| d| c | b | a |</span></span>\n<span class=\"line\"><span style=\"\"> --------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> Add table 3.17.2: Intensity modifier sets for ETC1 compressed textures:</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> table codeword                modifier table</span></span>\n<span class=\"line\"><span style=\"\"> ------------------        ----------------------</span></span>\n<span class=\"line\"><span style=\"\"> 0                     -8  -2  2   8</span></span>\n<span class=\"line\"><span style=\"\"> 1                    -17  -5  5  17</span></span>\n<span class=\"line\"><span style=\"\"> 2                    -29  -9  9  29</span></span>\n<span class=\"line\"><span style=\"\"> 3                    -42 -13 13  42</span></span>\n<span class=\"line\"><span style=\"\"> 4                    -60 -18 18  60</span></span>\n<span class=\"line\"><span style=\"\"> 5                    -80 -24 24  80</span></span>\n<span class=\"line\"><span style=\"\"> 6                   -106 -33 33 106</span></span>\n<span class=\"line\"><span style=\"\"> 7                   -183 -47 47 183</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> Add table 3.17.3 Mapping from pixel index values to modifier values for</span></span>\n<span class=\"line\"><span style=\"\"> ETC1 compressed textures:</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> pixel index value</span></span>\n<span class=\"line\"><span style=\"\"> ---------------</span></span>\n<span class=\"line\"><span style=\"\"> msb     lsb           resulting modifier value</span></span>\n<span class=\"line\"><span style=\"\"> -----   -----          -------------------------</span></span>\n<span class=\"line\"><span style=\"\"> 1       1            -b (large negative value)</span></span>\n<span class=\"line\"><span style=\"\"> 1       0            -a (small negative value)</span></span>\n<span class=\"line\"><span style=\"\"> 0       0             a (small positive value)</span></span>\n<span class=\"line\"><span style=\"\"> 0       1             b (large positive value)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/android_opengl/etc1/etc1.cpp#L31-L120",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/android_opengl/etc1/etc1.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * `ReactCompositeComponent` maintains an auxiliary life cycle state in</span></span>\n<span class=\"line\"><span style=\"\"> * `this._compositeLifeCycleState` (which can be null).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This is different from the life cycle state maintained by `ReactComponent` in</span></span>\n<span class=\"line\"><span style=\"\"> * `this._lifeCycleState`. The following diagram shows how the states overlap in</span></span>\n<span class=\"line\"><span style=\"\"> * time. There are times when the CompositeLifeCycle is null - at those times it</span></span>\n<span class=\"line\"><span style=\"\"> * is only meaningful to look at ComponentLifeCycle alone.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Top Row: ReactComponent.ComponentLifeCycle</span></span>\n<span class=\"line\"><span style=\"\"> * Low Row: ReactComponent.CompositeLifeCycle</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * +-------+------------------------------------------------------+--------+</span></span>\n<span class=\"line\"><span style=\"\"> * |  UN   |                    MOUNTED                           |   UN   |</span></span>\n<span class=\"line\"><span style=\"\"> * |MOUNTED|                                                      | MOUNTED|</span></span>\n<span class=\"line\"><span style=\"\"> * +-------+------------------------------------------------------+--------+</span></span>\n<span class=\"line\"><span style=\"\"> * |       ^--------+   +------+   +------+   +------+   +--------^        |</span></span>\n<span class=\"line\"><span style=\"\"> * |       |        |   |      |   |      |   |      |   |        |        |</span></span>\n<span class=\"line\"><span style=\"\"> * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |</span></span>\n<span class=\"line\"><span style=\"\"> * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |</span></span>\n<span class=\"line\"><span style=\"\"> * |       |        |   |      |   |      |   |      |   |        |        |</span></span>\n<span class=\"line\"><span style=\"\"> * |       |        |   |      |   |      |   |      |   |        |        |</span></span>\n<span class=\"line\"><span style=\"\"> * |       +--------+   +------+   +------+   +------+   +--------+        |</span></span>\n<span class=\"line\"><span style=\"\"> * |       |                                                      |        |</span></span>\n<span class=\"line\"><span style=\"\"> * +-------+------------------------------------------------------+--------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/perf_tests/speedometer/resources/todomvc/labs/architecture-examples/react/bower_components/react/react.js#L3899-L3924",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/perf_tests/speedometer/resources/todomvc/labs/architecture-examples/react/bower_components/react/react.js"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// TextFragmentAnchor is the coordinator class for applying text directives</span></span>\n<span class=\"line\"><span style=\"\">// from the URL (also known as \"scroll-to-text\") to a document. This class'</span></span>\n<span class=\"line\"><span style=\"\">// purpose is to integrate with Blink's loading and lifecycle states. The</span></span>\n<span class=\"line\"><span style=\"\">// actual logic of performing the text search and applying highlights is</span></span>\n<span class=\"line\"><span style=\"\">// delegated out to the core annotation API.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// A frame will try to create a TextFragmentAnchor when parsing in a document</span></span>\n<span class=\"line\"><span style=\"\">// completes. If the URL has a valid text directive an instance of</span></span>\n<span class=\"line\"><span style=\"\">// TextFragmentAnchor will be created and stored on the LocalFrameView.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The anchor performs its operations via the InvokeSelector method which is</span></span>\n<span class=\"line\"><span style=\"\">// invoked repeatedly, each time layout finishes in the document. Thus, the</span></span>\n<span class=\"line\"><span style=\"\">// anchor is guaranteed that layout is clean in InvokeSelector; however,</span></span>\n<span class=\"line\"><span style=\"\">// end-of-layout is a script-forbidden section so no actions that can result in</span></span>\n<span class=\"line\"><span style=\"\">// script being run can be invoked from there. Scriptable actions will instead</span></span>\n<span class=\"line\"><span style=\"\">// cause a BeginMainFrame to be scheduled and run in that frame before the</span></span>\n<span class=\"line\"><span style=\"\">// lifecycle, where script is allowed.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// TextFragmentAnchor is a state machine that transitions state via</span></span>\n<span class=\"line\"><span style=\"\">// InvokeSelector (and some external events). Here are the state transitions:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//           ┌──────┐</span></span>\n<span class=\"line\"><span style=\"\">//           │   ┌──┴────────────────────────┐</span></span>\n<span class=\"line\"><span style=\"\">//           └───►       kSearching          ├────────────┐</span></span>\n<span class=\"line\"><span style=\"\">//               └─────────────┬─────────────┘            │</span></span>\n<span class=\"line\"><span style=\"\">//                             │                          │</span></span>\n<span class=\"line\"><span style=\"\">//         ┌─────┬─────────────▼─────────────┐            │</span></span>\n<span class=\"line\"><span style=\"\">//         └────►│ kBeforeMatchEventQueued   │            │</span></span>\n<span class=\"line\"><span style=\"\">//               └─────────────┬─────────────┘            │</span></span>\n<span class=\"line\"><span style=\"\">//                             │                          │</span></span>\n<span class=\"line\"><span style=\"\">//               ┌─────────────▼─────────────┐            │</span></span>\n<span class=\"line\"><span style=\"\">//               │  kBeforeMatchEventFired   ├────────────┤</span></span>\n<span class=\"line\"><span style=\"\">//               └─────────────┬─────────────┘            │</span></span>\n<span class=\"line\"><span style=\"\">//                             │                          │</span></span>\n<span class=\"line\"><span style=\"\">//         ┌─────┬─────────────▼─────────────┐            │</span></span>\n<span class=\"line\"><span style=\"\">//         └────►│ kEffectsAppliedKeepInView │            │</span></span>\n<span class=\"line\"><span style=\"\">//               └─────────────┬─────────────┘            │</span></span>\n<span class=\"line\"><span style=\"\">//                             │                          │</span></span>\n<span class=\"line\"><span style=\"\">//               ┌------------─▼-------------┐            │</span></span>\n<span class=\"line\"><span style=\"\">//         ┌─────┤     [[SearchFinished]]    |◄───────────┘</span></span>\n<span class=\"line\"><span style=\"\">//         │     └-------------┬-------------┘</span></span>\n<span class=\"line\"><span style=\"\">//         │                   │</span></span>\n<span class=\"line\"><span style=\"\">//         │     ┌─────────────▼─────────────┬─────┐</span></span>\n<span class=\"line\"><span style=\"\">//         │     │    kScriptableActions     │◄────┘</span></span>\n<span class=\"line\"><span style=\"\">//         │     └───────────────────────────┘</span></span>\n<span class=\"line\"><span style=\"\">//         │                   │</span></span>\n<span class=\"line\"><span style=\"\">//         │     ┌─────────────▼─────────────┐</span></span>\n<span class=\"line\"><span style=\"\">//         └─────►           kDone           │</span></span>\n<span class=\"line\"><span style=\"\">//               └───────────────────────────┘</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/fragment_directive/text_fragment_anchor.h#L28-L76",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/fragment_directive/text_fragment_anchor.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Implements Myer's Algorithm from</span></span>\n<span class=\"line\"><span style=\"\">// \"An O(ND) Difference Algorithm and Its Variations\", particularly the</span></span>\n<span class=\"line\"><span style=\"\">// linear space refinement mentioned in section 4b.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The differ is input agnostic.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The algorithm works by finding the shortest edit string (SES) in the edit</span></span>\n<span class=\"line\"><span style=\"\">// graph. The SES describes how to get from a string A of length N to a string</span></span>\n<span class=\"line\"><span style=\"\">// B of length M via deleting from A and inserting from B.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Example: A = \"abbaa\", B = \"abab\"</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                  A</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//          a   b   b   a    a</span></span>\n<span class=\"line\"><span style=\"\">//        o---o---o---o---o---o</span></span>\n<span class=\"line\"><span style=\"\">//      a | \\ |   |   | \\ | \\ |</span></span>\n<span class=\"line\"><span style=\"\">//        o---o---o---o---o---o</span></span>\n<span class=\"line\"><span style=\"\">//      b |   | \\ | \\ |   |   |</span></span>\n<span class=\"line\"><span style=\"\">//  B     o---o---o---o---o---o</span></span>\n<span class=\"line\"><span style=\"\">//      a | \\ |   |   | \\ | \\ |</span></span>\n<span class=\"line\"><span style=\"\">//        o---o---o---o---o---o</span></span>\n<span class=\"line\"><span style=\"\">//      b |   | \\ | \\ |   |   |</span></span>\n<span class=\"line\"><span style=\"\">//        o---o---o---o---o---o</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The edit graph is constructed with the characters from string A on the x-axis</span></span>\n<span class=\"line\"><span style=\"\">// and the characters from string B on the y-axis. Starting from (0, 0) we can:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     - Move right, which is equivalent to deleting from A</span></span>\n<span class=\"line\"><span style=\"\">//     - Move downwards, which is equivalent to inserting from B</span></span>\n<span class=\"line\"><span style=\"\">//     - Move diagonally if the characters from string A and B match, which</span></span>\n<span class=\"line\"><span style=\"\">//       means no insertion or deletion.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Any path from (0, 0) to (N, M) describes a valid edit string, but we try to</span></span>\n<span class=\"line\"><span style=\"\">// find the path with the most diagonals, conversely that is the path with the</span></span>\n<span class=\"line\"><span style=\"\">// least insertions or deletions.</span></span>\n<span class=\"line\"><span style=\"\">// Note that a path with \"D\" insertions/deletions is called a D-path.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/inspector/inspector_diff.cc#L21-L57",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/inspector/inspector_diff.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//     width: 10px;</span></span>\n<span class=\"line\"><span style=\"\">//     height: 20px;</span></span>\n<span class=\"line\"><span style=\"\">// }</span></span>\n<span class=\"line\"><span style=\"\">// &#x3C;/style></span></span>\n<span class=\"line\"><span style=\"\">// &#x3C;div style=\"overflow:scroll; width: 100px; height: 100px\"></span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The &#x3C;div>'s content box is not 100x100 as specified in the style but 90x80 as</span></span>\n<span class=\"line\"><span style=\"\">// we remove the scrollbars from the box.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The presence of scrollbars is determined by the 'overflow' property and can</span></span>\n<span class=\"line\"><span style=\"\">// be conditioned on having layout overflow (see OverflowModel for more details</span></span>\n<span class=\"line\"><span style=\"\">// on how we track overflow).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// There are 2 types of scrollbars:</span></span>\n<span class=\"line\"><span style=\"\">// - non-overlay scrollbars take space from the content box.</span></span>\n<span class=\"line\"><span style=\"\">// - overlay scrollbars don't and just overlay hang off from the border box,</span></span>\n<span class=\"line\"><span style=\"\">//   potentially overlapping with the padding box's content.</span></span>\n<span class=\"line\"><span style=\"\">// For more details on scrollbars, see PaintLayerScrollableArea.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// ***** THE BOX MODEL *****</span></span>\n<span class=\"line\"><span style=\"\">// The CSS box model is based on a series of nested boxes:</span></span>\n<span class=\"line\"><span style=\"\">// http://www.w3.org/TR/CSS21/box.html</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//       |----------------------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//       |                                                    |</span></span>\n<span class=\"line\"><span style=\"\">//       |                   margin-top                       |</span></span>\n<span class=\"line\"><span style=\"\">//       |                                                    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |-----------------------------------------|    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |                                         |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |             border-top                  |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |                                         |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |--------------------------|----|    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |                          |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |       padding-top        |####|    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |                          |####|    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |    |----------------|    |####|    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |    |                |    |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       | ML  | BL | PL |  content box   | PR | SW | BR | MR |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |    |                |    |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |    |----------------|    |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |                          |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |      padding-bottom      |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |--------------------------|----|    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |                      ####|    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |     scrollbar height ####| SC |    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |                      ####|    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |    |-------------------------------|    |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |                                         |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |           border-bottom                 |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |                                         |    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |-----------------------------------------|    |</span></span>\n<span class=\"line\"><span style=\"\">//       |                                                    |</span></span>\n<span class=\"line\"><span style=\"\">//       |                 margin-bottom                      |</span></span>\n<span class=\"line\"><span style=\"\">//       |                                                    |</span></span>\n<span class=\"line\"><span style=\"\">//       |----------------------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// BL = border-left</span></span>\n<span class=\"line\"><span style=\"\">// BR = border-right</span></span>\n<span class=\"line\"><span style=\"\">// ML = margin-left</span></span>\n<span class=\"line\"><span style=\"\">// MR = margin-right</span></span>\n<span class=\"line\"><span style=\"\">// PL = padding-left</span></span>\n<span class=\"line\"><span style=\"\">// PR = padding-right</span></span>\n<span class=\"line\"><span style=\"\">// SC = scroll corner (contains UI for resizing (see the 'resize' property)</span></span>\n<span class=\"line\"><span style=\"\">// SW = scrollbar width</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that the vertical scrollbar (if existing) will be on the left in</span></span>\n<span class=\"line\"><span style=\"\">// right-to-left direction and horizontal writing-mode. The horizontal scrollbar</span></span>\n<span class=\"line\"><span style=\"\">// (if existing) is always at the bottom.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Those are just the boxes from the CSS model. Extra boxes are tracked by Blink</span></span>\n<span class=\"line\"><span style=\"\">// (e.g. the overflows). Thus it is paramount to know which box a function is</span></span>\n<span class=\"line\"><span style=\"\">// manipulating. Also of critical importance is the coordinate system used (see</span></span>\n<span class=\"line\"><span style=\"\">// the COORDINATE SYSTEMS section in LayoutBoxModelObject).</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/layout/layout_box.h#L154-L227",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/layout/layout_box.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Creates a region like this:</span></span>\n<span class=\"line\"><span style=\"\">//   █ █ █</span></span>\n<span class=\"line\"><span style=\"\">//  ███████</span></span>\n<span class=\"line\"><span style=\"\">//   █ █ █</span></span>\n<span class=\"line\"><span style=\"\">//  ███████</span></span>\n<span class=\"line\"><span style=\"\">//   █ █ █</span></span>\n<span class=\"line\"><span style=\"\">//  ███████</span></span>\n<span class=\"line\"><span style=\"\">//   █ █ █</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/layout/layout_shift_region_test.cc#L106-L113",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/layout/layout_shift_region_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// LayoutTableCell is used to represent a table cell (display: table-cell).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Because rows are as tall as the tallest cell, cells need to be aligned into</span></span>\n<span class=\"line\"><span style=\"\">// the enclosing row space. To achieve this, LayoutTableCell introduces the</span></span>\n<span class=\"line\"><span style=\"\">// concept of 'intrinsic padding'. Those 2 paddings are used to shift the box</span></span>\n<span class=\"line\"><span style=\"\">// into the row as follows:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//        --------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//        ^  ^</span></span>\n<span class=\"line\"><span style=\"\">//        |  |</span></span>\n<span class=\"line\"><span style=\"\">//        |  |    cell's border before</span></span>\n<span class=\"line\"><span style=\"\">//        |  |</span></span>\n<span class=\"line\"><span style=\"\">//        |  v</span></span>\n<span class=\"line\"><span style=\"\">//        |  ^</span></span>\n<span class=\"line\"><span style=\"\">//        |  |</span></span>\n<span class=\"line\"><span style=\"\">//        |  | m_intrinsicPaddingBefore</span></span>\n<span class=\"line\"><span style=\"\">//        |  |</span></span>\n<span class=\"line\"><span style=\"\">//        |  v</span></span>\n<span class=\"line\"><span style=\"\">//        |  -----------------------------</span></span>\n<span class=\"line\"><span style=\"\">//        |  |                           |</span></span>\n<span class=\"line\"><span style=\"\">// row    |  |   cell's padding box      |</span></span>\n<span class=\"line\"><span style=\"\">// height |  |                           |</span></span>\n<span class=\"line\"><span style=\"\">//        |  -----------------------------</span></span>\n<span class=\"line\"><span style=\"\">//        |  ^</span></span>\n<span class=\"line\"><span style=\"\">//        |  |</span></span>\n<span class=\"line\"><span style=\"\">//        |  | m_intrinsicPaddingAfter</span></span>\n<span class=\"line\"><span style=\"\">//        |  |</span></span>\n<span class=\"line\"><span style=\"\">//        |  v</span></span>\n<span class=\"line\"><span style=\"\">//        |  ^</span></span>\n<span class=\"line\"><span style=\"\">//        |  |</span></span>\n<span class=\"line\"><span style=\"\">//        |  |    cell's border after</span></span>\n<span class=\"line\"><span style=\"\">//        |  |</span></span>\n<span class=\"line\"><span style=\"\">//        v  v</span></span>\n<span class=\"line\"><span style=\"\">//        ---------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that this diagram is not impacted by collapsing or separate borders</span></span>\n<span class=\"line\"><span style=\"\">// (see 'border-collapse').</span></span>\n<span class=\"line\"><span style=\"\">// Also there is no margin on table cell (or any internal table element).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// LayoutTableCell is positioned with respect to the enclosing</span></span>\n<span class=\"line\"><span style=\"\">// LayoutTableSection. See callers of</span></span>\n<span class=\"line\"><span style=\"\">// LayoutTableSection::setLogicalPositionForCell() for when it is placed.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/layout/layout_table_cell.h#L49-L90",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/layout/layout_table_cell.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// When table has collapsed borders, computing borders for table parts is</span></span>\n<span class=\"line\"><span style=\"\">// complex, and costly.</span></span>\n<span class=\"line\"><span style=\"\">// NGTableBorders precomputes collapsed borders. It exposes the API for</span></span>\n<span class=\"line\"><span style=\"\">// border access. If borders are not collapsed, the API returns regular</span></span>\n<span class=\"line\"><span style=\"\">// borders.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// NGTableBorders methods often take rowspan/colspan arguments.</span></span>\n<span class=\"line\"><span style=\"\">// Rowspan must never be taller than the section.</span></span>\n<span class=\"line\"><span style=\"\">// Colspan must never be wider than the table.</span></span>\n<span class=\"line\"><span style=\"\">// To enforce this, NGTableBorders keeps track of section dimensions,</span></span>\n<span class=\"line\"><span style=\"\">// and table's last column.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Collapsed borders are stored as edges.</span></span>\n<span class=\"line\"><span style=\"\">// Edges are stored in a 1D array. The array does not grow if borders are</span></span>\n<span class=\"line\"><span style=\"\">// not set.</span></span>\n<span class=\"line\"><span style=\"\">// Each edge represents a cell border.</span></span>\n<span class=\"line\"><span style=\"\">// Mapping between edges and cells is best understood like this:</span></span>\n<span class=\"line\"><span style=\"\">// - each cell stores only two edges, left edge, and a top edge.</span></span>\n<span class=\"line\"><span style=\"\">// - cell's right edge is the left edge of the next cell.</span></span>\n<span class=\"line\"><span style=\"\">// - cell's bottom edge is the top edge of the cell in the next row.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// To store all last row/col edges, an extra imaginary cell is used.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// A grid with R rows and C columns has |2 * (R+1) * (C+1)| edges.</span></span>\n<span class=\"line\"><span style=\"\">// Example; R=1, C=3, 2*(1+1)*(3+1) = 16 edges.</span></span>\n<span class=\"line\"><span style=\"\">// Edges 7, 9, 11, 13, 14, 15 are unused.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     1    3   5   7</span></span>\n<span class=\"line\"><span style=\"\">//   ------------------    &#x3C;= edges for 3 cols X 1 row</span></span>\n<span class=\"line\"><span style=\"\">//   |0  |2  |4   |6</span></span>\n<span class=\"line\"><span style=\"\">//   |   |   |    |</span></span>\n<span class=\"line\"><span style=\"\">//   ------------------</span></span>\n<span class=\"line\"><span style=\"\">//   | 8 | 10| 12 | 14</span></span>\n<span class=\"line\"><span style=\"\">//   |   |   |    |</span></span>\n<span class=\"line\"><span style=\"\">//   |9  |11 |13  |15</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/layout/ng/table/ng_table_borders.h#L26-L60",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/layout/ng/table/ng_table_borders.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* The BoxShape is based on a 100x50 rectangle at 0,0. The shape-margin value is</span></span>\n<span class=\"line\"><span style=\"\"> * 10, so the shape is a rectangle (120x70 at -10,-10) with rounded corners</span></span>\n<span class=\"line\"><span style=\"\"> * (radius=10):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   -10,-10   110,-10</span></span>\n<span class=\"line\"><span style=\"\"> *       (--------)</span></span>\n<span class=\"line\"><span style=\"\"> *       |        |</span></span>\n<span class=\"line\"><span style=\"\"> *       (--------)</span></span>\n<span class=\"line\"><span style=\"\"> *   -10,60    110,60</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/layout/shapes/box_shape_test.cc#L68-L77",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/layout/shapes/box_shape_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Tests that apps with multiple window are counted correctly.</span></span>\n<span class=\"line\"><span style=\"\">//  ______________________________________________________</span></span>\n<span class=\"line\"><span style=\"\">//  |  ________   ________   ________________   ________ |</span></span>\n<span class=\"line\"><span style=\"\">//  | |       |  |       |  |       |       |  |       | |</span></span>\n<span class=\"line\"><span style=\"\">//  | |   I   |  |   I   |  |   I      + 1  |  |  + 5  | |</span></span>\n<span class=\"line\"><span style=\"\">//  | |_______|  |_______|  |_______|_______|  |_______| |</span></span>\n<span class=\"line\"><span style=\"\">//  |____________________________________________________|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/wm/desks/templates/saved_desk_unittest.cc#L1649-L1656",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/wm/desks/templates/saved_desk_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The NinePieceImageGrid class is responsible for computing drawing information</span></span>\n<span class=\"line\"><span style=\"\">// for the nine piece image.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// https://drafts.csswg.org/css-backgrounds/#border-image-process</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Given an image, a set of slices and a border area:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//       |         |</span></span>\n<span class=\"line\"><span style=\"\">//   +---+---------+---+          +------------------+</span></span>\n<span class=\"line\"><span style=\"\">//   | 1 |    7    | 4 |          |      border      |</span></span>\n<span class=\"line\"><span style=\"\">// --+---+---------+---+---       |  +------------+  |</span></span>\n<span class=\"line\"><span style=\"\">//   |   |         |   |          |  |            |  |</span></span>\n<span class=\"line\"><span style=\"\">//   | 3 |    9    | 6 |          |  |    css     |  |</span></span>\n<span class=\"line\"><span style=\"\">//   |   |  image  |   |          |  |    box     |  |</span></span>\n<span class=\"line\"><span style=\"\">//   |   |         |   |          |  |            |  |</span></span>\n<span class=\"line\"><span style=\"\">// --+---+---------+---+---       |  |            |  |</span></span>\n<span class=\"line\"><span style=\"\">//   | 2 |    8    | 5 |          |  +------------+  |</span></span>\n<span class=\"line\"><span style=\"\">//   +---+---------+---+          |                  |</span></span>\n<span class=\"line\"><span style=\"\">//       |         |              +------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// it generates drawing information for the nine border pieces.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/paint/nine_piece_image_grid.h#L42-L62",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/paint/nine_piece_image_grid.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Prepares a path for a cubic Bezier curve repeated three times, yielding a</span></span>\n<span class=\"line\"><span style=\"\">// wavy pattern that we can cut into a tiling shader (PrepareWavyTileRecord).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The result ignores the local origin, line offset, and (wavy) double offset,</span></span>\n<span class=\"line\"><span style=\"\">// so the midpoints are always at y=0.5, while the phase is shifted for either</span></span>\n<span class=\"line\"><span style=\"\">// wavy or spelling/grammar decorations so the desired pattern starts at x=0.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The start point, control points (cp1 and cp2), and end point of each curve</span></span>\n<span class=\"line\"><span style=\"\">// form a diamond shape:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//            cp2                      cp2                      cp2</span></span>\n<span class=\"line\"><span style=\"\">// ---         +                        +                        +</span></span>\n<span class=\"line\"><span style=\"\">// |               x=0</span></span>\n<span class=\"line\"><span style=\"\">// | control         |--- spelling/grammar ---|</span></span>\n<span class=\"line\"><span style=\"\">// | point          . .                      . .                      . .</span></span>\n<span class=\"line\"><span style=\"\">// | distance     .     .                  .     .                  .     .</span></span>\n<span class=\"line\"><span style=\"\">// |            .         .              .         .              .         .</span></span>\n<span class=\"line\"><span style=\"\">// +-- y=0.5   .            +           .            +           .            +</span></span>\n<span class=\"line\"><span style=\"\">//  .         .              .         .              .         .</span></span>\n<span class=\"line\"><span style=\"\">//    .     .                  .     .                  .     .</span></span>\n<span class=\"line\"><span style=\"\">//      . .                      . .                      . .</span></span>\n<span class=\"line\"><span style=\"\">//                          |-------- other ---------|</span></span>\n<span class=\"line\"><span style=\"\">//                        x=0</span></span>\n<span class=\"line\"><span style=\"\">//             +                        +                        +</span></span>\n<span class=\"line\"><span style=\"\">//            cp1                      cp1                      cp1</span></span>\n<span class=\"line\"><span style=\"\">// |-----------|------------|</span></span>\n<span class=\"line\"><span style=\"\">//     step         step</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/core/paint/text_decoration_info.cc#L183-L209",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/core/paint/text_decoration_info.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * degenerateEllipse() handles a degenerated ellipse using several lines.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Let's see a following example: line to ellipse to line.</span></span>\n<span class=\"line\"><span style=\"\"> *        _--^\\</span></span>\n<span class=\"line\"><span style=\"\"> *       (     )</span></span>\n<span class=\"line\"><span style=\"\"> * -----(      )</span></span>\n<span class=\"line\"><span style=\"\"> *            )</span></span>\n<span class=\"line\"><span style=\"\"> *           /--------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If radiusX becomes zero, the ellipse of the example is degenerated.</span></span>\n<span class=\"line\"><span style=\"\"> *         _</span></span>\n<span class=\"line\"><span style=\"\"> *        // P</span></span>\n<span class=\"line\"><span style=\"\"> *       //</span></span>\n<span class=\"line\"><span style=\"\"> * -----//</span></span>\n<span class=\"line\"><span style=\"\"> *      /</span></span>\n<span class=\"line\"><span style=\"\"> *     /--------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To draw the above example, need to get P that is a local maximum point.</span></span>\n<span class=\"line\"><span style=\"\"> * Angles for P are 0.5Pi and 1.5Pi in the ellipse coordinates.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If radiusY becomes zero, the result is as follows.</span></span>\n<span class=\"line\"><span style=\"\"> * -----__</span></span>\n<span class=\"line\"><span style=\"\"> *        --_</span></span>\n<span class=\"line\"><span style=\"\"> *          ----------</span></span>\n<span class=\"line\"><span style=\"\"> *            ``P</span></span>\n<span class=\"line\"><span style=\"\"> * Angles for P are 0 and Pi in the ellipse coordinates.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To handle both cases, degenerateEllipse() lines to start angle, local maximum</span></span>\n<span class=\"line\"><span style=\"\"> * points(every 0.5Pi), and end angle.</span></span>\n<span class=\"line\"><span style=\"\"> * NOTE: Before ellipse() calls this function, adjustEndAngle() is called, so</span></span>\n<span class=\"line\"><span style=\"\"> * endAngle - startAngle must be equal to or less than 2Pi.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/modules/canvas/canvas2d/canvas_path.cc#L283-L315",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/modules/canvas/canvas2d/canvas_path.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This class is the host side correspondent to the IceTransportProxy. See the</span></span>\n<span class=\"line\"><span style=\"\">// IceTransportProxy documentation for background. This class lives on the host</span></span>\n<span class=\"line\"><span style=\"\">// thread and proxies calls between the IceTransportProxy and the</span></span>\n<span class=\"line\"><span style=\"\">// P2PTransportChannel (which is single-threaded).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     proxy thread                               host thread</span></span>\n<span class=\"line\"><span style=\"\">// +------------------+   unique_ptr   +------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |                  |   =========>   |                              |</span></span>\n<span class=\"line\"><span style=\"\">// | client &#x3C;-> Proxy |                | Host &#x3C;-> P2PTransportChannel |</span></span>\n<span class=\"line\"><span style=\"\">// |                  |   &#x3C;---------   |                              |</span></span>\n<span class=\"line\"><span style=\"\">// +------------------+    WeakPtr     +------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Since the client code controls the Proxy lifetime, the Proxy has a unique_ptr</span></span>\n<span class=\"line\"><span style=\"\">// to the Host that lives on the host thread. The unique_ptr has an</span></span>\n<span class=\"line\"><span style=\"\">// OnTaskRunnerDeleter so that when the Proxy is destroyed a task will be queued</span></span>\n<span class=\"line\"><span style=\"\">// to delete the Host as well (and the P2PTransportChannel with it). The Host</span></span>\n<span class=\"line\"><span style=\"\">// needs a pointer back to the Proxy to post callbacks, and by using a WeakPtr</span></span>\n<span class=\"line\"><span style=\"\">// any callbacks run on the proxy thread after the proxy has been deleted will</span></span>\n<span class=\"line\"><span style=\"\">// be safely dropped.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The Host can be constructed on any thread but after that point all methods</span></span>\n<span class=\"line\"><span style=\"\">// must be called on the host thread.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/modules/peerconnection/adapters/ice_transport_host.h#L20-L41",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/modules/peerconnection/adapters/ice_transport_host.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Tests whether idle_time_ won't be updated in Start() when there was an</span></span>\n<span class=\"line\"><span style=\"\">// event. The timeline is something like:</span></span>\n<span class=\"line\"><span style=\"\">// [StartEvent] [EndEvent]</span></span>\n<span class=\"line\"><span style=\"\">//       +----------+</span></span>\n<span class=\"line\"><span style=\"\">//                  ^</span></span>\n<span class=\"line\"><span style=\"\">//                  +-- idle_time_ --+</span></span>\n<span class=\"line\"><span style=\"\">//                                   v</span></span>\n<span class=\"line\"><span style=\"\">//                           [TimerStart]         [UpdateStatus]</span></span>\n<span class=\"line\"><span style=\"\">//                                 +-- kUpdateInterval --+</span></span>\n<span class=\"line\"><span style=\"\">// In the first UpdateStatus() the idle callback should be triggered.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/modules/service_worker/service_worker_event_queue_test.cc#L229-L238",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/modules/service_worker/service_worker_event_queue_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Manages highlighting items while in overview. Responsible for telling</span></span>\n<span class=\"line\"><span style=\"\">// highlightable items to show or hide their focus ring borders, when tabbing</span></span>\n<span class=\"line\"><span style=\"\">// through highlightable items with arrow keys and trackpad swipes, or when tab</span></span>\n<span class=\"line\"><span style=\"\">// dragging. In this context, an highlightable item can represent anything</span></span>\n<span class=\"line\"><span style=\"\">// focusable in overview mode such as a desk textfield, saved desk button and an</span></span>\n<span class=\"line\"><span style=\"\">// `OverviewItem`. The idea behind the movement strategy is that it should be</span></span>\n<span class=\"line\"><span style=\"\">// possible to access any highlightable view via keyboard by pressing the tab or</span></span>\n<span class=\"line\"><span style=\"\">// arrow keys repeatedly.</span></span>\n<span class=\"line\"><span style=\"\">// +-------+  +-------+  +-------+</span></span>\n<span class=\"line\"><span style=\"\">// |   0   |  |   1   |  |   2   |</span></span>\n<span class=\"line\"><span style=\"\">// +-------+  +-------+  +-------+</span></span>\n<span class=\"line\"><span style=\"\">// +-------+  +-------+  +-------+</span></span>\n<span class=\"line\"><span style=\"\">// |   3   |  |   4   |  |   5   |</span></span>\n<span class=\"line\"><span style=\"\">// +-------+  +-------+  +-------+</span></span>\n<span class=\"line\"><span style=\"\">// +-------+</span></span>\n<span class=\"line\"><span style=\"\">// |   6   |</span></span>\n<span class=\"line\"><span style=\"\">// +-------+</span></span>\n<span class=\"line\"><span style=\"\">// Example sequences:</span></span>\n<span class=\"line\"><span style=\"\">//  - Going right to left</span></span>\n<span class=\"line\"><span style=\"\">//    0, 1, 2, 3, 4, 5, 6</span></span>\n<span class=\"line\"><span style=\"\">// The highlight is switched to the next window grid (if available) or wrapped</span></span>\n<span class=\"line\"><span style=\"\">// if it reaches the end of its movement sequence.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/wm/overview/overview_highlight_controller.h#L20-L41",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/wm/overview/overview_highlight_controller.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Input buffer layout, dividing the total buffer into regions (r0 - r5):</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// |----------------|-----------------------------------------|----------------|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                                     blockSize + kernelSize / 2</span></span>\n<span class=\"line\"><span style=\"\">//                   &#x3C;---------------------------------------------------------></span></span>\n<span class=\"line\"><span style=\"\">//                                                r0</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   kernelSize / 2   kernelSize / 2          kernelSize / 2     kernelSize / 2</span></span>\n<span class=\"line\"><span style=\"\">// &#x3C;---------------> &#x3C;--------------->       &#x3C;---------------> &#x3C;---------------></span></span>\n<span class=\"line\"><span style=\"\">//         r1                r2                      r3               r4</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                                                     blockSize</span></span>\n<span class=\"line\"><span style=\"\">//                                    &#x3C;----------------------------------------></span></span>\n<span class=\"line\"><span style=\"\">//                                                         r5</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/audio/sinc_resampler.cc#L40-L54",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/audio/sinc_resampler.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Internal leadings can be distributed to ascent and descent.</span></span>\n<span class=\"line\"><span style=\"\">// -------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//           | - Internal Leading (in ascent)</span></span>\n<span class=\"line\"><span style=\"\">//           |--------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//  Ascent - |              |</span></span>\n<span class=\"line\"><span style=\"\">//           |              |</span></span>\n<span class=\"line\"><span style=\"\">//           |              | - Em height</span></span>\n<span class=\"line\"><span style=\"\">// ----------|--------------|</span></span>\n<span class=\"line\"><span style=\"\">//           |              |</span></span>\n<span class=\"line\"><span style=\"\">// Descent - |--------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//           | - Internal Leading (in descent)</span></span>\n<span class=\"line\"><span style=\"\">// -------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/fonts/simple_font_data.cc#L311-L322",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/fonts/simple_font_data.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The HarfBuzzFontCache is thread specific cache for mapping</span></span>\n<span class=\"line\"><span style=\"\">//  from |FontPlatformData| to |HarfBuzzFace|, and</span></span>\n<span class=\"line\"><span style=\"\">//  from |FontPlatformData::UniqueID()| to |HarfBuzzFontData|.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  |HarfBuzzFace| holds shared |HarfBuzzData| per unique id.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  |FontPlatformData-1| |FontPlatformData-2|</span></span>\n<span class=\"line\"><span style=\"\">//         |                    |</span></span>\n<span class=\"line\"><span style=\"\">//    |HarfBuzzFace-1|     |HarfBuzzFace-2|</span></span>\n<span class=\"line\"><span style=\"\">//         |                    |</span></span>\n<span class=\"line\"><span style=\"\">//         +----------+---------+</span></span>\n<span class=\"line\"><span style=\"\">//                    |</span></span>\n<span class=\"line\"><span style=\"\">//               |HarfBuzzFontData|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_font_cache.h#L23-L36",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/fonts/shaping/harfbuzz_font_cache.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * Checks a right triangle. This test covers all of the trivial FloatPolygon</span></span>\n<span class=\"line\"><span style=\"\"> * accessors.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                        200,100</span></span>\n<span class=\"line\"><span style=\"\"> *                          /|</span></span>\n<span class=\"line\"><span style=\"\"> *                         / |</span></span>\n<span class=\"line\"><span style=\"\"> *                        /  |</span></span>\n<span class=\"line\"><span style=\"\"> *                       -----</span></span>\n<span class=\"line\"><span style=\"\"> *                 100,200   200,200</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/geometry/float_polygon_test.cc#L76-L86",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/geometry/float_polygon_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * FloatRoundedRect geometry for this test. Corner radii are in parens, x and y</span></span>\n<span class=\"line\"><span style=\"\"> * intercepts for the elliptical corners are noted. The rectangle itself is at</span></span>\n<span class=\"line\"><span style=\"\"> * 0,0 with width and height 100.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         (10, 15)  x=10      x=90 (10, 20)</span></span>\n<span class=\"line\"><span style=\"\"> *                (--+---------+--)</span></span>\n<span class=\"line\"><span style=\"\"> *           y=15 +--|         |-+ y=20</span></span>\n<span class=\"line\"><span style=\"\"> *                |               |</span></span>\n<span class=\"line\"><span style=\"\"> *                |               |</span></span>\n<span class=\"line\"><span style=\"\"> *           y=85 + -|         |- + y=70</span></span>\n<span class=\"line\"><span style=\"\"> *                (--+---------+--)</span></span>\n<span class=\"line\"><span style=\"\"> *       (25, 15)  x=25      x=80  (20, 30)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/geometry/float_rounded_rect_test.cc#L116-L129",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/geometry/float_rounded_rect_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// All matrices here are 3x3 matrices.</span></span>\n<span class=\"line\"><span style=\"\">// They are stored in SkM44 which is 4x4 matrix in the following form.</span></span>\n<span class=\"line\"><span style=\"\">// |a b c 0|</span></span>\n<span class=\"line\"><span style=\"\">// |d e f 0|</span></span>\n<span class=\"line\"><span style=\"\">// |g h i 0|</span></span>\n<span class=\"line\"><span style=\"\">// |0 0 0 1|</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/graphics/dark_mode_lab_color_space.h#L20-L25",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/graphics/dark_mode_lab_color_space.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// P2PSocketDispatcher is a per-renderer object that dispatchers all</span></span>\n<span class=\"line\"><span style=\"\">// P2P messages received from the browser and relays all P2P messages</span></span>\n<span class=\"line\"><span style=\"\">// sent to the browser. P2PSocketClient instances register themselves</span></span>\n<span class=\"line\"><span style=\"\">// with the dispatcher using RegisterClient() and UnregisterClient().</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Relationship of classes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//       P2PSocketHost                     P2PSocketClient</span></span>\n<span class=\"line\"><span style=\"\">//            ^                                   ^</span></span>\n<span class=\"line\"><span style=\"\">//            |                                   |</span></span>\n<span class=\"line\"><span style=\"\">//            v                  IPC              v</span></span>\n<span class=\"line\"><span style=\"\">//  P2PSocketDispatcherHost  &#x3C;--------->  P2PSocketDispatcher</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// P2PSocketDispatcher receives and dispatches messages on the</span></span>\n<span class=\"line\"><span style=\"\">// IO thread.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/p2p/socket_dispatcher.h#L5-L19",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/p2p/socket_dispatcher.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// MainThreadEventQueue implements a queue for events that need to be</span></span>\n<span class=\"line\"><span style=\"\">// queued between the compositor and main threads. This queue is managed</span></span>\n<span class=\"line\"><span style=\"\">// by a lock where events are enqueued by the compositor thread</span></span>\n<span class=\"line\"><span style=\"\">// and dequeued by the main thread.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Below some example flows are how the code behaves.</span></span>\n<span class=\"line\"><span style=\"\">// Legend: B=Browser, C=Compositor, M=Main Thread, NB=Non-blocking</span></span>\n<span class=\"line\"><span style=\"\">//         BL=Blocking, PT=Post Task, ACK=Acknowledgement</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Normal blocking event sent to main thread.</span></span>\n<span class=\"line\"><span style=\"\">//   B        C        M</span></span>\n<span class=\"line\"><span style=\"\">//   ---(BL)--></span></span>\n<span class=\"line\"><span style=\"\">//         (queue)</span></span>\n<span class=\"line\"><span style=\"\">//            ---(PT)--></span></span>\n<span class=\"line\"><span style=\"\">//                  (deque)</span></span>\n<span class=\"line\"><span style=\"\">//   &#x3C;-------(ACK)------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Non-blocking event sent to main thread.</span></span>\n<span class=\"line\"><span style=\"\">//   B        C        M</span></span>\n<span class=\"line\"><span style=\"\">//   ---(NB)--></span></span>\n<span class=\"line\"><span style=\"\">//         (queue)</span></span>\n<span class=\"line\"><span style=\"\">//            ---(PT)--></span></span>\n<span class=\"line\"><span style=\"\">//                  (deque)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Non-blocking followed by blocking event sent to main thread.</span></span>\n<span class=\"line\"><span style=\"\">//   B        C        M</span></span>\n<span class=\"line\"><span style=\"\">//   ---(NB)--></span></span>\n<span class=\"line\"><span style=\"\">//         (queue)</span></span>\n<span class=\"line\"><span style=\"\">//            ---(PT)--></span></span>\n<span class=\"line\"><span style=\"\">//   ---(BL)--></span></span>\n<span class=\"line\"><span style=\"\">//         (queue)</span></span>\n<span class=\"line\"><span style=\"\">//            ---(PT)--></span></span>\n<span class=\"line\"><span style=\"\">//                  (deque)</span></span>\n<span class=\"line\"><span style=\"\">//                  (deque)</span></span>\n<span class=\"line\"><span style=\"\">//   &#x3C;-------(ACK)------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/renderer/platform/widget/input/main_thread_event_queue.h#L61-L96",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/renderer/platform/widget/input/main_thread_event_queue.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This class allows GWP-ASan allocations to be backed by PartitionAlloc and,</span></span>\n<span class=\"line\"><span style=\"\">// consequently, protected by MiraclePtr.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// GWP-ASan mainly operates at the system memory page granularity. During</span></span>\n<span class=\"line\"><span style=\"\">// process startup, it reserves a certain number of consecutive system pages.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The standard layout is as follows:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+--------</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   ▲</span></span>\n<span class=\"line\"><span style=\"\">//   |   system page 0   |(a) (c)</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   ▼</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+--------</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   ▲</span></span>\n<span class=\"line\"><span style=\"\">//   |   system page 1   |(b)  |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+--- (d)    (a) inaccessible</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   |     (b) accessible</span></span>\n<span class=\"line\"><span style=\"\">//   |   system page 2   |(a)  |     (c) initial guard page</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   ▼     (d) allocation slot</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+--------</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   ▲</span></span>\n<span class=\"line\"><span style=\"\">//   |   system page 3   |(b)  |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+--- (d)</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   |</span></span>\n<span class=\"line\"><span style=\"\">//   |   system page 4   |(a)  |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   ▼</span></span>\n<span class=\"line\"><span style=\"\">//   |-------------------|--------</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   ▲</span></span>\n<span class=\"line\"><span style=\"\">//   |        ...        |(a) (d)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Unfortunately, PartitionAlloc can't provide GWP-ASan an arbitrary number of</span></span>\n<span class=\"line\"><span style=\"\">// consecutive allocation slots. Allocations need to be grouped into 2MB super</span></span>\n<span class=\"line\"><span style=\"\">// pages so that the allocation metadata can be easily located.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Below is the new layout:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   +-----------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |         ▲   ▲</span></span>\n<span class=\"line\"><span style=\"\">//   |   system page 0   |         |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |         |   |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+         |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |         |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |        ...        |        (e)  |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |         |   |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+-------  |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   ▲   |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |  system page k-1  |(a) (c)  |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   ▼   ▼   |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+----------- (f)</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   ▲       |</span></span>\n<span class=\"line\"><span style=\"\">//   |   system page k   |(b)  |       |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   |       |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+--- (d)      |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   |       |</span></span>\n<span class=\"line\"><span style=\"\">//   |  system page k+1  |(a)  |       |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   ▼       |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+-----------  |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |             |    (a) inaccessible</span></span>\n<span class=\"line\"><span style=\"\">//   |        ...        |             |    (b) accessible</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |             ▼    (c) initial guard page</span></span>\n<span class=\"line\"><span style=\"\">//   +-----------------------------------   (d) allocation slot</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |         ▲   ▲    (e) super page metadata</span></span>\n<span class=\"line\"><span style=\"\">//   |   system page m   |         |   |    (f) super page</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |         |   |    (g) pseudo allocation slot</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+-------  |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |     ▲   |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |        ...        |     |  (e)  |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |     |   |   |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+--- (g)  |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   |   |   |</span></span>\n<span class=\"line\"><span style=\"\">//   | system page m+k-1 |(a)  |   |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   ▼   ▼   |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+----------- (f)</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   ▲       |</span></span>\n<span class=\"line\"><span style=\"\">//   |  system page m+k  |(b)  |       |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   |       |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+--- (d)      |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▲   |       |</span></span>\n<span class=\"line\"><span style=\"\">//   | system page m+k+1 |(a)  |       |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   | ▼   ▼       |</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+-----------  |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |             |</span></span>\n<span class=\"line\"><span style=\"\">//   |        ...        |             |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |             ▼</span></span>\n<span class=\"line\"><span style=\"\">//   +-------------------+---------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This means some allocation slots will be reserved to hold PA</span></span>\n<span class=\"line\"><span style=\"\">// metadata. We exclude these pseudo slots from the GWP-ASan free list so that</span></span>\n<span class=\"line\"><span style=\"\">// they are never used for anything other that storing the metadata.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/base/allocator/partition_allocator/gwp_asan_support.h#L19-L109",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/base/allocator/partition_allocator/gwp_asan_support.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// 2D matrix transforms:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// [m11 m21 0 m41]   [1 0 0 Tx] [cos(R) -sin(R) 0 0] [1 K 0 0] [Sx 0  0 0]</span></span>\n<span class=\"line\"><span style=\"\">// [m12 m22 0 m42] = [0 1 0 Ty] [sin(R)  cos(R) 0 0] [0 1 0 0] [0  Sy 0 0]</span></span>\n<span class=\"line\"><span style=\"\">// [ 0   0  1  0 ]   [0 0 1 0 ] [  0       0    1 0] [0 0 1 0] [0  0  1 0]</span></span>\n<span class=\"line\"><span style=\"\">// [ 0   0  0  1 ]   [0 0 0 1 ] [  0       0    0 1] [0 0 0 1] [0  0  0 1]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// M = translate * rotate * skew * scale</span></span>\n<span class=\"line\"><span style=\"\">// See also webkit-transform-interpolation-005.html</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/web_tests/external/wpt/css/css-transforms/animation/transform-interpolation-005.html#L44-L53",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/web_tests/external/wpt/css/css-transforms/animation/transform-interpolation-005.html"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Reads cursors in an interleaved fashion, as shown below.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Given N cursors, each of which points to the beginning of a K-item sequence,</span></span>\n<span class=\"line\"><span style=\"\">// the following accesses will be made.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// OC(i)    = open cursor i</span></span>\n<span class=\"line\"><span style=\"\">// RD(i, j) = read result of cursor i, which should be at item j</span></span>\n<span class=\"line\"><span style=\"\">// CC(i)    = continue cursor i</span></span>\n<span class=\"line\"><span style=\"\">// |        = wait for onsuccess on the previous OC or CC</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// OC(1)            | RD(1, 1) OC(2) | RD(2, 1) OC(3) | ... | RD(n-1, 1) CC(n) |</span></span>\n<span class=\"line\"><span style=\"\">// RD(n, 1)   CC(1) | RD(1, 2) CC(2) | RD(2, 2) CC(3) | ... | RD(n-1, 2) CC(n) |</span></span>\n<span class=\"line\"><span style=\"\">// RD(n, 2)   CC(1) | RD(1, 3) CC(2) | RD(2, 3) CC(3) | ... | RD(n-1, 3) CC(n) |</span></span>\n<span class=\"line\"><span style=\"\">// ...</span></span>\n<span class=\"line\"><span style=\"\">// RD(n, k-1) CC(1) | RD(1, k) CC(2) | RD(2, k) CC(3) | ... | RD(n-1, k) CC(n) |</span></span>\n<span class=\"line\"><span style=\"\">// RD(n, k)           done</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/web_tests/external/wpt/IndexedDB/resources/interleaved-cursors-common.js#L78-L93",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/third_party/blink/web_tests/external/wpt/IndexedDB/resources/interleaved-cursors-common.js"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The tree appears as following, with the starred nodes dirty:</span></span>\n<span class=\"line\"><span style=\"\">//       div [relayout-common-ancestor]</span></span>\n<span class=\"line\"><span style=\"\">//      /   \\</span></span>\n<span class=\"line\"><span style=\"\">//   *div  *div</span></span>\n<span class=\"line\"><span style=\"\">//    /      /</span></span>\n<span class=\"line\"><span style=\"\">// *div   *div</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/blink/web_tests/fast/layout/common-ancestor-relayout-boundary.html#L35-L40",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/blink/web_tests/fast/layout/common-ancestor-relayout-boundary.html"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* __kernel_cos( x,  y )</span></span>\n<span class=\"line\"><span style=\"\"> * kernel cos function on [-pi/4, pi/4], pi/4 ~ 0.785398164</span></span>\n<span class=\"line\"><span style=\"\"> * Input x is assumed to be bounded by ~pi/4 in magnitude.</span></span>\n<span class=\"line\"><span style=\"\"> * Input y is the tail of x.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Algorithm</span></span>\n<span class=\"line\"><span style=\"\"> *      1. Since cos(-x) = cos(x), we need only to consider positive x.</span></span>\n<span class=\"line\"><span style=\"\"> *      2. if x &#x3C; 2^-27 (hx&#x3C;0x3E400000 0), return 1 with inexact if x!=0.</span></span>\n<span class=\"line\"><span style=\"\"> *      3. cos(x) is approximated by a polynomial of degree 14 on</span></span>\n<span class=\"line\"><span style=\"\"> *         [0,pi/4]</span></span>\n<span class=\"line\"><span style=\"\"> *                                       4            14</span></span>\n<span class=\"line\"><span style=\"\"> *              cos(x) ~ 1 - x*x/2 + C1*x + ... + C6*x</span></span>\n<span class=\"line\"><span style=\"\"> *         where the remez error is</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      |              2     4     6     8     10    12     14 |     -58</span></span>\n<span class=\"line\"><span style=\"\"> *      |cos(x)-(1-.5*x +C1*x +C2*x +C3*x +C4*x +C5*x  +C6*x  )| &#x3C;= 2</span></span>\n<span class=\"line\"><span style=\"\"> *      |                                                      |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     4     6     8     10    12     14</span></span>\n<span class=\"line\"><span style=\"\"> *      4. let r = C1*x +C2*x +C3*x +C4*x +C5*x  +C6*x  , then</span></span>\n<span class=\"line\"><span style=\"\"> *             cos(x) = 1 - x*x/2 + r</span></span>\n<span class=\"line\"><span style=\"\"> *         since cos(x+y) ~ cos(x) - sin(x)*y</span></span>\n<span class=\"line\"><span style=\"\"> *                        ~ cos(x) - x*y,</span></span>\n<span class=\"line\"><span style=\"\"> *         a correction term is necessary in cos(x) and hence</span></span>\n<span class=\"line\"><span style=\"\"> *              cos(x+y) = 1 - (x*x/2 - (r - x*y))</span></span>\n<span class=\"line\"><span style=\"\"> *         For better accuracy when x > 0.3, let qx = |x|/4 with</span></span>\n<span class=\"line\"><span style=\"\"> *         the last 32 bits mask off, and if x > 0.78125, let qx = 0.28125.</span></span>\n<span class=\"line\"><span style=\"\"> *         Then</span></span>\n<span class=\"line\"><span style=\"\"> *              cos(x+y) = (1-qx) - ((x*x/2-qx) - (r-x*y)).</span></span>\n<span class=\"line\"><span style=\"\"> *         Note that 1-qx and (x*x/2-qx) is EXACT here, and the</span></span>\n<span class=\"line\"><span style=\"\"> *         magnitude of the latter is at least a quarter of x*x/2,</span></span>\n<span class=\"line\"><span style=\"\"> *         thus, reducing the rounding error in the subtraction.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/fdlibm/ieee754.cc#L268-L300",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/fdlibm/ieee754.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * Creates a dummy target for the given cursor position. The assumption is to</span></span>\n<span class=\"line\"><span style=\"\"> * create as big dummy target box as possible, the only constraints are:</span></span>\n<span class=\"line\"><span style=\"\"> * - The dummy target box cannot overlap any of real target boxes.</span></span>\n<span class=\"line\"><span style=\"\"> * - The dummy target has to contain a point with current mouse coordinates.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NOTE: For performance reasons the box construction algorithm is kept simple</span></span>\n<span class=\"line\"><span style=\"\"> * and it is not optimal (see example below). Currently it is O(n) in regard to</span></span>\n<span class=\"line\"><span style=\"\"> * the number of real drop target boxes, but its result depends on the order</span></span>\n<span class=\"line\"><span style=\"\"> * of those boxes being processed (the order in which they're added to the</span></span>\n<span class=\"line\"><span style=\"\"> * targetList_ collection).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The algorithm.</span></span>\n<span class=\"line\"><span style=\"\"> * a) Assumptions</span></span>\n<span class=\"line\"><span style=\"\"> * - Mouse pointer is in the bounding box of real target boxes.</span></span>\n<span class=\"line\"><span style=\"\"> * - None of the boxes have negative coordinate values.</span></span>\n<span class=\"line\"><span style=\"\"> * - Mouse pointer is not contained by any of \"real target\" boxes.</span></span>\n<span class=\"line\"><span style=\"\"> * - For targets inside a scrollable container, the box used is the</span></span>\n<span class=\"line\"><span style=\"\"> *   intersection of the scrollable container's box and the target's box.</span></span>\n<span class=\"line\"><span style=\"\"> *   This is because the part of the target that extends outside the scrollable</span></span>\n<span class=\"line\"><span style=\"\"> *   container should not be used in the clipping calculations.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * b) Outline</span></span>\n<span class=\"line\"><span style=\"\"> * - Initialize the fake target to the bounding box of real targets.</span></span>\n<span class=\"line\"><span style=\"\"> * - For each real target box - clip the fake target box so it does not contain</span></span>\n<span class=\"line\"><span style=\"\"> *   that target box, but does contain the mouse pointer.</span></span>\n<span class=\"line\"><span style=\"\"> *   -- Project the real target box, mouse pointer and fake target box onto</span></span>\n<span class=\"line\"><span style=\"\"> *      both axes and calculate the clipping coordinates.</span></span>\n<span class=\"line\"><span style=\"\"> *   -- Only one coordinate is used to clip the fake target box to keep the</span></span>\n<span class=\"line\"><span style=\"\"> *      fake target as big as possible.</span></span>\n<span class=\"line\"><span style=\"\"> *   -- If the projection of the real target box contains the mouse pointer,</span></span>\n<span class=\"line\"><span style=\"\"> *      clipping for a given axis is not possible.</span></span>\n<span class=\"line\"><span style=\"\"> *   -- If both clippings are possible, the clipping more distant from the</span></span>\n<span class=\"line\"><span style=\"\"> *      mouse pointer is selected to keep bigger fake target area.</span></span>\n<span class=\"line\"><span style=\"\"> * - Save the created fake target only if it has a big enough area.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * c) Example</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;pre></span></span>\n<span class=\"line\"><span style=\"\"> *        Input:           Algorithm created box:        Maximum box:</span></span>\n<span class=\"line\"><span style=\"\"> * +---------------------+ +---------------------+ +---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * | B1      |        B2 | | B1               B2 | | B1               B2 |</span></span>\n<span class=\"line\"><span style=\"\"> * |         |           | |   +-------------+   | |+-------------------+|</span></span>\n<span class=\"line\"><span style=\"\"> * |---------x-----------| |   |             |   | ||                   ||</span></span>\n<span class=\"line\"><span style=\"\"> * |         |           | |   |             |   | ||                   ||</span></span>\n<span class=\"line\"><span style=\"\"> * |         |           | |   |             |   | ||                   ||</span></span>\n<span class=\"line\"><span style=\"\"> * |         |           | |   |             |   | ||                   ||</span></span>\n<span class=\"line\"><span style=\"\"> * |         |           | |   |             |   | ||                   ||</span></span>\n<span class=\"line\"><span style=\"\"> * |         |           | |   +-------------+   | |+-------------------+|</span></span>\n<span class=\"line\"><span style=\"\"> * | B4      |        B3 | | B4               B3 | | B4               B3 |</span></span>\n<span class=\"line\"><span style=\"\"> * +---------------------+ +---------------------+ +---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;/pre></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number} x Cursor position on the x-axis.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number} y Cursor position on the y-axis.</span></span>\n<span class=\"line\"><span style=\"\"> * @return {goog.fx.ActiveDropTarget_} Dummy drop target.</span></span>\n<span class=\"line\"><span style=\"\"> * @private</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/fx/abstractdragdrop.js#L983-L1040",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/fx/abstractdragdrop.js"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * Creates a 2D affine transform. An affine transform performs a linear</span></span>\n<span class=\"line\"><span style=\"\"> * mapping from 2D coordinates to other 2D coordinates that preserves the</span></span>\n<span class=\"line\"><span style=\"\"> * \"straightness\" and \"parallelness\" of lines.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Such a coordinate transformation can be represented by a 3 row by 3 column</span></span>\n<span class=\"line\"><span style=\"\"> * matrix with an implied last row of [ 0 0 1 ]. This matrix transforms source</span></span>\n<span class=\"line\"><span style=\"\"> * coordinates (x,y) into destination coordinates (x',y') by considering them</span></span>\n<span class=\"line\"><span style=\"\"> * to be a column vector and multiplying the coordinate vector by the matrix</span></span>\n<span class=\"line\"><span style=\"\"> * according to the following process:</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;pre></span></span>\n<span class=\"line\"><span style=\"\"> *      [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]</span></span>\n<span class=\"line\"><span style=\"\"> *      [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]</span></span>\n<span class=\"line\"><span style=\"\"> *      [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;/pre></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This class is optimized for speed and minimizes calculations based on its</span></span>\n<span class=\"line\"><span style=\"\"> * knowledge of the underlying matrix (as opposed to say simply performing</span></span>\n<span class=\"line\"><span style=\"\"> * matrix multiplication).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number=} opt_m00 The m00 coordinate of the transform.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number=} opt_m10 The m10 coordinate of the transform.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number=} opt_m01 The m01 coordinate of the transform.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number=} opt_m11 The m11 coordinate of the transform.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number=} opt_m02 The m02 coordinate of the transform.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number=} opt_m12 The m12 coordinate of the transform.</span></span>\n<span class=\"line\"><span style=\"\"> * @constructor</span></span>\n<span class=\"line\"><span style=\"\"> * @final</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/graphics/affinetransform.js#L18-L46",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/graphics/affinetransform.js"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * Pre-concatenates this transform with a scaling transformation,</span></span>\n<span class=\"line\"><span style=\"\"> * i.e. calculates the following matrix product:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;pre></span></span>\n<span class=\"line\"><span style=\"\"> * [sx  0 0] [m00 m01 m02]</span></span>\n<span class=\"line\"><span style=\"\"> * [ 0 sy 0] [m10 m11 m12]</span></span>\n<span class=\"line\"><span style=\"\"> * [ 0  0 1] [  0   0   1]</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;/pre></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number} sx The x-axis scaling factor.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number} sy The y-axis scaling factor.</span></span>\n<span class=\"line\"><span style=\"\"> * @return {!goog.math.AffineTransform} This affine transform.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/math/affinetransform.js#L152-L165",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/math/affinetransform.js"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * Class for representing and manipulating matrices.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The entry that lies in the i-th row and the j-th column of a matrix is</span></span>\n<span class=\"line\"><span style=\"\"> * typically referred to as the i,j entry of the matrix.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The m-by-n matrix A would have its entries referred to as:</span></span>\n<span class=\"line\"><span style=\"\"> *   [ a0,0   a0,1   a0,2   ...   a0,j  ...  a0,n ]</span></span>\n<span class=\"line\"><span style=\"\"> *   [ a1,0   a1,1   a1,2   ...   a1,j  ...  a1,n ]</span></span>\n<span class=\"line\"><span style=\"\"> *   [ a2,0   a2,1   a2,2   ...   a2,j  ...  a2,n ]</span></span>\n<span class=\"line\"><span style=\"\"> *   [  .      .      .            .          .   ]</span></span>\n<span class=\"line\"><span style=\"\"> *   [  .      .      .            .          .   ]</span></span>\n<span class=\"line\"><span style=\"\"> *   [  .      .      .            .          .   ]</span></span>\n<span class=\"line\"><span style=\"\"> *   [ ai,0   ai,1   ai,2   ...   ai,j  ...  ai,n ]</span></span>\n<span class=\"line\"><span style=\"\"> *   [  .      .      .            .          .   ]</span></span>\n<span class=\"line\"><span style=\"\"> *   [  .      .      .            .          .   ]</span></span>\n<span class=\"line\"><span style=\"\"> *   [  .      .      .            .          .   ]</span></span>\n<span class=\"line\"><span style=\"\"> *   [ am,0   am,1   am,2   ...   am,j  ...  am,n ]</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @param {!goog.math.Matrix|!Array&#x3C;!Array&#x3C;number>>|!goog.math.Size|number} m</span></span>\n<span class=\"line\"><span style=\"\"> *     A matrix to copy, a 2D-array to take as a template, a size object for</span></span>\n<span class=\"line\"><span style=\"\"> *     dimensions, or the number of rows.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {number=} opt_n Number of columns of the matrix (only applicable if</span></span>\n<span class=\"line\"><span style=\"\"> *     the first argument is also numeric).</span></span>\n<span class=\"line\"><span style=\"\"> * @struct</span></span>\n<span class=\"line\"><span style=\"\"> * @constructor</span></span>\n<span class=\"line\"><span style=\"\"> * @final</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/math/matrix.js#L21-L48",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/math/matrix.js"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * Solves a linear system where the matrix is square tri-diagonal. That is,</span></span>\n<span class=\"line\"><span style=\"\"> * given a system of equations:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * A * result = vecRight,</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * this class computes result = inv(A) * vecRight, where A has the special form</span></span>\n<span class=\"line\"><span style=\"\"> * of a tri-diagonal matrix:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    |dia(0) sup(0)   0    0     ...   0|</span></span>\n<span class=\"line\"><span style=\"\"> *    |sub(0) dia(1) sup(1) 0     ...   0|</span></span>\n<span class=\"line\"><span style=\"\"> * A =|                ...               |</span></span>\n<span class=\"line\"><span style=\"\"> *    |0 ... 0 sub(n-2) dia(n-1) sup(n-1)|</span></span>\n<span class=\"line\"><span style=\"\"> *    |0 ... 0    0     sub(n-1)   dia(n)|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @param {!Array&#x3C;number>} subDiag The sub diagonal of the matrix.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {!Array&#x3C;number>} mainDiag The main diagonal of the matrix.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {!Array&#x3C;number>} supDiag The super diagonal of the matrix.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {!Array&#x3C;number>} vecRight The right vector of the system</span></span>\n<span class=\"line\"><span style=\"\"> *     of equations.</span></span>\n<span class=\"line\"><span style=\"\"> * @param {Array&#x3C;number>=} opt_result The optional array to store the result.</span></span>\n<span class=\"line\"><span style=\"\"> * @return {!Array&#x3C;number>} The vector that is the solution to the system.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/math/tdma.js#L17-L39",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/math/tdma.js"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * A regular expression for breaking a URI into its component parts.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * {@link http://www.ietf.org/rfc/rfc3986.txt} says in Appendix B</span></span>\n<span class=\"line\"><span style=\"\"> * As the \"first-match-wins\" algorithm is identical to the \"greedy\"</span></span>\n<span class=\"line\"><span style=\"\"> * disambiguation method used by POSIX regular expressions, it is natural and</span></span>\n<span class=\"line\"><span style=\"\"> * commonplace to use a regular expression for parsing the potential five</span></span>\n<span class=\"line\"><span style=\"\"> * components of a URI reference.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The following line is the regular expression for breaking-down a</span></span>\n<span class=\"line\"><span style=\"\"> * well-formed URI reference into its components.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;pre></span></span>\n<span class=\"line\"><span style=\"\"> * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?</span></span>\n<span class=\"line\"><span style=\"\"> *  12            3  4          5       6  7        8 9</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;/pre></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The numbers in the second line above are only to assist readability; they</span></span>\n<span class=\"line\"><span style=\"\"> * indicate the reference points for each subexpression (i.e., each paired</span></span>\n<span class=\"line\"><span style=\"\"> * parenthesis). We refer to the value matched for subexpression &#x3C;n> as $&#x3C;n>.</span></span>\n<span class=\"line\"><span style=\"\"> * For example, matching the above expression to</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;pre></span></span>\n<span class=\"line\"><span style=\"\"> *     http://www.ics.uci.edu/pub/ietf/uri/#Related</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;/pre></span></span>\n<span class=\"line\"><span style=\"\"> * results in the following subexpression matches:</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;pre></span></span>\n<span class=\"line\"><span style=\"\"> *    $1 = http:</span></span>\n<span class=\"line\"><span style=\"\"> *    $2 = http</span></span>\n<span class=\"line\"><span style=\"\"> *    $3 = //www.ics.uci.edu</span></span>\n<span class=\"line\"><span style=\"\"> *    $4 = www.ics.uci.edu</span></span>\n<span class=\"line\"><span style=\"\"> *    $5 = /pub/ietf/uri/</span></span>\n<span class=\"line\"><span style=\"\"> *    $6 = &#x3C;undefined></span></span>\n<span class=\"line\"><span style=\"\"> *    $7 = &#x3C;undefined></span></span>\n<span class=\"line\"><span style=\"\"> *    $8 = #Related</span></span>\n<span class=\"line\"><span style=\"\"> *    $9 = Related</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;/pre></span></span>\n<span class=\"line\"><span style=\"\"> * where &#x3C;undefined> indicates that the component is not present, as is the</span></span>\n<span class=\"line\"><span style=\"\"> * case for the query component in the above example. Therefore, we can</span></span>\n<span class=\"line\"><span style=\"\"> * determine the value of the five components as</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;pre></span></span>\n<span class=\"line\"><span style=\"\"> *    scheme    = $2</span></span>\n<span class=\"line\"><span style=\"\"> *    authority = $4</span></span>\n<span class=\"line\"><span style=\"\"> *    path      = $5</span></span>\n<span class=\"line\"><span style=\"\"> *    query     = $7</span></span>\n<span class=\"line\"><span style=\"\"> *    fragment  = $9</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;/pre></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The regular expression has been modified slightly to expose the</span></span>\n<span class=\"line\"><span style=\"\"> * userInfo, domain, and port separately from the authority.</span></span>\n<span class=\"line\"><span style=\"\"> * The modified version yields</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;pre></span></span>\n<span class=\"line\"><span style=\"\"> *    $1 = http              scheme</span></span>\n<span class=\"line\"><span style=\"\"> *    $2 = &#x3C;undefined>       userInfo -\\</span></span>\n<span class=\"line\"><span style=\"\"> *    $3 = www.ics.uci.edu   domain     | authority</span></span>\n<span class=\"line\"><span style=\"\"> *    $4 = &#x3C;undefined>       port     -/</span></span>\n<span class=\"line\"><span style=\"\"> *    $5 = /pub/ietf/uri/    path</span></span>\n<span class=\"line\"><span style=\"\"> *    $6 = &#x3C;undefined>       query without ?</span></span>\n<span class=\"line\"><span style=\"\"> *    $7 = Related           fragment without #</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;/pre></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * TODO(user): separate out the authority terminating characters once this</span></span>\n<span class=\"line\"><span style=\"\"> * file is moved to ES6.</span></span>\n<span class=\"line\"><span style=\"\"> * @type {!RegExp}</span></span>\n<span class=\"line\"><span style=\"\"> * @private</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/google-closure-library/closure/goog/uri/utils.js#L124-L188",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/google-closure-library/closure/goog/uri/utils.js"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// ipcz is a cross-platform C library for interprocess communication (IPC) which</span></span>\n<span class=\"line\"><span style=\"\">// supports efficient routing and data transfer over a large number of</span></span>\n<span class=\"line\"><span style=\"\">// dynamically relocatable messaging endpoints.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// ipcz operates in terms of a small handful of abstractions encapsulated in</span></span>\n<span class=\"line\"><span style=\"\">// this header: nodes, portals, parcels, drivers, boxes, and traps.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// NOTE: This header is intended to compile under C++11 or newer, and C99 or</span></span>\n<span class=\"line\"><span style=\"\">// newer. The ABI defined here can be considered stable.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Glossary</span></span>\n<span class=\"line\"><span style=\"\">// --------</span></span>\n<span class=\"line\"><span style=\"\">// *Nodes* are used by ipcz to model isolated units of an application. A typical</span></span>\n<span class=\"line\"><span style=\"\">// application will create one ipcz node within each OS process it controls.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// *Portals* are messaging endpoints which belong to a specific node. Portals</span></span>\n<span class=\"line\"><span style=\"\">// are created in entangled pairs: whatever goes into one portal comes out the</span></span>\n<span class=\"line\"><span style=\"\">// other (its \"peer\"). Pairs may be created local to a single node, or they may</span></span>\n<span class=\"line\"><span style=\"\">// be created to span two nodes. Portals may also be transferred freely through</span></span>\n<span class=\"line\"><span style=\"\">// other portals.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// *Parcels* are the unit of communication between portals. Parcels can contain</span></span>\n<span class=\"line\"><span style=\"\">// arbitrary application data as well as ipcz handles. Handles within a parcel</span></span>\n<span class=\"line\"><span style=\"\">// are used to transfer objects (namely other portals, or driver-defined</span></span>\n<span class=\"line\"><span style=\"\">// objects) from one portal to another, potentially on a different node.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// *Traps* provide a flexible mechanism to observe interesting portal state</span></span>\n<span class=\"line\"><span style=\"\">// changes such as new parcels arriving or a portal's peer being closed.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// *Drivers* are provided by applications to implement platform-specific IPC</span></span>\n<span class=\"line\"><span style=\"\">// details. They may also define new types of objects to be transmitted in</span></span>\n<span class=\"line\"><span style=\"\">// parcels via boxes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// *Boxes* are opaque objects used to wrap driver- or application-defined</span></span>\n<span class=\"line\"><span style=\"\">// objects for seamless transmission across portals. Applications use the Box()</span></span>\n<span class=\"line\"><span style=\"\">// and Unbox() APIs to go between concrete objects and transferrable box</span></span>\n<span class=\"line\"><span style=\"\">// handles, and ipcz delegates to the driver or application to serialize boxed</span></span>\n<span class=\"line\"><span style=\"\">// objects as needed for transmission.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Overview</span></span>\n<span class=\"line\"><span style=\"\">// --------</span></span>\n<span class=\"line\"><span style=\"\">// To use ipcz effectively, an application must create multiple nodes to be</span></span>\n<span class=\"line\"><span style=\"\">// interconnected. One node must be designated as the \"broker\" by the</span></span>\n<span class=\"line\"><span style=\"\">// application (see CreateNode() flags). The broker is used by ipcz to</span></span>\n<span class=\"line\"><span style=\"\">// coordinate certain types of internal transactions which demand a heightened</span></span>\n<span class=\"line\"><span style=\"\">// level of trust and capability, so a broker node should always live in a more</span></span>\n<span class=\"line\"><span style=\"\">// trustworthy process. For example in Chrome, the browser process is</span></span>\n<span class=\"line\"><span style=\"\">// designated as the broker.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In order for a node to communicate with other nodes in the system, the</span></span>\n<span class=\"line\"><span style=\"\">// application must explicitly connect it to ONE other node using the</span></span>\n<span class=\"line\"><span style=\"\">// ConnectNode() API. Once this is done, ipcz can automatically connect the node</span></span>\n<span class=\"line\"><span style=\"\">// to additional other nodes as needed for efficient portal operation.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In the example below, assume node A is designated as the broker. Nodes A and</span></span>\n<span class=\"line\"><span style=\"\">// B have been connected directly by ConnectNode() calls in the application.</span></span>\n<span class=\"line\"><span style=\"\">// Nodes A and C have been similarly connected:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                    ┌───────┐</span></span>\n<span class=\"line\"><span style=\"\">//     ConnectNode()  │       │  ConnectNode()</span></span>\n<span class=\"line\"><span style=\"\">//        ┌──────────>O   A   O&#x3C;───────────┐</span></span>\n<span class=\"line\"><span style=\"\">//        │           │       │            │</span></span>\n<span class=\"line\"><span style=\"\">//        │           └───────┘            │</span></span>\n<span class=\"line\"><span style=\"\">//        │                                │</span></span>\n<span class=\"line\"><span style=\"\">//        v ConnectNode()                  v ConnectNode()</span></span>\n<span class=\"line\"><span style=\"\">//    ┌───O───┐                        ┌───O───┐</span></span>\n<span class=\"line\"><span style=\"\">//    │       │                        │       │</span></span>\n<span class=\"line\"><span style=\"\">//    │   B   │                        │   C   │</span></span>\n<span class=\"line\"><span style=\"\">//    │       │                        │       │</span></span>\n<span class=\"line\"><span style=\"\">//    └───────┘                        └───────┘</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// ConnectNode() establishes initial portal pairs to link the two nodes</span></span>\n<span class=\"line\"><span style=\"\">// together, illustrated above as \"O\"s. Once ConnectNode() returns, the</span></span>\n<span class=\"line\"><span style=\"\">// application may immediately begin transmitting parcels through these portals.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Now suppose node B creates a new local pair of portals (using OpenPortals())</span></span>\n<span class=\"line\"><span style=\"\">// and sends one of those new portals in a parcel through its</span></span>\n<span class=\"line\"><span style=\"\">// already-established portal to node A. The sent portal is effectively</span></span>\n<span class=\"line\"><span style=\"\">// transferred to node A, and because its entangled peer still lives on node B</span></span>\n<span class=\"line\"><span style=\"\">// there are now TWO portal pairs between nodes A and B:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                    ┌───────┐</span></span>\n<span class=\"line\"><span style=\"\">//                    │       │</span></span>\n<span class=\"line\"><span style=\"\">//        ┌──────────>O   A   O&#x3C;───────────┐</span></span>\n<span class=\"line\"><span style=\"\">//        │ ┌────────>O       │            │</span></span>\n<span class=\"line\"><span style=\"\">//        │ │         └───────┘            │</span></span>\n<span class=\"line\"><span style=\"\">//        │ │                              │</span></span>\n<span class=\"line\"><span style=\"\">//        v v                              v</span></span>\n<span class=\"line\"><span style=\"\">//    ┌───O─O─┐                        ┌───O───┐</span></span>\n<span class=\"line\"><span style=\"\">//    │       │                        │       │</span></span>\n<span class=\"line\"><span style=\"\">//    │   B   │                        │   C   │</span></span>\n<span class=\"line\"><span style=\"\">//    │       │                        │       │</span></span>\n<span class=\"line\"><span style=\"\">//    └───────┘                        └───────┘</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Finally, suppose now the application takes this new portal on node A and</span></span>\n<span class=\"line\"><span style=\"\">// sends it further along, through node A's already-established portal to node</span></span>\n<span class=\"line\"><span style=\"\">// C. Because the transferred portal's peer still lives on node B, there is now</span></span>\n<span class=\"line\"><span style=\"\">// a portal pair spanning nodes B and C:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                    ┌───────┐</span></span>\n<span class=\"line\"><span style=\"\">//                    │       │</span></span>\n<span class=\"line\"><span style=\"\">//        ┌──────────>O   A   O&#x3C;───────────┐</span></span>\n<span class=\"line\"><span style=\"\">//        │           │       │            │</span></span>\n<span class=\"line\"><span style=\"\">//        │           └───────┘            │</span></span>\n<span class=\"line\"><span style=\"\">//        │                                │</span></span>\n<span class=\"line\"><span style=\"\">//        v                                v</span></span>\n<span class=\"line\"><span style=\"\">//    ┌───O───┐                        ┌───O───┐</span></span>\n<span class=\"line\"><span style=\"\">//    │       │                        │       │</span></span>\n<span class=\"line\"><span style=\"\">//    │   B   O────────────────────────O   C   │</span></span>\n<span class=\"line\"><span style=\"\">//    │       │                        │       │</span></span>\n<span class=\"line\"><span style=\"\">//    └───────┘                        └───────┘</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// These two nodes were never explicitly connected by the application, but ipcz</span></span>\n<span class=\"line\"><span style=\"\">// ensures that the portals will operate as expected. Behind the scenes, ipcz</span></span>\n<span class=\"line\"><span style=\"\">// achieves this by establishing a direct, secure, and efficient communication</span></span>\n<span class=\"line\"><span style=\"\">// channel between nodes B and C.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/ipcz/include/ipcz/ipcz.h#L8-L123",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/ipcz/include/ipcz/ipcz.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The demangler is implemented to be used in async signal handlers to</span></span>\n<span class=\"line\"><span style=\"\">// symbolize stack traces.  We cannot use libstdc++'s</span></span>\n<span class=\"line\"><span style=\"\">// abi::__cxa_demangle() in such signal handlers since it's not async</span></span>\n<span class=\"line\"><span style=\"\">// signal safe (it uses malloc() internally).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that this demangler doesn't support full demangling.  More</span></span>\n<span class=\"line\"><span style=\"\">// specifically, it doesn't print types of function parameters and</span></span>\n<span class=\"line\"><span style=\"\">// types of template arguments.  It just skips them.  However, it's</span></span>\n<span class=\"line\"><span style=\"\">// still very useful to extract basic information such as class,</span></span>\n<span class=\"line\"><span style=\"\">// function, constructor, destructor, and operator names.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// See the implementation note in demangle.cc if you are interested.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Example:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// | Mangled Name  | The Demangler | abi::__cxa_demangle()</span></span>\n<span class=\"line\"><span style=\"\">// |---------------|---------------|-----------------------</span></span>\n<span class=\"line\"><span style=\"\">// | _Z1fv         | f()           | f()</span></span>\n<span class=\"line\"><span style=\"\">// | _Z1fi         | f()           | f(int)</span></span>\n<span class=\"line\"><span style=\"\">// | _Z3foo3bar    | foo()         | foo(bar)</span></span>\n<span class=\"line\"><span style=\"\">// | _Z1fIiEvi     | f&#x3C;>()         | void f&#x3C;int>(int)</span></span>\n<span class=\"line\"><span style=\"\">// | _ZN1N1fE      | N::f          | N::f</span></span>\n<span class=\"line\"><span style=\"\">// | _ZN3Foo3BarEv | Foo::Bar()    | Foo::Bar()</span></span>\n<span class=\"line\"><span style=\"\">// | _Zrm1XS_\"     | operator%()   | operator%(X, X)</span></span>\n<span class=\"line\"><span style=\"\">// | _ZN3FooC1Ev   | Foo::Foo()    | Foo::Foo()</span></span>\n<span class=\"line\"><span style=\"\">// | _Z1fSs        | f()           | f(std::basic_string&#x3C;char,</span></span>\n<span class=\"line\"><span style=\"\">// |               |               |   std::char_traits&#x3C;char>,</span></span>\n<span class=\"line\"><span style=\"\">// |               |               |   std::allocator&#x3C;char> >)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// See the unit test for more examples.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note: we might want to write demanglers for ABIs other than Itanium</span></span>\n<span class=\"line\"><span style=\"\">// C++ ABI in the future.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/base/third_party/symbolize/demangle.h#L35-L68",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/base/third_party/symbolize/demangle.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Provides a router with a new outward link to replace its existing outward</span></span>\n<span class=\"line\"><span style=\"\">// link to some other node. Given routers X and Y on the central link, and a</span></span>\n<span class=\"line\"><span style=\"\">// router Z as Y's inward peer:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     X ==== (central) ==== Y ======== Z</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Z sends this message to X's node to establish a new direct link to X. Both</span></span>\n<span class=\"line\"><span style=\"\">// X's and Z's existing links to Y are left intact in a decaying state:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         - - - Y - - -</span></span>\n<span class=\"line\"><span style=\"\">//       /               \\</span></span>\n<span class=\"line\"><span style=\"\">//     X === (central) === Z</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The recipient of this message must send a StopProxying message to Y, as well</span></span>\n<span class=\"line\"><span style=\"\">// as a ProxyWillStop message to Z, in order for those decaying links to be</span></span>\n<span class=\"line\"><span style=\"\">// phased out.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Z must send this message to X only after receiving a BypassPeer request from</span></span>\n<span class=\"line\"><span style=\"\">// Y. That request signifies that X's node has been adequately prepared by Y to</span></span>\n<span class=\"line\"><span style=\"\">// authenticate this request from Z.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/ipcz/src/ipcz/node_messages_generator.h#L412-L431",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/ipcz/src/ipcz/node_messages_generator.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Matrix of resampling methods used:</span></span>\n<span class=\"line\"><span style=\"\"> *                                 Fs_out (kHz)</span></span>\n<span class=\"line\"><span style=\"\"> *                        8      12     16     24     48</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *               8        C      UF     U      UF     UF</span></span>\n<span class=\"line\"><span style=\"\"> *              12        AF     C      UF     U      UF</span></span>\n<span class=\"line\"><span style=\"\"> * Fs_in (kHz)  16        D      AF     C      UF     UF</span></span>\n<span class=\"line\"><span style=\"\"> *              24        AF     D      AF     C      U</span></span>\n<span class=\"line\"><span style=\"\"> *              48        AF     AF     AF     D      C</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * C   -> Copy (no resampling)</span></span>\n<span class=\"line\"><span style=\"\"> * D   -> Allpass-based 2x downsampling</span></span>\n<span class=\"line\"><span style=\"\"> * U   -> Allpass-based 2x upsampling</span></span>\n<span class=\"line\"><span style=\"\"> * UF  -> Allpass-based 2x upsampling followed by FIR interpolation</span></span>\n<span class=\"line\"><span style=\"\"> * AF  -> AR2 filter followed by FIR interpolation</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/opus/src/silk/resampler.c#L32-L48",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/opus/src/silk/resampler.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Previous input character      Current character         Case</span></span>\n<span class=\"line\"><span style=\"\">// Any                           Non-alphanumeric          Skipped</span></span>\n<span class=\"line\"><span style=\"\">// None - first char of input    Alphanumeric              Upper</span></span>\n<span class=\"line\"><span style=\"\">// Non-letter (e.g. _ or 1)      Alphanumeric              Upper</span></span>\n<span class=\"line\"><span style=\"\">// Numeric                       Alphanumeric              Upper</span></span>\n<span class=\"line\"><span style=\"\">// Lower letter                  Alphanumeric              Same as current</span></span>\n<span class=\"line\"><span style=\"\">// Upper letter                  Alphanumeric              Lower</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/protobuf/src/google/protobuf/compiler/csharp/csharp_helpers.cc#L190-L196",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/protobuf/src/google/protobuf/compiler/csharp/csharp_helpers.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/// Whether it is possible or not to automatically derive trait for an item.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// ```ignore</span></span>\n<span class=\"line\"><span style=\"\">///         No</span></span>\n<span class=\"line\"><span style=\"\">///          ^</span></span>\n<span class=\"line\"><span style=\"\">///          |</span></span>\n<span class=\"line\"><span style=\"\">///      Manually</span></span>\n<span class=\"line\"><span style=\"\">///          ^</span></span>\n<span class=\"line\"><span style=\"\">///          |</span></span>\n<span class=\"line\"><span style=\"\">///         Yes</span></span>\n<span class=\"line\"><span style=\"\">/// ```</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// Initially we assume that we can derive trait for all types and then</span></span>\n<span class=\"line\"><span style=\"\">/// update our understanding as we learn more about each type.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/rust/bindgen/v0_60/crate/src/ir/derive.rs#L81-L94",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/rust/bindgen/v0_60/crate/src/ir/derive.rs"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//! Fix-point analyses on the IR using the \"monotone framework\".</span></span>\n<span class=\"line\"><span style=\"\">//!</span></span>\n<span class=\"line\"><span style=\"\">//! A lattice is a set with a partial ordering between elements, where there is</span></span>\n<span class=\"line\"><span style=\"\">//! a single least upper bound and a single greatest least bound for every</span></span>\n<span class=\"line\"><span style=\"\">//! subset. We are dealing with finite lattices, which means that it has a</span></span>\n<span class=\"line\"><span style=\"\">//! finite number of elements, and it follows that there exists a single top and</span></span>\n<span class=\"line\"><span style=\"\">//! a single bottom member of the lattice. For example, the power set of a</span></span>\n<span class=\"line\"><span style=\"\">//! finite set forms a finite lattice where partial ordering is defined by set</span></span>\n<span class=\"line\"><span style=\"\">//! inclusion, that is `a &#x3C;= b` if `a` is a subset of `b`. Here is the finite</span></span>\n<span class=\"line\"><span style=\"\">//! lattice constructed from the set {0,1,2}:</span></span>\n<span class=\"line\"><span style=\"\">//!</span></span>\n<span class=\"line\"><span style=\"\">//! ```text</span></span>\n<span class=\"line\"><span style=\"\">//!                    .----- Top = {0,1,2} -----.</span></span>\n<span class=\"line\"><span style=\"\">//!                   /            |              \\</span></span>\n<span class=\"line\"><span style=\"\">//!                  /             |               \\</span></span>\n<span class=\"line\"><span style=\"\">//!                 /              |                \\</span></span>\n<span class=\"line\"><span style=\"\">//!              {0,1} -------.  {0,2}  .--------- {1,2}</span></span>\n<span class=\"line\"><span style=\"\">//!                |           \\ /   \\ /             |</span></span>\n<span class=\"line\"><span style=\"\">//!                |            /     \\              |</span></span>\n<span class=\"line\"><span style=\"\">//!                |           / \\   / \\             |</span></span>\n<span class=\"line\"><span style=\"\">//!               {0} --------'   {1}   `---------- {2}</span></span>\n<span class=\"line\"><span style=\"\">//!                 \\              |                /</span></span>\n<span class=\"line\"><span style=\"\">//!                  \\             |               /</span></span>\n<span class=\"line\"><span style=\"\">//!                   \\            |              /</span></span>\n<span class=\"line\"><span style=\"\">//!                    `------ Bottom = {} ------'</span></span>\n<span class=\"line\"><span style=\"\">//! ```</span></span>\n<span class=\"line\"><span style=\"\">//!</span></span>\n<span class=\"line\"><span style=\"\">//! A monotone function `f` is a function where if `x &#x3C;= y`, then it holds that</span></span>\n<span class=\"line\"><span style=\"\">//! `f(x) &#x3C;= f(y)`. It should be clear that running a monotone function to a</span></span>\n<span class=\"line\"><span style=\"\">//! fix-point on a finite lattice will always terminate: `f` can only \"move\"</span></span>\n<span class=\"line\"><span style=\"\">//! along the lattice in a single direction, and therefore can only either find</span></span>\n<span class=\"line\"><span style=\"\">//! a fix-point in the middle of the lattice or continue to the top or bottom</span></span>\n<span class=\"line\"><span style=\"\">//! depending if it is ascending or descending the lattice respectively.</span></span>\n<span class=\"line\"><span style=\"\">//!</span></span>\n<span class=\"line\"><span style=\"\">//! For a deeper introduction to the general form of this kind of analysis, see</span></span>\n<span class=\"line\"><span style=\"\">//! [Static Program Analysis by Anders Møller and Michael I. Schwartzbach][spa].</span></span>\n<span class=\"line\"><span style=\"\">//!</span></span>\n<span class=\"line\"><span style=\"\">//! [spa]: https://cs.au.dk/~amoeller/spa/spa.pdf</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/rust/bindgen/v0_60/crate/src/ir/analysis/mod.rs#L1-L38",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/third_party/rust/bindgen/v0_60/crate/src/ir/analysis/mod.rs"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/// The result of the `Sizedness` analysis for an individual item.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// This is a chain lattice of the form:</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// ```ignore</span></span>\n<span class=\"line\"><span style=\"\">///                   NonZeroSized</span></span>\n<span class=\"line\"><span style=\"\">///                        |</span></span>\n<span class=\"line\"><span style=\"\">///                DependsOnTypeParam</span></span>\n<span class=\"line\"><span style=\"\">///                        |</span></span>\n<span class=\"line\"><span style=\"\">///                     ZeroSized</span></span>\n<span class=\"line\"><span style=\"\">/// ```</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// We initially assume that all types are `ZeroSized` and then update our</span></span>\n<span class=\"line\"><span style=\"\">/// understanding as we learn more about each type.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/rust/bindgen/v0_60/crate/src/ir/analysis/sizedness.rs#L13-L26",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/rust/bindgen/v0_60/crate/src/ir/analysis/sizedness.rs"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// An AccessibilityFocusRing is a special type of shape designed to</span></span>\n<span class=\"line\"><span style=\"\">// outline the focused object on the screen for users with visual</span></span>\n<span class=\"line\"><span style=\"\">// impairments. It's specifically designed to outline text ranges that</span></span>\n<span class=\"line\"><span style=\"\">// span multiple lines (we'll call this a \"paragraph\" shape from here on,</span></span>\n<span class=\"line\"><span style=\"\">// but it works for any text range), so it can outline a shape defined by a</span></span>\n<span class=\"line\"><span style=\"\">// few words from the first line, the complete contents of more lines,</span></span>\n<span class=\"line\"><span style=\"\">// followed by a few words from the last line. See the figure below.</span></span>\n<span class=\"line\"><span style=\"\">// When highlighting any other object, it outlines a rectangular shape.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The outline is outset from the object it's highlighting by a few pixels;</span></span>\n<span class=\"line\"><span style=\"\">// this margin distance also determines its border radius for rounded</span></span>\n<span class=\"line\"><span style=\"\">// corners.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// An AccessibilityFocusRing can be initialized with either a rectangle</span></span>\n<span class=\"line\"><span style=\"\">// defining the bounds of an object, or a paragraph-shape with three</span></span>\n<span class=\"line\"><span style=\"\">// rectangles defining a top line, a body, and a bottom line, which are</span></span>\n<span class=\"line\"><span style=\"\">// assumed to be adjacent to one another.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Initializing an AccessibilityFocusRing computes the following 36 points</span></span>\n<span class=\"line\"><span style=\"\">// that completely define the shape's outline. This shape can be traced</span></span>\n<span class=\"line\"><span style=\"\">// using Skia or any other drawing utility just by drawing alternating</span></span>\n<span class=\"line\"><span style=\"\">// straight lines and quadratic curves (e.g. a line from 0 to 1, a curve</span></span>\n<span class=\"line\"><span style=\"\">// from 1 to 3 with 2 as a control point, then a line from 3 to 4, and so on.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The same path should be used even if the focus ring was initialized with</span></span>\n<span class=\"line\"><span style=\"\">// a rectangle and not a paragraph shape - this makes it possible to</span></span>\n<span class=\"line\"><span style=\"\">// smoothly animate between one object and the next simply by interpolating</span></span>\n<span class=\"line\"><span style=\"\">// points.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Noncontiguous shapes should be handled by drawing multiple focus rings.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The 36 points are defined as follows:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//          2 3------------------------------4 5</span></span>\n<span class=\"line\"><span style=\"\">//           /                                |</span></span>\n<span class=\"line\"><span style=\"\">//          1                                  6</span></span>\n<span class=\"line\"><span style=\"\">//          |      First line of paragraph     |</span></span>\n<span class=\"line\"><span style=\"\">//          0                                  7</span></span>\n<span class=\"line\"><span style=\"\">//         /                                    |</span></span>\n<span class=\"line\"><span style=\"\">// 32 33-34 35                                 8 9---------------10 11</span></span>\n<span class=\"line\"><span style=\"\">//   /                                                             |</span></span>\n<span class=\"line\"><span style=\"\">// 31      Middle line of paragraph..........................       12</span></span>\n<span class=\"line\"><span style=\"\">// |                                                                |</span></span>\n<span class=\"line\"><span style=\"\">// |                                                                |</span></span>\n<span class=\"line\"><span style=\"\">// |       Middle line of paragraph..........................       |</span></span>\n<span class=\"line\"><span style=\"\">// |                                                                |</span></span>\n<span class=\"line\"><span style=\"\">// |                                                                |</span></span>\n<span class=\"line\"><span style=\"\">// 30      Middle line of paragraph..........................       13</span></span>\n<span class=\"line\"><span style=\"\">//   |                                                             |</span></span>\n<span class=\"line\"><span style=\"\">// 29 28---------27 26                             17 16---------15 14</span></span>\n<span class=\"line\"><span style=\"\">//                 |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//                  25                             18</span></span>\n<span class=\"line\"><span style=\"\">//                  |    Last line of paragraph    |</span></span>\n<span class=\"line\"><span style=\"\">//                  24                             19</span></span>\n<span class=\"line\"><span style=\"\">//                    |                           |</span></span>\n<span class=\"line\"><span style=\"\">//                  23 22-----------------------21 20</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Exported for tests.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/accessibility/ui/accessibility_focus_ring.h#L14-L71",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/accessibility/ui/accessibility_focus_ring.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This class encapsulates the index boundaries for region on co-ordinate system</span></span>\n<span class=\"line\"><span style=\"\">// (used for tiling). The delimiting boundaries |left_|, |right_|, |top_| and</span></span>\n<span class=\"line\"><span style=\"\">// |bottom_| are basically leftmost, rightmost, topmost and bottommost indices</span></span>\n<span class=\"line\"><span style=\"\">// of the region. These delimiters can span in any quadrants.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If |left_| &#x3C;= |right_| and |top_| &#x3C;= |bottom_|, IndexRect is considered to</span></span>\n<span class=\"line\"><span style=\"\">// hold valid indices and this can be checked using is_valid().</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If IndexRect is valid, it has a coverage of all the indices from |left_| to</span></span>\n<span class=\"line\"><span style=\"\">// |right_| both inclusive and |top_| to |bottom_| both inclusive. So for</span></span>\n<span class=\"line\"><span style=\"\">// |left_| == |right_|, num_indices_x() is 1, meaning |left_| and |right_| point</span></span>\n<span class=\"line\"><span style=\"\">// to the same index.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The following diagram shows how indices span in different quadrants and the</span></span>\n<span class=\"line\"><span style=\"\">// positive quadrant. In the positive quadrant all indices are >= 0. The first</span></span>\n<span class=\"line\"><span style=\"\">// index in this quadrant is (0, 0). The indices in positive quadrant represent</span></span>\n<span class=\"line\"><span style=\"\">// the visible region and is_in_positive_quadrant() can be used to check whether</span></span>\n<span class=\"line\"><span style=\"\">// all indices lie within this quadrant or not.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//              │</span></span>\n<span class=\"line\"><span style=\"\">//              │</span></span>\n<span class=\"line\"><span style=\"\">//  -ve index_x │  +ve index_x</span></span>\n<span class=\"line\"><span style=\"\">//  -ve index_y │  -ve index_y</span></span>\n<span class=\"line\"><span style=\"\">//              │</span></span>\n<span class=\"line\"><span style=\"\">//  ────────────┼────────────</span></span>\n<span class=\"line\"><span style=\"\">//              │</span></span>\n<span class=\"line\"><span style=\"\">//  -ve index_x │  +ve index_x</span></span>\n<span class=\"line\"><span style=\"\">//  +ve index_y │  +ve index_y</span></span>\n<span class=\"line\"><span style=\"\">//              │</span></span>\n<span class=\"line\"><span style=\"\">//              │  (+ve Quadrant)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In the following example, region has |left_| = 0, |right_| = 4, |top_| = 0</span></span>\n<span class=\"line\"><span style=\"\">// and |bottom_| = 4. Here x indices are 0, 1, 2, 3, 4 and y indices are</span></span>\n<span class=\"line\"><span style=\"\">// 0, 1, 2, 3, 4.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    x 0   1   2   3   4</span></span>\n<span class=\"line\"><span style=\"\">//  y ┌───┬───┬───┬───┬───┐</span></span>\n<span class=\"line\"><span style=\"\">//  0 │   │   │   │   │   │</span></span>\n<span class=\"line\"><span style=\"\">//    ├───┼───┼───┼───┼───┤</span></span>\n<span class=\"line\"><span style=\"\">//  1 │   │   │   │   │   │</span></span>\n<span class=\"line\"><span style=\"\">//    ├───┼───┼───┼───┼───┤</span></span>\n<span class=\"line\"><span style=\"\">//  2 │   │   │   │   │   │</span></span>\n<span class=\"line\"><span style=\"\">//    ├───┼───┼───┼───┼───┤</span></span>\n<span class=\"line\"><span style=\"\">//  3 │   │   │   │   │   │</span></span>\n<span class=\"line\"><span style=\"\">//    ├───┼───┼───┼───┼───┤</span></span>\n<span class=\"line\"><span style=\"\">//  4 │   │   │   │   │   │</span></span>\n<span class=\"line\"><span style=\"\">//    └───┴───┴───┴───┴───┘</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/cc/base/index_rect.h#L14-L60",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/cc/base/index_rect.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* sqrt(x)</span></span>\n<span class=\"line\"><span style=\"\"> * Return correctly rounded sqrt.</span></span>\n<span class=\"line\"><span style=\"\"> *           ------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *           |  Use the hardware sqrt if you have one |</span></span>\n<span class=\"line\"><span style=\"\"> *           ------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> * Method:</span></span>\n<span class=\"line\"><span style=\"\"> *   Bit by bit method using integer arithmetic. (Slow, but portable)</span></span>\n<span class=\"line\"><span style=\"\"> *   1. Normalization</span></span>\n<span class=\"line\"><span style=\"\"> *      Scale x to y in [1,4) with even powers of 2:</span></span>\n<span class=\"line\"><span style=\"\"> *      find an integer k such that  1 &#x3C;= (y=x*2^(2k)) &#x3C; 4, then</span></span>\n<span class=\"line\"><span style=\"\"> *              sqrt(x) = 2^k * sqrt(y)</span></span>\n<span class=\"line\"><span style=\"\"> *   2. Bit by bit computation</span></span>\n<span class=\"line\"><span style=\"\"> *      Let q  = sqrt(y) truncated to i bit after binary point (q = 1),</span></span>\n<span class=\"line\"><span style=\"\"> *           i                                                   0</span></span>\n<span class=\"line\"><span style=\"\"> *                                     i+1         2</span></span>\n<span class=\"line\"><span style=\"\"> *          s  = 2*q , and      y  =  2   * ( y - q  ).         (1)</span></span>\n<span class=\"line\"><span style=\"\"> *           i      i            i                 i</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      To compute q    from q , one checks whether</span></span>\n<span class=\"line\"><span style=\"\"> *                  i+1       i</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                            -(i+1) 2</span></span>\n<span class=\"line\"><span style=\"\"> *                      (q + 2      ) &#x3C;= y.                     (2)</span></span>\n<span class=\"line\"><span style=\"\"> *                        i</span></span>\n<span class=\"line\"><span style=\"\"> *                                                            -(i+1)</span></span>\n<span class=\"line\"><span style=\"\"> *      If (2) is false, then q   = q ; otherwise q   = q  + 2      .</span></span>\n<span class=\"line\"><span style=\"\"> *                             i+1   i             i+1   i</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      With some algebraic manipulation, it is not difficult to see</span></span>\n<span class=\"line\"><span style=\"\"> *      that (2) is equivalent to</span></span>\n<span class=\"line\"><span style=\"\"> *                             -(i+1)</span></span>\n<span class=\"line\"><span style=\"\"> *                      s  +  2       &#x3C;= y                      (3)</span></span>\n<span class=\"line\"><span style=\"\"> *                       i                i</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      The advantage of (3) is that s  and y  can be computed by</span></span>\n<span class=\"line\"><span style=\"\"> *                                    i      i</span></span>\n<span class=\"line\"><span style=\"\"> *      the following recurrence formula:</span></span>\n<span class=\"line\"><span style=\"\"> *          if (3) is false</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *          s     =  s  ,       y    = y   ;                    (4)</span></span>\n<span class=\"line\"><span style=\"\"> *           i+1      i          i+1    i</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *          otherwise,</span></span>\n<span class=\"line\"><span style=\"\"> *                         -i                     -(i+1)</span></span>\n<span class=\"line\"><span style=\"\"> *          s     =  s  + 2  ,  y    = y  -  s  - 2             (5)</span></span>\n<span class=\"line\"><span style=\"\"> *           i+1      i          i+1    i     i</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      One may easily use induction to prove (4) and (5).</span></span>\n<span class=\"line\"><span style=\"\"> *      Note. Since the left hand side of (3) contain only i+2 bits,</span></span>\n<span class=\"line\"><span style=\"\"> *            it does not necessary to do a full (53-bit) comparison</span></span>\n<span class=\"line\"><span style=\"\"> *            in (3).</span></span>\n<span class=\"line\"><span style=\"\"> *   3. Final rounding</span></span>\n<span class=\"line\"><span style=\"\"> *      After generating the 53 bits result, we compute one more bit.</span></span>\n<span class=\"line\"><span style=\"\"> *      Together with the remainder, we can decide whether the</span></span>\n<span class=\"line\"><span style=\"\"> *      result is exact, bigger than 1/2ulp, or less than 1/2ulp</span></span>\n<span class=\"line\"><span style=\"\"> *      (it will never equal to 1/2ulp).</span></span>\n<span class=\"line\"><span style=\"\"> *      The rounding mode can be detected by checking whether</span></span>\n<span class=\"line\"><span style=\"\"> *      huge + tiny is equal to huge, and whether huge - tiny is</span></span>\n<span class=\"line\"><span style=\"\"> *      equal to huge for some floating point number \"huge\" and \"tiny\".</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Special cases:</span></span>\n<span class=\"line\"><span style=\"\"> *      sqrt(+-0) = +-0         ... exact</span></span>\n<span class=\"line\"><span style=\"\"> *      sqrt(inf) = inf</span></span>\n<span class=\"line\"><span style=\"\"> *      sqrt(-ve) = NaN         ... with invalid signal</span></span>\n<span class=\"line\"><span style=\"\"> *      sqrt(NaN) = NaN         ... with invalid signal for signaling NaN</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/rust/minimal_lexical/v0_2/crate/src/libm.rs#L999-L1064",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/rust/minimal_lexical/v0_2/crate/src/libm.rs"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This module implements Identifier, a short-optimized string allowed to</span></span>\n<span class=\"line\"><span style=\"\">// contain only the ASCII characters hyphen, dot, 0-9, A-Z, a-z.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// As of mid-2021, the distribution of pre-release lengths on crates.io is:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     length  count         length  count         length  count</span></span>\n<span class=\"line\"><span style=\"\">//        0  355929            11      81            24       2</span></span>\n<span class=\"line\"><span style=\"\">//        1     208            12      48            25       6</span></span>\n<span class=\"line\"><span style=\"\">//        2     236            13      55            26      10</span></span>\n<span class=\"line\"><span style=\"\">//        3    1909            14      25            27       4</span></span>\n<span class=\"line\"><span style=\"\">//        4    1284            15      15            28       1</span></span>\n<span class=\"line\"><span style=\"\">//        5    1742            16      35            30       1</span></span>\n<span class=\"line\"><span style=\"\">//        6    3440            17       9            31       5</span></span>\n<span class=\"line\"><span style=\"\">//        7    5624            18       6            32       1</span></span>\n<span class=\"line\"><span style=\"\">//        8    1321            19      12            36       2</span></span>\n<span class=\"line\"><span style=\"\">//        9     179            20       2            37     379</span></span>\n<span class=\"line\"><span style=\"\">//       10      65            23      11</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// and the distribution of build metadata lengths is:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     length  count         length  count         length  count</span></span>\n<span class=\"line\"><span style=\"\">//        0  364445             8    7725            18       1</span></span>\n<span class=\"line\"><span style=\"\">//        1      72             9      16            19       1</span></span>\n<span class=\"line\"><span style=\"\">//        2       7            10      85            20       1</span></span>\n<span class=\"line\"><span style=\"\">//        3      28            11      17            22       4</span></span>\n<span class=\"line\"><span style=\"\">//        4       9            12      10            26       1</span></span>\n<span class=\"line\"><span style=\"\">//        5      68            13       9            27       1</span></span>\n<span class=\"line\"><span style=\"\">//        6      73            14      10            40       5</span></span>\n<span class=\"line\"><span style=\"\">//        7      53            15       6</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Therefore it really behooves us to be able to use the entire 8 bytes of a</span></span>\n<span class=\"line\"><span style=\"\">// pointer for inline storage. For both pre-release and build metadata there are</span></span>\n<span class=\"line\"><span style=\"\">// vastly more strings with length exactly 8 bytes than the sum over all lengths</span></span>\n<span class=\"line\"><span style=\"\">// longer than 8 bytes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// To differentiate the inline representation from the heap allocated long</span></span>\n<span class=\"line\"><span style=\"\">// representation, we'll allocate heap pointers with 2-byte alignment so that</span></span>\n<span class=\"line\"><span style=\"\">// they are guaranteed to have an unset least significant bit. Then in the repr</span></span>\n<span class=\"line\"><span style=\"\">// we store for pointers, we rotate a 1 into the most significant bit of the</span></span>\n<span class=\"line\"><span style=\"\">// most significant byte, which is never set for an ASCII byte.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Inline repr:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Heap allocated repr:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     1ppppppp pppppppp pppppppp pppppppp pppppppp pppppppp pppppppp pppppppp 0</span></span>\n<span class=\"line\"><span style=\"\">//     ^ most significant bit   least significant bit of orig ptr, rotated out ^</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Since the most significant bit doubles as a sign bit for the similarly sized</span></span>\n<span class=\"line\"><span style=\"\">// signed integer type, the CPU has an efficient instruction for inspecting it,</span></span>\n<span class=\"line\"><span style=\"\">// meaning we can differentiate between an inline repr and a heap allocated repr</span></span>\n<span class=\"line\"><span style=\"\">// in one instruction. Effectively an inline repr always looks like a positive</span></span>\n<span class=\"line\"><span style=\"\">// i64 while a heap allocated repr always looks like a negative i64.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For the inline repr, we store \\0 padding on the end of the stored characters,</span></span>\n<span class=\"line\"><span style=\"\">// and thus the string length is readily determined efficiently by a cttz (count</span></span>\n<span class=\"line\"><span style=\"\">// trailing zeros) or bsf (bit scan forward) instruction.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For the heap allocated repr, the length is encoded as a base-128 varint at</span></span>\n<span class=\"line\"><span style=\"\">// the head of the allocation.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Empty strings are stored as an all-1 bit pattern, corresponding to -1i64.</span></span>\n<span class=\"line\"><span style=\"\">// Consequently the all-0 bit pattern is never a legal representation in any</span></span>\n<span class=\"line\"><span style=\"\">// repr, leaving it available as a niche for downstream code. For example this</span></span>\n<span class=\"line\"><span style=\"\">// allows size_of::&#x3C;Version>() == size_of::&#x3C;Option&#x3C;Version>>().</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/third_party/rust/semver/v1/crate/src/identifier.rs#L1-L67",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": true
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/third_party/rust/semver/v1/crate/src/identifier.rs"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Verify that non-overlapping windows have a VISIBLE occlusion state.</span></span>\n<span class=\"line\"><span style=\"\">// _____  _____</span></span>\n<span class=\"line\"><span style=\"\">// |    | |    |</span></span>\n<span class=\"line\"><span style=\"\">// |____| |____|</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/aura/window_occlusion_tracker_unittest.cc#L152-L155",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/aura/window_occlusion_tracker_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Creates a display::DisplayPlacement value for |rectangle| relative to the</span></span>\n<span class=\"line\"><span style=\"\">// |reference| rectangle.</span></span>\n<span class=\"line\"><span style=\"\">// The layout consists of two values:</span></span>\n<span class=\"line\"><span style=\"\">//   - position: Whether the rectangle is positioned left, right, over or under</span></span>\n<span class=\"line\"><span style=\"\">//     the reference.</span></span>\n<span class=\"line\"><span style=\"\">//   - offset: The rectangle's offset from the reference origin along the axis</span></span>\n<span class=\"line\"><span style=\"\">//     opposite the position direction (if the rectangle is left or right along</span></span>\n<span class=\"line\"><span style=\"\">//     y-axis, otherwise along x-axis).</span></span>\n<span class=\"line\"><span style=\"\">// The rectangle's position is calculated by dividing the space in areas defined</span></span>\n<span class=\"line\"><span style=\"\">// by the |reference|'s diagonals and finding the area |rectangle|'s center</span></span>\n<span class=\"line\"><span style=\"\">// point belongs. If the |rectangle| in the calculated layout does not share a</span></span>\n<span class=\"line\"><span style=\"\">// part of the bounds with the |reference|, the |rectangle| position in set to</span></span>\n<span class=\"line\"><span style=\"\">// the more suitable neighboring position (e.g. if |rectangle| is completely</span></span>\n<span class=\"line\"><span style=\"\">// over the |reference| top bound, it will be set to TOP) and the layout is</span></span>\n<span class=\"line\"><span style=\"\">// recalculated with the new position. This is to handle the case where the</span></span>\n<span class=\"line\"><span style=\"\">// rectangle shares an edge with the reference, but it's center is not in the</span></span>\n<span class=\"line\"><span style=\"\">// same area as the reference's edge, e.g.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |                     |</span></span>\n<span class=\"line\"><span style=\"\">// | REFERENCE           |</span></span>\n<span class=\"line\"><span style=\"\">// |                     |</span></span>\n<span class=\"line\"><span style=\"\">// |                     |</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                 +-------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                 | RECTANGLE               x                       |</span></span>\n<span class=\"line\"><span style=\"\">//                 +-------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The rectangle shares an edge with the reference's bottom edge, but its</span></span>\n<span class=\"line\"><span style=\"\">// center point is in the left area.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/display/display_layout.cc#L655-L684",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/display/display_layout.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// DisplayPlacement specifies where the display (D) is placed relative to</span></span>\n<span class=\"line\"><span style=\"\">// parent (P) display. In the following example, D given by |display_id| is</span></span>\n<span class=\"line\"><span style=\"\">// placed at the left side of P given by |parent_display_id|, with a negative</span></span>\n<span class=\"line\"><span style=\"\">// offset and a top-left offset reference.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//        +      +--------+</span></span>\n<span class=\"line\"><span style=\"\">// offset |      |        |</span></span>\n<span class=\"line\"><span style=\"\">//        +      |   D    +--------+</span></span>\n<span class=\"line\"><span style=\"\">//               |        |        |</span></span>\n<span class=\"line\"><span style=\"\">//               +--------+   P    |</span></span>\n<span class=\"line\"><span style=\"\">//                        |        |</span></span>\n<span class=\"line\"><span style=\"\">//                        +--------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/display/display_layout.h#L30-L42",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/display/display_layout.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Returns a DisplayPlacement for |current| relative to |parent|.</span></span>\n<span class=\"line\"><span style=\"\">// Note that DisplayPlacement's are always in DIPs, so this also performs the</span></span>\n<span class=\"line\"><span style=\"\">// required scaling.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Examples (The offset is indicated by the arrow.):</span></span>\n<span class=\"line\"><span style=\"\">// Scaled and Unscaled Coordinates</span></span>\n<span class=\"line\"><span style=\"\">// +--------------+    +          Since both DisplayInfos are of the same scale</span></span>\n<span class=\"line\"><span style=\"\">// |              |    |          factor, relative positions remain the same.</span></span>\n<span class=\"line\"><span style=\"\">// |    Parent    |    V</span></span>\n<span class=\"line\"><span style=\"\">// |      1x      +----------+</span></span>\n<span class=\"line\"><span style=\"\">// |              |          |</span></span>\n<span class=\"line\"><span style=\"\">// +--------------+  Current |</span></span>\n<span class=\"line\"><span style=\"\">//                |    1x    |</span></span>\n<span class=\"line\"><span style=\"\">//                +----------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Unscaled Coordinates</span></span>\n<span class=\"line\"><span style=\"\">// +--------------+               The 2x DisplayInfo is offset to maintain a</span></span>\n<span class=\"line\"><span style=\"\">// |              |               similar neighboring relationship with the 1x</span></span>\n<span class=\"line\"><span style=\"\">// |    Parent    |               parent. Current's position is based off of the</span></span>\n<span class=\"line\"><span style=\"\">// |      1x      +----------+    percentage position along its parent. This</span></span>\n<span class=\"line\"><span style=\"\">// |              |          |    percentage position is preserved in the scaled</span></span>\n<span class=\"line\"><span style=\"\">// +--------------+  Current |    coordinates.</span></span>\n<span class=\"line\"><span style=\"\">//                |    2x    |</span></span>\n<span class=\"line\"><span style=\"\">//                +----------+</span></span>\n<span class=\"line\"><span style=\"\">// Scaled Coordinates</span></span>\n<span class=\"line\"><span style=\"\">// +--------------+  +</span></span>\n<span class=\"line\"><span style=\"\">// |              |  |</span></span>\n<span class=\"line\"><span style=\"\">// |    Parent    |  V</span></span>\n<span class=\"line\"><span style=\"\">// |      1x      +-----+</span></span>\n<span class=\"line\"><span style=\"\">// |              + C 2x|</span></span>\n<span class=\"line\"><span style=\"\">// +--------------+-----+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Unscaled Coordinates</span></span>\n<span class=\"line\"><span style=\"\">// +--------------+               The parent DisplayInfo has a 2x scale factor.</span></span>\n<span class=\"line\"><span style=\"\">// |              |               The offset is adjusted to maintain the</span></span>\n<span class=\"line\"><span style=\"\">// |              |               relative positioning of the 1x DisplayInfo in</span></span>\n<span class=\"line\"><span style=\"\">// |    Parent    +----------+    the scaled coordinate space. Current's</span></span>\n<span class=\"line\"><span style=\"\">// |      2x      |          |    position is based off of the percentage</span></span>\n<span class=\"line\"><span style=\"\">// |              |  Current |    position along its parent. This percentage</span></span>\n<span class=\"line\"><span style=\"\">// |              |    1x    |    position is preserved in the scaled</span></span>\n<span class=\"line\"><span style=\"\">// +--------------+          |    coordinates.</span></span>\n<span class=\"line\"><span style=\"\">//                |          |</span></span>\n<span class=\"line\"><span style=\"\">//                +----------+</span></span>\n<span class=\"line\"><span style=\"\">// Scaled Coordinates</span></span>\n<span class=\"line\"><span style=\"\">// +-------+    +</span></span>\n<span class=\"line\"><span style=\"\">// |       |    V</span></span>\n<span class=\"line\"><span style=\"\">// | Parent+----------+</span></span>\n<span class=\"line\"><span style=\"\">// |   2x  |          |</span></span>\n<span class=\"line\"><span style=\"\">// +-------+  Current |</span></span>\n<span class=\"line\"><span style=\"\">//         |    1x    |</span></span>\n<span class=\"line\"><span style=\"\">//         |          |</span></span>\n<span class=\"line\"><span style=\"\">//         |          |</span></span>\n<span class=\"line\"><span style=\"\">//         +----------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Unscaled Coordinates</span></span>\n<span class=\"line\"><span style=\"\">//         +----------+           In this case, parent lies between the top and</span></span>\n<span class=\"line\"><span style=\"\">//         |          |           bottom of parent. The roles are reversed when</span></span>\n<span class=\"line\"><span style=\"\">// +-------+          |           this occurs, and current is placed to maintain</span></span>\n<span class=\"line\"><span style=\"\">// |       |  Current |           parent's relative position along current.</span></span>\n<span class=\"line\"><span style=\"\">// | Parent|    1x    |</span></span>\n<span class=\"line\"><span style=\"\">// |   2x  |          |</span></span>\n<span class=\"line\"><span style=\"\">// +-------+          |</span></span>\n<span class=\"line\"><span style=\"\">//         +----------+</span></span>\n<span class=\"line\"><span style=\"\">// Scaled Coordinates</span></span>\n<span class=\"line\"><span style=\"\">//  ^      +----------+</span></span>\n<span class=\"line\"><span style=\"\">//  |      |          |</span></span>\n<span class=\"line\"><span style=\"\">//  + +----+          |</span></span>\n<span class=\"line\"><span style=\"\">//    |Prnt|  Current |</span></span>\n<span class=\"line\"><span style=\"\">//    | 2x |    1x    |</span></span>\n<span class=\"line\"><span style=\"\">//    +----+          |</span></span>\n<span class=\"line\"><span style=\"\">//         |          |</span></span>\n<span class=\"line\"><span style=\"\">//         +----------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Scaled and Unscaled Coordinates</span></span>\n<span class=\"line\"><span style=\"\">// +--------+                     If the two DisplayInfos are bottom aligned or</span></span>\n<span class=\"line\"><span style=\"\">// |        |                     right aligned, the DisplayPlacement will</span></span>\n<span class=\"line\"><span style=\"\">// |        +--------+            have an offset of 0 relative to the</span></span>\n<span class=\"line\"><span style=\"\">// |        |        |            bottom-right of the DisplayInfo.</span></span>\n<span class=\"line\"><span style=\"\">// |        |        |</span></span>\n<span class=\"line\"><span style=\"\">// +--------+--------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/display/win/scaling_util.h#L25-L105",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/display/win/scaling_util.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Five 1x displays laid out as follows (not to scale):</span></span>\n<span class=\"line\"><span style=\"\">// +---------+----------------+</span></span>\n<span class=\"line\"><span style=\"\">// |         |                |</span></span>\n<span class=\"line\"><span style=\"\">// |    0    |                |</span></span>\n<span class=\"line\"><span style=\"\">// |         |       1        |</span></span>\n<span class=\"line\"><span style=\"\">// +---------+                |</span></span>\n<span class=\"line\"><span style=\"\">// |    2    |                |</span></span>\n<span class=\"line\"><span style=\"\">// |         +----------------+-----+</span></span>\n<span class=\"line\"><span style=\"\">// +---------+                |     |</span></span>\n<span class=\"line\"><span style=\"\">//                            |  3  |</span></span>\n<span class=\"line\"><span style=\"\">//                            |     |</span></span>\n<span class=\"line\"><span style=\"\">//                            +--+--+</span></span>\n<span class=\"line\"><span style=\"\">//                               |4 |</span></span>\n<span class=\"line\"><span style=\"\">//                               +--+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/display/win/screen_win_unittest.cc#L1440-L1453",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/display/win/screen_win_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Text baseline offset types.</span></span>\n<span class=\"line\"><span style=\"\">// Figure of font metrics:</span></span>\n<span class=\"line\"><span style=\"\">//   +--------+--------+------------------------+-------------+</span></span>\n<span class=\"line\"><span style=\"\">//   |        |        | internal leading       | SUPERSCRIPT |</span></span>\n<span class=\"line\"><span style=\"\">//   |        |        +------------+-----------|             |</span></span>\n<span class=\"line\"><span style=\"\">//   |        | ascent |            | SUPERIOR  |-------------+</span></span>\n<span class=\"line\"><span style=\"\">//   | height |        | cap height |-----------|</span></span>\n<span class=\"line\"><span style=\"\">//   |        |        |            | INFERIOR  |-------------+</span></span>\n<span class=\"line\"><span style=\"\">//   |        |--------+------------+-----------|             |</span></span>\n<span class=\"line\"><span style=\"\">//   |        | descent                         | SUBSCRIPT   |</span></span>\n<span class=\"line\"><span style=\"\">//   +--------+---------------------------------+-------------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/gfx/text_constants.h#L97-L107",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/gfx/text_constants.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Returns insets that can be used to draw a highlight or border that appears to</span></span>\n<span class=\"line\"><span style=\"\">// be distance |desired_visual_padding| from the body of a string of text</span></span>\n<span class=\"line\"><span style=\"\">// rendered using |font_list|. The insets are adjusted based on the box used to</span></span>\n<span class=\"line\"><span style=\"\">// render capital letters (or the bodies of most letters in non-capital fonts</span></span>\n<span class=\"line\"><span style=\"\">// like Hebrew and Devanagari), in order to give the best visual appearance.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// That is, any portion of |desired_visual_padding| overlapping the font's</span></span>\n<span class=\"line\"><span style=\"\">// leading space or descender area are truncated, to a minimum of zero.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In this example, the text is rendered in a highlight that stretches above and</span></span>\n<span class=\"line\"><span style=\"\">// below the height of the H as well as to the left and right of the text</span></span>\n<span class=\"line\"><span style=\"\">// (|desired_visual_padding| = {2, 2, 2, 2}). Note that the descender of the 'y'</span></span>\n<span class=\"line\"><span style=\"\">// overlaps with the padding, as it is outside the capital letter box.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The resulting padding is {1, 2, 1, 2}.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  . . . . . . . . . .                               | actual top</span></span>\n<span class=\"line\"><span style=\"\">//  .                 .  |              | leading space</span></span>\n<span class=\"line\"><span style=\"\">//  .  |  |  _        .  | font    | capital</span></span>\n<span class=\"line\"><span style=\"\">//  .  |--| /_\\ \\  /  .  | height  | height</span></span>\n<span class=\"line\"><span style=\"\">//  .  |  | \\_   \\/   .  |         |</span></span>\n<span class=\"line\"><span style=\"\">//  .            /    .  |              | descender</span></span>\n<span class=\"line\"><span style=\"\">//  . . . . . . . . . .                               | actual bottom</span></span>\n<span class=\"line\"><span style=\"\">//  ___             ___</span></span>\n<span class=\"line\"><span style=\"\">//  actual        actual</span></span>\n<span class=\"line\"><span style=\"\">//  left           right</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">AdjustVisualBorderForFont(const FontList&#x26; font_list,</span></span>\n<span class=\"line\"><span style=\"\">                          const Insets&#x26; desired_visual_padding);</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/gfx/text_utils.h#L74-L100",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/gfx/text_utils.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This is the underlying data structure of Transform. Don't use this type</span></span>\n<span class=\"line\"><span style=\"\">// directly.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Throughout this class, we will be speaking in column vector convention.</span></span>\n<span class=\"line\"><span style=\"\">// i.e. Applying a transform T to vector V is T * V.</span></span>\n<span class=\"line\"><span style=\"\">// The components of the matrix and the vector look like:</span></span>\n<span class=\"line\"><span style=\"\">//    \\  col</span></span>\n<span class=\"line\"><span style=\"\">// r   \\     0        1        2        3</span></span>\n<span class=\"line\"><span style=\"\">// o  0 | scale_x  skew_xy  skew_xz  trans_x |   | x |</span></span>\n<span class=\"line\"><span style=\"\">// w  1 | skew_yx  scale_y  skew_yz  trans_y | * | y |</span></span>\n<span class=\"line\"><span style=\"\">//    2 | skew_zx  skew_zy  scale_z  trans_z |   | z |</span></span>\n<span class=\"line\"><span style=\"\">//    3 | persp_x  persp_y  persp_z  persp_w |   | w |</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that the names are just for remembering and don't have the exact</span></span>\n<span class=\"line\"><span style=\"\">// meanings when other components exist.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The components correspond to the DOMMatrix mij (i,j = 1..4) components:</span></span>\n<span class=\"line\"><span style=\"\">//   i = col + 1</span></span>\n<span class=\"line\"><span style=\"\">//   j = row + 1</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/gfx/geometry/matrix44.h#L17-L35",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/gfx/geometry/matrix44.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//    &#x3C;-a-></span></span>\n<span class=\"line\"><span style=\"\">// [  *****             ]</span></span>\n<span class=\"line\"><span style=\"\">//  ____ |              |</span></span>\n<span class=\"line\"><span style=\"\">//  &#x3C;-a-> &#x3C;------b-----></span></span>\n<span class=\"line\"><span style=\"\">// a: object_width</span></span>\n<span class=\"line\"><span style=\"\">// b: frame_width</span></span>\n<span class=\"line\"><span style=\"\">// *: animating object</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// - the animation goes from \"[\" to \"]\" repeatedly.</span></span>\n<span class=\"line\"><span style=\"\">// - the animation offset is at first \"|\"</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/native_theme/native_theme_win.cc#L90-L100",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/native_theme/native_theme_win.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The HDC will handle modesetting and scanout operations for hardware devices.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In the DRM world there are 3 components that need to be paired up to be able</span></span>\n<span class=\"line\"><span style=\"\">// to display an image to the monitor: CRTC (cathode ray tube controller),</span></span>\n<span class=\"line\"><span style=\"\">// encoder and connector. The CRTC determines which framebuffer to read, when</span></span>\n<span class=\"line\"><span style=\"\">// to scanout and where to scanout. Encoders converts the stream from the CRTC</span></span>\n<span class=\"line\"><span style=\"\">// to the appropriate format for the connector. The connector is the physical</span></span>\n<span class=\"line\"><span style=\"\">// connection that monitors connect to.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// There is no 1:1:1 pairing for these components. It is possible for an encoder</span></span>\n<span class=\"line\"><span style=\"\">// to be compatible to multiple CRTCs and each connector can be used with</span></span>\n<span class=\"line\"><span style=\"\">// multiple encoders. In addition, it is possible to use one CRTC with multiple</span></span>\n<span class=\"line\"><span style=\"\">// connectors such that we can display the same image on multiple monitors.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For example, the following configuration shows 2 different screens being</span></span>\n<span class=\"line\"><span style=\"\">// initialized separately.</span></span>\n<span class=\"line\"><span style=\"\">// -------------      -------------</span></span>\n<span class=\"line\"><span style=\"\">// | Connector |      | Connector |</span></span>\n<span class=\"line\"><span style=\"\">// |   HDMI    |      |    VGA    |</span></span>\n<span class=\"line\"><span style=\"\">// -------------      -------------</span></span>\n<span class=\"line\"><span style=\"\">//       ^                  ^</span></span>\n<span class=\"line\"><span style=\"\">//       |                  |</span></span>\n<span class=\"line\"><span style=\"\">// -------------      -------------</span></span>\n<span class=\"line\"><span style=\"\">// |  Encoder1  |     |  Encoder2 |</span></span>\n<span class=\"line\"><span style=\"\">// -------------      -------------</span></span>\n<span class=\"line\"><span style=\"\">//       ^                  ^</span></span>\n<span class=\"line\"><span style=\"\">//       |                  |</span></span>\n<span class=\"line\"><span style=\"\">// -------------      -------------</span></span>\n<span class=\"line\"><span style=\"\">// |   CRTC1   |      |   CRTC2   |</span></span>\n<span class=\"line\"><span style=\"\">// -------------      -------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In the following configuration 2 different screens are associated with the</span></span>\n<span class=\"line\"><span style=\"\">// same CRTC, so on scanout the same framebuffer will be displayed on both</span></span>\n<span class=\"line\"><span style=\"\">// monitors.</span></span>\n<span class=\"line\"><span style=\"\">// -------------      -------------</span></span>\n<span class=\"line\"><span style=\"\">// | Connector |      | Connector |</span></span>\n<span class=\"line\"><span style=\"\">// |   HDMI    |      |    VGA    |</span></span>\n<span class=\"line\"><span style=\"\">// -------------      -------------</span></span>\n<span class=\"line\"><span style=\"\">//       ^                  ^</span></span>\n<span class=\"line\"><span style=\"\">//       |                  |</span></span>\n<span class=\"line\"><span style=\"\">// -------------      -------------</span></span>\n<span class=\"line\"><span style=\"\">// |  Encoder1  |     |  Encoder2 |</span></span>\n<span class=\"line\"><span style=\"\">// -------------      -------------</span></span>\n<span class=\"line\"><span style=\"\">//       ^                  ^</span></span>\n<span class=\"line\"><span style=\"\">//       |                  |</span></span>\n<span class=\"line\"><span style=\"\">//      ----------------------</span></span>\n<span class=\"line\"><span style=\"\">//      |        CRTC1       |</span></span>\n<span class=\"line\"><span style=\"\">//      ----------------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that it is possible to have more connectors than CRTCs which means that</span></span>\n<span class=\"line\"><span style=\"\">// only a subset of connectors can be active independently, showing different</span></span>\n<span class=\"line\"><span style=\"\">// framebuffers. Though, in this case, it would be possible to have all</span></span>\n<span class=\"line\"><span style=\"\">// connectors active if some use the same CRTC to mirror the display.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/ozone/platform/drm/gpu/hardware_display_controller.h#L40-L92",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/ozone/platform/drm/gpu/hardware_display_controller.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//  ___________</span></span>\n<span class=\"line\"><span style=\"\">// |     1     |</span></span>\n<span class=\"line\"><span style=\"\">// |___________|</span></span>\n<span class=\"line\"><span style=\"\">// | 3 | 4 | 5 | &#x3C;-- 2 (encapsulates 3, 4 and 5)</span></span>\n<span class=\"line\"><span style=\"\">// |___|___|___|</span></span>\n<span class=\"line\"><span style=\"\">// |   7   | 8 | &#x3C;-- 6 (encapsulates 7 and 8)</span></span>\n<span class=\"line\"><span style=\"\">// |_______|___|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// |r_0| encapsulates 1, 2 and 6.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/views/paint_info_unittest.cc#L34-L42",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/views/paint_info_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Test that wm::RecreateLayers() recreates the layers for all child windows and</span></span>\n<span class=\"line\"><span style=\"\">// all child views and that the z-order of the recreated layers matches that of</span></span>\n<span class=\"line\"><span style=\"\">// the original layers.</span></span>\n<span class=\"line\"><span style=\"\">// Test hierarchy:</span></span>\n<span class=\"line\"><span style=\"\">// w1</span></span>\n<span class=\"line\"><span style=\"\">// +-- v1</span></span>\n<span class=\"line\"><span style=\"\">// +-- v2 (no layer)</span></span>\n<span class=\"line\"><span style=\"\">//     +-- v3 (no layer)</span></span>\n<span class=\"line\"><span style=\"\">//     +-- v4</span></span>\n<span class=\"line\"><span style=\"\">// +-- w2</span></span>\n<span class=\"line\"><span style=\"\">//     +-- v5</span></span>\n<span class=\"line\"><span style=\"\">//         +-- v6</span></span>\n<span class=\"line\"><span style=\"\">// +-- v7</span></span>\n<span class=\"line\"><span style=\"\">//     +-- v8</span></span>\n<span class=\"line\"><span style=\"\">//     +-- v9</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/views/view_unittest_aura.cc#L60-L74",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/views/view_unittest_aura.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Test if SaveLayer and Restore work together.</span></span>\n<span class=\"line\"><span style=\"\">// 1. Move cursor to (25, 25) draw a black rect of size 25x25.</span></span>\n<span class=\"line\"><span style=\"\">// 2. save layer, move the cursor by (100, 100) or to point (125, 125), draw a</span></span>\n<span class=\"line\"><span style=\"\">// red rect of size 25x25.</span></span>\n<span class=\"line\"><span style=\"\">// 3. Restore layer, so the cursor moved back to (25, 25), move cursor by (100,</span></span>\n<span class=\"line\"><span style=\"\">// 0) or at the point (125, 25), draw a yellow rect of size 25x25.</span></span>\n<span class=\"line\"><span style=\"\">//  (25, 25)</span></span>\n<span class=\"line\"><span style=\"\">//  +---+</span></span>\n<span class=\"line\"><span style=\"\">//  |   |</span></span>\n<span class=\"line\"><span style=\"\">//  +---+</span></span>\n<span class=\"line\"><span style=\"\">//  (25, 125) (125, 125)</span></span>\n<span class=\"line\"><span style=\"\">//  +---+     +---+</span></span>\n<span class=\"line\"><span style=\"\">//  |   |     |   |</span></span>\n<span class=\"line\"><span style=\"\">//  +---+     +---+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/cc/paint/discardable_image_map_unittest.cc#L400-L413",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/cc/paint/discardable_image_map_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Opacity        -->|</span></span>\n<span class=\"line\"><span style=\"\">// RoundedCorners ----->|</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ui/views/animation/animation_builder_unittest.cc#L616-L617",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ui/views/animation/animation_builder_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This class provides states to manage life cycle of a task and given below is</span></span>\n<span class=\"line\"><span style=\"\">// how it is used by TaskGraphWorkQueue to process life cycle of a task.</span></span>\n<span class=\"line\"><span style=\"\">// Task is in NEW state when it is created. When task is added to</span></span>\n<span class=\"line\"><span style=\"\">// |ready_to_run_tasks| then its state is changed to SCHEDULED. Task can be</span></span>\n<span class=\"line\"><span style=\"\">// canceled from NEW state (not yet scheduled to run) or from SCHEDULED state,</span></span>\n<span class=\"line\"><span style=\"\">// when new ScheduleTasks() is triggered and its state is changed to CANCELED.</span></span>\n<span class=\"line\"><span style=\"\">// When task is about to run it is added |running_tasks| and its state is</span></span>\n<span class=\"line\"><span style=\"\">// changed to RUNNING. Once task finishes running, its state is changed to</span></span>\n<span class=\"line\"><span style=\"\">// FINISHED. Both CANCELED and FINISHED tasks are added to |completed_tasks|.</span></span>\n<span class=\"line\"><span style=\"\">//                ╔═════╗</span></span>\n<span class=\"line\"><span style=\"\">//         +------║ NEW ║------+</span></span>\n<span class=\"line\"><span style=\"\">//         |      ╚═════╝      |</span></span>\n<span class=\"line\"><span style=\"\">//         v                   v</span></span>\n<span class=\"line\"><span style=\"\">//   ┌───────────┐        ╔══════════╗</span></span>\n<span class=\"line\"><span style=\"\">//   │ SCHEDULED │------> ║ CANCELED ║</span></span>\n<span class=\"line\"><span style=\"\">//   └───────────┘        ╚══════════╝</span></span>\n<span class=\"line\"><span style=\"\">//         |</span></span>\n<span class=\"line\"><span style=\"\">//         v</span></span>\n<span class=\"line\"><span style=\"\">//    ┌─────────┐         ╔══════════╗</span></span>\n<span class=\"line\"><span style=\"\">//    │ RUNNING │-------> ║ FINISHED ║</span></span>\n<span class=\"line\"><span style=\"\">//    └─────────┘         ╚══════════╝</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/cc/raster/task.h#L20-L40",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/cc/raster/task.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Tests the following tricky case:</span></span>\n<span class=\"line\"><span style=\"\">// - Scrolling Layer A with scrolling children:</span></span>\n<span class=\"line\"><span style=\"\">//    - Ordinary Layer B with NonFastScrollableRegion</span></span>\n<span class=\"line\"><span style=\"\">//    - Ordinary Layer C</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                   +---------+</span></span>\n<span class=\"line\"><span style=\"\">//         +---------|         |+</span></span>\n<span class=\"line\"><span style=\"\">//         | Layer A |         ||</span></span>\n<span class=\"line\"><span style=\"\">//         |   +-----+-----+   ||</span></span>\n<span class=\"line\"><span style=\"\">//         |   |  Layer C  |   ||</span></span>\n<span class=\"line\"><span style=\"\">//         |   +-----+-----+   ||</span></span>\n<span class=\"line\"><span style=\"\">//         |         | Layer B ||</span></span>\n<span class=\"line\"><span style=\"\">//         +---------|         |+</span></span>\n<span class=\"line\"><span style=\"\">//                   +---------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Both B and C scroll with A but overlap each other and C appears above B. If</span></span>\n<span class=\"line\"><span style=\"\">// we try scrolling over C, we need to check if we intersect the NFSR on B</span></span>\n<span class=\"line\"><span style=\"\">// because C may not be fully opaque to hit testing (e.g. the layer may be for</span></span>\n<span class=\"line\"><span style=\"\">// |pointer-events:none| or be a squashing layer with \"holes\").</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/cc/trees/layer_tree_host_impl_unittest.cc#L2044-L2063",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/cc/trees/layer_tree_host_impl_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * Helper class for creating a view with three labels and an icon.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------+------------+</span></span>\n<span class=\"line\"><span style=\"\"> * | TOP LABEL    |            |</span></span>\n<span class=\"line\"><span style=\"\"> * | MID LABEL    |       ICON |</span></span>\n<span class=\"line\"><span style=\"\"> * | BOTTOM LABEL |            |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------+------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Used for showing the uneditable parts of server cards. For example:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------+------------+</span></span>\n<span class=\"line\"><span style=\"\"> * | Visa***1234  |            |</span></span>\n<span class=\"line\"><span style=\"\"> * | First Last   |       VISA |</span></span>\n<span class=\"line\"><span style=\"\"> * | Exp: 12/2020 |            |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------+------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/android/java/src/org/chromium/chrome/browser/autofill/prefeditor/EditorLabelField.java#L19-L35",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/android/java/src/org/chromium/chrome/browser/autofill/prefeditor/EditorLabelField.java"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Given a vector of rects that all overlap, already sorted from top to bottom</span></span>\n<span class=\"line\"><span style=\"\">// and left to right, split them into three shapes covering the top, middle,</span></span>\n<span class=\"line\"><span style=\"\">// and bottom of a \"paragraph shape\".</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Input:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                       +---+---+</span></span>\n<span class=\"line\"><span style=\"\">//                       | 1 | 2 |</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------+---+---+</span></span>\n<span class=\"line\"><span style=\"\">// |             3               |</span></span>\n<span class=\"line\"><span style=\"\">// +--------+---------------+----+</span></span>\n<span class=\"line\"><span style=\"\">// |    4   |         5     |</span></span>\n<span class=\"line\"><span style=\"\">// +--------+---------------+--+</span></span>\n<span class=\"line\"><span style=\"\">// |             6             |</span></span>\n<span class=\"line\"><span style=\"\">// +---------+-----------------+</span></span>\n<span class=\"line\"><span style=\"\">// |    7    |</span></span>\n<span class=\"line\"><span style=\"\">// +---------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Output:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                       +-------+</span></span>\n<span class=\"line\"><span style=\"\">//                       |  Top  |</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------+-------+</span></span>\n<span class=\"line\"><span style=\"\">// |                             |</span></span>\n<span class=\"line\"><span style=\"\">// |                             |</span></span>\n<span class=\"line\"><span style=\"\">// |           Middle            |</span></span>\n<span class=\"line\"><span style=\"\">// |                             |</span></span>\n<span class=\"line\"><span style=\"\">// |                             |</span></span>\n<span class=\"line\"><span style=\"\">// +---------+-------------------+</span></span>\n<span class=\"line\"><span style=\"\">// | Bottom  |</span></span>\n<span class=\"line\"><span style=\"\">// +---------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// When there's no clear \"top\" or \"bottom\" segment, split the overall rect</span></span>\n<span class=\"line\"><span style=\"\">// evenly so that some of the area still fits into the \"top\" and \"bottom\"</span></span>\n<span class=\"line\"><span style=\"\">// segments.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/accessibility/ui/accessibility_focus_ring_group.cc#L229-L263",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/accessibility/ui/accessibility_focus_ring_group.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// CertificateManagerModel is created on the UI thread. It needs a</span></span>\n<span class=\"line\"><span style=\"\">// NSSCertDatabase handle (and on ChromeOS it needs to get the TPM status) which</span></span>\n<span class=\"line\"><span style=\"\">// needs to be done on the IO thread.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The initialization flow is roughly:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//               UI thread                              IO Thread</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   CertificateManagerModel::Create</span></span>\n<span class=\"line\"><span style=\"\">//                  \\--------------------------------------v</span></span>\n<span class=\"line\"><span style=\"\">//                                CertificateManagerModel::GetCertDBOnIOThread</span></span>\n<span class=\"line\"><span style=\"\">//                                                         |</span></span>\n<span class=\"line\"><span style=\"\">//                                               NssCertDatabaseGetter</span></span>\n<span class=\"line\"><span style=\"\">//                                                         |</span></span>\n<span class=\"line\"><span style=\"\">//                               CertificateManagerModel::DidGetCertDBOnIOThread</span></span>\n<span class=\"line\"><span style=\"\">//                  v--------------------------------------/</span></span>\n<span class=\"line\"><span style=\"\">// CertificateManagerModel::DidGetCertDBOnUIThread</span></span>\n<span class=\"line\"><span style=\"\">//                  |</span></span>\n<span class=\"line\"><span style=\"\">//     new CertificateManagerModel</span></span>\n<span class=\"line\"><span style=\"\">//                  |</span></span>\n<span class=\"line\"><span style=\"\">//               callback</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/certificate_manager_model.cc#L54-L74",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/certificate_manager_model.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The following series of functions related to ListCerts make use of the</span></span>\n<span class=\"line\"><span style=\"\">// NSSCertDatabase to fulfill its goal of listing certificates. The cert</span></span>\n<span class=\"line\"><span style=\"\">// database is accessed through a raw pointer with limited lifetime guarantees</span></span>\n<span class=\"line\"><span style=\"\">// and is not thread safe. Namely, the cert database is guaranteed valid for the</span></span>\n<span class=\"line\"><span style=\"\">// single IO thread task where it was received.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Furthermore, creating an NssCertDatabaseGetter requires a BrowserContext,</span></span>\n<span class=\"line\"><span style=\"\">// which can only be accessed on the UI thread.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// ListCerts and related functions are implemented to make sure the above</span></span>\n<span class=\"line\"><span style=\"\">// requirements are respected. Here's a diagram of the interaction between UI</span></span>\n<span class=\"line\"><span style=\"\">// and IO threads.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                    UI Thread                     IO Thread</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                    ListCerts</span></span>\n<span class=\"line\"><span style=\"\">//                        |</span></span>\n<span class=\"line\"><span style=\"\">//       NssService::CreateNSSCertDatabaseGetterForIOThread</span></span>\n<span class=\"line\"><span style=\"\">//                        |</span></span>\n<span class=\"line\"><span style=\"\">//                        \\----------------------------v</span></span>\n<span class=\"line\"><span style=\"\">//                                          ListCertsWithDbGetterOnIO</span></span>\n<span class=\"line\"><span style=\"\">//                                                     |</span></span>\n<span class=\"line\"><span style=\"\">//                                           database_getter.Run()</span></span>\n<span class=\"line\"><span style=\"\">//                                                     |</span></span>\n<span class=\"line\"><span style=\"\">//                                               ListCertsOnIO</span></span>\n<span class=\"line\"><span style=\"\">//                                                     |</span></span>\n<span class=\"line\"><span style=\"\">//                                              ListCertsInSlot</span></span>\n<span class=\"line\"><span style=\"\">//                                                     |</span></span>\n<span class=\"line\"><span style=\"\">//                                   PostListedCertsBackToOriginalTaskRunner</span></span>\n<span class=\"line\"><span style=\"\">//                                                     |</span></span>\n<span class=\"line\"><span style=\"\">//                        v----------------------------/</span></span>\n<span class=\"line\"><span style=\"\">//  Process certs / Repeat ListCerts for system slot</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// ARC requires certs from both the 'user' and 'system' chaps slots to be</span></span>\n<span class=\"line\"><span style=\"\">// processed. Because ListCertsInSlot is asynchronous, it's not possible to</span></span>\n<span class=\"line\"><span style=\"\">// guarantee that both ListCertsInSlot calls happen in the same task execution,</span></span>\n<span class=\"line\"><span style=\"\">// so this entire process is performed twice: first for the user slot, then for</span></span>\n<span class=\"line\"><span style=\"\">// the system slot. The ordering of the calls is not important, other than the</span></span>\n<span class=\"line\"><span style=\"\">// implementation lists the 'user' slot first, and uses the 'system' slot to</span></span>\n<span class=\"line\"><span style=\"\">// signal the process is complete.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The current user may not have access to the system slot, but that is only</span></span>\n<span class=\"line\"><span style=\"\">// discoverable on the IO thread. In that case, the sequence for the system slot</span></span>\n<span class=\"line\"><span style=\"\">// becomes:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                    UI Thread                     IO Thread</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                    ListCerts</span></span>\n<span class=\"line\"><span style=\"\">//                        |</span></span>\n<span class=\"line\"><span style=\"\">//       NssService::CreateNSSCertDatabaseGetterForIOThread</span></span>\n<span class=\"line\"><span style=\"\">//                        |</span></span>\n<span class=\"line\"><span style=\"\">//                        \\----------------------------v</span></span>\n<span class=\"line\"><span style=\"\">//                                          ListCertsWithDbGetterOnIO</span></span>\n<span class=\"line\"><span style=\"\">//                                                     |</span></span>\n<span class=\"line\"><span style=\"\">//                                           database_getter.Run()</span></span>\n<span class=\"line\"><span style=\"\">//                                                     |</span></span>\n<span class=\"line\"><span style=\"\">//                                                ListCertsOnIO</span></span>\n<span class=\"line\"><span style=\"\">//                                                     |</span></span>\n<span class=\"line\"><span style=\"\">//                                   (Determine system slot isn't allowed)</span></span>\n<span class=\"line\"><span style=\"\">//                                                     |</span></span>\n<span class=\"line\"><span style=\"\">//                                   PostListedCertsBackToOriginalTaskRunner</span></span>\n<span class=\"line\"><span style=\"\">//                                                     |</span></span>\n<span class=\"line\"><span style=\"\">//                        v----------------------------/</span></span>\n<span class=\"line\"><span style=\"\">//             Process list of certs...</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/arc/enterprise/cert_store/cert_store_service.cc#L86-L149",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/arc/enterprise/cert_store/cert_store_service.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The following series of functions related to IsSystemSlotAvailable use the</span></span>\n<span class=\"line\"><span style=\"\">// NSSCertDatabase. The cert database is accessed through a raw pointer with</span></span>\n<span class=\"line\"><span style=\"\">// limited lifetime guarantees and is not thread safe. Namely, the cert database</span></span>\n<span class=\"line\"><span style=\"\">// is guaranteed valid for the single IO thread task where it was received.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Furthermore, creating an NssCertDatabaseGetter requires a BrowserContext,</span></span>\n<span class=\"line\"><span style=\"\">// which can only be accessed on the UI thread.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// ListCerts and related functions are implemented to make sure the above</span></span>\n<span class=\"line\"><span style=\"\">// requirements are respected. Here's a diagram of the interaction between UI</span></span>\n<span class=\"line\"><span style=\"\">// and IO threads.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//             UI Thread                        IO Thread</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//       IsSystemSlotAvailable</span></span>\n<span class=\"line\"><span style=\"\">//                 |</span></span>\n<span class=\"line\"><span style=\"\">//       run_loop.QuitClosure</span></span>\n<span class=\"line\"><span style=\"\">//                 |</span></span>\n<span class=\"line\"><span style=\"\">//   NssService::CreateNSSCertDatabaseGetterForIOThread</span></span>\n<span class=\"line\"><span style=\"\">//                 |</span></span>\n<span class=\"line\"><span style=\"\">//                 \\--------------------------------v</span></span>\n<span class=\"line\"><span style=\"\">//                                 IsSystemSlotAvailableWithDbGetterOnIO</span></span>\n<span class=\"line\"><span style=\"\">//                                                  |</span></span>\n<span class=\"line\"><span style=\"\">//                                         database_getter.Run</span></span>\n<span class=\"line\"><span style=\"\">//                                                  |</span></span>\n<span class=\"line\"><span style=\"\">//                                       IsSystemSlotAvailableOnIO</span></span>\n<span class=\"line\"><span style=\"\">//                                                  |</span></span>\n<span class=\"line\"><span style=\"\">//                                            GetSystemSlot</span></span>\n<span class=\"line\"><span style=\"\">//                                                  |</span></span>\n<span class=\"line\"><span style=\"\">//                                           quit_closure.Run</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/arc/enterprise/cert_store/cert_store_service_browsertest.cc#L190-L219",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/arc/enterprise/cert_store/cert_store_service_browsertest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// A view that shows display options for input overlay, this is the entry</span></span>\n<span class=\"line\"><span style=\"\">// point for customizing key bindings and turning the feature on/off.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The class reports back to DisplayOverlayController, who owns this.</span></span>\n<span class=\"line\"><span style=\"\">//   +---------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//   | Game Controls |Alpha| [ o]  [x] |</span></span>\n<span class=\"line\"><span style=\"\">//   |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//   | Key mapping             [Edit]  |</span></span>\n<span class=\"line\"><span style=\"\">//   |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//   | Show key mapping          [ o]  |</span></span>\n<span class=\"line\"><span style=\"\">//   |                                 |</span></span>\n<span class=\"line\"><span style=\"\">//   | Send feedback                   |</span></span>\n<span class=\"line\"><span style=\"\">//   +---------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/arc/input_overlay/ui/input_menu_view.h#L22-L34",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/arc/input_overlay/ui/input_menu_view.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Draw the cross shape path with round corner. It starts from bottom to up on</span></span>\n<span class=\"line\"><span style=\"\">// line #0 and draws clock-wisely.</span></span>\n<span class=\"line\"><span style=\"\">// |overall_length| is the total length of one side excluding the stroke</span></span>\n<span class=\"line\"><span style=\"\">// thickness. |mid_length| is the length of the middle part which is close to</span></span>\n<span class=\"line\"><span style=\"\">// the one third of |overall_length|.</span></span>\n<span class=\"line\"><span style=\"\">//      __</span></span>\n<span class=\"line\"><span style=\"\">//   _0^  |__</span></span>\n<span class=\"line\"><span style=\"\">//  |__    __|</span></span>\n<span class=\"line\"><span style=\"\">//     |__|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/arc/input_overlay/ui/touch_point.cc#L54-L63",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/arc/input_overlay/ui/touch_point.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// An interface that defines an out-of-box-experience (OOBE) or login screen</span></span>\n<span class=\"line\"><span style=\"\">// host. It contains code specific to the login UI implementation.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The inheritance graph is as folllows:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                               LoginDisplayHost</span></span>\n<span class=\"line\"><span style=\"\">//                                   /       |</span></span>\n<span class=\"line\"><span style=\"\">//                LoginDisplayHostCommon   MockLoginDisplayHost</span></span>\n<span class=\"line\"><span style=\"\">//                      /      |</span></span>\n<span class=\"line\"><span style=\"\">//   LoginDisplayHostMojo    LoginDisplayHostWebUI</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// - LoginDisplayHost defines the generic interface.</span></span>\n<span class=\"line\"><span style=\"\">// - LoginDisplayHostCommon is UI-agnostic code shared between the views and</span></span>\n<span class=\"line\"><span style=\"\">//   webui hosts.</span></span>\n<span class=\"line\"><span style=\"\">// - MockLoginDisplayHost is for tests.</span></span>\n<span class=\"line\"><span style=\"\">// - LoginDisplayHostMojo is for the login screen which is implemented in Ash.</span></span>\n<span class=\"line\"><span style=\"\">//   TODO(estade): rename LoginDisplayHostMojo since it no longer uses Mojo.</span></span>\n<span class=\"line\"><span style=\"\">// - LoginDisplayHostWebUI is for OOBE, which is written in HTML/JS/CSS.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/login/ui/login_display_host.h#L46-L64",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/login/ui/login_display_host.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This class manages the behavior of the Oobe UI dialog.</span></span>\n<span class=\"line\"><span style=\"\">// And its lifecycle is managed by the widget created in Show().</span></span>\n<span class=\"line\"><span style=\"\">//   WebDialogView&#x3C;----delegate_----OobeUIDialogDelegate</span></span>\n<span class=\"line\"><span style=\"\">//         |</span></span>\n<span class=\"line\"><span style=\"\">//         |</span></span>\n<span class=\"line\"><span style=\"\">//         V</span></span>\n<span class=\"line\"><span style=\"\">//   clientView---->Widget's view hierarchy</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ash/login/ui/oobe_ui_dialog_delegate.h#L46-L52",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ash/login/ui/oobe_ui_dialog_delegate.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This is used to fetch discounts for active Carts in cart_db. It starts</span></span>\n<span class=\"line\"><span style=\"\">// to work after calling Start() and continue to work util Chrome is finished.</span></span>\n<span class=\"line\"><span style=\"\">// The flow looks as follow:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   UI Thread              | backend_task_runner_</span></span>\n<span class=\"line\"><span style=\"\">//  ===========================================</span></span>\n<span class=\"line\"><span style=\"\">// 1) Start                 |</span></span>\n<span class=\"line\"><span style=\"\">// 2) PrepareToFetch (delay)|</span></span>\n<span class=\"line\"><span style=\"\">// 3) ReadyToFetch          |</span></span>\n<span class=\"line\"><span style=\"\">// 4)                       | FetchInBackground</span></span>\n<span class=\"line\"><span style=\"\">// 5)                       | DoneFetchingInBackground</span></span>\n<span class=\"line\"><span style=\"\">// 6) AfterDiscountFetched  |</span></span>\n<span class=\"line\"><span style=\"\">// 7) OnUpdatingDiscounts   |</span></span>\n<span class=\"line\"><span style=\"\">// 8) Start                 |</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/cart/fetch_discount_worker.h#L48-L61",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/cart/fetch_discount_worker.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//   0123456789</span></span>\n<span class=\"line\"><span style=\"\">//    mmmm</span></span>\n<span class=\"line\"><span style=\"\">// +       ddd</span></span>\n<span class=\"line\"><span style=\"\">// = nmmmmndddn</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/extensions/api/omnibox/omnibox_unittest.cc#L43-L46",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/extensions/api/omnibox/omnibox_unittest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// \"Attribution\" refers to the text credits that may optionally accompany each</span></span>\n<span class=\"line\"><span style=\"\">// photo that's assigned to a dynamic asset in an animation. The Lottie files</span></span>\n<span class=\"line\"><span style=\"\">// for ambient mode have a placeholder for each dynamic asset where its</span></span>\n<span class=\"line\"><span style=\"\">// attribution text should go.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The attribution text box's coordinates must be baked into the Lottie file.</span></span>\n<span class=\"line\"><span style=\"\">// However, UX requires that it is positioned such that the bottom-right of the</span></span>\n<span class=\"line\"><span style=\"\">// text box has 24 pixels of padding from the bottom-right of the view.</span></span>\n<span class=\"line\"><span style=\"\">// Additionally, the text box's width should extend from the left side of the</span></span>\n<span class=\"line\"><span style=\"\">// view all the way to (width - 24) to account for long attributions.</span></span>\n<span class=\"line\"><span style=\"\">// Visually, it looks like this:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// View:</span></span>\n<span class=\"line\"><span style=\"\">// +-----------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |                                               |</span></span>\n<span class=\"line\"><span style=\"\">// |                                               |</span></span>\n<span class=\"line\"><span style=\"\">// |                                               |</span></span>\n<span class=\"line\"><span style=\"\">// |                                               |</span></span>\n<span class=\"line\"><span style=\"\">// |                                               |</span></span>\n<span class=\"line\"><span style=\"\">// |                                               |</span></span>\n<span class=\"line\"><span style=\"\">// |                                               |</span></span>\n<span class=\"line\"><span style=\"\">// |                                               |</span></span>\n<span class=\"line\"><span style=\"\">// |                                               |</span></span>\n<span class=\"line\"><span style=\"\">// |-------------------------------------------+   |</span></span>\n<span class=\"line\"><span style=\"\">// |                           Attribution Text|   |</span></span>\n<span class=\"line\"><span style=\"\">// |-------------------------------------------+   |</span></span>\n<span class=\"line\"><span style=\"\">// |                                               |</span></span>\n<span class=\"line\"><span style=\"\">// +-----------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The animation already right-aligns the text within the box, but since the</span></span>\n<span class=\"line\"><span style=\"\">// view's boundaries can vary from device to device, it is impossible to</span></span>\n<span class=\"line\"><span style=\"\">// specify text box coordinates in the lottie file that work for all devices.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// To accomplish this, AmbientAnimationAttributionTransformer uses Skottie's</span></span>\n<span class=\"line\"><span style=\"\">// text/transform property observer API to intercept and modify the text box's</span></span>\n<span class=\"line\"><span style=\"\">// coordinates.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/ash/ambient/ui/ambient_animation_attribution_transformer.h#L16-L51",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/ash/ambient/ui/ambient_animation_attribution_transformer.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This is a profile-scoped implementation of `AccountManagerFacade`, intended</span></span>\n<span class=\"line\"><span style=\"\">// to be used by the identity manager. Account updates generally follow the</span></span>\n<span class=\"line\"><span style=\"\">// path:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                       AccountManagerFacadeImpl</span></span>\n<span class=\"line\"><span style=\"\">//                                  |</span></span>\n<span class=\"line\"><span style=\"\">//                                  V</span></span>\n<span class=\"line\"><span style=\"\">//                         AccountProfileMapper</span></span>\n<span class=\"line\"><span style=\"\">//                                  |</span></span>\n<span class=\"line\"><span style=\"\">//                                  V</span></span>\n<span class=\"line\"><span style=\"\">//                         ProfileAccountManager</span></span>\n<span class=\"line\"><span style=\"\">//                                  |</span></span>\n<span class=\"line\"><span style=\"\">//                                  V</span></span>\n<span class=\"line\"><span style=\"\">//                            IdentityManager</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The `ProfileAccountManager` is not intended to have much logic and mostly</span></span>\n<span class=\"line\"><span style=\"\">// forwards calls to the `AccountProfileMapper`.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/lacros/account_manager/profile_account_manager.h#L18-L34",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/lacros/account_manager/profile_account_manager.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Provides resource usage rate for the current process' coalition over \"short\"</span></span>\n<span class=\"line\"><span style=\"\">// and \"long\" intervals.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Init() must be invoked before any other method. It starts a \"long\" interval.</span></span>\n<span class=\"line\"><span style=\"\">// After that, StartShortInterval() and EndInterval() should be invoked in</span></span>\n<span class=\"line\"><span style=\"\">// alternance to start a \"short\" interval, end both intervals and start a new</span></span>\n<span class=\"line\"><span style=\"\">// \"long\" interval:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  |         Long          |         Long          |         Long          |</span></span>\n<span class=\"line\"><span style=\"\">//                  | Short |               | Short |               | Short |</span></span>\n<span class=\"line\"><span style=\"\">//  Init            SSI     EI              SSI     EI              SSI     EI</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      SSI = StartShortInterval</span></span>\n<span class=\"line\"><span style=\"\">//      EI  = EndIntervals</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// See //components/power_metrics/resource_coalition_mac.h for more details</span></span>\n<span class=\"line\"><span style=\"\">// about resource coalitions.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// NOTE: Chrome could belong to a non-empty coalition if it's started from a</span></span>\n<span class=\"line\"><span style=\"\">// terminal, in which case the data will be hard to interpret. This class</span></span>\n<span class=\"line\"><span style=\"\">// reports that the coalition data isn't available when it's the case.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/metrics/power/coalition_resource_usage_provider_mac.h#L24-L44",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/metrics/power/coalition_resource_usage_provider_mac.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The following four functions are responsible for initializing NSS for each</span></span>\n<span class=\"line\"><span style=\"\">// profile on ChromeOS Ash, which has a separate NSS database and TPM slot</span></span>\n<span class=\"line\"><span style=\"\">// per-profile.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Initialization basically follows these steps:</span></span>\n<span class=\"line\"><span style=\"\">// 1) Get some info from user_manager::UserManager about the User for this</span></span>\n<span class=\"line\"><span style=\"\">// profile.</span></span>\n<span class=\"line\"><span style=\"\">// 2) Tell nss_util to initialize the software slot for this profile.</span></span>\n<span class=\"line\"><span style=\"\">// 3) Wait for the TPM module to be loaded by nss_util if it isn't already.</span></span>\n<span class=\"line\"><span style=\"\">// 4) Ask CryptohomePkcs11Client which TPM slot id corresponds to this profile.</span></span>\n<span class=\"line\"><span style=\"\">// 5) Tell nss_util to use that slot id on the TPM module.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Some of these steps must happen on the UI thread, others must happen on the</span></span>\n<span class=\"line\"><span style=\"\">// IO thread:</span></span>\n<span class=\"line\"><span style=\"\">//               UI thread                              IO Thread</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  NssService::NssService</span></span>\n<span class=\"line\"><span style=\"\">//                   |</span></span>\n<span class=\"line\"><span style=\"\">//  ProfileHelper::Get()->GetUserByProfile()</span></span>\n<span class=\"line\"><span style=\"\">//                   \\---------------------------------------v</span></span>\n<span class=\"line\"><span style=\"\">//                                                 StartNSSInitOnIOThread</span></span>\n<span class=\"line\"><span style=\"\">//                                                           |</span></span>\n<span class=\"line\"><span style=\"\">//                                          crypto::InitializeNSSForChromeOSUser</span></span>\n<span class=\"line\"><span style=\"\">//                                                           |</span></span>\n<span class=\"line\"><span style=\"\">//                                                crypto::IsTPMTokenEnabled</span></span>\n<span class=\"line\"><span style=\"\">//                                                           |</span></span>\n<span class=\"line\"><span style=\"\">//                                          StartTPMSlotInitializationOnIOThread</span></span>\n<span class=\"line\"><span style=\"\">//                   v---------------------------------------/</span></span>\n<span class=\"line\"><span style=\"\">//     GetTPMInfoForUserOnUIThread</span></span>\n<span class=\"line\"><span style=\"\">//                   |</span></span>\n<span class=\"line\"><span style=\"\">//   ash::TPMTokenInfoGetter::Start</span></span>\n<span class=\"line\"><span style=\"\">//                   |</span></span>\n<span class=\"line\"><span style=\"\">//     DidGetTPMInfoForUserOnUIThread</span></span>\n<span class=\"line\"><span style=\"\">//                   \\---------------------------------------v</span></span>\n<span class=\"line\"><span style=\"\">//                                          crypto::InitializeTPMForChromeOSUser</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/net/nss_service_chromeos.cc#L43-L77",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "chromium/chrome/browser/net/nss_service_chromeos.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Generates a set of integers drawn from a mesa shaped probability distribution</span></span>\n<span class=\"line\"><span style=\"\">// with replacement.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The PDF is:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//            ⎧    0                               ... if x &#x3C; 0</span></span>\n<span class=\"line\"><span style=\"\">//            ⎪</span></span>\n<span class=\"line\"><span style=\"\">//     P(x) = ⎨    λ                               ... if 0 &#x3C;= x &#x3C; T</span></span>\n<span class=\"line\"><span style=\"\">//            ⎪</span></span>\n<span class=\"line\"><span style=\"\">//            ⎩    (1 - τ) * γ * (1 - γ)^{X - T}   ... otherwise</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// where</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   T = Value at which the PDF switches from a uniform to a geometric</span></span>\n<span class=\"line\"><span style=\"\">//       distribution. Referred to in code as the `pivot_point`.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   τ = Ratio of probability between linear region of the PDF. I.e. if τ = 0.9,</span></span>\n<span class=\"line\"><span style=\"\">//       then 90% of the probability space is in the linear region. The ratio is</span></span>\n<span class=\"line\"><span style=\"\">//       referred to in code as `dist_ratio`.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   γ = Parameter of the geometric distribution.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//        τ</span></span>\n<span class=\"line\"><span style=\"\">//   λ = ───</span></span>\n<span class=\"line\"><span style=\"\">//        T</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In otherwords, the PDF is uniform up to T with a probability of λ, and then</span></span>\n<span class=\"line\"><span style=\"\">// switches to a geometric distribution with parameter γ that extends to</span></span>\n<span class=\"line\"><span style=\"\">// infinity.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// It looks like this in the form of a graph which should make a little bit more</span></span>\n<span class=\"line\"><span style=\"\">// sense.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//          P(x)   ▲</span></span>\n<span class=\"line\"><span style=\"\">//                 │</span></span>\n<span class=\"line\"><span style=\"\">//   probability  λ│┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┬,</span></span>\n<span class=\"line\"><span style=\"\">//   density       │    uniform     ┊ L        geometric</span></span>\n<span class=\"line\"><span style=\"\">//                 │  distribution  ┊  \"._    distribution</span></span>\n<span class=\"line\"><span style=\"\">//                 │                ┊     `--..______</span></span>\n<span class=\"line\"><span style=\"\">//                 └────────────────┴──────────────────▶ x</span></span>\n<span class=\"line\"><span style=\"\">//                 0                T</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Why this odd combination of disjoint probability distributions?</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Such a distribution is useful when you want to select some set of elements</span></span>\n<span class=\"line\"><span style=\"\">// uniformly up to a threshold, but want to allow for a tail distribution that</span></span>\n<span class=\"line\"><span style=\"\">// extends arbitrarily past that range.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The τ parameter establishes the balance between the linear region and the</span></span>\n<span class=\"line\"><span style=\"\">// geometric region, while T establishes the scale. Typically we set τ to</span></span>\n<span class=\"line\"><span style=\"\">// something close to 0.9 or so such that 0.1 of the probability space is</span></span>\n<span class=\"line\"><span style=\"\">// reserved for the long tail.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Parameters:</span></span>\n<span class=\"line\"><span style=\"\">//   pivot_point: T as described above. Any value bigger than 0.</span></span>\n<span class=\"line\"><span style=\"\">//   dist_ratio : τ as described above. Must be in (0,1).</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/privacy_budget/mesa_distribution.h#L13-L68",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/privacy_budget/mesa_distribution.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * @fileoverview</span></span>\n<span class=\"line\"><span style=\"\"> * 'category-default-setting' is the polymer element for showing a certain</span></span>\n<span class=\"line\"><span style=\"\"> * category under Site Settings.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * |optionLabel_| toggle is enabled:</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * | Category                                        |&#x3C;-- Not defined here</span></span>\n<span class=\"line\"><span style=\"\"> * |                                                 |</span></span>\n<span class=\"line\"><span style=\"\"> * |  optionLabel_                     ( O)          |</span></span>\n<span class=\"line\"><span style=\"\"> * |  optionDescription_                             |</span></span>\n<span class=\"line\"><span style=\"\"> * |                                                 |</span></span>\n<span class=\"line\"><span style=\"\"> * |  subOptionLabel                   ( O)          |&#x3C;-- SubOptionMode.PREF</span></span>\n<span class=\"line\"><span style=\"\"> * |  subOptionDescription                           |    (optional)</span></span>\n<span class=\"line\"><span style=\"\"> * |                                                 |</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * |optionLabel_| toggle is disabled:</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * | Category                                        |&#x3C;-- Not defined here</span></span>\n<span class=\"line\"><span style=\"\"> * |                                                 |</span></span>\n<span class=\"line\"><span style=\"\"> * |  optionLabel_                     (O )          |</span></span>\n<span class=\"line\"><span style=\"\"> * |  optionDescription_                             |</span></span>\n<span class=\"line\"><span style=\"\"> * |                                                 |</span></span>\n<span class=\"line\"><span style=\"\"> * |  subOptionLabel                   (O )          |&#x3C;-- Toggle is off and</span></span>\n<span class=\"line\"><span style=\"\"> * |  subOptionDescription                           |    disabled; or hidden</span></span>\n<span class=\"line\"><span style=\"\"> * |                                                 |</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * TODO(crbug.com/1113642): Remove this element when content settings redesign</span></span>\n<span class=\"line\"><span style=\"\"> * is launched.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/resources/settings/site_settings/category_default_setting.ts#L5-L36",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/resources/settings/site_settings/category_default_setting.ts"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Ensure that sequential focus navigation (advancing focused elements with</span></span>\n<span class=\"line\"><span style=\"\">// &#x3C;tab> and &#x3C;shift-tab>) works across cross-process subframes.</span></span>\n<span class=\"line\"><span style=\"\">// The test sets up six inputs fields in a page with two cross-process</span></span>\n<span class=\"line\"><span style=\"\">// subframes:</span></span>\n<span class=\"line\"><span style=\"\">//                 child1            child2</span></span>\n<span class=\"line\"><span style=\"\">//             /------------\\    /------------\\.</span></span>\n<span class=\"line\"><span style=\"\">//             | 2. &#x3C;input> |    | 4. &#x3C;input> |</span></span>\n<span class=\"line\"><span style=\"\">//  1. &#x3C;input> | 3. &#x3C;input> |    | 5. &#x3C;input> |  6. &#x3C;input></span></span>\n<span class=\"line\"><span style=\"\">//             \\------------/    \\------------/.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The test then presses &#x3C;tab> six times to cycle through focused elements 1-6.</span></span>\n<span class=\"line\"><span style=\"\">// The test then repeats this with &#x3C;shift-tab> to cycle in reverse order.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/site_isolation/site_per_process_interactive_browsertest.cc#L251-L262",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/site_isolation/site_per_process_interactive_browsertest.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * Coordinates horizontal alignment of the tail suggestions.</span></span>\n<span class=\"line\"><span style=\"\"> * Tail suggestions are aligned to</span></span>\n<span class=\"line\"><span style=\"\"> * - the user input in the Omnibox, when possible,</span></span>\n<span class=\"line\"><span style=\"\"> * - to each other (left edge) when longest tail suggestion makes it impossible to align it to</span></span>\n<span class=\"line\"><span style=\"\"> *   user input.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Examples:</span></span>\n<span class=\"line\"><span style=\"\"> * 1. Aligned to User input:</span></span>\n<span class=\"line\"><span style=\"\"> *    ( User Query In Omni             )</span></span>\n<span class=\"line\"><span style=\"\"> *    [           ... Omnibox          ]</span></span>\n<span class=\"line\"><span style=\"\"> *    [           ... Omnibox Android  ]</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 2. Aligned to longest suggestion:</span></span>\n<span class=\"line\"><span style=\"\"> *    ( Longer User Query In The Omni  )</span></span>\n<span class=\"line\"><span style=\"\"> *    [             ... Omnibox        ]</span></span>\n<span class=\"line\"><span style=\"\"> *    [             ... Omnibox Android]</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/suggestions/tail/AlignmentManager.java#L14-L31",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/suggestions/tail/AlignmentManager.java"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * This class takes care of the various dialogs that must be shown when the user changes the</span></span>\n<span class=\"line\"><span style=\"\"> * account they are syncing to (either directly, or by signing in to a new account). Most of the</span></span>\n<span class=\"line\"><span style=\"\"> * complexity is due to many of the decisions getting answered through callbacks.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This class progresses along the following state machine:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       E-----\\  G--\\</span></span>\n<span class=\"line\"><span style=\"\"> *       ^     |  ^  |</span></span>\n<span class=\"line\"><span style=\"\"> *       |     v  |  v</span></span>\n<span class=\"line\"><span style=\"\"> * A->B->C->D->+->F->H</span></span>\n<span class=\"line\"><span style=\"\"> *    |        ^</span></span>\n<span class=\"line\"><span style=\"\"> *    v        |</span></span>\n<span class=\"line\"><span style=\"\"> *    \\--------/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Where:</span></span>\n<span class=\"line\"><span style=\"\"> * A - Start</span></span>\n<span class=\"line\"><span style=\"\"> * B - Decision: progress to C if the user signed in previously to a different account, F otherwise.</span></span>\n<span class=\"line\"><span style=\"\"> * C - Decision: progress to E if we are switching from a managed account, D otherwise.</span></span>\n<span class=\"line\"><span style=\"\"> * D - Action: show Import Data Dialog.</span></span>\n<span class=\"line\"><span style=\"\"> * E - Action: show Switching from Managed Account Dialog.</span></span>\n<span class=\"line\"><span style=\"\"> * F - Decision: progress to G if we are switching to a managed account, H otherwise.</span></span>\n<span class=\"line\"><span style=\"\"> * G - Action: show Switching to Managed Account Dialog.</span></span>\n<span class=\"line\"><span style=\"\"> * H - End: perform {@link ConfirmImportSyncDataDialogCoordinator.Listener#onConfirm} with the</span></span>\n<span class=\"line\"><span style=\"\"> * result of the Import Data Dialog, if displayed or true if switching from a managed account.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At any dialog, the user can cancel the dialog and end the whole process (resulting in</span></span>\n<span class=\"line\"><span style=\"\"> * {@link ConfirmImportSyncDataDialogCoordinator.Listener#onCancel}).</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmSyncDataStateMachine.java#L20-L48",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/android/signin/java/src/org/chromium/chrome/browser/ui/signin/ConfirmSyncDataStateMachine.java"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The view that is used as a content view of the permissions subpages in page</span></span>\n<span class=\"line\"><span style=\"\">// info. It contains information about the permission (icon, title, state label)</span></span>\n<span class=\"line\"><span style=\"\">// and controls to change the permission state (toggle, checkbox and manage</span></span>\n<span class=\"line\"><span style=\"\">// button).</span></span>\n<span class=\"line\"><span style=\"\">// *---------------------------------------------------------------*</span></span>\n<span class=\"line\"><span style=\"\">// | Icon | Title                                         | Toggle |</span></span>\n<span class=\"line\"><span style=\"\">// |      | State label                                   |        |</span></span>\n<span class=\"line\"><span style=\"\">// |      |                                               |        |</span></span>\n<span class=\"line\"><span style=\"\">// |      | \"Remember this setting\" checkbox              |        |</span></span>\n<span class=\"line\"><span style=\"\">// |---------------------------------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">// | Manage button                                                 |</span></span>\n<span class=\"line\"><span style=\"\">// *---------------------------------------------------------------*</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/views/page_info/page_info_permission_content_view.h#L21-L32",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/views/page_info/page_info_permission_content_view.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Adds the product logo to the footer.</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// | (•) chrome                               | PAY | CANCEL |</span></span>\n<span class=\"line\"><span style=\"\">// +---------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/views/payments/payment_sheet_view_controller.cc#L474-L477",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/views/payments/payment_sheet_view_controller.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Creates the body.</span></span>\n<span class=\"line\"><span style=\"\">// +------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |              [header image]              |</span></span>\n<span class=\"line\"><span style=\"\">// |                                          |</span></span>\n<span class=\"line\"><span style=\"\">// | No matching credentials text             |</span></span>\n<span class=\"line\"><span style=\"\">// |                                     [OK] |</span></span>\n<span class=\"line\"><span style=\"\">// +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/views/payments/secure_payment_confirmation_no_creds_dialog_view.cc#L143-L149",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/views/payments/secure_payment_confirmation_no_creds_dialog_view.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Creates the header view, which contains the icon and a progress bar. The icon</span></span>\n<span class=\"line\"><span style=\"\">// covers the whole header view with the progress bar at the top of the header.</span></span>\n<span class=\"line\"><span style=\"\">// +------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |===============progress bar===============|</span></span>\n<span class=\"line\"><span style=\"\">// |                                          |</span></span>\n<span class=\"line\"><span style=\"\">// |                   icon                   |</span></span>\n<span class=\"line\"><span style=\"\">// +------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/chromium/chromium/blob/3a651660d1d01daac3c0ff0faacd098fd50e9c84/chrome/browser/ui/views/payments/secure_payment_confirmation_views_util.h#L60-L66",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": true,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "chromium/chrome/browser/ui/views/payments/secure_payment_confirmation_views_util.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* BTF verification:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To verify BTF data, two passes are needed.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Pass #1</span></span>\n<span class=\"line\"><span style=\"\"> * ~~~~~~~</span></span>\n<span class=\"line\"><span style=\"\"> * The first pass is to collect all btf_type objects to</span></span>\n<span class=\"line\"><span style=\"\"> * an array: \"btf->types\".</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Depending on the C type that a btf_type is describing,</span></span>\n<span class=\"line\"><span style=\"\"> * a btf_type may be followed by extra data.  We don't know</span></span>\n<span class=\"line\"><span style=\"\"> * how many btf_type is there, and more importantly we don't</span></span>\n<span class=\"line\"><span style=\"\"> * know where each btf_type is located in the type section.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Without knowing the location of each type_id, most verifications</span></span>\n<span class=\"line\"><span style=\"\"> * cannot be done.  e.g. an earlier btf_type may refer to a later</span></span>\n<span class=\"line\"><span style=\"\"> * btf_type (recall the \"const void *\" above), so we cannot</span></span>\n<span class=\"line\"><span style=\"\"> * check this type-reference in the first pass.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In the first pass, it still does some verifications (e.g.</span></span>\n<span class=\"line\"><span style=\"\"> * checking the name is a valid offset to the string section).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Pass #2</span></span>\n<span class=\"line\"><span style=\"\"> * ~~~~~~~</span></span>\n<span class=\"line\"><span style=\"\"> * The main focus is to resolve a btf_type that is referring</span></span>\n<span class=\"line\"><span style=\"\"> * to another type.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We have to ensure the referring type:</span></span>\n<span class=\"line\"><span style=\"\"> * 1) does exist in the BTF (i.e. in btf->types[])</span></span>\n<span class=\"line\"><span style=\"\"> * 2) does not cause a loop:</span></span>\n<span class=\"line\"><span style=\"\"> *\tstruct A {</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tstruct B b;</span></span>\n<span class=\"line\"><span style=\"\"> *\t};</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tstruct B {</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tstruct A a;</span></span>\n<span class=\"line\"><span style=\"\"> *\t};</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * btf_type_needs_resolve() decides if a btf_type needs</span></span>\n<span class=\"line\"><span style=\"\"> * to be resolved.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The needs_resolve type implements the \"resolve()\" ops which</span></span>\n<span class=\"line\"><span style=\"\"> * essentially does a DFS and detects backedge.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * During resolve (or DFS), different C types have different</span></span>\n<span class=\"line\"><span style=\"\"> * \"RESOLVED\" conditions.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When resolving a BTF_KIND_STRUCT, we need to resolve all its</span></span>\n<span class=\"line\"><span style=\"\"> * members because a member is always referring to another</span></span>\n<span class=\"line\"><span style=\"\"> * type.  A struct's member can be treated as \"RESOLVED\" if</span></span>\n<span class=\"line\"><span style=\"\"> * it is referring to a BTF_KIND_PTR.  Otherwise, the</span></span>\n<span class=\"line\"><span style=\"\"> * following valid C struct would be rejected:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tstruct A {</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tint m;</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tstruct A *a;</span></span>\n<span class=\"line\"><span style=\"\"> *\t};</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When resolving a BTF_KIND_PTR, it needs to keep resolving if</span></span>\n<span class=\"line\"><span style=\"\"> * it is referring to another BTF_KIND_PTR.  Otherwise, we cannot</span></span>\n<span class=\"line\"><span style=\"\"> * detect a pointer loop, e.g.:</span></span>\n<span class=\"line\"><span style=\"\"> * BTF_KIND_CONST -> BTF_KIND_PTR -> BTF_KIND_CONST -> BTF_KIND_PTR +</span></span>\n<span class=\"line\"><span style=\"\"> *                        ^                                         |</span></span>\n<span class=\"line\"><span style=\"\"> *                        +-----------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/bpf/btf.c#L104-L169",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/bpf/btf.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* This trie implements a longest prefix match algorithm that can be used to</span></span>\n<span class=\"line\"><span style=\"\"> * match IP addresses to a stored set of ranges.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Data stored in @data of struct bpf_lpm_key and struct lpm_trie_node is</span></span>\n<span class=\"line\"><span style=\"\"> * interpreted as big endian, so data[0] stores the most significant byte.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Match ranges are internally stored in instances of struct lpm_trie_node</span></span>\n<span class=\"line\"><span style=\"\"> * which each contain their prefix length as well as two pointers that may</span></span>\n<span class=\"line\"><span style=\"\"> * lead to more nodes containing more specific matches. Each node also stores</span></span>\n<span class=\"line\"><span style=\"\"> * a value that is defined by and returned to userspace via the update_elem</span></span>\n<span class=\"line\"><span style=\"\"> * and lookup functions.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For instance, let's start with a trie that was created with a prefix length</span></span>\n<span class=\"line\"><span style=\"\"> * of 32, so it can be used for IPv4 addresses, and one single element that</span></span>\n<span class=\"line\"><span style=\"\"> * matches 192.168.0.0/16. The data array would hence contain</span></span>\n<span class=\"line\"><span style=\"\"> * [0xc0, 0xa8, 0x00, 0x00] in big-endian notation. This documentation will</span></span>\n<span class=\"line\"><span style=\"\"> * stick to IP-address notation for readability though.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * As the trie is empty initially, the new node (1) will be places as root</span></span>\n<span class=\"line\"><span style=\"\"> * node, denoted as (R) in the example below. As there are no other node, both</span></span>\n<span class=\"line\"><span style=\"\"> * child pointers are %NULL.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *              +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *              |       (1)  (R) |</span></span>\n<span class=\"line\"><span style=\"\"> *              | 192.168.0.0/16 |</span></span>\n<span class=\"line\"><span style=\"\"> *              |    value: 1    |</span></span>\n<span class=\"line\"><span style=\"\"> *              |   [0]    [1]   |</span></span>\n<span class=\"line\"><span style=\"\"> *              +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Next, let's add a new node (2) matching 192.168.0.0/24. As there is already</span></span>\n<span class=\"line\"><span style=\"\"> * a node with the same data and a smaller prefix (ie, a less specific one),</span></span>\n<span class=\"line\"><span style=\"\"> * node (2) will become a child of (1). In child index depends on the next bit</span></span>\n<span class=\"line\"><span style=\"\"> * that is outside of what (1) matches, and that bit is 0, so (2) will be</span></span>\n<span class=\"line\"><span style=\"\"> * child[0] of (1):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *              +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *              |       (1)  (R) |</span></span>\n<span class=\"line\"><span style=\"\"> *              | 192.168.0.0/16 |</span></span>\n<span class=\"line\"><span style=\"\"> *              |    value: 1    |</span></span>\n<span class=\"line\"><span style=\"\"> *              |   [0]    [1]   |</span></span>\n<span class=\"line\"><span style=\"\"> *              +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                   |</span></span>\n<span class=\"line\"><span style=\"\"> *    +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *    |       (2)      |</span></span>\n<span class=\"line\"><span style=\"\"> *    | 192.168.0.0/24 |</span></span>\n<span class=\"line\"><span style=\"\"> *    |    value: 2    |</span></span>\n<span class=\"line\"><span style=\"\"> *    |   [0]    [1]   |</span></span>\n<span class=\"line\"><span style=\"\"> *    +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The child[1] slot of (1) could be filled with another node which has bit #17</span></span>\n<span class=\"line\"><span style=\"\"> * (the next bit after the ones that (1) matches on) set to 1. For instance,</span></span>\n<span class=\"line\"><span style=\"\"> * 192.168.128.0/24:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *              +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *              |       (1)  (R) |</span></span>\n<span class=\"line\"><span style=\"\"> *              | 192.168.0.0/16 |</span></span>\n<span class=\"line\"><span style=\"\"> *              |    value: 1    |</span></span>\n<span class=\"line\"><span style=\"\"> *              |   [0]    [1]   |</span></span>\n<span class=\"line\"><span style=\"\"> *              +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                   |      |</span></span>\n<span class=\"line\"><span style=\"\"> *    +----------------+  +------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *    |       (2)      |  |        (3)       |</span></span>\n<span class=\"line\"><span style=\"\"> *    | 192.168.0.0/24 |  | 192.168.128.0/24 |</span></span>\n<span class=\"line\"><span style=\"\"> *    |    value: 2    |  |     value: 3     |</span></span>\n<span class=\"line\"><span style=\"\"> *    |   [0]    [1]   |  |    [0]    [1]    |</span></span>\n<span class=\"line\"><span style=\"\"> *    +----------------+  +------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Let's add another node (4) to the game for 192.168.1.0/24. In order to place</span></span>\n<span class=\"line\"><span style=\"\"> * it, node (1) is looked at first, and because (4) of the semantics laid out</span></span>\n<span class=\"line\"><span style=\"\"> * above (bit #17 is 0), it would normally be attached to (1) as child[0].</span></span>\n<span class=\"line\"><span style=\"\"> * However, that slot is already allocated, so a new node is needed in between.</span></span>\n<span class=\"line\"><span style=\"\"> * That node does not have a value attached to it and it will never be</span></span>\n<span class=\"line\"><span style=\"\"> * returned to users as result of a lookup. It is only there to differentiate</span></span>\n<span class=\"line\"><span style=\"\"> * the traversal further. It will get a prefix as wide as necessary to</span></span>\n<span class=\"line\"><span style=\"\"> * distinguish its two children:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                      +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                      |       (1)  (R) |</span></span>\n<span class=\"line\"><span style=\"\"> *                      | 192.168.0.0/16 |</span></span>\n<span class=\"line\"><span style=\"\"> *                      |    value: 1    |</span></span>\n<span class=\"line\"><span style=\"\"> *                      |   [0]    [1]   |</span></span>\n<span class=\"line\"><span style=\"\"> *                      +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                           |      |</span></span>\n<span class=\"line\"><span style=\"\"> *            +----------------+  +------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *            |       (4)  (I) |  |        (3)       |</span></span>\n<span class=\"line\"><span style=\"\"> *            | 192.168.0.0/23 |  | 192.168.128.0/24 |</span></span>\n<span class=\"line\"><span style=\"\"> *            |    value: ---  |  |     value: 3     |</span></span>\n<span class=\"line\"><span style=\"\"> *            |   [0]    [1]   |  |    [0]    [1]    |</span></span>\n<span class=\"line\"><span style=\"\"> *            +----------------+  +------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                 |      |</span></span>\n<span class=\"line\"><span style=\"\"> *  +----------------+  +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |       (2)      |  |       (5)      |</span></span>\n<span class=\"line\"><span style=\"\"> *  | 192.168.0.0/24 |  | 192.168.1.0/24 |</span></span>\n<span class=\"line\"><span style=\"\"> *  |    value: 2    |  |     value: 5   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |   [0]    [1]   |  |   [0]    [1]   |</span></span>\n<span class=\"line\"><span style=\"\"> *  +----------------+  +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 192.168.1.1/32 would be a child of (5) etc.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * An intermediate node will be turned into a 'real' node on demand. In the</span></span>\n<span class=\"line\"><span style=\"\"> * example above, (4) would be re-used if 192.168.0.0/23 is added to the trie.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * A fully populated trie would have a height of 32 nodes, as the trie was</span></span>\n<span class=\"line\"><span style=\"\"> * created with a prefix length of 32.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The lookup starts at the root node. If the current node matches and if there</span></span>\n<span class=\"line\"><span style=\"\"> * is a child that can be used to become more specific, the trie is traversed</span></span>\n<span class=\"line\"><span style=\"\"> * downwards. The last node in the traversal that is a non-intermediate one is</span></span>\n<span class=\"line\"><span style=\"\"> * returned.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/bpf/lpm_trie.c#L41-L150",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/bpf/lpm_trie.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * READ this before attempting to hack on futexes!</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Basic futex operation and ordering guarantees</span></span>\n<span class=\"line\"><span style=\"\"> * =============================================</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The waiter reads the futex value in user space and calls</span></span>\n<span class=\"line\"><span style=\"\"> * futex_wait(). This function computes the hash bucket and acquires</span></span>\n<span class=\"line\"><span style=\"\"> * the hash bucket lock. After that it reads the futex user space value</span></span>\n<span class=\"line\"><span style=\"\"> * again and verifies that the data has not changed. If it has not changed</span></span>\n<span class=\"line\"><span style=\"\"> * it enqueues itself into the hash bucket, releases the hash bucket lock</span></span>\n<span class=\"line\"><span style=\"\"> * and schedules.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The waker side modifies the user space value of the futex and calls</span></span>\n<span class=\"line\"><span style=\"\"> * futex_wake(). This function computes the hash bucket and acquires the</span></span>\n<span class=\"line\"><span style=\"\"> * hash bucket lock. Then it looks for waiters on that futex in the hash</span></span>\n<span class=\"line\"><span style=\"\"> * bucket and wakes them.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In futex wake up scenarios where no tasks are blocked on a futex, taking</span></span>\n<span class=\"line\"><span style=\"\"> * the hb spinlock can be avoided and simply return. In order for this</span></span>\n<span class=\"line\"><span style=\"\"> * optimization to work, ordering guarantees must exist so that the waiter</span></span>\n<span class=\"line\"><span style=\"\"> * being added to the list is acknowledged when the list is concurrently being</span></span>\n<span class=\"line\"><span style=\"\"> * checked by the waker, avoiding scenarios like the following:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * CPU 0                               CPU 1</span></span>\n<span class=\"line\"><span style=\"\"> * val = *futex;</span></span>\n<span class=\"line\"><span style=\"\"> * sys_futex(WAIT, futex, val);</span></span>\n<span class=\"line\"><span style=\"\"> *   futex_wait(futex, val);</span></span>\n<span class=\"line\"><span style=\"\"> *   uval = *futex;</span></span>\n<span class=\"line\"><span style=\"\"> *                                     *futex = newval;</span></span>\n<span class=\"line\"><span style=\"\"> *                                     sys_futex(WAKE, futex);</span></span>\n<span class=\"line\"><span style=\"\"> *                                       futex_wake(futex);</span></span>\n<span class=\"line\"><span style=\"\"> *                                       if (queue_empty())</span></span>\n<span class=\"line\"><span style=\"\"> *                                         return;</span></span>\n<span class=\"line\"><span style=\"\"> *   if (uval == val)</span></span>\n<span class=\"line\"><span style=\"\"> *      lock(hash_bucket(futex));</span></span>\n<span class=\"line\"><span style=\"\"> *      queue();</span></span>\n<span class=\"line\"><span style=\"\"> *     unlock(hash_bucket(futex));</span></span>\n<span class=\"line\"><span style=\"\"> *     schedule();</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This would cause the waiter on CPU 0 to wait forever because it</span></span>\n<span class=\"line\"><span style=\"\"> * missed the transition of the user space value from val to newval</span></span>\n<span class=\"line\"><span style=\"\"> * and the waker did not find the waiter in the hash bucket queue.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The correct serialization ensures that a waiter either observes</span></span>\n<span class=\"line\"><span style=\"\"> * the changed user space value before blocking or is woken by a</span></span>\n<span class=\"line\"><span style=\"\"> * concurrent waker:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * CPU 0                                 CPU 1</span></span>\n<span class=\"line\"><span style=\"\"> * val = *futex;</span></span>\n<span class=\"line\"><span style=\"\"> * sys_futex(WAIT, futex, val);</span></span>\n<span class=\"line\"><span style=\"\"> *   futex_wait(futex, val);</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   waiters++; (a)</span></span>\n<span class=\"line\"><span style=\"\"> *   smp_mb(); (A) &#x3C;-- paired with -.</span></span>\n<span class=\"line\"><span style=\"\"> *                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *   lock(hash_bucket(futex));      |</span></span>\n<span class=\"line\"><span style=\"\"> *                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *   uval = *futex;                 |</span></span>\n<span class=\"line\"><span style=\"\"> *                                  |        *futex = newval;</span></span>\n<span class=\"line\"><span style=\"\"> *                                  |        sys_futex(WAKE, futex);</span></span>\n<span class=\"line\"><span style=\"\"> *                                  |          futex_wake(futex);</span></span>\n<span class=\"line\"><span style=\"\"> *                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *                                  `--------> smp_mb(); (B)</span></span>\n<span class=\"line\"><span style=\"\"> *   if (uval == val)</span></span>\n<span class=\"line\"><span style=\"\"> *     queue();</span></span>\n<span class=\"line\"><span style=\"\"> *     unlock(hash_bucket(futex));</span></span>\n<span class=\"line\"><span style=\"\"> *     schedule();                         if (waiters)</span></span>\n<span class=\"line\"><span style=\"\"> *                                           lock(hash_bucket(futex));</span></span>\n<span class=\"line\"><span style=\"\"> *   else                                    wake_waiters(futex);</span></span>\n<span class=\"line\"><span style=\"\"> *     waiters--; (b)                        unlock(hash_bucket(futex));</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Where (A) orders the waiters increment and the futex value read through</span></span>\n<span class=\"line\"><span style=\"\"> * atomic operations (see futex_hb_waiters_inc) and where (B) orders the write</span></span>\n<span class=\"line\"><span style=\"\"> * to futex and the waiters read (see futex_hb_waiters_pending()).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This yields the following case (where X:=waiters, Y:=futex):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tX = Y = 0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tw[X]=1\t\tw[Y]=1</span></span>\n<span class=\"line\"><span style=\"\"> *\tMB\t\tMB</span></span>\n<span class=\"line\"><span style=\"\"> *\tr[Y]=y\t\tr[X]=x</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Which guarantees that x==0 &#x26;&#x26; y==0 is impossible; which translates back into</span></span>\n<span class=\"line\"><span style=\"\"> * the guarantee that we cannot both miss the futex variable change and the</span></span>\n<span class=\"line\"><span style=\"\"> * enqueue.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that a new waiter is accounted for in (a) even when it is possible that</span></span>\n<span class=\"line\"><span style=\"\"> * the wait call can return error, in which case we backtrack from it in (b).</span></span>\n<span class=\"line\"><span style=\"\"> * Refer to the comment in futex_q_lock().</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Similarly, in order to account for waiters being requeued on another</span></span>\n<span class=\"line\"><span style=\"\"> * address we always increment the waiters for the destination bucket before</span></span>\n<span class=\"line\"><span style=\"\"> * acquiring the lock. It then decrements them again  after releasing it -</span></span>\n<span class=\"line\"><span style=\"\"> * the code that actually moves the futex(es) between hash buckets (requeue_futex)</span></span>\n<span class=\"line\"><span style=\"\"> * will do the additional required waiter count housekeeping. This is done for</span></span>\n<span class=\"line\"><span style=\"\"> * double_lock_hb() and double_unlock_hb(), respectively.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/futex/waitwake.c#L9-L107",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/kernel/futex/waitwake.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The main goal of this algorithm is to predict the next interrupt</span></span>\n<span class=\"line\"><span style=\"\"> * occurrence on the current CPU.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Currently, the interrupt timings are stored in a circular array</span></span>\n<span class=\"line\"><span style=\"\"> * buffer every time there is an interrupt, as a tuple: the interrupt</span></span>\n<span class=\"line\"><span style=\"\"> * number and the associated timestamp when the event occurred &#x3C;irq,</span></span>\n<span class=\"line\"><span style=\"\"> * timestamp>.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For every interrupt occurring in a short period of time, we can</span></span>\n<span class=\"line\"><span style=\"\"> * measure the elapsed time between the occurrences for the same</span></span>\n<span class=\"line\"><span style=\"\"> * interrupt and we end up with a suite of intervals. The experience</span></span>\n<span class=\"line\"><span style=\"\"> * showed the interrupts are often coming following a periodic</span></span>\n<span class=\"line\"><span style=\"\"> * pattern.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The objective of the algorithm is to find out this periodic pattern</span></span>\n<span class=\"line\"><span style=\"\"> * in a fastest way and use its period to predict the next irq event.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When the next interrupt event is requested, we are in the situation</span></span>\n<span class=\"line\"><span style=\"\"> * where the interrupts are disabled and the circular buffer</span></span>\n<span class=\"line\"><span style=\"\"> * containing the timings is filled with the events which happened</span></span>\n<span class=\"line\"><span style=\"\"> * after the previous next-interrupt-event request.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At this point, we read the circular buffer and we fill the irq</span></span>\n<span class=\"line\"><span style=\"\"> * related statistics structure. After this step, the circular array</span></span>\n<span class=\"line\"><span style=\"\"> * containing the timings is empty because all the values are</span></span>\n<span class=\"line\"><span style=\"\"> * dispatched in their corresponding buffers.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Now for each interrupt, we can predict the next event by using the</span></span>\n<span class=\"line\"><span style=\"\"> * suffix array, log interval and exponential moving average</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 1. Suffix array</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Suffix array is an array of all the suffixes of a string. It is</span></span>\n<span class=\"line\"><span style=\"\"> * widely used as a data structure for compression, text search, ...</span></span>\n<span class=\"line\"><span style=\"\"> * For instance for the word 'banana', the suffixes will be: 'banana'</span></span>\n<span class=\"line\"><span style=\"\"> * 'anana' 'nana' 'ana' 'na' 'a'</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Usually, the suffix array is sorted but for our purpose it is</span></span>\n<span class=\"line\"><span style=\"\"> * not necessary and won't provide any improvement in the context of</span></span>\n<span class=\"line\"><span style=\"\"> * the solved problem where we clearly define the boundaries of the</span></span>\n<span class=\"line\"><span style=\"\"> * search by a max period and min period.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The suffix array will build a suite of intervals of different</span></span>\n<span class=\"line\"><span style=\"\"> * length and will look for the repetition of each suite. If the suite</span></span>\n<span class=\"line\"><span style=\"\"> * is repeating then we have the period because it is the length of</span></span>\n<span class=\"line\"><span style=\"\"> * the suite whatever its position in the buffer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 2. Log interval</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We saw the irq timings allow to compute the interval of the</span></span>\n<span class=\"line\"><span style=\"\"> * occurrences for a specific interrupt. We can reasonably assume the</span></span>\n<span class=\"line\"><span style=\"\"> * longer is the interval, the higher is the error for the next event</span></span>\n<span class=\"line\"><span style=\"\"> * and we can consider storing those interval values into an array</span></span>\n<span class=\"line\"><span style=\"\"> * where each slot in the array correspond to an interval at the power</span></span>\n<span class=\"line\"><span style=\"\"> * of 2 of the index. For example, index 12 will contain values</span></span>\n<span class=\"line\"><span style=\"\"> * between 2^11 and 2^12.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At the end we have an array of values where at each index defines a</span></span>\n<span class=\"line\"><span style=\"\"> * [2^index - 1, 2 ^ index] interval values allowing to store a large</span></span>\n<span class=\"line\"><span style=\"\"> * number of values inside a small array.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For example, if we have the value 1123, then we store it at</span></span>\n<span class=\"line\"><span style=\"\"> * ilog2(1123) = 10 index value.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Storing those value at the specific index is done by computing an</span></span>\n<span class=\"line\"><span style=\"\"> * exponential moving average for this specific slot. For instance,</span></span>\n<span class=\"line\"><span style=\"\"> * for values 1800, 1123, 1453, ... fall under the same slot (10) and</span></span>\n<span class=\"line\"><span style=\"\"> * the exponential moving average is computed every time a new value</span></span>\n<span class=\"line\"><span style=\"\"> * is stored at this slot.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 3. Exponential Moving Average</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The EMA is largely used to track a signal for stocks or as a low</span></span>\n<span class=\"line\"><span style=\"\"> * pass filter. The magic of the formula, is it is very simple and the</span></span>\n<span class=\"line\"><span style=\"\"> * reactivity of the average can be tuned with the factors called</span></span>\n<span class=\"line\"><span style=\"\"> * alpha.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The higher the alphas are, the faster the average respond to the</span></span>\n<span class=\"line\"><span style=\"\"> * signal change. In our case, if a slot in the array is a big</span></span>\n<span class=\"line\"><span style=\"\"> * interval, we can have numbers with a big difference between</span></span>\n<span class=\"line\"><span style=\"\"> * them. The impact of those differences in the average computation</span></span>\n<span class=\"line\"><span style=\"\"> * can be tuned by changing the alpha value.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  -- The algorithm --</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We saw the different processing above, now let's see how they are</span></span>\n<span class=\"line\"><span style=\"\"> * used together.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For each interrupt:</span></span>\n<span class=\"line\"><span style=\"\"> *\tFor each interval:</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tCompute the index = ilog2(interval)</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tCompute a new_ema(buffer[index], interval)</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tStore the index in a circular buffer</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tCompute the suffix array of the indexes</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tFor each suffix:</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tIf the suffix is reverse-found 3 times</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\tReturn suffix</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tReturn Not found</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * However we can not have endless suffix array to be build, it won't</span></span>\n<span class=\"line\"><span style=\"\"> * make sense and it will add an extra overhead, so we can restrict</span></span>\n<span class=\"line\"><span style=\"\"> * this to a maximum suffix length of 5 and a minimum suffix length of</span></span>\n<span class=\"line\"><span style=\"\"> * 2. The experience showed 5 is the majority of the maximum pattern</span></span>\n<span class=\"line\"><span style=\"\"> * period found for different devices.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The result is a pattern finding less than 1us for an interrupt.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Example based on real values:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Example 1 : MMC write/read interrupt interval:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t223947, 1240, 1384, 1386, 1386,</span></span>\n<span class=\"line\"><span style=\"\"> *\t217416, 1236, 1384, 1386, 1387,</span></span>\n<span class=\"line\"><span style=\"\"> *\t214719, 1241, 1386, 1387, 1384,</span></span>\n<span class=\"line\"><span style=\"\"> *\t213696, 1234, 1384, 1386, 1388,</span></span>\n<span class=\"line\"><span style=\"\"> *\t219904, 1240, 1385, 1389, 1385,</span></span>\n<span class=\"line\"><span style=\"\"> *\t212240, 1240, 1386, 1386, 1386,</span></span>\n<span class=\"line\"><span style=\"\"> *\t214415, 1236, 1384, 1386, 1387,</span></span>\n<span class=\"line\"><span style=\"\"> *\t214276, 1234, 1384, 1388, ?</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For each element, apply ilog2(value)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, 8,</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, 8,</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, 8,</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, 8,</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, 8,</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, 8,</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, 8,</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, ?</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Max period of 5, we take the last (max_period * 3) 15 elements as</span></span>\n<span class=\"line\"><span style=\"\"> * we can be confident if the pattern repeats itself three times it is</span></span>\n<span class=\"line\"><span style=\"\"> * a repeating pattern.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t             8,</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, 8,</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, 8,</span></span>\n<span class=\"line\"><span style=\"\"> *\t15, 8, 8, 8, ?</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Suffixes are:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  1) 8, 15, 8, 8, 8  &#x3C;- max period</span></span>\n<span class=\"line\"><span style=\"\"> *  2) 8, 15, 8, 8</span></span>\n<span class=\"line\"><span style=\"\"> *  3) 8, 15, 8</span></span>\n<span class=\"line\"><span style=\"\"> *  4) 8, 15           &#x3C;- min period</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * From there we search the repeating pattern for each suffix.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * buffer: 8, 15, 8, 8, 8, 8, 15, 8, 8, 8, 8, 15, 8, 8, 8</span></span>\n<span class=\"line\"><span style=\"\"> *         |   |  |  |  |  |   |  |  |  |  |   |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> *         8, 15, 8, 8, 8  |   |  |  |  |  |   |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> *                         8, 15, 8, 8, 8  |   |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> *                                         8, 15, 8, 8, 8</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When moving the suffix, we found exactly 3 matches.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The first suffix with period 5 is repeating.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The next event is (3 * max_period) % suffix_period</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In this example, the result 0, so the next event is suffix[0] => 8</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * However, 8 is the index in the array of exponential moving average</span></span>\n<span class=\"line\"><span style=\"\"> * which was calculated on the fly when storing the values, so the</span></span>\n<span class=\"line\"><span style=\"\"> * interval is ema[8] = 1366</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Example 2:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t4, 3, 5, 100,</span></span>\n<span class=\"line\"><span style=\"\"> *\t3, 3, 5, 117,</span></span>\n<span class=\"line\"><span style=\"\"> *\t4, 4, 5, 112,</span></span>\n<span class=\"line\"><span style=\"\"> *\t4, 3, 4, 110,</span></span>\n<span class=\"line\"><span style=\"\"> *\t3, 5, 3, 117,</span></span>\n<span class=\"line\"><span style=\"\"> *\t4, 4, 5, 112,</span></span>\n<span class=\"line\"><span style=\"\"> *\t4, 3, 4, 110,</span></span>\n<span class=\"line\"><span style=\"\"> *\t3, 4, 5, 112,</span></span>\n<span class=\"line\"><span style=\"\"> *\t4, 3, 4, 110</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ilog2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Max period 5:</span></span>\n<span class=\"line\"><span style=\"\"> *\t   0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4,</span></span>\n<span class=\"line\"><span style=\"\"> *\t0, 0, 0, 4</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Suffixes:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  1) 0, 0, 4, 0, 0</span></span>\n<span class=\"line\"><span style=\"\"> *  2) 0, 0, 4, 0</span></span>\n<span class=\"line\"><span style=\"\"> *  3) 0, 0, 4</span></span>\n<span class=\"line\"><span style=\"\"> *  4) 0, 0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * buffer: 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4</span></span>\n<span class=\"line\"><span style=\"\"> *         |  |  |  |  |  |  X</span></span>\n<span class=\"line\"><span style=\"\"> *         0, 0, 4, 0, 0, |  X</span></span>\n<span class=\"line\"><span style=\"\"> *                        0, 0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * buffer: 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4</span></span>\n<span class=\"line\"><span style=\"\"> *         |  |  |  |  |  |  |  |  |  |  |  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> *         0, 0, 4, 0, |  |  |  |  |  |  |  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> *                     0, 0, 4, 0, |  |  |  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> *                                 0, 0, 4, 0, |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> *                                             0  0  4</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Pattern is found 3 times, the remaining is 1 which results from</span></span>\n<span class=\"line\"><span style=\"\"> * (max_period * 3) % suffix_period. This value is the index in the</span></span>\n<span class=\"line\"><span style=\"\"> * suffix arrays. The suffix array for a period 4 has the value 4</span></span>\n<span class=\"line\"><span style=\"\"> * at index 1.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/irq/timings.c#L36-L262",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/irq/timings.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * printk the shortest lock dependencies from @leaf to @root.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We have a lock dependency path (from a backwards search) as follow:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    @leaf                                                                 @root</span></span>\n<span class=\"line\"><span style=\"\"> *      |                                                                     |</span></span>\n<span class=\"line\"><span style=\"\"> *      V                                                                     V</span></span>\n<span class=\"line\"><span style=\"\"> *\t          ->parent                                   ->parent</span></span>\n<span class=\"line\"><span style=\"\"> * | lock_list | ---------> | lock_list | ... | lock_list  | ---------> | lock_list |</span></span>\n<span class=\"line\"><span style=\"\"> * | L2 &#x3C;- L1  |            | L3 &#x3C;- L2  | ... | Ln &#x3C;- Ln-1 |            |    &#x3C;- Ln  |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * , so when we iterate from @leaf to @root, we actually print the lock</span></span>\n<span class=\"line\"><span style=\"\"> * dependency path L1 -> L2 -> .. -> Ln in the non-reverse order.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Another thing to notice here is that ->class of L2 &#x3C;- L1 is L1, while the</span></span>\n<span class=\"line\"><span style=\"\"> * ->trace of L2 &#x3C;- L1 is the call trace of L2, in fact we don't have the call</span></span>\n<span class=\"line\"><span style=\"\"> * trace of L1 in the dependency path, which is alright, because most of the</span></span>\n<span class=\"line\"><span style=\"\"> * time we can figure out where L1 is held from the call trace of L2.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/locking/lockdep.c#L2432-L2451",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/kernel/locking/lockdep.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * clear_pending - clear the pending bit.</span></span>\n<span class=\"line\"><span style=\"\"> * @lock: Pointer to queued spinlock structure</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * *,1,* -> *,0,*</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/locking/qspinlock.c#L143-L148",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/locking/qspinlock.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * All this does is approximate the hierarchical proportion which includes that</span></span>\n<span class=\"line\"><span style=\"\"> * global sum we all love to hate.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * That is, the weight of a group entity, is the proportional share of the</span></span>\n<span class=\"line\"><span style=\"\"> * group weight based on the group runqueue weights. That is:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     tg->weight * grq->load.weight</span></span>\n<span class=\"line\"><span style=\"\"> *   ge->load.weight = -----------------------------               (1)</span></span>\n<span class=\"line\"><span style=\"\"> *                       \\Sum grq->load.weight</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Now, because computing that sum is prohibitively expensive to compute (been</span></span>\n<span class=\"line\"><span style=\"\"> * there, done that) we approximate it with this average stuff. The average</span></span>\n<span class=\"line\"><span style=\"\"> * moves slower and therefore the approximation is cheaper and more stable.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * So instead of the above, we substitute:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   grq->load.weight -> grq->avg.load_avg                         (2)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * which yields the following:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     tg->weight * grq->avg.load_avg</span></span>\n<span class=\"line\"><span style=\"\"> *   ge->load.weight = ------------------------------              (3)</span></span>\n<span class=\"line\"><span style=\"\"> *                             tg->load_avg</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Where: tg->load_avg ~= \\Sum grq->avg.load_avg</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * That is shares_avg, and it is right (given the approximation (2)).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The problem with it is that because the average is slow -- it was designed</span></span>\n<span class=\"line\"><span style=\"\"> * to be exactly that of course -- this leads to transients in boundary</span></span>\n<span class=\"line\"><span style=\"\"> * conditions. In specific, the case where the group was idle and we start the</span></span>\n<span class=\"line\"><span style=\"\"> * one task. It takes time for our CPU's grq->avg.load_avg to build up,</span></span>\n<span class=\"line\"><span style=\"\"> * yielding bad latency etc..</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Now, in that special case (1) reduces to:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     tg->weight * grq->load.weight</span></span>\n<span class=\"line\"><span style=\"\"> *   ge->load.weight = ----------------------------- = tg->weight   (4)</span></span>\n<span class=\"line\"><span style=\"\"> *                         grp->load.weight</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * That is, the sum collapses because all other CPUs are idle; the UP scenario.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * So what we do is modify our approximation (3) to approach (4) in the (near)</span></span>\n<span class=\"line\"><span style=\"\"> * UP case, like:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   ge->load.weight =</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *              tg->weight * grq->load.weight</span></span>\n<span class=\"line\"><span style=\"\"> *     ---------------------------------------------------         (5)</span></span>\n<span class=\"line\"><span style=\"\"> *     tg->load_avg - grq->avg.load_avg + grq->load.weight</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * But because grq->load.weight can drop to 0, resulting in a divide by zero,</span></span>\n<span class=\"line\"><span style=\"\"> * we need to use grq->avg.load_avg as its lower bound, which then gives:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     tg->weight * grq->load.weight</span></span>\n<span class=\"line\"><span style=\"\"> *   ge->load.weight = -----------------------------\t\t   (6)</span></span>\n<span class=\"line\"><span style=\"\"> *                             tg_load_avg'</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Where:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   tg_load_avg' = tg->load_avg - grq->avg.load_avg +</span></span>\n<span class=\"line\"><span style=\"\"> *                  max(grq->load.weight, grq->avg.load_avg)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * And that is shares_weight and is icky. In the (near) UP case it approaches</span></span>\n<span class=\"line\"><span style=\"\"> * (4) while in the normal case it approaches (3). It consistently</span></span>\n<span class=\"line\"><span style=\"\"> * overestimates the ge->load.weight and therefore:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   \\Sum ge->load.weight >= tg->weight</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * hence icky!</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/sched/fair.c#L3360-L3432",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/sched/fair.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Handle NO_HZ for the global load-average.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Since the above described distributed algorithm to compute the global</span></span>\n<span class=\"line\"><span style=\"\"> * load-average relies on per-CPU sampling from the tick, it is affected by</span></span>\n<span class=\"line\"><span style=\"\"> * NO_HZ.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The basic idea is to fold the nr_active delta into a global NO_HZ-delta upon</span></span>\n<span class=\"line\"><span style=\"\"> * entering NO_HZ state such that we can include this as an 'extra' CPU delta</span></span>\n<span class=\"line\"><span style=\"\"> * when we read the global state.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Obviously reality has to ruin such a delightfully simple scheme:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - When we go NO_HZ idle during the window, we can negate our sample</span></span>\n<span class=\"line\"><span style=\"\"> *    contribution, causing under-accounting.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    We avoid this by keeping two NO_HZ-delta counters and flipping them</span></span>\n<span class=\"line\"><span style=\"\"> *    when the window starts, thus separating old and new NO_HZ load.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    The only trick is the slight shift in index flip for read vs write.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        0s            5s            10s           15s</span></span>\n<span class=\"line\"><span style=\"\"> *          +10           +10           +10           +10</span></span>\n<span class=\"line\"><span style=\"\"> *        |-|-----------|-|-----------|-|-----------|-|</span></span>\n<span class=\"line\"><span style=\"\"> *    r:0 0 1           1 0           0 1           1 0</span></span>\n<span class=\"line\"><span style=\"\"> *    w:0 1 1           0 0           1 1           0 0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    This ensures we'll fold the old NO_HZ contribution in this window while</span></span>\n<span class=\"line\"><span style=\"\"> *    accumulating the new one.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - When we wake up from NO_HZ during the window, we push up our</span></span>\n<span class=\"line\"><span style=\"\"> *    contribution, since we effectively move our sample point to a known</span></span>\n<span class=\"line\"><span style=\"\"> *    busy state.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    This is solved by pushing the window forward, and thus skipping the</span></span>\n<span class=\"line\"><span style=\"\"> *    sample, for this CPU (effectively using the NO_HZ-delta for this CPU which</span></span>\n<span class=\"line\"><span style=\"\"> *    was in effect at the time the window opened). This also solves the issue</span></span>\n<span class=\"line\"><span style=\"\"> *    of having to deal with a CPU having been in NO_HZ for multiple LOAD_FREQ</span></span>\n<span class=\"line\"><span style=\"\"> *    intervals.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When making the ILB scale, we should try to pull this in as well.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/sched/loadavg.c#L163-L204",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/sched/loadavg.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Accumulate the three separate parts of the sum; d1 the remainder</span></span>\n<span class=\"line\"><span style=\"\"> * of the last (incomplete) period, d2 the span of full periods and d3</span></span>\n<span class=\"line\"><span style=\"\"> * the remainder of the (incomplete) current period.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *           d1          d2           d3</span></span>\n<span class=\"line\"><span style=\"\"> *           ^           ^            ^</span></span>\n<span class=\"line\"><span style=\"\"> *           |           |            |</span></span>\n<span class=\"line\"><span style=\"\"> *         |&#x3C;->|&#x3C;----------------->|&#x3C;--->|</span></span>\n<span class=\"line\"><span style=\"\"> * ... |---x---|------| ... |------|-----x (now)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                           p-1</span></span>\n<span class=\"line\"><span style=\"\"> * u' = (u + d1) y^p + 1024 \\Sum y^n + d3 y^0</span></span>\n<span class=\"line\"><span style=\"\"> *                           n=1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    = u y^p +\t\t\t\t\t(Step 1)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     p-1</span></span>\n<span class=\"line\"><span style=\"\"> *      d1 y^p + 1024 \\Sum y^n + d3 y^0\t\t(Step 2)</span></span>\n<span class=\"line\"><span style=\"\"> *                     n=1</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/sched/pelt.c#L80-L100",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/sched/pelt.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The clock_pelt scales the time to reflect the effective amount of</span></span>\n<span class=\"line\"><span style=\"\"> * computation done during the running delta time but then sync back to</span></span>\n<span class=\"line\"><span style=\"\"> * clock_task when rq is idle.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * absolute time   | 1| 2| 3| 4| 5| 6| 7| 8| 9|10|11|12|13|14|15|16</span></span>\n<span class=\"line\"><span style=\"\"> * @ max capacity  ------******---------------******---------------</span></span>\n<span class=\"line\"><span style=\"\"> * @ half capacity ------************---------************---------</span></span>\n<span class=\"line\"><span style=\"\"> * clock pelt      | 1| 2|    3|    4| 7| 8| 9|   10|   11|14|15|16</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/sched/pelt.h#L83-L94",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/sched/pelt.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * NUMA topology (first read the regular topology blurb below)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Given a node-distance table, for example:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   node   0   1   2   3</span></span>\n<span class=\"line\"><span style=\"\"> *     0:  10  20  30  20</span></span>\n<span class=\"line\"><span style=\"\"> *     1:  20  10  20  30</span></span>\n<span class=\"line\"><span style=\"\"> *     2:  30  20  10  20</span></span>\n<span class=\"line\"><span style=\"\"> *     3:  20  30  20  10</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * which represents a 4 node ring topology like:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   0 ----- 1</span></span>\n<span class=\"line\"><span style=\"\"> *   |       |</span></span>\n<span class=\"line\"><span style=\"\"> *   |       |</span></span>\n<span class=\"line\"><span style=\"\"> *   |       |</span></span>\n<span class=\"line\"><span style=\"\"> *   3 ----- 2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We want to construct domains and groups to represent this. The way we go</span></span>\n<span class=\"line\"><span style=\"\"> * about doing this is to build the domains on 'hops'. For each NUMA level we</span></span>\n<span class=\"line\"><span style=\"\"> * construct the mask of all nodes reachable in @level hops.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For the above NUMA topology that gives 3 levels:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NUMA-2\t0-3\t\t0-3\t\t0-3\t\t0-3</span></span>\n<span class=\"line\"><span style=\"\"> *  groups:\t{0-1,3},{1-3}\t{0-2},{0,2-3}\t{1-3},{0-1,3}\t{0,2-3},{0-2}</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NUMA-1\t0-1,3\t\t0-2\t\t1-3\t\t0,2-3</span></span>\n<span class=\"line\"><span style=\"\"> *  groups:\t{0},{1},{3}\t{0},{1},{2}\t{1},{2},{3}\t{0},{2},{3}</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NUMA-0\t0\t\t1\t\t2\t\t3</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * As can be seen; things don't nicely line up as with the regular topology.</span></span>\n<span class=\"line\"><span style=\"\"> * When we iterate a domain in child domain chunks some nodes can be</span></span>\n<span class=\"line\"><span style=\"\"> * represented multiple times -- hence the \"overlap\" naming for this part of</span></span>\n<span class=\"line\"><span style=\"\"> * the topology.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In order to minimize this overlap, we only build enough groups to cover the</span></span>\n<span class=\"line\"><span style=\"\"> * domain. For instance Node-0 NUMA-2 would only get groups: 0-1,3 and 1-3.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Because:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - the first group of each domain is its child domain; this</span></span>\n<span class=\"line\"><span style=\"\"> *    gets us the first 0-1,3</span></span>\n<span class=\"line\"><span style=\"\"> *  - the only uncovered node is 2, who's child domain is 1-3.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * However, because of the overlap, computing a unique CPU for each group is</span></span>\n<span class=\"line\"><span style=\"\"> * more complicated. Consider for instance the groups of NODE-1 NUMA-2, both</span></span>\n<span class=\"line\"><span style=\"\"> * groups include the CPUs of Node-0, while those CPUs would not in fact ever</span></span>\n<span class=\"line\"><span style=\"\"> * end up at those groups (they would end up in group: 0-1,3).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To correct this we have to introduce the group balance mask. This mask</span></span>\n<span class=\"line\"><span style=\"\"> * will contain those CPUs in the group that can reach this group given the</span></span>\n<span class=\"line\"><span style=\"\"> * (child) domain tree.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * With this we can once again compute balance_cpu and sched_group_capacity</span></span>\n<span class=\"line\"><span style=\"\"> * relations.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * XXX include words on how balance_cpu is unique and therefore can be</span></span>\n<span class=\"line\"><span style=\"\"> * used for sched_group_capacity links.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Another 'interesting' topology is:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   node   0   1   2   3</span></span>\n<span class=\"line\"><span style=\"\"> *     0:  10  20  20  30</span></span>\n<span class=\"line\"><span style=\"\"> *     1:  20  10  20  20</span></span>\n<span class=\"line\"><span style=\"\"> *     2:  20  20  10  20</span></span>\n<span class=\"line\"><span style=\"\"> *     3:  30  20  20  10</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Which looks a little like:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   0 ----- 1</span></span>\n<span class=\"line\"><span style=\"\"> *   |     / |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   /   |</span></span>\n<span class=\"line\"><span style=\"\"> *   | /     |</span></span>\n<span class=\"line\"><span style=\"\"> *   2 ----- 3</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This topology is asymmetric, nodes 1,2 are fully connected, but nodes 0,3</span></span>\n<span class=\"line\"><span style=\"\"> * are not.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This leads to a few particularly weird cases where the sched_domain's are</span></span>\n<span class=\"line\"><span style=\"\"> * not of the same number for each CPU. Consider:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NUMA-2\t0-3\t\t\t\t\t\t0-3</span></span>\n<span class=\"line\"><span style=\"\"> *  groups:\t{0-2},{1-3}\t\t\t\t\t{1-3},{0-2}</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NUMA-1\t0-2\t\t0-3\t\t0-3\t\t1-3</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NUMA-0\t0\t\t1\t\t2\t\t3</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/sched/topology.c#L792-L885",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/sched/topology.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * ktime_get_mono_fast_ns - Fast NMI safe access to clock monotonic</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This timestamp is not guaranteed to be monotonic across an update.</span></span>\n<span class=\"line\"><span style=\"\"> * The timestamp is calculated by:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tnow = base_mono + clock_delta * slope</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * So if the update lowers the slope, readers who are forced to the</span></span>\n<span class=\"line\"><span style=\"\"> * not yet updated second array are still using the old steeper slope.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * tmono</span></span>\n<span class=\"line\"><span style=\"\"> * ^</span></span>\n<span class=\"line\"><span style=\"\"> * |    o  n</span></span>\n<span class=\"line\"><span style=\"\"> * |   o n</span></span>\n<span class=\"line\"><span style=\"\"> * |  u</span></span>\n<span class=\"line\"><span style=\"\"> * | o</span></span>\n<span class=\"line\"><span style=\"\"> * |o</span></span>\n<span class=\"line\"><span style=\"\"> * |12345678---> reader order</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * o = old slope</span></span>\n<span class=\"line\"><span style=\"\"> * u = update</span></span>\n<span class=\"line\"><span style=\"\"> * n = new slope</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * So reader 6 will observe time going backwards versus reader 5.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * While other CPUs are likely to be able to observe that, the only way</span></span>\n<span class=\"line\"><span style=\"\"> * for a CPU local observation is when an NMI hits in the middle of</span></span>\n<span class=\"line\"><span style=\"\"> * the update. Timestamps taken from that NMI context might be ahead</span></span>\n<span class=\"line\"><span style=\"\"> * of the following timestamps. Callers need to be aware of that and</span></span>\n<span class=\"line\"><span style=\"\"> * deal with it.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/time/timekeeping.c#L458-L489",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/time/timekeeping.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The ring buffer is made up of a list of pages. A separate list of pages is</span></span>\n<span class=\"line\"><span style=\"\"> * allocated for each CPU. A writer may only write to a buffer that is</span></span>\n<span class=\"line\"><span style=\"\"> * associated with the CPU it is currently executing on.  A reader may read</span></span>\n<span class=\"line\"><span style=\"\"> * from any per cpu buffer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The reader is special. For each per cpu buffer, the reader has its own</span></span>\n<span class=\"line\"><span style=\"\"> * reader page. When a reader has read the entire reader page, this reader</span></span>\n<span class=\"line\"><span style=\"\"> * page is swapped with another page in the ring buffer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Now, as long as the writer is off the reader page, the reader can do what</span></span>\n<span class=\"line\"><span style=\"\"> * ever it wants with that page. The writer will never write to that page</span></span>\n<span class=\"line\"><span style=\"\"> * again (as long as it is out of the ring buffer).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Here's some silly ASCII art.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   +------+</span></span>\n<span class=\"line\"><span style=\"\"> *   |reader|          RING BUFFER</span></span>\n<span class=\"line\"><span style=\"\"> *   |page  |</span></span>\n<span class=\"line\"><span style=\"\"> *   +------+        +---+   +---+   +---+</span></span>\n<span class=\"line\"><span style=\"\"> *                   |   |-->|   |-->|   |</span></span>\n<span class=\"line\"><span style=\"\"> *                   +---+   +---+   +---+</span></span>\n<span class=\"line\"><span style=\"\"> *                     ^               |</span></span>\n<span class=\"line\"><span style=\"\"> *                     |               |</span></span>\n<span class=\"line\"><span style=\"\"> *                     +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   +------+</span></span>\n<span class=\"line\"><span style=\"\"> *   |reader|          RING BUFFER</span></span>\n<span class=\"line\"><span style=\"\"> *   |page  |------------------v</span></span>\n<span class=\"line\"><span style=\"\"> *   +------+        +---+   +---+   +---+</span></span>\n<span class=\"line\"><span style=\"\"> *                   |   |-->|   |-->|   |</span></span>\n<span class=\"line\"><span style=\"\"> *                   +---+   +---+   +---+</span></span>\n<span class=\"line\"><span style=\"\"> *                     ^               |</span></span>\n<span class=\"line\"><span style=\"\"> *                     |               |</span></span>\n<span class=\"line\"><span style=\"\"> *                     +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   +------+</span></span>\n<span class=\"line\"><span style=\"\"> *   |reader|          RING BUFFER</span></span>\n<span class=\"line\"><span style=\"\"> *   |page  |------------------v</span></span>\n<span class=\"line\"><span style=\"\"> *   +------+        +---+   +---+   +---+</span></span>\n<span class=\"line\"><span style=\"\"> *      ^            |   |-->|   |-->|   |</span></span>\n<span class=\"line\"><span style=\"\"> *      |            +---+   +---+   +---+</span></span>\n<span class=\"line\"><span style=\"\"> *      |                              |</span></span>\n<span class=\"line\"><span style=\"\"> *      |                              |</span></span>\n<span class=\"line\"><span style=\"\"> *      +------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   +------+</span></span>\n<span class=\"line\"><span style=\"\"> *   |buffer|          RING BUFFER</span></span>\n<span class=\"line\"><span style=\"\"> *   |page  |------------------v</span></span>\n<span class=\"line\"><span style=\"\"> *   +------+        +---+   +---+   +---+</span></span>\n<span class=\"line\"><span style=\"\"> *      ^            |   |   |   |-->|   |</span></span>\n<span class=\"line\"><span style=\"\"> *      |   New      +---+   +---+   +---+</span></span>\n<span class=\"line\"><span style=\"\"> *      |  Reader------^               |</span></span>\n<span class=\"line\"><span style=\"\"> *      |   page                       |</span></span>\n<span class=\"line\"><span style=\"\"> *      +------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * After we make this swap, the reader can hand this page off to the splice</span></span>\n<span class=\"line\"><span style=\"\"> * code and be done with it. It can even allocate a new page if it needs to</span></span>\n<span class=\"line\"><span style=\"\"> * and swap that into the ring buffer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We will be using cmpxchg soon to make all this lockless.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/kernel/trace/ring_buffer.c#L64-L130",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/kernel/trace/ring_buffer.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * eBPF prog stack layout:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                        high</span></span>\n<span class=\"line\"><span style=\"\"> * original $sp ------------> +-------------------------+ &#x3C;--LOONGARCH_GPR_FP</span></span>\n<span class=\"line\"><span style=\"\"> *                            |           $ra           |</span></span>\n<span class=\"line\"><span style=\"\"> *                            +-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                            |           $fp           |</span></span>\n<span class=\"line\"><span style=\"\"> *                            +-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                            |           $s0           |</span></span>\n<span class=\"line\"><span style=\"\"> *                            +-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                            |           $s1           |</span></span>\n<span class=\"line\"><span style=\"\"> *                            +-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                            |           $s2           |</span></span>\n<span class=\"line\"><span style=\"\"> *                            +-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                            |           $s3           |</span></span>\n<span class=\"line\"><span style=\"\"> *                            +-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                            |           $s4           |</span></span>\n<span class=\"line\"><span style=\"\"> *                            +-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                            |           $s5           |</span></span>\n<span class=\"line\"><span style=\"\"> *                            +-------------------------+ &#x3C;--BPF_REG_FP</span></span>\n<span class=\"line\"><span style=\"\"> *                            |  prog->aux->stack_depth |</span></span>\n<span class=\"line\"><span style=\"\"> *                            |        (optional)       |</span></span>\n<span class=\"line\"><span style=\"\"> * current $sp -------------> +-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                        low</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/loongarch/net/bpf_jit.c#L63-L88",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/loongarch/net/bpf_jit.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Allocator uses a trailing node argument --------+  (e.g. kmalloc_node())</span></span>\n<span class=\"line\"><span style=\"\"> * Allocator uses the gfp_t argument -----------+  |  (e.g. kmalloc())</span></span>\n<span class=\"line\"><span style=\"\"> * Allocator uses a special leading argument +  |  |  (e.g. devm_kmalloc())</span></span>\n<span class=\"line\"><span style=\"\"> *                                           |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/lib/overflow_kunit.c#L591-L596",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/lib/overflow_kunit.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Set up a sequence of staggered jumps, forwards and backwards with</span></span>\n<span class=\"line\"><span style=\"\"> * increasing offset. This tests the conversion of relative jumps to</span></span>\n<span class=\"line\"><span style=\"\"> * JITed native jumps. On some architectures, for example MIPS, a large</span></span>\n<span class=\"line\"><span style=\"\"> * PC-relative jump offset may overflow the immediate field of the native</span></span>\n<span class=\"line\"><span style=\"\"> * conditional branch instruction, triggering a conversion to use an</span></span>\n<span class=\"line\"><span style=\"\"> * absolute jump instead. Since this changes the jump offsets, another</span></span>\n<span class=\"line\"><span style=\"\"> * offset computation pass is necessary, and that may in turn trigger</span></span>\n<span class=\"line\"><span style=\"\"> * another branch conversion. This jump sequence is particularly nasty</span></span>\n<span class=\"line\"><span style=\"\"> * in that regard.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The sequence generation is parameterized by size and jump type.</span></span>\n<span class=\"line\"><span style=\"\"> * The size must be even, and the expected result is always size + 1.</span></span>\n<span class=\"line\"><span style=\"\"> * Below is an example with size=8 and result=9.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     ________________________Start</span></span>\n<span class=\"line\"><span style=\"\"> *                     R0 = 0</span></span>\n<span class=\"line\"><span style=\"\"> *                     R1 = r1</span></span>\n<span class=\"line\"><span style=\"\"> *                     R2 = r2</span></span>\n<span class=\"line\"><span style=\"\"> *            ,------- JMP +4 * 3______________Preamble: 4 insns</span></span>\n<span class=\"line\"><span style=\"\"> * ,----------|-ind 0- if R0 != 7 JMP 8 * 3 + 1 &#x3C;--------------------.</span></span>\n<span class=\"line\"><span style=\"\"> * |          |        R0 = 8                                        |</span></span>\n<span class=\"line\"><span style=\"\"> * |          |        JMP +7 * 3               ------------------------.</span></span>\n<span class=\"line\"><span style=\"\"> * | ,--------|-----1- if R0 != 5 JMP 7 * 3 + 1 &#x3C;--------------.     |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | |        |        R0 = 6                                  |     |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | |        |        JMP +5 * 3               ------------------.  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | ,------|-----2- if R0 != 3 JMP 6 * 3 + 1 &#x3C;--------.     |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | |      |        R0 = 4                            |     |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | |      |        JMP +3 * 3               ------------.  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | ,----|-----3- if R0 != 1 JMP 5 * 3 + 1 &#x3C;--.     |  |  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | |    |        R0 = 2                      |     |  |  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | |    |        JMP +1 * 3               ------.  |  |  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | ,--t=====4> if R0 != 0 JMP 4 * 3 + 1    1  2  3  4  5  6  7  8 loc</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | |           R0 = 1                     -1 +2 -3 +4 -5 +6 -7 +8 off</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | |           JMP -2 * 3               ---'  |  |  |  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | | ,------5- if R0 != 2 JMP 3 * 3 + 1 &#x3C;-----'  |  |  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | | |         R0 = 3                            |  |  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | | |         JMP -4 * 3               ---------'  |  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | | | ,----6- if R0 != 4 JMP 2 * 3 + 1 &#x3C;-----------'  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | | | |       R0 = 5                                  |  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | | | |       JMP -6 * 3               ---------------'  |  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | | | | ,--7- if R0 != 6 JMP 1 * 3 + 1 &#x3C;-----------------'  |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | | | | |     R0 = 7                                        |  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | Error | | |     JMP -8 * 3               ---------------------'  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | paths | | | ,8- if R0 != 8 JMP 0 * 3 + 1 &#x3C;-----------------------'</span></span>\n<span class=\"line\"><span style=\"\"> * | | | | | | | | |   R0 = 9__________________Sequence: 3 * size - 1 insns</span></span>\n<span class=\"line\"><span style=\"\"> * `-+-+-+-+-+-+-+-+-> EXIT____________________Return: 1 insn</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/lib/test_bpf.c#L2642-L2690",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/lib/test_bpf.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * DOC: ts_intro</span></span>\n<span class=\"line\"><span style=\"\"> * INTRODUCTION</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   The textsearch infrastructure provides text searching facilities for</span></span>\n<span class=\"line\"><span style=\"\"> *   both linear and non-linear data. Individual search algorithms are</span></span>\n<span class=\"line\"><span style=\"\"> *   implemented in modules and chosen by the user.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ARCHITECTURE</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * .. code-block:: none</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     User</span></span>\n<span class=\"line\"><span style=\"\"> *     +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *     |        finish()|&#x3C;--------------(6)-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *     |get_next_block()|&#x3C;--------------(5)---------------+ |</span></span>\n<span class=\"line\"><span style=\"\"> *     |                |                     Algorithm   | |</span></span>\n<span class=\"line\"><span style=\"\"> *     |                |                    +------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *     |                |                    |  init()   find()   destroy() |</span></span>\n<span class=\"line\"><span style=\"\"> *     |                |                    +------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *     |                |       Core API           ^       ^          ^</span></span>\n<span class=\"line\"><span style=\"\"> *     |                |      +---------------+  (2)     (4)        (8)</span></span>\n<span class=\"line\"><span style=\"\"> *     |             (1)|----->| prepare()     |---+       |          |</span></span>\n<span class=\"line\"><span style=\"\"> *     |             (3)|----->| find()/next() |-----------+          |</span></span>\n<span class=\"line\"><span style=\"\"> *     |             (7)|----->| destroy()     |----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *     +----------------+      +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   (1) User configures a search by calling textsearch_prepare() specifying</span></span>\n<span class=\"line\"><span style=\"\"> *       the search parameters such as the pattern and algorithm name.</span></span>\n<span class=\"line\"><span style=\"\"> *   (2) Core requests the algorithm to allocate and initialize a search</span></span>\n<span class=\"line\"><span style=\"\"> *       configuration according to the specified parameters.</span></span>\n<span class=\"line\"><span style=\"\"> *   (3) User starts the search(es) by calling textsearch_find() or</span></span>\n<span class=\"line\"><span style=\"\"> *       textsearch_next() to fetch subsequent occurrences. A state variable</span></span>\n<span class=\"line\"><span style=\"\"> *       is provided to the algorithm to store persistent variables.</span></span>\n<span class=\"line\"><span style=\"\"> *   (4) Core eventually resets the search offset and forwards the find()</span></span>\n<span class=\"line\"><span style=\"\"> *       request to the algorithm.</span></span>\n<span class=\"line\"><span style=\"\"> *   (5) Algorithm calls get_next_block() provided by the user continuously</span></span>\n<span class=\"line\"><span style=\"\"> *       to fetch the data to be searched in block by block.</span></span>\n<span class=\"line\"><span style=\"\"> *   (6) Algorithm invokes finish() after the last call to get_next_block</span></span>\n<span class=\"line\"><span style=\"\"> *       to clean up any leftovers from get_next_block. (Optional)</span></span>\n<span class=\"line\"><span style=\"\"> *   (7) User destroys the configuration by calling textsearch_destroy().</span></span>\n<span class=\"line\"><span style=\"\"> *   (8) Core notifies the algorithm to destroy algorithm specific</span></span>\n<span class=\"line\"><span style=\"\"> *       allocations. (Optional)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * USAGE</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   Before a search can be performed, a configuration must be created</span></span>\n<span class=\"line\"><span style=\"\"> *   by calling textsearch_prepare() specifying the searching algorithm,</span></span>\n<span class=\"line\"><span style=\"\"> *   the pattern to look for and flags. As a flag, you can set TS_IGNORECASE</span></span>\n<span class=\"line\"><span style=\"\"> *   to perform case insensitive matching. But it might slow down</span></span>\n<span class=\"line\"><span style=\"\"> *   performance of algorithm, so you should use it at own your risk.</span></span>\n<span class=\"line\"><span style=\"\"> *   The returned configuration may then be used for an arbitrary</span></span>\n<span class=\"line\"><span style=\"\"> *   amount of times and even in parallel as long as a separate struct</span></span>\n<span class=\"line\"><span style=\"\"> *   ts_state variable is provided to every instance.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   The actual search is performed by either calling</span></span>\n<span class=\"line\"><span style=\"\"> *   textsearch_find_continuous() for linear data or by providing</span></span>\n<span class=\"line\"><span style=\"\"> *   an own get_next_block() implementation and</span></span>\n<span class=\"line\"><span style=\"\"> *   calling textsearch_find(). Both functions return</span></span>\n<span class=\"line\"><span style=\"\"> *   the position of the first occurrence of the pattern or UINT_MAX if</span></span>\n<span class=\"line\"><span style=\"\"> *   no match was found. Subsequent occurrences can be found by calling</span></span>\n<span class=\"line\"><span style=\"\"> *   textsearch_next() regardless of the linearity of the data.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   Once you're done using a configuration it must be given back via</span></span>\n<span class=\"line\"><span style=\"\"> *   textsearch_destroy.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * EXAMPLE::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   int pos;</span></span>\n<span class=\"line\"><span style=\"\"> *   struct ts_config *conf;</span></span>\n<span class=\"line\"><span style=\"\"> *   struct ts_state state;</span></span>\n<span class=\"line\"><span style=\"\"> *   const char *pattern = \"chicken\";</span></span>\n<span class=\"line\"><span style=\"\"> *   const char *example = \"We dance the funky chicken\";</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   conf = textsearch_prepare(\"kmp\", pattern, strlen(pattern),</span></span>\n<span class=\"line\"><span style=\"\"> *                             GFP_KERNEL, TS_AUTOLOAD);</span></span>\n<span class=\"line\"><span style=\"\"> *   if (IS_ERR(conf)) {</span></span>\n<span class=\"line\"><span style=\"\"> *       err = PTR_ERR(conf);</span></span>\n<span class=\"line\"><span style=\"\"> *       goto errout;</span></span>\n<span class=\"line\"><span style=\"\"> *   }</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   pos = textsearch_find_continuous(conf, &#x26;state, example, strlen(example));</span></span>\n<span class=\"line\"><span style=\"\"> *   if (pos != UINT_MAX)</span></span>\n<span class=\"line\"><span style=\"\"> *       panic(\"Oh my god, dancing chickens at %d\\n\", pos);</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   textsearch_destroy(conf);</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/lib/textsearch.c#L11-L97",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/lib/textsearch.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\">    State transitions between above modes -</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">    (most modes can go to the BAD or MEM mode -- not shown for clarity)</span></span>\n<span class=\"line\"><span style=\"\">    Process header:</span></span>\n<span class=\"line\"><span style=\"\">        HEAD -> (gzip) or (zlib)</span></span>\n<span class=\"line\"><span style=\"\">        (gzip) -> FLAGS -> TIME -> OS -> EXLEN -> EXTRA -> NAME</span></span>\n<span class=\"line\"><span style=\"\">        NAME -> COMMENT -> HCRC -> TYPE</span></span>\n<span class=\"line\"><span style=\"\">        (zlib) -> DICTID or TYPE</span></span>\n<span class=\"line\"><span style=\"\">        DICTID -> DICT -> TYPE</span></span>\n<span class=\"line\"><span style=\"\">    Read deflate blocks:</span></span>\n<span class=\"line\"><span style=\"\">            TYPE -> STORED or TABLE or LEN or CHECK</span></span>\n<span class=\"line\"><span style=\"\">            STORED -> COPY -> TYPE</span></span>\n<span class=\"line\"><span style=\"\">            TABLE -> LENLENS -> CODELENS -> LEN</span></span>\n<span class=\"line\"><span style=\"\">    Read deflate codes:</span></span>\n<span class=\"line\"><span style=\"\">                LEN -> LENEXT or LIT or TYPE</span></span>\n<span class=\"line\"><span style=\"\">                LENEXT -> DIST -> DISTEXT -> MATCH -> LEN</span></span>\n<span class=\"line\"><span style=\"\">                LIT -> LEN</span></span>\n<span class=\"line\"><span style=\"\">    Process trailer:</span></span>\n<span class=\"line\"><span style=\"\">        CHECK -> LENGTH -> DONE</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/lib/zlib_inflate/inflate.h#L50-L71",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/lib/zlib_inflate/inflate.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * CD/DVDs are error prone. When a medium error occurs, the driver may fail</span></span>\n<span class=\"line\"><span style=\"\"> * a _large_ part of the i/o request. Imagine the worst scenario:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      ---R__________________________________________B__________</span></span>\n<span class=\"line\"><span style=\"\"> *         ^ reading here                             ^ bad block(assume 4k)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * read(R) => miss => readahead(R...B) => media error => frustrating retries</span></span>\n<span class=\"line\"><span style=\"\"> * => failing the whole request => read(R) => read(R+1) =></span></span>\n<span class=\"line\"><span style=\"\"> * readahead(R+1...B+1) => bang => read(R+2) => read(R+3) =></span></span>\n<span class=\"line\"><span style=\"\"> * readahead(R+3...B+2) => bang => read(R+3) => read(R+4) =></span></span>\n<span class=\"line\"><span style=\"\"> * readahead(R+4...B+3) => bang => read(R+4) => read(R+5) => ......</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * It is going insane. Fix it by quickly scaling down the readahead size.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/mm/filemap.c#L2344-L2358",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/mm/filemap.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *                           setpoint - dirty 3</span></span>\n<span class=\"line\"><span style=\"\"> *        f(dirty) := 1.0 + (----------------)</span></span>\n<span class=\"line\"><span style=\"\"> *                           limit - setpoint</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * it's a 3rd order polynomial that subjects to</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (1) f(freerun)  = 2.0 => rampup dirty_ratelimit reasonably fast</span></span>\n<span class=\"line\"><span style=\"\"> * (2) f(setpoint) = 1.0 => the balance point</span></span>\n<span class=\"line\"><span style=\"\"> * (3) f(limit)    = 0   => the hard limit</span></span>\n<span class=\"line\"><span style=\"\"> * (4) df/dx      &#x3C;= 0\t => negative feedback control</span></span>\n<span class=\"line\"><span style=\"\"> * (5) the closer to setpoint, the smaller |df/dx| (and the reverse)</span></span>\n<span class=\"line\"><span style=\"\"> *     => fast response on large errors; small oscillation near setpoint</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/mm/page-writeback.c#L895-L908",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/mm/page-writeback.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * This function populates subtree_max_size from bottom to upper</span></span>\n<span class=\"line\"><span style=\"\"> * levels starting from VA point. The propagation must be done</span></span>\n<span class=\"line\"><span style=\"\"> * when VA size is modified by changing its va_start/va_end. Or</span></span>\n<span class=\"line\"><span style=\"\"> * in case of newly inserting of VA to the tree.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * It means that __augment_tree_propagate_from() must be called:</span></span>\n<span class=\"line\"><span style=\"\"> * - After VA has been inserted to the tree(free path);</span></span>\n<span class=\"line\"><span style=\"\"> * - After VA has been shrunk(allocation path);</span></span>\n<span class=\"line\"><span style=\"\"> * - After VA has been increased(merging path).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Please note that, it does not mean that upper parent nodes</span></span>\n<span class=\"line\"><span style=\"\"> * and their subtree_max_size are recalculated all the time up</span></span>\n<span class=\"line\"><span style=\"\"> * to the root node.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       4--8</span></span>\n<span class=\"line\"><span style=\"\"> *        /\\</span></span>\n<span class=\"line\"><span style=\"\"> *       /  \\</span></span>\n<span class=\"line\"><span style=\"\"> *      /    \\</span></span>\n<span class=\"line\"><span style=\"\"> *    2--2  8--8</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For example if we modify the node 4, shrinking it to 2, then</span></span>\n<span class=\"line\"><span style=\"\"> * no any modification is required. If we shrink the node 2 to 1</span></span>\n<span class=\"line\"><span style=\"\"> * its subtree_max_size is updated only, and set to 1. If we shrink</span></span>\n<span class=\"line\"><span style=\"\"> * the node 8 to 6, then its subtree_max_size is set to 6 and parent</span></span>\n<span class=\"line\"><span style=\"\"> * node becomes 4--6.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/mm/vmalloc.c#L1042-L1068",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/mm/vmalloc.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Map a file extent to a stripe unit within an object.</span></span>\n<span class=\"line\"><span style=\"\"> * Fill in objno, offset into object, and object extent length (i.e. the</span></span>\n<span class=\"line\"><span style=\"\"> * number of bytes mapped, less than or equal to @l->stripe_unit).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Example for stripe_count = 3, stripes_per_object = 4:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * blockno   |  0  3  6  9 |  1  4  7 10 |  2  5  8 11 | 12 15 18 21 | 13 16 19</span></span>\n<span class=\"line\"><span style=\"\"> * stripeno  |  0  1  2  3 |  0  1  2  3 |  0  1  2  3 |  4  5  6  7 |  4  5  6</span></span>\n<span class=\"line\"><span style=\"\"> * stripepos |      0      |      1      |      2      |      0      |      1</span></span>\n<span class=\"line\"><span style=\"\"> * objno     |      0      |      1      |      2      |      3      |      4</span></span>\n<span class=\"line\"><span style=\"\"> * objsetno  |                    0                    |                    1</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/ceph/striper.c#L11-L23",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/ceph/striper.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* To define the outgoing port and to discover the incoming port a regular</span></span>\n<span class=\"line\"><span style=\"\"> * VLAN tag is used by the LAN9303. But its VID meaning is 'special':</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       Dest MAC       Src MAC        TAG    Type</span></span>\n<span class=\"line\"><span style=\"\"> * ...| 1 2 3 4 5 6 | 1 2 3 4 5 6 | 1 2 3 4 | 1 2 |...</span></span>\n<span class=\"line\"><span style=\"\"> *                                |&#x3C;------->|</span></span>\n<span class=\"line\"><span style=\"\"> * TAG:</span></span>\n<span class=\"line\"><span style=\"\"> *    |&#x3C;------------->|</span></span>\n<span class=\"line\"><span style=\"\"> *    |  1  2 | 3  4  |</span></span>\n<span class=\"line\"><span style=\"\"> *      TPID    VID</span></span>\n<span class=\"line\"><span style=\"\"> *     0x8100</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * VID bit 3 indicates a request for an ALR lookup.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If VID bit 3 is zero, then bits 0 and 1 specify the destination port</span></span>\n<span class=\"line\"><span style=\"\"> * (0, 1, 2) or broadcast (3) or the source port (1, 2).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * VID bit 4 is used to specify if the STP port state should be overridden.</span></span>\n<span class=\"line\"><span style=\"\"> * Required when no forwarding between the external ports should happen.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/dsa/tag_lan9303.c#L12-L31",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/dsa/tag_lan9303.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * NOTES about DMA transfers:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  controller 1: channels 0-3, byte operations, ports 00-1F</span></span>\n<span class=\"line\"><span style=\"\"> *  controller 2: channels 4-7, word operations, ports C0-DF</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - ALL registers are 8 bits only, regardless of transfer size</span></span>\n<span class=\"line\"><span style=\"\"> *  - channel 4 is not used - cascades 1 into 2.</span></span>\n<span class=\"line\"><span style=\"\"> *  - channels 0-3 are byte - addresses/counts are for physical bytes</span></span>\n<span class=\"line\"><span style=\"\"> *  - channels 5-7 are word - addresses/counts are for physical words</span></span>\n<span class=\"line\"><span style=\"\"> *  - transfers must not cross physical 64K (0-3) or 128K (5-7) boundaries</span></span>\n<span class=\"line\"><span style=\"\"> *  - transfer count loaded to registers is 1 less than actual count</span></span>\n<span class=\"line\"><span style=\"\"> *  - controller 2 offsets are all even (2x offsets for controller 1)</span></span>\n<span class=\"line\"><span style=\"\"> *  - page registers for 5-7 don't use data bit 0, represent 128K pages</span></span>\n<span class=\"line\"><span style=\"\"> *  - page registers for 0-3 use bit 0, represent 64K pages</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * DMA transfers are limited to the lower 16MB of _physical_ memory.</span></span>\n<span class=\"line\"><span style=\"\"> * Note that addresses loaded into registers must be _physical_ addresses,</span></span>\n<span class=\"line\"><span style=\"\"> * not logical addresses (which may differ if paging is active).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Address mapping for channels 0-3:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   A23 ... A16 A15 ... A8  A7 ... A0\t  (Physical addresses)</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t ...  |\t  |  ... |   |\t... |</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t ...  |\t  |  ... |   |\t... |</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t ...  |\t  |  ... |   |\t... |</span></span>\n<span class=\"line\"><span style=\"\"> *   P7\t ...  P0  A7 ... A0  A7 ... A0</span></span>\n<span class=\"line\"><span style=\"\"> * |\tPage\t| Addr MSB | Addr LSB |\t  (DMA registers)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Address mapping for channels 5-7:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   A23 ... A17 A16 A15 ... A9 A8 A7 ... A1 A0\t   (Physical addresses)</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t ...  |\t  \\   \\\t  ... \\\t \\  \\  ... \\  \\</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t ...  |\t   \\   \\   ... \\  \\  \\\t... \\  (not used)</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t ...  |\t    \\\t\\   ... \\  \\  \\\t ... \\</span></span>\n<span class=\"line\"><span style=\"\"> *   P7\t ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0</span></span>\n<span class=\"line\"><span style=\"\"> * |\t  Page\t    |  Addr MSB\t  |  Addr LSB  |   (DMA registers)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Again, channels 5-7 transfer _physical_ words (16 bits), so addresses</span></span>\n<span class=\"line\"><span style=\"\"> * and counts _must_ be word-aligned (the lowest address bit is _ignored_ at</span></span>\n<span class=\"line\"><span style=\"\"> * the hardware level, so odd-byte transfers aren't possible).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Transfer count (_not # bytes_) is limited to 64K, represented as actual</span></span>\n<span class=\"line\"><span style=\"\"> * count - 1 : 64K => 0xFFFF, 1 => 0x0000.  Thus, count is always 1 or more,</span></span>\n<span class=\"line\"><span style=\"\"> * and up to 128K bytes may be transferred on channels 5-7 in one operation.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/mips/include/asm/dma.h#L29-L75",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/mips/include/asm/dma.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Bottleneck Bandwidth and RTT (BBR) congestion control</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * BBR congestion control computes the sending rate based on the delivery</span></span>\n<span class=\"line\"><span style=\"\"> * rate (throughput) estimated from ACKs. In a nutshell:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   On each ACK, update our model of the network path:</span></span>\n<span class=\"line\"><span style=\"\"> *      bottleneck_bandwidth = windowed_max(delivered / elapsed, 10 round trips)</span></span>\n<span class=\"line\"><span style=\"\"> *      min_rtt = windowed_min(rtt, 10 seconds)</span></span>\n<span class=\"line\"><span style=\"\"> *   pacing_rate = pacing_gain * bottleneck_bandwidth</span></span>\n<span class=\"line\"><span style=\"\"> *   cwnd = max(cwnd_gain * bottleneck_bandwidth * min_rtt, 4)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The core algorithm does not react directly to packet losses or delays,</span></span>\n<span class=\"line\"><span style=\"\"> * although BBR may adjust the size of next send per ACK when loss is</span></span>\n<span class=\"line\"><span style=\"\"> * observed, or adjust the sending rate if it estimates there is a</span></span>\n<span class=\"line\"><span style=\"\"> * traffic policer, in order to keep the drop rate reasonable.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Here is a state transition diagram for BBR:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *             |</span></span>\n<span class=\"line\"><span style=\"\"> *             V</span></span>\n<span class=\"line\"><span style=\"\"> *    +---> STARTUP  ----+</span></span>\n<span class=\"line\"><span style=\"\"> *    |        |         |</span></span>\n<span class=\"line\"><span style=\"\"> *    |        V         |</span></span>\n<span class=\"line\"><span style=\"\"> *    |      DRAIN   ----+</span></span>\n<span class=\"line\"><span style=\"\"> *    |        |         |</span></span>\n<span class=\"line\"><span style=\"\"> *    |        V         |</span></span>\n<span class=\"line\"><span style=\"\"> *    +---> PROBE_BW ----+</span></span>\n<span class=\"line\"><span style=\"\"> *    |      ^    |      |</span></span>\n<span class=\"line\"><span style=\"\"> *    |      |    |      |</span></span>\n<span class=\"line\"><span style=\"\"> *    |      +----+      |</span></span>\n<span class=\"line\"><span style=\"\"> *    |                  |</span></span>\n<span class=\"line\"><span style=\"\"> *    +---- PROBE_RTT &#x3C;--+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * A BBR flow starts in STARTUP, and ramps up its sending rate quickly.</span></span>\n<span class=\"line\"><span style=\"\"> * When it estimates the pipe is full, it enters DRAIN to drain the queue.</span></span>\n<span class=\"line\"><span style=\"\"> * In steady state a BBR flow only uses PROBE_BW and PROBE_RTT.</span></span>\n<span class=\"line\"><span style=\"\"> * A long-lived BBR flow spends the vast majority of its time remaining</span></span>\n<span class=\"line\"><span style=\"\"> * (repeatedly) in PROBE_BW, fully probing and utilizing the pipe's bandwidth</span></span>\n<span class=\"line\"><span style=\"\"> * in a fair manner, with a small, bounded queue. *If* a flow has been</span></span>\n<span class=\"line\"><span style=\"\"> * continuously sending for the entire min_rtt window, and hasn't seen an RTT</span></span>\n<span class=\"line\"><span style=\"\"> * sample that matches or decreases its min_rtt estimate for 10 seconds, then</span></span>\n<span class=\"line\"><span style=\"\"> * it briefly enters PROBE_RTT to cut inflight to a minimum value to re-probe</span></span>\n<span class=\"line\"><span style=\"\"> * the path's two-way propagation delay (min_rtt). When exiting PROBE_RTT, if</span></span>\n<span class=\"line\"><span style=\"\"> * we estimated that we reached the full bw of the pipe then we enter PROBE_BW;</span></span>\n<span class=\"line\"><span style=\"\"> * otherwise we enter STARTUP to try to fill the pipe.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * BBR is described in detail in:</span></span>\n<span class=\"line\"><span style=\"\"> *   \"BBR: Congestion-Based Congestion Control\",</span></span>\n<span class=\"line\"><span style=\"\"> *   Neal Cardwell, Yuchung Cheng, C. Stephen Gunn, Soheil Hassas Yeganeh,</span></span>\n<span class=\"line\"><span style=\"\"> *   Van Jacobson. ACM Queue, Vol. 14 No. 5, September-October 2016.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There is a public e-mail list for discussing BBR development and testing:</span></span>\n<span class=\"line\"><span style=\"\"> *   https://groups.google.com/forum/#!forum/bbr-dev</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NOTE: BBR might be used with the fq qdisc (\"man tc-fq\") with pacing enabled,</span></span>\n<span class=\"line\"><span style=\"\"> * otherwise TCP stack falls back to an internal pacing using one high</span></span>\n<span class=\"line\"><span style=\"\"> * resolution timer per TCP socket and may use more resources.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/ipv4/tcp_bbr.c#L1-L58",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/ipv4/tcp_bbr.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* This procedure tags the retransmission queue when SACKs arrive.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We have three tag bits: SACKED(S), RETRANS(R) and LOST(L).</span></span>\n<span class=\"line\"><span style=\"\"> * Packets in queue with these bits set are counted in variables</span></span>\n<span class=\"line\"><span style=\"\"> * sacked_out, retrans_out and lost_out, correspondingly.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Valid combinations are:</span></span>\n<span class=\"line\"><span style=\"\"> * Tag  InFlight\tDescription</span></span>\n<span class=\"line\"><span style=\"\"> * 0\t1\t\t- orig segment is in flight.</span></span>\n<span class=\"line\"><span style=\"\"> * S\t0\t\t- nothing flies, orig reached receiver.</span></span>\n<span class=\"line\"><span style=\"\"> * L\t0\t\t- nothing flies, orig lost by net.</span></span>\n<span class=\"line\"><span style=\"\"> * R\t2\t\t- both orig and retransmit are in flight.</span></span>\n<span class=\"line\"><span style=\"\"> * L|R\t1\t\t- orig is lost, retransmit is in flight.</span></span>\n<span class=\"line\"><span style=\"\"> * S|R  1\t\t- orig reached receiver, retrans is still in flight.</span></span>\n<span class=\"line\"><span style=\"\"> * (L|S|R is logically valid, it could occur when L|R is sacked,</span></span>\n<span class=\"line\"><span style=\"\"> *  but it is equivalent to plain S and code short-curcuits it to S.</span></span>\n<span class=\"line\"><span style=\"\"> *  L|S is logically invalid, it would mean -1 packet in flight 8))</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * These 6 states form finite state machine, controlled by the following events:</span></span>\n<span class=\"line\"><span style=\"\"> * 1. New ACK (+SACK) arrives. (tcp_sacktag_write_queue())</span></span>\n<span class=\"line\"><span style=\"\"> * 2. Retransmission. (tcp_retransmit_skb(), tcp_xmit_retransmit_queue())</span></span>\n<span class=\"line\"><span style=\"\"> * 3. Loss detection event of two flavors:</span></span>\n<span class=\"line\"><span style=\"\"> *\tA. Scoreboard estimator decided the packet is lost.</span></span>\n<span class=\"line\"><span style=\"\"> *\t   A'. Reno \"three dupacks\" marks head of queue lost.</span></span>\n<span class=\"line\"><span style=\"\"> *\tB. SACK arrives sacking SND.NXT at the moment, when the</span></span>\n<span class=\"line\"><span style=\"\"> *\t   segment was retransmitted.</span></span>\n<span class=\"line\"><span style=\"\"> * 4. D-SACK added new rule: D-SACK changes any tag to S.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * It is pleasant to note, that state diagram turns out to be commutative,</span></span>\n<span class=\"line\"><span style=\"\"> * so that we are allowed not to be bothered by order of our actions,</span></span>\n<span class=\"line\"><span style=\"\"> * when multiple events arrive simultaneously. (see the function below).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Reordering detection.</span></span>\n<span class=\"line\"><span style=\"\"> * --------------------</span></span>\n<span class=\"line\"><span style=\"\"> * Reordering metric is maximal distance, which a packet can be displaced</span></span>\n<span class=\"line\"><span style=\"\"> * in packet stream. With SACKs we can estimate it:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 1. SACK fills old hole and the corresponding segment was not</span></span>\n<span class=\"line\"><span style=\"\"> *    ever retransmitted -> reordering. Alas, we cannot use it</span></span>\n<span class=\"line\"><span style=\"\"> *    when segment was retransmitted.</span></span>\n<span class=\"line\"><span style=\"\"> * 2. The last flaw is solved with D-SACK. D-SACK arrives</span></span>\n<span class=\"line\"><span style=\"\"> *    for retransmitted and already SACKed segment -> reordering..</span></span>\n<span class=\"line\"><span style=\"\"> * Both of these heuristics are not used in Loss state, when we cannot</span></span>\n<span class=\"line\"><span style=\"\"> * account for retransmits accurately.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * SACK block validation.</span></span>\n<span class=\"line\"><span style=\"\"> * ----------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * SACK block range validation checks that the received SACK block fits to</span></span>\n<span class=\"line\"><span style=\"\"> * the expected sequence limits, i.e., it is between SND.UNA and SND.NXT.</span></span>\n<span class=\"line\"><span style=\"\"> * Note that SND.UNA is not included to the range though being valid because</span></span>\n<span class=\"line\"><span style=\"\"> * it means that the receiver is rather inconsistent with itself reporting</span></span>\n<span class=\"line\"><span style=\"\"> * SACK reneging when it should advance SND.UNA. Such SACK block this is</span></span>\n<span class=\"line\"><span style=\"\"> * perfectly valid, however, in light of RFC2018 which explicitly states</span></span>\n<span class=\"line\"><span style=\"\"> * that \"SACK block MUST reflect the newest segment.  Even if the newest</span></span>\n<span class=\"line\"><span style=\"\"> * segment is going to be discarded ...\", not that it looks very clever</span></span>\n<span class=\"line\"><span style=\"\"> * in case of head skb. Due to potentional receiver driven attacks, we</span></span>\n<span class=\"line\"><span style=\"\"> * choose to avoid immediate execution of a walk in write queue due to</span></span>\n<span class=\"line\"><span style=\"\"> * reneging and defer head skb's loss recovery to standard loss recovery</span></span>\n<span class=\"line\"><span style=\"\"> * procedure that will eventually trigger (nothing forbids us doing this).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Implements also blockage to start_seq wrap-around. Problem lies in the</span></span>\n<span class=\"line\"><span style=\"\"> * fact that though start_seq (s) is before end_seq (i.e., not reversed),</span></span>\n<span class=\"line\"><span style=\"\"> * there's no guarantee that it will be before snd_nxt (n). The problem</span></span>\n<span class=\"line\"><span style=\"\"> * happens when start_seq resides between end_seq wrap (e_w) and snd_nxt</span></span>\n<span class=\"line\"><span style=\"\"> * wrap (s_w):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         &#x3C;- outs wnd ->                          &#x3C;- wrapzone -></span></span>\n<span class=\"line\"><span style=\"\"> *         u     e      n                         u_w   e_w  s n_w</span></span>\n<span class=\"line\"><span style=\"\"> *         |     |      |                          |     |   |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |&#x3C;------------+------+----- TCP seqno space --------------+---------->|</span></span>\n<span class=\"line\"><span style=\"\"> * ...-- &#x3C;2^31 ->|                                           |&#x3C;--------...</span></span>\n<span class=\"line\"><span style=\"\"> * ...---- >2^31 ------>|                                    |&#x3C;--------...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Current code wouldn't be vulnerable but it's better still to discard such</span></span>\n<span class=\"line\"><span style=\"\"> * crazy SACK blocks. Doing this check for start_seq alone closes somewhat</span></span>\n<span class=\"line\"><span style=\"\"> * similar case (end_seq after snd_nxt wrap) as earlier reversed check in</span></span>\n<span class=\"line\"><span style=\"\"> * snd_nxt wrap -> snd_una region will then become \"well defined\", i.e.,</span></span>\n<span class=\"line\"><span style=\"\"> * equal to the ideal case (infinite seqno space without wrap caused issues).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * With D-SACK the lower bound is extended to cover sequence space below</span></span>\n<span class=\"line\"><span style=\"\"> * SND.UNA down to undo_marker, which is the last point of interest. Yet</span></span>\n<span class=\"line\"><span style=\"\"> * again, D-SACK block must not to go across snd_una (for the same reason as</span></span>\n<span class=\"line\"><span style=\"\"> * for the normal SACK blocks, explained above). But there all simplicity</span></span>\n<span class=\"line\"><span style=\"\"> * ends, TCP might receive valid D-SACKs below that. As long as they reside</span></span>\n<span class=\"line\"><span style=\"\"> * fully below undo_marker they do not affect behavior in anyway and can</span></span>\n<span class=\"line\"><span style=\"\"> * therefore be safely ignored. In rare cases (which are more or less</span></span>\n<span class=\"line\"><span style=\"\"> * theoretical ones), the D-SACK will nicely cross that boundary due to skb</span></span>\n<span class=\"line\"><span style=\"\"> * fragmentation and packet reordering past skb's retransmission. To consider</span></span>\n<span class=\"line\"><span style=\"\"> * them correctly, the acceptable range must be extended even more though</span></span>\n<span class=\"line\"><span style=\"\"> * the exact amount is rather hard to quantify. However, tp->max_window can</span></span>\n<span class=\"line\"><span style=\"\"> * be used as an exaggerated estimate.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/ipv4/tcp_input.c#L1119-L1211",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/ipv4/tcp_input.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * DOC: Theory of Operation</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Problem</span></span>\n<span class=\"line\"><span style=\"\"> * -------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Match packet bytes against entries composed of ranged or non-ranged packet</span></span>\n<span class=\"line\"><span style=\"\"> * field specifiers, mapping them to arbitrary references. For example:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *               --- fields ---></span></span>\n<span class=\"line\"><span style=\"\"> *      |    [net],[port],[net]... => [reference]</span></span>\n<span class=\"line\"><span style=\"\"> *   entries [net],[port],[net]... => [reference]</span></span>\n<span class=\"line\"><span style=\"\"> *      |    [net],[port],[net]... => [reference]</span></span>\n<span class=\"line\"><span style=\"\"> *      V    ...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * where [net] fields can be IP ranges or netmasks, and [port] fields are port</span></span>\n<span class=\"line\"><span style=\"\"> * ranges. Arbitrary packet fields can be matched.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Algorithm Overview</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This algorithm is loosely inspired by [Ligatti 2010], and fundamentally</span></span>\n<span class=\"line\"><span style=\"\"> * relies on the consideration that every contiguous range in a space of b bits</span></span>\n<span class=\"line\"><span style=\"\"> * can be converted into b * 2 netmasks, from Theorem 3 in [Rottenstreich 2010],</span></span>\n<span class=\"line\"><span style=\"\"> * as also illustrated in Section 9 of [Kogan 2014].</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Classification against a number of entries, that require matching given bits</span></span>\n<span class=\"line\"><span style=\"\"> * of a packet field, is performed by grouping those bits in sets of arbitrary</span></span>\n<span class=\"line\"><span style=\"\"> * size, and classifying packet bits one group at a time.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Example:</span></span>\n<span class=\"line\"><span style=\"\"> *   to match the source port (16 bits) of a packet, we can divide those 16 bits</span></span>\n<span class=\"line\"><span style=\"\"> *   in 4 groups of 4 bits each. Given the entry:</span></span>\n<span class=\"line\"><span style=\"\"> *      0000 0001 0101 1001</span></span>\n<span class=\"line\"><span style=\"\"> *   and a packet with source port:</span></span>\n<span class=\"line\"><span style=\"\"> *      0000 0001 1010 1001</span></span>\n<span class=\"line\"><span style=\"\"> *   first and second groups match, but the third doesn't. We conclude that the</span></span>\n<span class=\"line\"><span style=\"\"> *   packet doesn't match the given entry.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Translate the set to a sequence of lookup tables, one per field. Each table</span></span>\n<span class=\"line\"><span style=\"\"> * has two dimensions: bit groups to be matched for a single packet field, and</span></span>\n<span class=\"line\"><span style=\"\"> * all the possible values of said groups (buckets). Input entries are</span></span>\n<span class=\"line\"><span style=\"\"> * represented as one or more rules, depending on the number of composing</span></span>\n<span class=\"line\"><span style=\"\"> * netmasks for the given field specifier, and a group match is indicated as a</span></span>\n<span class=\"line\"><span style=\"\"> * set bit, with number corresponding to the rule index, in all the buckets</span></span>\n<span class=\"line\"><span style=\"\"> * whose value matches the entry for a given group.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Rules are mapped between fields through an array of x, n pairs, with each</span></span>\n<span class=\"line\"><span style=\"\"> * item mapping a matched rule to one or more rules. The position of the pair in</span></span>\n<span class=\"line\"><span style=\"\"> * the array indicates the matched rule to be mapped to the next field, x</span></span>\n<span class=\"line\"><span style=\"\"> * indicates the first rule index in the next field, and n the amount of</span></span>\n<span class=\"line\"><span style=\"\"> * next-field rules the current rule maps to.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The mapping array for the last field maps to the desired references.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To match, we perform table lookups using the values of grouped packet bits,</span></span>\n<span class=\"line\"><span style=\"\"> * and use a sequence of bitwise operations to progressively evaluate rule</span></span>\n<span class=\"line\"><span style=\"\"> * matching.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * A stand-alone, reference implementation, also including notes about possible</span></span>\n<span class=\"line\"><span style=\"\"> * future optimisations, is available at:</span></span>\n<span class=\"line\"><span style=\"\"> *    https://pipapo.lameexcu.se/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Insertion</span></span>\n<span class=\"line\"><span style=\"\"> * ---------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - For each packet field:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   - divide the b packet bits we want to classify into groups of size t,</span></span>\n<span class=\"line\"><span style=\"\"> *     obtaining ceil(b / t) groups</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Example: match on destination IP address, with t = 4: 32 bits, 8 groups</span></span>\n<span class=\"line\"><span style=\"\"> *      of 4 bits each</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   - allocate a lookup table with one column (\"bucket\") for each possible</span></span>\n<span class=\"line\"><span style=\"\"> *     value of a group, and with one row for each group</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Example: 8 groups, 2^4 buckets:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     bucket</span></span>\n<span class=\"line\"><span style=\"\"> *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15</span></span>\n<span class=\"line\"><span style=\"\"> *        0</span></span>\n<span class=\"line\"><span style=\"\"> *        1</span></span>\n<span class=\"line\"><span style=\"\"> *        2</span></span>\n<span class=\"line\"><span style=\"\"> *        3</span></span>\n<span class=\"line\"><span style=\"\"> *        4</span></span>\n<span class=\"line\"><span style=\"\"> *        5</span></span>\n<span class=\"line\"><span style=\"\"> *        6</span></span>\n<span class=\"line\"><span style=\"\"> *        7</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   - map the bits we want to classify for the current field, for a given</span></span>\n<span class=\"line\"><span style=\"\"> *     entry, to a single rule for non-ranged and netmask set items, and to one</span></span>\n<span class=\"line\"><span style=\"\"> *     or multiple rules for ranges. Ranges are expanded to composing netmasks</span></span>\n<span class=\"line\"><span style=\"\"> *     by pipapo_expand().</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Example: 2 entries, 10.0.0.5:1024 and 192.168.1.0-192.168.2.1:2048</span></span>\n<span class=\"line\"><span style=\"\"> *      - rule #0: 10.0.0.5</span></span>\n<span class=\"line\"><span style=\"\"> *      - rule #1: 192.168.1.0/24</span></span>\n<span class=\"line\"><span style=\"\"> *      - rule #2: 192.168.2.0/31</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   - insert references to the rules in the lookup table, selecting buckets</span></span>\n<span class=\"line\"><span style=\"\"> *     according to bit values of a rule in the given group. This is done by</span></span>\n<span class=\"line\"><span style=\"\"> *     pipapo_insert().</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Example: given:</span></span>\n<span class=\"line\"><span style=\"\"> *      - rule #0: 10.0.0.5 mapping to buckets</span></span>\n<span class=\"line\"><span style=\"\"> *        &#x3C; 0 10  0 0   0 0  0 5 ></span></span>\n<span class=\"line\"><span style=\"\"> *      - rule #1: 192.168.1.0/24 mapping to buckets</span></span>\n<span class=\"line\"><span style=\"\"> *        &#x3C; 12 0  10 8  0 1  &#x3C; 0..15 > &#x3C; 0..15 > ></span></span>\n<span class=\"line\"><span style=\"\"> *      - rule #2: 192.168.2.0/31 mapping to buckets</span></span>\n<span class=\"line\"><span style=\"\"> *        &#x3C; 12 0  10 8  0 2  0 &#x3C; 0..1 > ></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      these bits are set in the lookup table:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     bucket</span></span>\n<span class=\"line\"><span style=\"\"> *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15</span></span>\n<span class=\"line\"><span style=\"\"> *        0    0                                              1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        1   1,2                                      0</span></span>\n<span class=\"line\"><span style=\"\"> *        2    0                                      1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        3    0                              1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        4  0,1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        5    0   1   2</span></span>\n<span class=\"line\"><span style=\"\"> *        6  0,1,2 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1</span></span>\n<span class=\"line\"><span style=\"\"> *        7   1,2 1,2  1   1   1  0,1  1   1   1   1   1   1   1   1   1   1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   - if this is not the last field in the set, fill a mapping array that maps</span></span>\n<span class=\"line\"><span style=\"\"> *     rules from the lookup table to rules belonging to the same entry in</span></span>\n<span class=\"line\"><span style=\"\"> *     the next lookup table, done by pipapo_map().</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     Note that as rules map to contiguous ranges of rules, given how netmask</span></span>\n<span class=\"line\"><span style=\"\"> *     expansion and insertion is performed, &#x26;union nft_pipapo_map_bucket stores</span></span>\n<span class=\"line\"><span style=\"\"> *     this information as pairs of first rule index, rule count.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Example: 2 entries, 10.0.0.5:1024 and 192.168.1.0-192.168.2.1:2048,</span></span>\n<span class=\"line\"><span style=\"\"> *      given lookup table #0 for field 0 (see example above):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     bucket</span></span>\n<span class=\"line\"><span style=\"\"> *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15</span></span>\n<span class=\"line\"><span style=\"\"> *        0    0                                              1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        1   1,2                                      0</span></span>\n<span class=\"line\"><span style=\"\"> *        2    0                                      1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        3    0                              1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        4  0,1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        5    0   1   2</span></span>\n<span class=\"line\"><span style=\"\"> *        6  0,1,2 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1</span></span>\n<span class=\"line\"><span style=\"\"> *        7   1,2 1,2  1   1   1  0,1  1   1   1   1   1   1   1   1   1   1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      and lookup table #1 for field 1 with:</span></span>\n<span class=\"line\"><span style=\"\"> *      - rule #0: 1024 mapping to buckets</span></span>\n<span class=\"line\"><span style=\"\"> *        &#x3C; 0  0  4  0 ></span></span>\n<span class=\"line\"><span style=\"\"> *      - rule #1: 2048 mapping to buckets</span></span>\n<span class=\"line\"><span style=\"\"> *        &#x3C; 0  0  5  0 ></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     bucket</span></span>\n<span class=\"line\"><span style=\"\"> *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15</span></span>\n<span class=\"line\"><span style=\"\"> *        0   0,1</span></span>\n<span class=\"line\"><span style=\"\"> *        1   0,1</span></span>\n<span class=\"line\"><span style=\"\"> *        2                    0   1</span></span>\n<span class=\"line\"><span style=\"\"> *        3   0,1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      we need to map rules for 10.0.0.5 in lookup table #0 (rule #0) to 1024</span></span>\n<span class=\"line\"><span style=\"\"> *      in lookup table #1 (rule #0) and rules for 192.168.1.0-192.168.2.1</span></span>\n<span class=\"line\"><span style=\"\"> *      (rules #1, #2) to 2048 in lookup table #2 (rule #1):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       rule indices in current field: 0    1    2</span></span>\n<span class=\"line\"><span style=\"\"> *       map to rules in next field:    0    1    1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   - if this is the last field in the set, fill a mapping array that maps</span></span>\n<span class=\"line\"><span style=\"\"> *     rules from the last lookup table to element pointers, also done by</span></span>\n<span class=\"line\"><span style=\"\"> *     pipapo_map().</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     Note that, in this implementation, we have two elements (start, end) for</span></span>\n<span class=\"line\"><span style=\"\"> *     each entry. The pointer to the end element is stored in this array, and</span></span>\n<span class=\"line\"><span style=\"\"> *     the pointer to the start element is linked from it.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Example: entry 10.0.0.5:1024 has a corresponding &#x26;struct nft_pipapo_elem</span></span>\n<span class=\"line\"><span style=\"\"> *      pointer, 0x66, and element for 192.168.1.0-192.168.2.1:2048 is at 0x42.</span></span>\n<span class=\"line\"><span style=\"\"> *      From the rules of lookup table #1 as mapped above:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       rule indices in last field:    0    1</span></span>\n<span class=\"line\"><span style=\"\"> *       map to elements:             0x66  0x42</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Matching</span></span>\n<span class=\"line\"><span style=\"\"> * --------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We use a result bitmap, with the size of a single lookup table bucket, to</span></span>\n<span class=\"line\"><span style=\"\"> * represent the matching state that applies at every algorithm step. This is</span></span>\n<span class=\"line\"><span style=\"\"> * done by pipapo_lookup().</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - For each packet field:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   - start with an all-ones result bitmap (res_map in pipapo_lookup())</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   - perform a lookup into the table corresponding to the current field,</span></span>\n<span class=\"line\"><span style=\"\"> *     for each group, and at every group, AND the current result bitmap with</span></span>\n<span class=\"line\"><span style=\"\"> *     the value from the lookup table bucket</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Example: 192.168.1.5 &#x3C; 12 0  10 8  0 1  0 5 >, with lookup table from</span></span>\n<span class=\"line\"><span style=\"\"> *      insertion examples.</span></span>\n<span class=\"line\"><span style=\"\"> *      Lookup table buckets are at least 3 bits wide, we'll assume 8 bits for</span></span>\n<span class=\"line\"><span style=\"\"> *      convenience in this example. Initial result bitmap is 0xff, the steps</span></span>\n<span class=\"line\"><span style=\"\"> *      below show the value of the result bitmap after each group is processed:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     bucket</span></span>\n<span class=\"line\"><span style=\"\"> *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15</span></span>\n<span class=\"line\"><span style=\"\"> *        0    0                                              1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        result bitmap is now: 0xff &#x26; 0x6 [bucket 12] = 0x6</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        1   1,2                                      0</span></span>\n<span class=\"line\"><span style=\"\"> *        result bitmap is now: 0x6 &#x26; 0x6 [bucket 0] = 0x6</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        2    0                                      1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        result bitmap is now: 0x6 &#x26; 0x6 [bucket 10] = 0x6</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        3    0                              1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        result bitmap is now: 0x6 &#x26; 0x6 [bucket 8] = 0x6</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        4  0,1,2</span></span>\n<span class=\"line\"><span style=\"\"> *        result bitmap is now: 0x6 &#x26; 0x7 [bucket 0] = 0x6</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        5    0   1   2</span></span>\n<span class=\"line\"><span style=\"\"> *        result bitmap is now: 0x6 &#x26; 0x2 [bucket 1] = 0x2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        6  0,1,2 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1</span></span>\n<span class=\"line\"><span style=\"\"> *        result bitmap is now: 0x2 &#x26; 0x7 [bucket 0] = 0x2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        7   1,2 1,2  1   1   1  0,1  1   1   1   1   1   1   1   1   1   1</span></span>\n<span class=\"line\"><span style=\"\"> *        final result bitmap for this field is: 0x2 &#x26; 0x3 [bucket 5] = 0x2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   - at the next field, start with a new, all-zeroes result bitmap. For each</span></span>\n<span class=\"line\"><span style=\"\"> *     bit set in the previous result bitmap, fill the new result bitmap</span></span>\n<span class=\"line\"><span style=\"\"> *     (fill_map in pipapo_lookup()) with the rule indices from the</span></span>\n<span class=\"line\"><span style=\"\"> *     corresponding buckets of the mapping field for this field, done by</span></span>\n<span class=\"line\"><span style=\"\"> *     pipapo_refill()</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Example: with mapping table from insertion examples, with the current</span></span>\n<span class=\"line\"><span style=\"\"> *      result bitmap from the previous example, 0x02:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       rule indices in current field: 0    1    2</span></span>\n<span class=\"line\"><span style=\"\"> *       map to rules in next field:    0    1    1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      the new result bitmap will be 0x02: rule 1 was set, and rule 1 will be</span></span>\n<span class=\"line\"><span style=\"\"> *      set.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      We can now extend this example to cover the second iteration of the step</span></span>\n<span class=\"line\"><span style=\"\"> *      above (lookup and AND bitmap): assuming the port field is</span></span>\n<span class=\"line\"><span style=\"\"> *      2048 &#x3C; 0  0  5  0 >, with starting result bitmap 0x2, and lookup table</span></span>\n<span class=\"line\"><span style=\"\"> *      for \"port\" field from pre-computation example:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     bucket</span></span>\n<span class=\"line\"><span style=\"\"> *      group  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15</span></span>\n<span class=\"line\"><span style=\"\"> *        0   0,1</span></span>\n<span class=\"line\"><span style=\"\"> *        1   0,1</span></span>\n<span class=\"line\"><span style=\"\"> *        2                    0   1</span></span>\n<span class=\"line\"><span style=\"\"> *        3   0,1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       operations are: 0x2 &#x26; 0x3 [bucket 0] &#x26; 0x3 [bucket 0] &#x26; 0x2 [bucket 5]</span></span>\n<span class=\"line\"><span style=\"\"> *       &#x26; 0x3 [bucket 0], resulting bitmap is 0x2.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   - if this is the last field in the set, look up the value from the mapping</span></span>\n<span class=\"line\"><span style=\"\"> *     array corresponding to the final result bitmap</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Example: 0x2 resulting bitmap from 192.168.1.5:2048, mapping array for</span></span>\n<span class=\"line\"><span style=\"\"> *      last field from insertion example:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       rule indices in last field:    0    1</span></span>\n<span class=\"line\"><span style=\"\"> *       map to elements:             0x66  0x42</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      the matching element is at 0x42.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * References</span></span>\n<span class=\"line\"><span style=\"\"> * ----------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * [Ligatti 2010]</span></span>\n<span class=\"line\"><span style=\"\"> *      A Packet-classification Algorithm for Arbitrary Bitmask Rules, with</span></span>\n<span class=\"line\"><span style=\"\"> *      Automatic Time-space Tradeoffs</span></span>\n<span class=\"line\"><span style=\"\"> *      Jay Ligatti, Josh Kuhn, and Chris Gage.</span></span>\n<span class=\"line\"><span style=\"\"> *      Proceedings of the IEEE International Conference on Computer</span></span>\n<span class=\"line\"><span style=\"\"> *      Communication Networks (ICCCN), August 2010.</span></span>\n<span class=\"line\"><span style=\"\"> *      https://www.cse.usf.edu/~ligatti/papers/grouper-conf.pdf</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * [Rottenstreich 2010]</span></span>\n<span class=\"line\"><span style=\"\"> *      Worst-Case TCAM Rule Expansion</span></span>\n<span class=\"line\"><span style=\"\"> *      Ori Rottenstreich and Isaac Keslassy.</span></span>\n<span class=\"line\"><span style=\"\"> *      2010 Proceedings IEEE INFOCOM, San Diego, CA, 2010.</span></span>\n<span class=\"line\"><span style=\"\"> *      http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.212.4592&#x26;rep=rep1&#x26;type=pdf</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * [Kogan 2014]</span></span>\n<span class=\"line\"><span style=\"\"> *      SAX-PAC (Scalable And eXpressive PAcket Classification)</span></span>\n<span class=\"line\"><span style=\"\"> *      Kirill Kogan, Sergey Nikolenko, Ori Rottenstreich, William Culhane,</span></span>\n<span class=\"line\"><span style=\"\"> *      and Patrick Eugster.</span></span>\n<span class=\"line\"><span style=\"\"> *      Proceedings of the 2014 ACM conference on SIGCOMM, August 2014.</span></span>\n<span class=\"line\"><span style=\"\"> *      https://www.sigcomm.org/sites/default/files/ccr/papers/2014/August/2619239-2626294.pdf</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/netfilter/nft_set_pipapo.c#L10-L329",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/netfilter/nft_set_pipapo.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * xt_check_entry_offsets - validate arp/ip/ip6t_entry</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @base: pointer to arp/ip/ip6t_entry</span></span>\n<span class=\"line\"><span style=\"\"> * @elems: pointer to first xt_entry_match, i.e. ip(6)t_entry->elems</span></span>\n<span class=\"line\"><span style=\"\"> * @target_offset: the arp/ip/ip6_t->target_offset</span></span>\n<span class=\"line\"><span style=\"\"> * @next_offset: the arp/ip/ip6_t->next_offset</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * validates that target_offset and next_offset are sane and that all</span></span>\n<span class=\"line\"><span style=\"\"> * match sizes (if any) align with the target offset.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This function does not validate the targets or matches themselves, it</span></span>\n<span class=\"line\"><span style=\"\"> * only tests that all the offsets and sizes are correct, that all</span></span>\n<span class=\"line\"><span style=\"\"> * match structures are aligned, and that the last structure ends where</span></span>\n<span class=\"line\"><span style=\"\"> * the target structure begins.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Also see xt_compat_check_entry_offsets for CONFIG_NETFILTER_XTABLES_COMPAT version.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The arp/ip/ip6t_entry structure @base must have passed following tests:</span></span>\n<span class=\"line\"><span style=\"\"> * - it must point to a valid memory location</span></span>\n<span class=\"line\"><span style=\"\"> * - base to base + next_offset must be accessible, i.e. not exceed allocated</span></span>\n<span class=\"line\"><span style=\"\"> *   length.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * A well-formed entry looks like this:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ip(6)t_entry   match [mtdata]  match [mtdata] target [tgdata] ip(6)t_entry</span></span>\n<span class=\"line\"><span style=\"\"> * e->elems[]-----'                              |               |</span></span>\n<span class=\"line\"><span style=\"\"> *                matchsize                      |               |</span></span>\n<span class=\"line\"><span style=\"\"> *                                matchsize      |               |</span></span>\n<span class=\"line\"><span style=\"\"> *                                               |               |</span></span>\n<span class=\"line\"><span style=\"\"> * target_offset---------------------------------'               |</span></span>\n<span class=\"line\"><span style=\"\"> * next_offset---------------------------------------------------'</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * elems[]: flexible array member at end of ip(6)/arpt_entry struct.</span></span>\n<span class=\"line\"><span style=\"\"> *          This is where matches (if any) and the target reside.</span></span>\n<span class=\"line\"><span style=\"\"> * target_offset: beginning of target.</span></span>\n<span class=\"line\"><span style=\"\"> * next_offset: start of the next rule; also: size of this rule.</span></span>\n<span class=\"line\"><span style=\"\"> * Since targets have a minimum size, target_offset + minlen &#x3C;= next_offset.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Every match stores its size, sum of sizes must not exceed target_offset.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Return: 0 on success, negative errno on failure.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/netfilter/x_tables.c#L869-L911",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/netfilter/x_tables.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * State of the queue, when used for network output buffering:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                 plug(i+1)            plug(i)          head</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------+--------------------+----------------></span></span>\n<span class=\"line\"><span style=\"\"> *                   |                    |</span></span>\n<span class=\"line\"><span style=\"\"> *                   |                    |</span></span>\n<span class=\"line\"><span style=\"\"> * pkts_current_epoch| pkts_last_epoch    |pkts_to_release</span></span>\n<span class=\"line\"><span style=\"\"> * ----------------->|&#x3C;--------+--------->|+---------------></span></span>\n<span class=\"line\"><span style=\"\"> *                   v                    v</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/sched/sch_plug.c#L43-L54",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/sched/sch_plug.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The KLCONFIG area is organized as a LINKED LIST of BOARDs. A BOARD</span></span>\n<span class=\"line\"><span style=\"\"> * can be either 'LOCAL' or 'REMOTE'. LOCAL means it is attached to</span></span>\n<span class=\"line\"><span style=\"\"> * the LOCAL/current NODE. REMOTE means it is attached to a different</span></span>\n<span class=\"line\"><span style=\"\"> * node.(TBD - Need a way to treat ROUTER boards.)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There are 2 different structures to represent these boards -</span></span>\n<span class=\"line\"><span style=\"\"> * lboard - Local board, rboard - remote board. These 2 structures</span></span>\n<span class=\"line\"><span style=\"\"> * can be arbitrarily mixed in the LINKED LIST of BOARDs. (Refer</span></span>\n<span class=\"line\"><span style=\"\"> * Figure below). The first byte of the rboard or lboard structure</span></span>\n<span class=\"line\"><span style=\"\"> * is used to find out its type - no unions are used.</span></span>\n<span class=\"line\"><span style=\"\"> * If it is a lboard, then the config info of this board will be found</span></span>\n<span class=\"line\"><span style=\"\"> * on the local node. (LOCAL NODE BASE + offset value gives pointer to</span></span>\n<span class=\"line\"><span style=\"\"> * the structure.</span></span>\n<span class=\"line\"><span style=\"\"> * If it is a rboard, the local structure contains the node number</span></span>\n<span class=\"line\"><span style=\"\"> * and the offset of the beginning of the LINKED LIST on the remote node.</span></span>\n<span class=\"line\"><span style=\"\"> * The details of the hardware on a remote node can be built locally,</span></span>\n<span class=\"line\"><span style=\"\"> * if required, by reading the LINKED LIST on the remote node and</span></span>\n<span class=\"line\"><span style=\"\"> * ignoring all the rboards on that node.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The local node uses the REMOTE NODE NUMBER + OFFSET to point to the</span></span>\n<span class=\"line\"><span style=\"\"> * First board info on the remote node. The remote node list is</span></span>\n<span class=\"line\"><span style=\"\"> * traversed as the local list, using the REMOTE BASE ADDRESS and not</span></span>\n<span class=\"line\"><span style=\"\"> * the local base address and ignoring all rboard values.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> KLCONFIG</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> +------------+\t     +------------+\t +------------+\t     +------------+</span></span>\n<span class=\"line\"><span style=\"\"> |  lboard    |\t +-->|\t lboard\t  |  +-->|   rboard   |\t +-->|\t lboard\t  |</span></span>\n<span class=\"line\"><span style=\"\"> +------------+\t |   +------------+  |\t +------------+\t |   +------------+</span></span>\n<span class=\"line\"><span style=\"\"> | board info |\t |   | board info |  |\t |errinfo,bptr|\t |   | board info |</span></span>\n<span class=\"line\"><span style=\"\"> +------------+\t |   +------------+  |\t +------------+\t |   +------------+</span></span>\n<span class=\"line\"><span style=\"\"> | offset     |--+   |\toffset\t  |--+\t |  offset    |--+   |offset=NULL |</span></span>\n<span class=\"line\"><span style=\"\"> +------------+\t     +------------+\t +------------+\t     +------------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> +------------+</span></span>\n<span class=\"line\"><span style=\"\"> | board info |</span></span>\n<span class=\"line\"><span style=\"\"> +------------+\t      +--------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> | compt 1    |------>| type, rev, diaginfo, size ...  |  (CPU)</span></span>\n<span class=\"line\"><span style=\"\"> +------------+\t      +--------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> | compt 2    |--+</span></span>\n<span class=\"line\"><span style=\"\"> +------------+\t |    +--------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> |  ...\t      |\t +--->| type, rev, diaginfo, size ...  |  (MEM_BANK)</span></span>\n<span class=\"line\"><span style=\"\"> +------------+\t      +--------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> | errinfo    |--+</span></span>\n<span class=\"line\"><span style=\"\"> +------------+\t |    +--------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">\t\t +--->|r/l brd errinfo,compt err flags |</span></span>\n<span class=\"line\"><span style=\"\">\t\t      +--------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each BOARD consists of COMPONENTs and the BOARD structure has</span></span>\n<span class=\"line\"><span style=\"\"> * pointers (offsets) to its COMPONENT structure.</span></span>\n<span class=\"line\"><span style=\"\"> * The COMPONENT structure has version info, size and speed info, revision,</span></span>\n<span class=\"line\"><span style=\"\"> * error info and the NIC info. This structure can accommodate any</span></span>\n<span class=\"line\"><span style=\"\"> * BOARD with arbitrary COMPONENT composition.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The ERRORINFO part of each BOARD has error information</span></span>\n<span class=\"line\"><span style=\"\"> * that describes errors about the BOARD itself. It also has flags to</span></span>\n<span class=\"line\"><span style=\"\"> * indicate the COMPONENT(s) on the board that have errors. The error</span></span>\n<span class=\"line\"><span style=\"\"> * information specific to the COMPONENT is present in the respective</span></span>\n<span class=\"line\"><span style=\"\"> * COMPONENT structure.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The ERRORINFO structure is also treated like a COMPONENT, ie. the</span></span>\n<span class=\"line\"><span style=\"\"> * BOARD has pointers(offset) to the ERRORINFO structure. The rboard</span></span>\n<span class=\"line\"><span style=\"\"> * structure also has a pointer to the ERRORINFO structure. This is</span></span>\n<span class=\"line\"><span style=\"\"> * the place to store ERRORINFO about a REMOTE NODE, if the HUB on</span></span>\n<span class=\"line\"><span style=\"\"> * that NODE is not working or if the REMOTE MEMORY is BAD. In cases where</span></span>\n<span class=\"line\"><span style=\"\"> * only the CPU of the REMOTE NODE is disabled, the ERRORINFO pointer can</span></span>\n<span class=\"line\"><span style=\"\"> * be a NODE NUMBER, REMOTE OFFSET combination, pointing to error info</span></span>\n<span class=\"line\"><span style=\"\"> * which is present on the REMOTE NODE.(TBD)</span></span>\n<span class=\"line\"><span style=\"\"> * REMOTE ERRINFO can be stored on any of the nearest nodes</span></span>\n<span class=\"line\"><span style=\"\"> * or on all the nearest nodes.(TBD)</span></span>\n<span class=\"line\"><span style=\"\"> * Like BOARD structures, REMOTE ERRINFO structures can be built locally</span></span>\n<span class=\"line\"><span style=\"\"> * using the rboard errinfo pointer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In order to get useful information from this Data organization, a set of</span></span>\n<span class=\"line\"><span style=\"\"> * interface routines are provided (TBD). The important thing to remember while</span></span>\n<span class=\"line\"><span style=\"\"> * manipulating the structures, is that, the NODE number information should</span></span>\n<span class=\"line\"><span style=\"\"> * be used. If the NODE is non-zero (remote) then each offset should</span></span>\n<span class=\"line\"><span style=\"\"> * be added to the REMOTE BASE ADDR else it should be added to the LOCAL BASE ADDR.</span></span>\n<span class=\"line\"><span style=\"\"> * This includes offsets for BOARDS, COMPONENTS and ERRORINFO.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that these structures do not provide much info about connectivity.</span></span>\n<span class=\"line\"><span style=\"\"> * That info will be part of HWGRAPH, which is an extension of the cfg_t</span></span>\n<span class=\"line\"><span style=\"\"> * data structure. (ref IP27prom/cfg.h) It has to be extended to include</span></span>\n<span class=\"line\"><span style=\"\"> * the IO part of the Network(TBD).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The data structures below define the above concepts.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/mips/include/asm/sn/klconfig.h#L217-L307",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/mips/include/asm/sn/klconfig.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Register and XDR encode the Read list. Supports encoding a list of read</span></span>\n<span class=\"line\"><span style=\"\"> * segments that belong to a single read chunk.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Encoding key for single-list chunks (HLOO = Handle32 Length32 Offset64):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Read chunklist (a linked list):</span></span>\n<span class=\"line\"><span style=\"\"> *   N elements, position P (same P for all chunks of same arg!):</span></span>\n<span class=\"line\"><span style=\"\"> *    1 - PHLOO - 1 - PHLOO - ... - 1 - PHLOO - 0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Returns zero on success, or a negative errno if a failure occurred.</span></span>\n<span class=\"line\"><span style=\"\"> * @xdr is advanced to the next position in the stream.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Only a single @pos value is currently supported.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/sunrpc/xprtrdma/rpc_rdma.c#L319-L332",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/sunrpc/xprtrdma/rpc_rdma.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* The structure of the shared state of the rings are a simple</span></span>\n<span class=\"line\"><span style=\"\"> * circular buffer, as outlined in</span></span>\n<span class=\"line\"><span style=\"\"> * Documentation/core-api/circular-buffers.rst. For the Rx and</span></span>\n<span class=\"line\"><span style=\"\"> * completion ring, the kernel is the producer and user space is the</span></span>\n<span class=\"line\"><span style=\"\"> * consumer. For the Tx and fill rings, the kernel is the consumer and</span></span>\n<span class=\"line\"><span style=\"\"> * user space is the producer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * producer                         consumer</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * if (LOAD ->consumer) {  (A)      LOAD.acq ->producer  (C)</span></span>\n<span class=\"line\"><span style=\"\"> *    STORE $data                   LOAD $data</span></span>\n<span class=\"line\"><span style=\"\"> *    STORE.rel ->producer (B)      STORE.rel ->consumer (D)</span></span>\n<span class=\"line\"><span style=\"\"> * }</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (A) pairs with (D), and (B) pairs with (C).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Starting with (B), it protects the data from being written after</span></span>\n<span class=\"line\"><span style=\"\"> * the producer pointer. If this barrier was missing, the consumer</span></span>\n<span class=\"line\"><span style=\"\"> * could observe the producer pointer being set and thus load the data</span></span>\n<span class=\"line\"><span style=\"\"> * before the producer has written the new data. The consumer would in</span></span>\n<span class=\"line\"><span style=\"\"> * this case load the old data.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (C) protects the consumer from speculatively loading the data before</span></span>\n<span class=\"line\"><span style=\"\"> * the producer pointer actually has been read. If we do not have this</span></span>\n<span class=\"line\"><span style=\"\"> * barrier, some architectures could load old data as speculative loads</span></span>\n<span class=\"line\"><span style=\"\"> * are not discarded as the CPU does not know there is a dependency</span></span>\n<span class=\"line\"><span style=\"\"> * between ->producer and data.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (A) is a control dependency that separates the load of ->consumer</span></span>\n<span class=\"line\"><span style=\"\"> * from the stores of $data. In case ->consumer indicates there is no</span></span>\n<span class=\"line\"><span style=\"\"> * room in the buffer to store $data we do not. The dependency will</span></span>\n<span class=\"line\"><span style=\"\"> * order both of the stores after the loads. So no barrier is needed.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (D) protects the load of the data to be observed to happen after the</span></span>\n<span class=\"line\"><span style=\"\"> * store of the consumer pointer. If we did not have this memory</span></span>\n<span class=\"line\"><span style=\"\"> * barrier, the producer could observe the consumer pointer being set</span></span>\n<span class=\"line\"><span style=\"\"> * and overwrite the data with a new value before the consumer got the</span></span>\n<span class=\"line\"><span style=\"\"> * chance to read the old value. The consumer would thus miss reading</span></span>\n<span class=\"line\"><span style=\"\"> * the old entry and very likely read the new entry twice, once right</span></span>\n<span class=\"line\"><span style=\"\"> * now and again after circling through the ring.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/xdp/xsk_queue.h#L50-L90",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/xdp/xsk_queue.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* xfrm inexact policy search tree:</span></span>\n<span class=\"line\"><span style=\"\"> * xfrm_pol_inexact_bin = hash(dir,type,family,if_id);</span></span>\n<span class=\"line\"><span style=\"\"> *  |</span></span>\n<span class=\"line\"><span style=\"\"> * +---- root_d: sorted by daddr:prefix</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |</span></span>\n<span class=\"line\"><span style=\"\"> * |        xfrm_pol_inexact_node</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |</span></span>\n<span class=\"line\"><span style=\"\"> * |                 +- root: sorted by saddr/prefix</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |              |</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |         xfrm_pol_inexact_node</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |              |</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |              + root: unused</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |              |</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |              + hhead: saddr:daddr policies</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |</span></span>\n<span class=\"line\"><span style=\"\"> * |                 +- coarse policies and all any:daddr policies</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * +---- root_s: sorted by saddr:prefix</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |</span></span>\n<span class=\"line\"><span style=\"\"> * |        xfrm_pol_inexact_node</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |</span></span>\n<span class=\"line\"><span style=\"\"> * |                 + root: unused</span></span>\n<span class=\"line\"><span style=\"\"> * |                 |</span></span>\n<span class=\"line\"><span style=\"\"> * |                 + hhead: saddr:any policies</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * +---- coarse policies and all any:any policies</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Lookups return four candidate lists:</span></span>\n<span class=\"line\"><span style=\"\"> * 1. any:any list from top-level xfrm_pol_inexact_bin</span></span>\n<span class=\"line\"><span style=\"\"> * 2. any:daddr list from daddr tree</span></span>\n<span class=\"line\"><span style=\"\"> * 3. saddr:daddr list from 2nd level daddr tree</span></span>\n<span class=\"line\"><span style=\"\"> * 4. saddr:any list from saddr tree</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This result set then needs to be searched for the policy with</span></span>\n<span class=\"line\"><span style=\"\"> * the lowest priority.  If two results have same prio, youngest one wins.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/net/xfrm/xfrm_policy.c#L77-L112",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/net/xfrm/xfrm_policy.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Implementation is a simple linked list for now...</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   This priority queue orders the events on timestamp. For events with an</span></span>\n<span class=\"line\"><span style=\"\">   equeal timestamp the queue behaves as a FIFO. </span></span>\n<span class=\"line\"><span style=\"\">   *</span></span>\n<span class=\"line\"><span style=\"\">   *           +-------+</span></span>\n<span class=\"line\"><span style=\"\">   *  Head --> | first |</span></span>\n<span class=\"line\"><span style=\"\">   *           +-------+</span></span>\n<span class=\"line\"><span style=\"\">   *                 |next</span></span>\n<span class=\"line\"><span style=\"\">   *           +-----v-+</span></span>\n<span class=\"line\"><span style=\"\">   *           |       |</span></span>\n<span class=\"line\"><span style=\"\">   *           +-------+</span></span>\n<span class=\"line\"><span style=\"\">   *                 |</span></span>\n<span class=\"line\"><span style=\"\">   *           +-----v-+</span></span>\n<span class=\"line\"><span style=\"\">   *           |       |</span></span>\n<span class=\"line\"><span style=\"\">   *           +-------+</span></span>\n<span class=\"line\"><span style=\"\">   *                 |</span></span>\n<span class=\"line\"><span style=\"\">   *           +-----v-+</span></span>\n<span class=\"line\"><span style=\"\">   *  Tail --> | last  |</span></span>\n<span class=\"line\"><span style=\"\">   *           +-------+</span></span>\n<span class=\"line\"><span style=\"\">   *</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/core/seq/seq_prioq.c#L14-L37",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/core/seq/seq_prioq.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * possible hardware ports (selected by 0xf5 port message)</span></span>\n<span class=\"line\"><span style=\"\"> *      0x00\t\tall ports</span></span>\n<span class=\"line\"><span style=\"\"> *      0x01 .. 0x08    this MTP's ports 1..8</span></span>\n<span class=\"line\"><span style=\"\"> *      0x09 .. 0x10    networked MTP's ports (9..16)</span></span>\n<span class=\"line\"><span style=\"\"> *      0x11            networked MTP's computer port</span></span>\n<span class=\"line\"><span style=\"\"> *      0x63            to ADAT</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * mappig:</span></span>\n<span class=\"line\"><span style=\"\"> *  subdevice 0 - (X-1)    ports</span></span>\n<span class=\"line\"><span style=\"\"> *            X - (2*X-1)  networked ports</span></span>\n<span class=\"line\"><span style=\"\"> *            X            computer</span></span>\n<span class=\"line\"><span style=\"\"> *            X+1          ADAT</span></span>\n<span class=\"line\"><span style=\"\"> *            X+2          all ports</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  where X = chip->num_ports</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/drivers/mtpav.c#L142-L158",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/drivers/mtpav.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Parallel Port Status Register BUSY and SELECT lines are multiplexed</span></span>\n<span class=\"line\"><span style=\"\"> * between several functions.  Depending on which 2x4 \"register\" is</span></span>\n<span class=\"line\"><span style=\"\"> * currently selected (b1..b3), the BUSY and SELECT lines are</span></span>\n<span class=\"line\"><span style=\"\"> * assigned as follows:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   SELECT LINE:                                                    A3 A2 A1</span></span>\n<span class=\"line\"><span style=\"\"> *                                                                   --------</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/drivers/portman2x4.c#L146-L153",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/drivers/portman2x4.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * the hdac_stream library is intended to be used with the following</span></span>\n<span class=\"line\"><span style=\"\"> * transitions. The states are not formally defined in the code but loosely</span></span>\n<span class=\"line\"><span style=\"\"> * inspired by boolean variables. Note that the 'prepared' field is not used</span></span>\n<span class=\"line\"><span style=\"\"> * in this library but by the callers during the hw_params/prepare transitions</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t   |</span></span>\n<span class=\"line\"><span style=\"\"> *\tstream_init()\t   |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t   v</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t+--+-------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t|  unused  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t+--+----+--+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t   |    ^</span></span>\n<span class=\"line\"><span style=\"\"> *\tstream_assign()\t   | \t|    stream_release()</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t   v\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t+--+----+--+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t|  opened  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t+--+----+--+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t   |    ^</span></span>\n<span class=\"line\"><span style=\"\"> *\tstream_reset()\t   |    |</span></span>\n<span class=\"line\"><span style=\"\"> *\tstream_setup()\t   |\t|    stream_cleanup()</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t   v\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t+--+----+--+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t| prepared |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t+--+----+--+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t   |    ^</span></span>\n<span class=\"line\"><span style=\"\"> *\tstream_start()\t   | \t|    stream_stop()</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t   v\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t+--+----+--+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t|  running |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t+----------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/hda/hdac_stream.c#L17-L48",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/hda/hdac_stream.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * CEA speaker placement:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        FLH       FCH        FRH</span></span>\n<span class=\"line\"><span style=\"\"> *  FLW    FL  FLC   FC   FRC   FR   FRW</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                  LFE</span></span>\n<span class=\"line\"><span style=\"\"> *                     TC</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *          RL  RLC   RC   RRC   RR</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The Left/Right Surround channel _notions_ LS/RS in SMPTE 320M corresponds to</span></span>\n<span class=\"line\"><span style=\"\"> * CEA RL/RR; The SMPTE channel _assignment_ C/LFE is swapped to CEA LFE/FC.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/hda/hdmi_chmap.c#L11-L24",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/hda/hdmi_chmap.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*********************************************************************************************</span></span>\n<span class=\"line\"><span style=\"\">Example hierarchy of stream control blocks in the SP</span></span>\n<span class=\"line\"><span style=\"\">hfgTree</span></span>\n<span class=\"line\"><span style=\"\">Ptr____Call (c)</span></span>\n<span class=\"line\"><span style=\"\">       \\</span></span>\n<span class=\"line\"><span style=\"\"> -------+------         -------------      -------------      -------------      -----</span></span>\n<span class=\"line\"><span style=\"\">| SBlaster IF  |______\\| Foreground  |___\\| Middlegr'nd |___\\| Background  |___\\| Nul |</span></span>\n<span class=\"line\"><span style=\"\">|              |Goto  /| tree header |g  /| tree header |g  /| tree header |g  /| SCB |r</span></span>\n<span class=\"line\"><span style=\"\"> -------------- (g)     -------------      -------------      -------------      -----</span></span>\n<span class=\"line\"><span style=\"\">       |c                     |c                 |c                 |c</span></span>\n<span class=\"line\"><span style=\"\">       |                      |                  |                  |</span></span>\n<span class=\"line\"><span style=\"\">      \\/                  -------------      -------------      -------------   </span></span>\n<span class=\"line\"><span style=\"\">                       | Foreground  |_\\  | Middlegr'nd |_\\  | Background  |_\\</span></span>\n<span class=\"line\"><span style=\"\">                       |     tree    |g/  |    tree     |g/  |     tree    |g/</span></span>\n<span class=\"line\"><span style=\"\">                        -------------      -------------      -------------   </span></span>\n<span class=\"line\"><span style=\"\">                              |c                 |c                 |c</span></span>\n<span class=\"line\"><span style=\"\">                              |                  |                  | </span></span>\n<span class=\"line\"><span style=\"\">                             \\/                 \\/                 \\/ </span></span>\n<span class=\"line\"><span style=\"\">*********************************************************************************************/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/pci/cs46xx/cs46xx_dsp_task_types.h#L17-L37",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/pci/cs46xx/cs46xx_dsp_task_types.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *  system configuration ICE_EEP2_SYSCONF=0x4b</span></span>\n<span class=\"line\"><span style=\"\"> *    XIN1 49.152MHz</span></span>\n<span class=\"line\"><span style=\"\"> *    not have UART</span></span>\n<span class=\"line\"><span style=\"\"> *    one stereo ADC and a S/PDIF receiver connected</span></span>\n<span class=\"line\"><span style=\"\"> *    four stereo DACs connected</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  AC-Link configuration ICE_EEP2_ACLINK=0x80</span></span>\n<span class=\"line\"><span style=\"\"> *    use I2C, not use AC97</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  I2S converters feature ICE_EEP2_I2S=0x78</span></span>\n<span class=\"line\"><span style=\"\"> *    I2S codec has no volume/mute control feature</span></span>\n<span class=\"line\"><span style=\"\"> *    I2S codec supports 96KHz and 192KHz</span></span>\n<span class=\"line\"><span style=\"\"> *    I2S codec 24bits</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  S/PDIF configuration ICE_EEP2_SPDIF=0xc3</span></span>\n<span class=\"line\"><span style=\"\"> *    Enable integrated S/PDIF transmitter</span></span>\n<span class=\"line\"><span style=\"\"> *    internal S/PDIF out implemented</span></span>\n<span class=\"line\"><span style=\"\"> *    S/PDIF is stereo</span></span>\n<span class=\"line\"><span style=\"\"> *    External S/PDIF out implemented</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ** connected chips **</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  WM8740</span></span>\n<span class=\"line\"><span style=\"\"> *      A 2ch-DAC of main outputs.</span></span>\n<span class=\"line\"><span style=\"\"> *      It setuped as I2S mode by wire, so no way to setup from software.</span></span>\n<span class=\"line\"><span style=\"\"> *      The sample-rate are automatically changed.</span></span>\n<span class=\"line\"><span style=\"\"> *          ML/I2S (28pin) --------+</span></span>\n<span class=\"line\"><span style=\"\"> *          MC/DM1 (27pin) -- 5V   |</span></span>\n<span class=\"line\"><span style=\"\"> *          MD/DM0 (26pin) -- GND  |</span></span>\n<span class=\"line\"><span style=\"\"> *          MUTEB  (25pin) -- NC   |</span></span>\n<span class=\"line\"><span style=\"\"> *          MODE   (24pin) -- GND  |</span></span>\n<span class=\"line\"><span style=\"\"> *          CSBIW  (23pin) --------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *          RSTB   (22pin) --R(1K)-+</span></span>\n<span class=\"line\"><span style=\"\"> *      Probably it reduce the noise from the control line.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  WM8766</span></span>\n<span class=\"line\"><span style=\"\"> *      A 6ch-DAC for surrounds.</span></span>\n<span class=\"line\"><span style=\"\"> *      It's control wire was connected to GPIOxx (3-wire serial interface)</span></span>\n<span class=\"line\"><span style=\"\"> *          ML/I2S (11pin) -- GPIO18</span></span>\n<span class=\"line\"><span style=\"\"> *          MC/IWL (12pin) -- GPIO17</span></span>\n<span class=\"line\"><span style=\"\"> *          MD/DM  (13pin) -- GPIO16</span></span>\n<span class=\"line\"><span style=\"\"> *          MUTE   (14pin) -- GPIO01</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  WM8776</span></span>\n<span class=\"line\"><span style=\"\"> *     A 2ch-ADC(with 10ch-selector) plus 2ch-DAC.</span></span>\n<span class=\"line\"><span style=\"\"> *     It's control wire was connected to SDA/SCLK (2-wire serial interface)</span></span>\n<span class=\"line\"><span style=\"\"> *          MODE (16pin) -- R(1K) -- GND</span></span>\n<span class=\"line\"><span style=\"\"> *          CE   (17pin) -- R(1K) -- GND  2-wire mode (address=0x34)</span></span>\n<span class=\"line\"><span style=\"\"> *          DI   (18pin) -- SDA</span></span>\n<span class=\"line\"><span style=\"\"> *          CL   (19pin) -- SCLK</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ** output pins and device names **</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   7.1ch name -- output connector color -- device (-D option)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      FRONT 2ch                  -- green  -- plughw:0,0</span></span>\n<span class=\"line\"><span style=\"\"> *      CENTER(Lch) SUBWOOFER(Rch) -- black  -- plughw:0,2,0</span></span>\n<span class=\"line\"><span style=\"\"> *      SURROUND 2ch               -- orange -- plughw:0,2,1</span></span>\n<span class=\"line\"><span style=\"\"> *      SURROUND BACK 2ch          -- white  -- plughw:0,2,2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/pci/ice1712/se.c#L31-L95",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/pci/ice1712/se.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * CEA speaker placement for HDMI 1.4:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  FL  FLC   FC   FRC   FR   FRW</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                  LFE</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  RL  RLC   RC   RRC   RR</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Speaker placement has to be extended to support HDMI 2.0</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/codecs/hdmi-codec.c#L23-L33",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/codecs/hdmi-codec.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * fsl_dma_open: open a new substream.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each substream has its own DMA buffer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ALSA divides the DMA buffer into N periods.  We create NUM_DMA_LINKS link</span></span>\n<span class=\"line\"><span style=\"\"> * descriptors that ping-pong from one period to the next.  For example, if</span></span>\n<span class=\"line\"><span style=\"\"> * there are six periods and two link descriptors, this is how they look</span></span>\n<span class=\"line\"><span style=\"\"> * before playback starts:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      \t   The last link descriptor</span></span>\n<span class=\"line\"><span style=\"\"> *   ____________  points back to the first</span></span>\n<span class=\"line\"><span style=\"\"> *  |   \t |</span></span>\n<span class=\"line\"><span style=\"\"> *  V   \t |</span></span>\n<span class=\"line\"><span style=\"\"> *  ___    ___   |</span></span>\n<span class=\"line\"><span style=\"\"> * |   |->|   |->|</span></span>\n<span class=\"line\"><span style=\"\"> * |___|  |___|</span></span>\n<span class=\"line\"><span style=\"\"> *   |      |</span></span>\n<span class=\"line\"><span style=\"\"> *   |      |</span></span>\n<span class=\"line\"><span style=\"\"> *   V      V</span></span>\n<span class=\"line\"><span style=\"\"> *  _________________________________________</span></span>\n<span class=\"line\"><span style=\"\"> * |      |      |      |      |      |      |  The DMA buffer is</span></span>\n<span class=\"line\"><span style=\"\"> * |      |      |      |      |      |      |    divided into 6 parts</span></span>\n<span class=\"line\"><span style=\"\"> * |______|______|______|______|______|______|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * and here's how they look after the first period is finished playing:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   ____________</span></span>\n<span class=\"line\"><span style=\"\"> *  |   \t |</span></span>\n<span class=\"line\"><span style=\"\"> *  V   \t |</span></span>\n<span class=\"line\"><span style=\"\"> *  ___    ___   |</span></span>\n<span class=\"line\"><span style=\"\"> * |   |->|   |->|</span></span>\n<span class=\"line\"><span style=\"\"> * |___|  |___|</span></span>\n<span class=\"line\"><span style=\"\"> *   |      |</span></span>\n<span class=\"line\"><span style=\"\"> *   |______________</span></span>\n<span class=\"line\"><span style=\"\"> *          |       |</span></span>\n<span class=\"line\"><span style=\"\"> *          V       V</span></span>\n<span class=\"line\"><span style=\"\"> *  _________________________________________</span></span>\n<span class=\"line\"><span style=\"\"> * |      |      |      |      |      |      |</span></span>\n<span class=\"line\"><span style=\"\"> * |      |      |      |      |      |      |</span></span>\n<span class=\"line\"><span style=\"\"> * |______|______|______|______|______|______|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The first link descriptor now points to the third period.  The DMA</span></span>\n<span class=\"line\"><span style=\"\"> * controller is currently playing the second period.  When it finishes, it</span></span>\n<span class=\"line\"><span style=\"\"> * will jump back to the first descriptor and play the third period.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There are four reasons we do this:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 1. The only way to get the DMA controller to automatically restart the</span></span>\n<span class=\"line\"><span style=\"\"> *    transfer when it gets to the end of the buffer is to use chaining</span></span>\n<span class=\"line\"><span style=\"\"> *    mode.  Basic direct mode doesn't offer that feature.</span></span>\n<span class=\"line\"><span style=\"\"> * 2. We need to receive an interrupt at the end of every period.  The DMA</span></span>\n<span class=\"line\"><span style=\"\"> *    controller can generate an interrupt at the end of every link transfer</span></span>\n<span class=\"line\"><span style=\"\"> *    (aka segment).  Making each period into a DMA segment will give us the</span></span>\n<span class=\"line\"><span style=\"\"> *    interrupts we need.</span></span>\n<span class=\"line\"><span style=\"\"> * 3. By creating only two link descriptors, regardless of the number of</span></span>\n<span class=\"line\"><span style=\"\"> *    periods, we do not need to reallocate the link descriptors if the</span></span>\n<span class=\"line\"><span style=\"\"> *    number of periods changes.</span></span>\n<span class=\"line\"><span style=\"\"> * 4. All of the audio data is still stored in a single, contiguous DMA</span></span>\n<span class=\"line\"><span style=\"\"> *    buffer, which is what ALSA expects.  We're just dividing it into</span></span>\n<span class=\"line\"><span style=\"\"> *    contiguous parts, and creating a link descriptor for each one.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/fsl/fsl_dma.c#L298-L359",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/fsl/fsl_dma.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *\tperiod/frame/sample image</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ex) PCM (2ch)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * period pos\t\t\t\t\t   period pos</span></span>\n<span class=\"line\"><span style=\"\"> *   [n]\t\t\t\t\t     [n + 1]</span></span>\n<span class=\"line\"><span style=\"\"> *   |&#x3C;-------------------- period--------------------->|</span></span>\n<span class=\"line\"><span style=\"\"> * ==|============================================ ... =|==</span></span>\n<span class=\"line\"><span style=\"\"> *   |\t\t\t\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *   ||&#x3C;-----  frame ----->|&#x3C;------ frame ----->|  ...\t|</span></span>\n<span class=\"line\"><span style=\"\"> *   |+--------------------+--------------------+- ...\t|</span></span>\n<span class=\"line\"><span style=\"\"> *   ||[ sample ][ sample ]|[ sample ][ sample ]|  ...\t|</span></span>\n<span class=\"line\"><span style=\"\"> *   |+--------------------+--------------------+- ...\t|</span></span>\n<span class=\"line\"><span style=\"\"> * ==|============================================ ... =|==</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/sh/fsi.c#L159-L174",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/sh/fsi.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *\tdriver data Image</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * rsnd_priv</span></span>\n<span class=\"line\"><span style=\"\"> *   |</span></span>\n<span class=\"line\"><span style=\"\"> *   | ** this depends on Gen1/Gen2</span></span>\n<span class=\"line\"><span style=\"\"> *   |</span></span>\n<span class=\"line\"><span style=\"\"> *   +- gen</span></span>\n<span class=\"line\"><span style=\"\"> *   |</span></span>\n<span class=\"line\"><span style=\"\"> *   | ** these depend on data path</span></span>\n<span class=\"line\"><span style=\"\"> *   | ** gen and platform data control it</span></span>\n<span class=\"line\"><span style=\"\"> *   |</span></span>\n<span class=\"line\"><span style=\"\"> *   +- rdai[0]</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |\t\t sru     ssiu      ssi</span></span>\n<span class=\"line\"><span style=\"\"> *   |   +- playback -> [mod] -> [mod] -> [mod] -> ...</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |\t\t sru     ssiu      ssi</span></span>\n<span class=\"line\"><span style=\"\"> *   |   +- capture  -> [mod] -> [mod] -> [mod] -> ...</span></span>\n<span class=\"line\"><span style=\"\"> *   |</span></span>\n<span class=\"line\"><span style=\"\"> *   +- rdai[1]</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |\t\t sru     ssiu      ssi</span></span>\n<span class=\"line\"><span style=\"\"> *   |   +- playback -> [mod] -> [mod] -> [mod] -> ...</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |\t\t sru     ssiu      ssi</span></span>\n<span class=\"line\"><span style=\"\"> *   |   +- capture  -> [mod] -> [mod] -> [mod] -> ...</span></span>\n<span class=\"line\"><span style=\"\"> *   ...</span></span>\n<span class=\"line\"><span style=\"\"> *   |</span></span>\n<span class=\"line\"><span style=\"\"> *   | ** these control ssi</span></span>\n<span class=\"line\"><span style=\"\"> *   |</span></span>\n<span class=\"line\"><span style=\"\"> *   +- ssi</span></span>\n<span class=\"line\"><span style=\"\"> *   |  |</span></span>\n<span class=\"line\"><span style=\"\"> *   |  +- ssi[0]</span></span>\n<span class=\"line\"><span style=\"\"> *   |  +- ssi[1]</span></span>\n<span class=\"line\"><span style=\"\"> *   |  +- ssi[2]</span></span>\n<span class=\"line\"><span style=\"\"> *   |  ...</span></span>\n<span class=\"line\"><span style=\"\"> *   |</span></span>\n<span class=\"line\"><span style=\"\"> *   | ** these control src</span></span>\n<span class=\"line\"><span style=\"\"> *   |</span></span>\n<span class=\"line\"><span style=\"\"> *   +- src</span></span>\n<span class=\"line\"><span style=\"\"> *      |</span></span>\n<span class=\"line\"><span style=\"\"> *      +- src[0]</span></span>\n<span class=\"line\"><span style=\"\"> *      +- src[1]</span></span>\n<span class=\"line\"><span style=\"\"> *      +- src[2]</span></span>\n<span class=\"line\"><span style=\"\"> *      ...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * for_each_rsnd_dai(xx, priv, xx)</span></span>\n<span class=\"line\"><span style=\"\"> *  rdai[0] => rdai[1] => rdai[2] => ...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * for_each_rsnd_mod(xx, rdai, xx)</span></span>\n<span class=\"line\"><span style=\"\"> *  [mod] => [mod] => [mod] => ...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * rsnd_dai_call(xxx, fn )</span></span>\n<span class=\"line\"><span style=\"\"> *  [mod]->fn() -> [mod]->fn() -> [mod]->fn()...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/sh/rcar/core.c#L36-L91",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/sh/rcar/core.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *\t\timage of SRC (Sampling Rate Converter)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 96kHz   &#x3C;-> +-----+\t48kHz\t+-----+\t 48kHz\t+-------+</span></span>\n<span class=\"line\"><span style=\"\"> * 48kHz   &#x3C;-> | SRC | &#x3C;------>\t| SSI |\t&#x3C;----->\t| codec |</span></span>\n<span class=\"line\"><span style=\"\"> * 44.1kHz &#x3C;-> +-----+\t\t+-----+\t\t+-------+</span></span>\n<span class=\"line\"><span style=\"\"> * ...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/sh/rcar/src.c#L56-L64",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/sh/rcar/src.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\tFW Boot State Transition Diagram</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    +----------------------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t\t\t\t\t\t\t\t\t     |</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------\t     ------------------\t\t\t\t     |</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t    |\t     |\t\t      |\t\t\t\t     |</span></span>\n<span class=\"line\"><span style=\"\"> * |   BOOT_FAILED  |&#x3C;-------|  READY_FAILED  |\t\t\t\t     |</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t    |&#x3C;--+    |\t              |\t   ------------------\t     |</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------\t|    ------------------\t   |\t\t    |\t     |</span></span>\n<span class=\"line\"><span style=\"\"> *\t^\t\t|\t    ^\t\t   |\tCRASHED\t    |---+    |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t|\t    |\t\t   |\t\t    |\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> * (FW Boot Timeout)\t|\t(FW_READY FAIL)\t   ------------------\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t|\t    |\t\t     ^\t\t\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t|\t    |\t\t     |(DSP Panic)\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------\t|\t    |\t\t   ------------------\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t    |\t|\t    |\t\t   |\t\t    |\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> * |   IN_PROGRESS  |---------------+------------->|    COMPLETE    |\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t    | (FW Boot OK)   (FW_READY OK) |\t\t    |\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------\t|\t\t\t   ------------------\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> *\t^\t\t|\t\t\t\t|\t\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t|\t\t\t\t|\t\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> * (FW Loading OK)\t|\t\t\t(System Suspend/Runtime Suspend)</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t|\t\t\t\t|\t\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t(FW Loading Fail)\t\t\t|\t\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------\t|\t------------------\t|\t\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t    |\t|\t|\t\t |&#x3C;-----+\t\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> * |   PREPARE\t    |---+\t|   NOT_STARTED  |&#x3C;---------------------+    |</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t    |\t\t|\t\t |&#x3C;--------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------\t\t------------------</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t    ^\t\t\t    |\t   ^</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t    |\t\t\t    |\t   |</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t    +-----------------------+\t   |</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t\t(DSP Probe OK)\t\t   |</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t\t\t\t\t   |</span></span>\n<span class=\"line\"><span style=\"\"> *    |\t\t\t\t\t   |</span></span>\n<span class=\"line\"><span style=\"\"> *    +------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t(System Suspend/Runtime Suspend)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/sof/core.c#L146-L184",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/sof/core.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Audio DSP states may transform as below:-</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                         Opportunistic D0I3 in S0</span></span>\n<span class=\"line\"><span style=\"\"> *     Runtime    +---------------------+  Delayed D0i3 work timeout</span></span>\n<span class=\"line\"><span style=\"\"> *     suspend    |                     +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *   +------------+       D0I0(active)  |                    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |            |                     &#x3C;---------------+    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   +-------->                     |    New IPC\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |Runtime +--^--+---------^--+--+ (via mailbox)\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |resume     |  |         |  |\t\t\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |           |  |         |  |\t\t\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |     System|  |         |  |\t\t\t|    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |     resume|  | S3/S0IX |  |                  |    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |\t     |  | suspend |  | S0IX             |    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |           |  |         |  |suspend           |    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |           |  |         |  |                  |    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |   |           |  |         |  |                  |    |</span></span>\n<span class=\"line\"><span style=\"\"> * +-v---+-----------+--v-------+ |  |           +------+----v----+</span></span>\n<span class=\"line\"><span style=\"\"> * |                            | |  +----------->                |</span></span>\n<span class=\"line\"><span style=\"\"> * |       D3 (suspended)       | |              |      D0I3      |</span></span>\n<span class=\"line\"><span style=\"\"> * |                            | +--------------+                |</span></span>\n<span class=\"line\"><span style=\"\"> * |                            |  System resume |                |</span></span>\n<span class=\"line\"><span style=\"\"> * +----------------------------+\t\t +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * S0IX suspend: The DSP is in D0I3 if any D0I3-compatible streams</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t ignored the suspend trigger. Otherwise the DSP</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t is in D3.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/sof/intel/hda-dsp.c#L590-L618",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/sof/intel/hda-dsp.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Audio paths on Pandora board:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  |O| ---> PCM DAC +-> AMP -> Headphone Jack</span></span>\n<span class=\"line\"><span style=\"\"> *  |M|         A    +--------> Line Out</span></span>\n<span class=\"line\"><span style=\"\"> *  |A| &#x3C;~~clk~~+</span></span>\n<span class=\"line\"><span style=\"\"> *  |P| &#x3C;--- TWL4030 &#x3C;--------- Line In and MICs</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/soc/ti/omap3pandora.c#L102-L109",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/soc/ti/omap3pandora.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Topology of SB Extigy (see on the wide screen :)</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">USB_IN[1] --->FU[2]------------------------------+->MU[16]-->PU[17]-+->FU[18]--+->EU[27]--+->EU[21]-->FU[22]--+->FU[23] > Dig_OUT[24]</span></span>\n<span class=\"line\"><span style=\"\">                                                 ^                  |          |          |                   |</span></span>\n<span class=\"line\"><span style=\"\">USB_IN[3] -+->SU[5]-->FU[6]--+->MU[14] ->PU[15]->+                  |          |          |                   +->FU[25] > Dig_OUT[26]</span></span>\n<span class=\"line\"><span style=\"\">           ^                 ^                   |                  |          |          |</span></span>\n<span class=\"line\"><span style=\"\">Dig_IN[4] -+                 |                   |                  |          |          +->FU[28]---------------------> Spk_OUT[19]</span></span>\n<span class=\"line\"><span style=\"\">                             |                   |                  |          |</span></span>\n<span class=\"line\"><span style=\"\">Lin-IN[7] -+-->FU[8]---------+                   |                  |          +----------------------------------------> Hph_OUT[20]</span></span>\n<span class=\"line\"><span style=\"\">           |                                     |                  |</span></span>\n<span class=\"line\"><span style=\"\">Mic-IN[9] --+->FU[10]----------------------------+                  |</span></span>\n<span class=\"line\"><span style=\"\">           ||                                                       |</span></span>\n<span class=\"line\"><span style=\"\">           ||  +----------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">           VV  V</span></span>\n<span class=\"line\"><span style=\"\">           ++--+->SU[11]-->FU[12] --------------------------------------------------------------------------------------> USB_OUT[13]</span></span>\n<span class=\"line\"><span style=\"\">*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/usb/mixer_maps.c#L38-L54",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/usb/mixer_maps.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Mixer Interface for the Focusrite Scarlett 18i6 audio interface.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The protocol was reverse engineered by looking at communication between</span></span>\n<span class=\"line\"><span style=\"\"> * Scarlett MixControl (v 1.2.128.0) and the Focusrite(R) Scarlett 18i6</span></span>\n<span class=\"line\"><span style=\"\"> * (firmware v305) using wireshark and usbmon in January 2013.</span></span>\n<span class=\"line\"><span style=\"\"> * Extended in July 2013.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * this mixer gives complete access to all features of the device:</span></span>\n<span class=\"line\"><span style=\"\"> *  - change Impedance of inputs (Line-in, Mic / Instrument, Hi-Z)</span></span>\n<span class=\"line\"><span style=\"\"> *  - select clock source</span></span>\n<span class=\"line\"><span style=\"\"> *  - dynamic input to mixer-matrix assignment</span></span>\n<span class=\"line\"><span style=\"\"> *  - 18 x 6 mixer-matrix gain stages</span></span>\n<span class=\"line\"><span style=\"\"> *  - bus routing &#x26; volume control</span></span>\n<span class=\"line\"><span style=\"\"> *  - automatic re-initialization on connect if device was power-cycled</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * USB URB commands overview (bRequest = 0x01 = UAC2_CS_CUR)</span></span>\n<span class=\"line\"><span style=\"\"> * wIndex</span></span>\n<span class=\"line\"><span style=\"\"> * 0x01 Analog Input line/instrument impedance switch, wValue=0x0901 +</span></span>\n<span class=\"line\"><span style=\"\"> *      channel, data=Line/Inst (2bytes)</span></span>\n<span class=\"line\"><span style=\"\"> *      pad (-10dB) switch, wValue=0x0b01 + channel, data=Off/On (2bytes)</span></span>\n<span class=\"line\"><span style=\"\"> *      ?? wValue=0x0803/04, ?? (2bytes)</span></span>\n<span class=\"line\"><span style=\"\"> * 0x0a Master Volume, wValue=0x0200+bus[0:all + only 1..4?] data(2bytes)</span></span>\n<span class=\"line\"><span style=\"\"> *      Bus Mute/Unmute wValue=0x0100+bus[0:all + only 1..4?], data(2bytes)</span></span>\n<span class=\"line\"><span style=\"\"> * 0x28 Clock source, wValue=0x0100, data={1:int,2:spdif,3:adat} (1byte)</span></span>\n<span class=\"line\"><span style=\"\"> * 0x29 Set Sample-rate, wValue=0x0100, data=sample-rate(4bytes)</span></span>\n<span class=\"line\"><span style=\"\"> * 0x32 Mixer mux, wValue=0x0600 + mixer-channel, data=input-to-connect(2bytes)</span></span>\n<span class=\"line\"><span style=\"\"> * 0x33 Output mux, wValue=bus, data=input-to-connect(2bytes)</span></span>\n<span class=\"line\"><span style=\"\"> * 0x34 Capture mux, wValue=0...18, data=input-to-connect(2bytes)</span></span>\n<span class=\"line\"><span style=\"\"> * 0x3c Matrix Mixer gains, wValue=mixer-node  data=gain(2bytes)</span></span>\n<span class=\"line\"><span style=\"\"> *      ?? [sometimes](4bytes, e.g 0x000003be 0x000003bf ...03ff)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * USB reads: (i.e. actually issued by original software)</span></span>\n<span class=\"line\"><span style=\"\"> * 0x01 wValue=0x0901+channel (1byte!!), wValue=0x0b01+channed (1byte!!)</span></span>\n<span class=\"line\"><span style=\"\"> * 0x29 wValue=0x0100 sample-rate(4bytes)</span></span>\n<span class=\"line\"><span style=\"\"> *      wValue=0x0200 ?? 1byte (only once)</span></span>\n<span class=\"line\"><span style=\"\"> * 0x2a wValue=0x0100 ?? 4bytes, sample-rate2 ??</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * USB reads with bRequest = 0x03 = UAC2_CS_MEM</span></span>\n<span class=\"line\"><span style=\"\"> * 0x3c wValue=0x0002 1byte: sync status (locked=1)</span></span>\n<span class=\"line\"><span style=\"\"> *      wValue=0x0000 18*2byte: peak meter (inputs)</span></span>\n<span class=\"line\"><span style=\"\"> *      wValue=0x0001 8(?)*2byte: peak meter (mix)</span></span>\n<span class=\"line\"><span style=\"\"> *      wValue=0x0003 6*2byte: peak meter (pcm/daw)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * USB write with bRequest = 0x03</span></span>\n<span class=\"line\"><span style=\"\"> * 0x3c Save settings to hardware: wValue=0x005a, data=0xa5</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;ditaa></span></span>\n<span class=\"line\"><span style=\"\"> *  /--------------\\    18chn            6chn    /--------------\\</span></span>\n<span class=\"line\"><span style=\"\"> *  | Hardware  in +--+-------\\        /------+--+ ALSA PCM out |</span></span>\n<span class=\"line\"><span style=\"\"> *  \\--------------/  |       |        |      |  \\--------------/</span></span>\n<span class=\"line\"><span style=\"\"> *                    |       |        |      |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |       v        v      |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |   +---------------+   |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |    \\ Matrix  Mux /    |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |     +-----+-----+     |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |           |           |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |           | 18chn     |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |           v           |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |     +-----------+     |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |     | Mixer     |     |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |     |    Matrix |     |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |     |           |     |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |     | 18x6 Gain |     |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |     |   stages  |     |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |     +-----+-----+     |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |           |           |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |           |           |</span></span>\n<span class=\"line\"><span style=\"\"> *                    | 18chn     | 6chn      | 6chn</span></span>\n<span class=\"line\"><span style=\"\"> *                    v           v           v</span></span>\n<span class=\"line\"><span style=\"\"> *                    =========================</span></span>\n<span class=\"line\"><span style=\"\"> *             +---------------+     +--—------------+</span></span>\n<span class=\"line\"><span style=\"\"> *              \\ Output  Mux /       \\ Capture Mux /</span></span>\n<span class=\"line\"><span style=\"\"> *               +-----+-----+         +-----+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *                     |                     |</span></span>\n<span class=\"line\"><span style=\"\"> *                     | 6chn                |</span></span>\n<span class=\"line\"><span style=\"\"> *                     v                     |</span></span>\n<span class=\"line\"><span style=\"\"> *              +-------------+              |</span></span>\n<span class=\"line\"><span style=\"\"> *              | Master Gain |              |</span></span>\n<span class=\"line\"><span style=\"\"> *              +------+------+              |</span></span>\n<span class=\"line\"><span style=\"\"> *                     |                     |</span></span>\n<span class=\"line\"><span style=\"\"> *                     | 6chn                | 18chn</span></span>\n<span class=\"line\"><span style=\"\"> *                     | (3 stereo pairs)    |</span></span>\n<span class=\"line\"><span style=\"\"> *  /--------------\\   |                     |   /--------------\\</span></span>\n<span class=\"line\"><span style=\"\"> *  | Hardware out |&#x3C;--/                     \\-->| ALSA PCM  in |</span></span>\n<span class=\"line\"><span style=\"\"> *  \\--------------/                             \\--------------/</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;/ditaa></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/usb/mixer_scarlett.c#L30-L118",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/usb/mixer_scarlett.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * PCM ring buffer handling</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The hardware provides a ring buffer with the fixed 4 buffer descriptors</span></span>\n<span class=\"line\"><span style=\"\"> * (BDs).  The driver maps these 4 BDs onto the PCM ring buffer.  The mapping</span></span>\n<span class=\"line\"><span style=\"\"> * moves at each period elapsed.  The below illustrates how it works:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At time=0</span></span>\n<span class=\"line\"><span style=\"\"> *  PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|</span></span>\n<span class=\"line\"><span style=\"\"> *  BD  | 0 | 1 | 2 | 3 |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At time=1 (period elapsed)</span></span>\n<span class=\"line\"><span style=\"\"> *  PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|</span></span>\n<span class=\"line\"><span style=\"\"> *  BD      | 1 | 2 | 3 | 0 |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At time=2 (second period elapsed)</span></span>\n<span class=\"line\"><span style=\"\"> *  PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|</span></span>\n<span class=\"line\"><span style=\"\"> *  BD          | 2 | 3 | 0 | 1 |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The bd_head field points to the index of the BD to be read.  It's also the</span></span>\n<span class=\"line\"><span style=\"\"> * position to be filled at next.  The pcm_head and the pcm_filled fields</span></span>\n<span class=\"line\"><span style=\"\"> * point to the indices of the current position and of the next position to</span></span>\n<span class=\"line\"><span style=\"\"> * be filled, respectively.  For PCM buffer there are both _head and _filled</span></span>\n<span class=\"line\"><span style=\"\"> * because they may be difference when nperiods > 4.  For example, in the</span></span>\n<span class=\"line\"><span style=\"\"> * example above at t=1, bd_head=1 and pcm_head=1 while pcm_filled=5:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * pcm_head (=1) --v               v-- pcm_filled (=5)</span></span>\n<span class=\"line\"><span style=\"\"> *       PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|</span></span>\n<span class=\"line\"><span style=\"\"> *       BD      | 1 | 2 | 3 | 0 |</span></span>\n<span class=\"line\"><span style=\"\"> *  bd_head (=1) --^               ^-- next to fill (= bd_head)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For nperiods &#x3C; 4, the remaining BDs out of 4 are marked as invalid, so that</span></span>\n<span class=\"line\"><span style=\"\"> * the hardware skips those BDs in the loop.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * An exceptional setup is the case with nperiods=1.  Since we have to update</span></span>\n<span class=\"line\"><span style=\"\"> * BDs after finishing one BD processing, we'd need at least two BDs, where</span></span>\n<span class=\"line\"><span style=\"\"> * both BDs point to the same content, the same address, the same size of the</span></span>\n<span class=\"line\"><span style=\"\"> * whole PCM buffer.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/x86/intel_hdmi_audio.c#L827-L865",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/x86/intel_hdmi_audio.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *\tCEA speaker placement:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tFL  FLC   FC   FRC   FR</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\t\tLFE</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tRL  RLC   RC   RRC   RR</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tThe Left/Right Surround channel _notions_ LS/RS in SMPTE 320M</span></span>\n<span class=\"line\"><span style=\"\"> *\tcorresponds to CEA RL/RR; The SMPTE channel _assignment_ C/LFE is</span></span>\n<span class=\"line\"><span style=\"\"> *\tswapped to CEA LFE/FC.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/sound/x86/intel_hdmi_audio.h#L40-L52",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/sound/x86/intel_hdmi_audio.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Linux IRQ vector layout.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There are 256 IDT entries (per CPU - each entry is 8 bytes) which can</span></span>\n<span class=\"line\"><span style=\"\"> * be defined by Linux. They are used as a jump table by the CPU when a</span></span>\n<span class=\"line\"><span style=\"\"> * given vector is triggered - by a CPU-external, CPU-internal or</span></span>\n<span class=\"line\"><span style=\"\"> * software-triggered event.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Linux sets the kernel code address each entry jumps to early during</span></span>\n<span class=\"line\"><span style=\"\"> * bootup, and never changes them. This is the general layout of the</span></span>\n<span class=\"line\"><span style=\"\"> * IDT entries:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Vectors   0 ...  31 : system traps and exceptions - hardcoded events</span></span>\n<span class=\"line\"><span style=\"\"> *  Vectors  32 ... 127 : device interrupts</span></span>\n<span class=\"line\"><span style=\"\"> *  Vector  128         : legacy int80 syscall interface</span></span>\n<span class=\"line\"><span style=\"\"> *  Vectors 129 ... LOCAL_TIMER_VECTOR-1</span></span>\n<span class=\"line\"><span style=\"\"> *  Vectors LOCAL_TIMER_VECTOR ... 255 : special interrupts</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 64-bit x86 has per CPU IDT tables, 32-bit has one shared IDT table.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This file enumerates the exact layout of them:</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/arch/x86/include/asm/irq_vectors.h#L6-L27",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/arch/x86/include/asm/irq_vectors.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Relocate sub-program calls.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Algorithm operates as follows. Each entry-point BPF program (referred to as</span></span>\n<span class=\"line\"><span style=\"\"> * main prog) is processed separately. For each subprog (non-entry functions,</span></span>\n<span class=\"line\"><span style=\"\"> * that can be called from either entry progs or other subprogs) gets their</span></span>\n<span class=\"line\"><span style=\"\"> * sub_insn_off reset to zero. This serves as indicator that this subprogram</span></span>\n<span class=\"line\"><span style=\"\"> * hasn't been yet appended and relocated within current main prog. Once its</span></span>\n<span class=\"line\"><span style=\"\"> * relocated, sub_insn_off will point at the position within current main prog</span></span>\n<span class=\"line\"><span style=\"\"> * where given subprog was appended. This will further be used to relocate all</span></span>\n<span class=\"line\"><span style=\"\"> * the call instructions jumping into this subprog.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We start with main program and process all call instructions. If the call</span></span>\n<span class=\"line\"><span style=\"\"> * is into a subprog that hasn't been processed (i.e., subprog->sub_insn_off</span></span>\n<span class=\"line\"><span style=\"\"> * is zero), subprog instructions are appended at the end of main program's</span></span>\n<span class=\"line\"><span style=\"\"> * instruction array. Then main program is \"put on hold\" while we recursively</span></span>\n<span class=\"line\"><span style=\"\"> * process newly appended subprogram. If that subprogram calls into another</span></span>\n<span class=\"line\"><span style=\"\"> * subprogram that hasn't been appended, new subprogram is appended again to</span></span>\n<span class=\"line\"><span style=\"\"> * the *main* prog's instructions (subprog's instructions are always left</span></span>\n<span class=\"line\"><span style=\"\"> * untouched, as they need to be in unmodified state for subsequent main progs</span></span>\n<span class=\"line\"><span style=\"\"> * and subprog instructions are always sent only as part of a main prog) and</span></span>\n<span class=\"line\"><span style=\"\"> * the process continues recursively. Once all the subprogs called from a main</span></span>\n<span class=\"line\"><span style=\"\"> * prog or any of its subprogs are appended (and relocated), all their</span></span>\n<span class=\"line\"><span style=\"\"> * positions within finalized instructions array are known, so it's easy to</span></span>\n<span class=\"line\"><span style=\"\"> * rewrite call instructions with correct relative offsets, corresponding to</span></span>\n<span class=\"line\"><span style=\"\"> * desired target subprog.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Its important to realize that some subprogs might not be called from some</span></span>\n<span class=\"line\"><span style=\"\"> * main prog and any of its called/used subprogs. Those will keep their</span></span>\n<span class=\"line\"><span style=\"\"> * subprog->sub_insn_off as zero at all times and won't be appended to current</span></span>\n<span class=\"line\"><span style=\"\"> * main prog and won't be relocated within the context of current main prog.</span></span>\n<span class=\"line\"><span style=\"\"> * They might still be used from other main progs later.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Visually this process can be shown as below. Suppose we have two main</span></span>\n<span class=\"line\"><span style=\"\"> * programs mainA and mainB and BPF object contains three subprogs: subA,</span></span>\n<span class=\"line\"><span style=\"\"> * subB, and subC. mainA calls only subA, mainB calls only subC, but subA and</span></span>\n<span class=\"line\"><span style=\"\"> * subC both call subB:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        +--------+ +-------+</span></span>\n<span class=\"line\"><span style=\"\"> *        |        v v       |</span></span>\n<span class=\"line\"><span style=\"\"> *     +--+---+ +--+-+-+ +---+--+</span></span>\n<span class=\"line\"><span style=\"\"> *     | subA | | subB | | subC |</span></span>\n<span class=\"line\"><span style=\"\"> *     +--+---+ +------+ +---+--+</span></span>\n<span class=\"line\"><span style=\"\"> *        ^                  ^</span></span>\n<span class=\"line\"><span style=\"\"> *        |                  |</span></span>\n<span class=\"line\"><span style=\"\"> *    +---+-------+   +------+----+</span></span>\n<span class=\"line\"><span style=\"\"> *    |   mainA   |   |   mainB   |</span></span>\n<span class=\"line\"><span style=\"\"> *    +-----------+   +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We'll start relocating mainA, will find subA, append it and start</span></span>\n<span class=\"line\"><span style=\"\"> * processing sub A recursively:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    +-----------+------+</span></span>\n<span class=\"line\"><span style=\"\"> *    |   mainA   | subA |</span></span>\n<span class=\"line\"><span style=\"\"> *    +-----------+------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At this point we notice that subB is used from subA, so we append it and</span></span>\n<span class=\"line\"><span style=\"\"> * relocate (there are no further subcalls from subB):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    +-----------+------+------+</span></span>\n<span class=\"line\"><span style=\"\"> *    |   mainA   | subA | subB |</span></span>\n<span class=\"line\"><span style=\"\"> *    +-----------+------+------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At this point, we relocate subA calls, then go one level up and finish with</span></span>\n<span class=\"line\"><span style=\"\"> * relocatin mainA calls. mainA is done.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For mainB process is similar but results in different order. We start with</span></span>\n<span class=\"line\"><span style=\"\"> * mainB and skip subA and subB, as mainB never calls them (at least</span></span>\n<span class=\"line\"><span style=\"\"> * directly), but we see subC is needed, so we append and start processing it:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    +-----------+------+</span></span>\n<span class=\"line\"><span style=\"\"> *    |   mainB   | subC |</span></span>\n<span class=\"line\"><span style=\"\"> *    +-----------+------+</span></span>\n<span class=\"line\"><span style=\"\"> * Now we see subC needs subB, so we go back to it, append and relocate it:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    +-----------+------+------+</span></span>\n<span class=\"line\"><span style=\"\"> *    |   mainB   | subC | subB |</span></span>\n<span class=\"line\"><span style=\"\"> *    +-----------+------+------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At this point we unwind recursion, relocate calls in subC, then in mainB.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/lib/bpf/libbpf.c#L6262-L6342",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/lib/bpf/libbpf.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Explanation of delta-time stats:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *            t = time of current schedule out event</span></span>\n<span class=\"line\"><span style=\"\"> *        tprev = time of previous sched out event</span></span>\n<span class=\"line\"><span style=\"\"> *                also time of schedule-in event for current task</span></span>\n<span class=\"line\"><span style=\"\"> *    last_time = time of last sched change event for current task</span></span>\n<span class=\"line\"><span style=\"\"> *                (i.e, time process was last scheduled out)</span></span>\n<span class=\"line\"><span style=\"\"> * ready_to_run = time of wakeup for current task</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * -----|------------|------------|------------|------</span></span>\n<span class=\"line\"><span style=\"\"> *    last         ready        tprev          t</span></span>\n<span class=\"line\"><span style=\"\"> *    time         to run</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      |-------- dt_wait --------|</span></span>\n<span class=\"line\"><span style=\"\"> *                   |- dt_delay -|-- dt_run --|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   dt_run = run time of current task</span></span>\n<span class=\"line\"><span style=\"\"> *  dt_wait = time between last schedule out event for task and tprev</span></span>\n<span class=\"line\"><span style=\"\"> *            represents time spent off the cpu</span></span>\n<span class=\"line\"><span style=\"\"> * dt_delay = time between wakeup and schedule-in of task</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/builtin-sched.c#L2100-L2121",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/builtin-sched.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * In the compat mode kernel runs in 64-bit and perf tool runs in 32-bit mode,</span></span>\n<span class=\"line\"><span style=\"\"> * 32-bit perf tool cannot access 64-bit value atomically, which might lead to</span></span>\n<span class=\"line\"><span style=\"\"> * the issues caused by the below sequence on multiple CPUs: when perf tool</span></span>\n<span class=\"line\"><span style=\"\"> * accesses either the load operation or the store operation for 64-bit value,</span></span>\n<span class=\"line\"><span style=\"\"> * on some architectures the operation is divided into two instructions, one</span></span>\n<span class=\"line\"><span style=\"\"> * is for accessing the low 32-bit value and another is for the high 32-bit;</span></span>\n<span class=\"line\"><span style=\"\"> * thus these two user operations can give the kernel chances to access the</span></span>\n<span class=\"line\"><span style=\"\"> * 64-bit value, and thus leads to the unexpected load values.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   kernel (64-bit)                        user (32-bit)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   if (LOAD ->aux_tail) { --,             LOAD ->aux_head_lo</span></span>\n<span class=\"line\"><span style=\"\"> *       STORE $aux_data      |       ,---></span></span>\n<span class=\"line\"><span style=\"\"> *       FLUSH $aux_data      |       |     LOAD ->aux_head_hi</span></span>\n<span class=\"line\"><span style=\"\"> *       STORE ->aux_head   --|-------`     smp_rmb()</span></span>\n<span class=\"line\"><span style=\"\"> *   }                        |             LOAD $data</span></span>\n<span class=\"line\"><span style=\"\"> *                            |             smp_mb()</span></span>\n<span class=\"line\"><span style=\"\"> *                            |             STORE ->aux_tail_lo</span></span>\n<span class=\"line\"><span style=\"\"> *                            `-----------></span></span>\n<span class=\"line\"><span style=\"\"> *                                          STORE ->aux_tail_hi</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For this reason, it's impossible for the perf tool to work correctly when</span></span>\n<span class=\"line\"><span style=\"\"> * the AUX head or tail is bigger than 4GB (more than 32 bits length); and we</span></span>\n<span class=\"line\"><span style=\"\"> * can not simply limit the AUX ring buffer to less than 4GB, the reason is</span></span>\n<span class=\"line\"><span style=\"\"> * the pointers can be increased monotonically, whatever the buffer size it is,</span></span>\n<span class=\"line\"><span style=\"\"> * at the end the head and tail can be bigger than 4GB and carry out to the</span></span>\n<span class=\"line\"><span style=\"\"> * high 32-bit.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To mitigate the issues and improve the user experience, we can allow the</span></span>\n<span class=\"line\"><span style=\"\"> * perf tool working in certain conditions and bail out with error if detect</span></span>\n<span class=\"line\"><span style=\"\"> * any overflow cannot be handled.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For reading the AUX head, it reads out the values for three times, and</span></span>\n<span class=\"line\"><span style=\"\"> * compares the high 4 bytes of the values between the first time and the last</span></span>\n<span class=\"line\"><span style=\"\"> * time, if there has no change for high 4 bytes injected by the kernel during</span></span>\n<span class=\"line\"><span style=\"\"> * the user reading sequence, it's safe for use the second value.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When compat_auxtrace_mmap__write_tail() detects any carrying in the high</span></span>\n<span class=\"line\"><span style=\"\"> * 32 bits, it means there have two store operations in user space and it cannot</span></span>\n<span class=\"line\"><span style=\"\"> * promise the atomicity for 64-bit write, so return '-1' in this case to tell</span></span>\n<span class=\"line\"><span style=\"\"> * the caller an overflow error has happened.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/auxtrace.c#L1738-L1780",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": true
        }
      }
    },
    "path": "linux/tools/perf/util/auxtrace.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * bperf: share hardware PMCs with BPF</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * perf uses performance monitoring counters (PMC) to monitor system</span></span>\n<span class=\"line\"><span style=\"\"> * performance. The PMCs are limited hardware resources. For example,</span></span>\n<span class=\"line\"><span style=\"\"> * Intel CPUs have 3x fixed PMCs and 4x programmable PMCs per cpu.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Modern data center systems use these PMCs in many different ways:</span></span>\n<span class=\"line\"><span style=\"\"> * system level monitoring, (maybe nested) container level monitoring, per</span></span>\n<span class=\"line\"><span style=\"\"> * process monitoring, profiling (in sample mode), etc. In some cases,</span></span>\n<span class=\"line\"><span style=\"\"> * there are more active perf_events than available hardware PMCs. To allow</span></span>\n<span class=\"line\"><span style=\"\"> * all perf_events to have a chance to run, it is necessary to do expensive</span></span>\n<span class=\"line\"><span style=\"\"> * time multiplexing of events.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * On the other hand, many monitoring tools count the common metrics</span></span>\n<span class=\"line\"><span style=\"\"> * (cycles, instructions). It is a waste to have multiple tools create</span></span>\n<span class=\"line\"><span style=\"\"> * multiple perf_events of \"cycles\" and occupy multiple PMCs.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * bperf tries to reduce such wastes by allowing multiple perf_events of</span></span>\n<span class=\"line\"><span style=\"\"> * \"cycles\" or \"instructions\" (at different scopes) to share PMUs. Instead</span></span>\n<span class=\"line\"><span style=\"\"> * of having each perf-stat session to read its own perf_events, bperf uses</span></span>\n<span class=\"line\"><span style=\"\"> * BPF programs to read the perf_events and aggregate readings to BPF maps.</span></span>\n<span class=\"line\"><span style=\"\"> * Then, the perf-stat session(s) reads the values from these BPF maps.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                ||</span></span>\n<span class=\"line\"><span style=\"\"> *       shared progs and maps &#x3C;- || -> per session progs and maps</span></span>\n<span class=\"line\"><span style=\"\"> *                                ||</span></span>\n<span class=\"line\"><span style=\"\"> *   ---------------              ||</span></span>\n<span class=\"line\"><span style=\"\"> *   | perf_events |              ||</span></span>\n<span class=\"line\"><span style=\"\"> *   ---------------       fexit  ||      -----------------</span></span>\n<span class=\"line\"><span style=\"\"> *          |             --------||----> | follower prog |</span></span>\n<span class=\"line\"><span style=\"\"> *       --------------- /        || ---  -----------------</span></span>\n<span class=\"line\"><span style=\"\"> * cs -> | leader prog |/         ||/        |         |</span></span>\n<span class=\"line\"><span style=\"\"> *   --> ---------------         /||  --------------  ------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  /       |         |         / ||  | filter map |  | accum_readings |</span></span>\n<span class=\"line\"><span style=\"\"> * /  ------------  ------------  ||  --------------  ------------------</span></span>\n<span class=\"line\"><span style=\"\"> * |  | prev map |  | diff map |  ||                        |</span></span>\n<span class=\"line\"><span style=\"\"> * |  ------------  ------------  ||                        |</span></span>\n<span class=\"line\"><span style=\"\"> *  \\                             ||                        |</span></span>\n<span class=\"line\"><span style=\"\"> * = \\ ==================================================== | ============</span></span>\n<span class=\"line\"><span style=\"\"> *    \\                                                    /   user space</span></span>\n<span class=\"line\"><span style=\"\"> *     \\                                                  /</span></span>\n<span class=\"line\"><span style=\"\"> *      \\                                                /</span></span>\n<span class=\"line\"><span style=\"\"> *    BPF_PROG_TEST_RUN                    BPF_MAP_LOOKUP_ELEM</span></span>\n<span class=\"line\"><span style=\"\"> *        \\                                            /</span></span>\n<span class=\"line\"><span style=\"\"> *         \\                                          /</span></span>\n<span class=\"line\"><span style=\"\"> *          \\------  perf-stat ----------------------/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The figure above shows the architecture of bperf. Note that the figure</span></span>\n<span class=\"line\"><span style=\"\"> * is divided into 3 regions: shared progs and maps (top left), per session</span></span>\n<span class=\"line\"><span style=\"\"> * progs and maps (top right), and user space (bottom).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The leader prog is triggered on each context switch (cs). The leader</span></span>\n<span class=\"line\"><span style=\"\"> * prog reads perf_events and stores the difference (current_reading -</span></span>\n<span class=\"line\"><span style=\"\"> * previous_reading) to the diff map. For the same metric, e.g. \"cycles\",</span></span>\n<span class=\"line\"><span style=\"\"> * multiple perf-stat sessions share the same leader prog.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each perf-stat session creates a follower prog as fexit program to the</span></span>\n<span class=\"line\"><span style=\"\"> * leader prog. It is possible to attach up to BPF_MAX_TRAMP_PROGS (38)</span></span>\n<span class=\"line\"><span style=\"\"> * follower progs to the same leader prog. The follower prog checks current</span></span>\n<span class=\"line\"><span style=\"\"> * task and processor ID to decide whether to add the value from the diff</span></span>\n<span class=\"line\"><span style=\"\"> * map to its accumulated reading map (accum_readings).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Finally, perf-stat user space reads the value from accum_reading map.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Besides context switch, it is also necessary to trigger the leader prog</span></span>\n<span class=\"line\"><span style=\"\"> * before perf-stat reads the value. Otherwise, the accum_reading map may</span></span>\n<span class=\"line\"><span style=\"\"> * not have the latest reading from the perf_events. This is achieved by</span></span>\n<span class=\"line\"><span style=\"\"> * triggering the event via sys_bpf(BPF_PROG_TEST_RUN) to each CPU.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Comment before the definition of struct perf_event_attr_map_entry</span></span>\n<span class=\"line\"><span style=\"\"> * describes how different sessions of perf-stat share information about</span></span>\n<span class=\"line\"><span style=\"\"> * the leader prog.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/bpf_counter.c#L696-L769",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/util/bpf_counter.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * State machine of bkw_mmap_state:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     .________________(forbid)_____________.</span></span>\n<span class=\"line\"><span style=\"\"> *                     |                                     V</span></span>\n<span class=\"line\"><span style=\"\"> * NOTREADY --(0)--> RUNNING --(1)--> DATA_PENDING --(2)--> EMPTY</span></span>\n<span class=\"line\"><span style=\"\"> *                     ^  ^              |   ^               |</span></span>\n<span class=\"line\"><span style=\"\"> *                     |  |__(forbid)____/   |___(forbid)___/|</span></span>\n<span class=\"line\"><span style=\"\"> *                     |                                     |</span></span>\n<span class=\"line\"><span style=\"\"> *                      \\_________________(3)_______________/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NOTREADY     : Backward ring buffers are not ready</span></span>\n<span class=\"line\"><span style=\"\"> * RUNNING      : Backward ring buffers are recording</span></span>\n<span class=\"line\"><span style=\"\"> * DATA_PENDING : We are required to collect data from backward ring buffers</span></span>\n<span class=\"line\"><span style=\"\"> * EMPTY        : We have collected data from backward ring buffers.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (0): Setup backward ring buffer</span></span>\n<span class=\"line\"><span style=\"\"> * (1): Pause ring buffers for reading</span></span>\n<span class=\"line\"><span style=\"\"> * (2): Read from ring buffers</span></span>\n<span class=\"line\"><span style=\"\"> * (3): Resume ring buffers for recording</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/evlist.h#L23-L43",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/util/evlist.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * data structure:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                 +==================+ +============+ +======================+</span></span>\n<span class=\"line\"><span style=\"\"> *                 |      class       | |    work    | |         atom         |</span></span>\n<span class=\"line\"><span style=\"\"> *                 +==================+ +============+ +======================+</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+  |  +-----+         | |  +------+  | |  +-------+   +-----+ |</span></span>\n<span class=\"line\"><span style=\"\"> * | perf_kwork | +-> | irq | --------|+-> | eth0 | --+-> | raise | - | ... | --+   +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> * +-----+------+ ||  +-----+         |||  +------+  |||  +-------+   +-----+ | |   |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  |||            |||                      | +-> | atom_page |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  |||            |||  +-------+   +-----+ |     |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |  class_list                |||            |+-> | entry | - | ... | ----> |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  |||            |||  +-------+   +-----+ |     |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  |||            |||                      | +-> |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  |||            |||  +-------+   +-----+ | |   |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  |||            |+-> | exit  | - | ... | --+   +-----+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  |||            | |  +-------+   +-----+ |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  |||            | |                      |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  |||  +-----+   | |                      |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  |+-> | ... |   | |                      |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |  +-----+   | |                      |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |            | |                      |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||  +---------+     | |  +-----+   | |  +-------+   +-----+ |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        +-> | softirq | -------> | RCU | ---+-> | raise | - | ... | --+   +-----+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||  +---------+     | |  +-----+   |||  +-------+   +-----+ | |   |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |            |||                      | +-> | atom_page |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |            |||  +-------+   +-----+ |     |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |            |+-> | entry | - | ... | ----> |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |            |||  +-------+   +-----+ |     |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |            |||                      | +-> |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |            |||  +-------+   +-----+ | |   |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |            |+-> | exit  | - | ... | --+   +-----+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |            | |  +-------+   +-----+ |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||                  | |            | |                      |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        ||  +-----------+   | |  +-----+   | |                      |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |        +-> | workqueue | -----> | ... |   | |                      |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |         |  +-----------+   | |  +-----+   | |                      |           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |         +==================+ +============+ +======================+           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |                                                                                |</span></span>\n<span class=\"line\"><span style=\"\"> *       +---->  atom_page_list  ---------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/kwork.h#L35-L76",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/tools/perf/util/kwork.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * When perf record finishes a pass on every buffers, it records this pseudo</span></span>\n<span class=\"line\"><span style=\"\"> * event.</span></span>\n<span class=\"line\"><span style=\"\"> * We record the max timestamp t found in the pass n.</span></span>\n<span class=\"line\"><span style=\"\"> * Assuming these timestamps are monotonic across cpus, we know that if</span></span>\n<span class=\"line\"><span style=\"\"> * a buffer still has events with timestamps below t, they will be all</span></span>\n<span class=\"line\"><span style=\"\"> * available and then read in the pass n + 1.</span></span>\n<span class=\"line\"><span style=\"\"> * Hence when we start to read the pass n + 2, we can safely flush every</span></span>\n<span class=\"line\"><span style=\"\"> * events with timestamps below t.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    ============ PASS n =================</span></span>\n<span class=\"line\"><span style=\"\"> *       CPU 0         |   CPU 1</span></span>\n<span class=\"line\"><span style=\"\"> *                     |</span></span>\n<span class=\"line\"><span style=\"\"> *    cnt1 timestamps  |   cnt2 timestamps</span></span>\n<span class=\"line\"><span style=\"\"> *          1          |         2</span></span>\n<span class=\"line\"><span style=\"\"> *          2          |         3</span></span>\n<span class=\"line\"><span style=\"\"> *          -          |         4  &#x3C;--- max recorded</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    ============ PASS n + 1 ==============</span></span>\n<span class=\"line\"><span style=\"\"> *       CPU 0         |   CPU 1</span></span>\n<span class=\"line\"><span style=\"\"> *                     |</span></span>\n<span class=\"line\"><span style=\"\"> *    cnt1 timestamps  |   cnt2 timestamps</span></span>\n<span class=\"line\"><span style=\"\"> *          3          |         5</span></span>\n<span class=\"line\"><span style=\"\"> *          4          |         6</span></span>\n<span class=\"line\"><span style=\"\"> *          5          |         7 &#x3C;---- max recorded</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Flush every events below timestamp 4</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    ============ PASS n + 2 ==============</span></span>\n<span class=\"line\"><span style=\"\"> *       CPU 0         |   CPU 1</span></span>\n<span class=\"line\"><span style=\"\"> *                     |</span></span>\n<span class=\"line\"><span style=\"\"> *    cnt1 timestamps  |   cnt2 timestamps</span></span>\n<span class=\"line\"><span style=\"\"> *          6          |         8</span></span>\n<span class=\"line\"><span style=\"\"> *          7          |         9</span></span>\n<span class=\"line\"><span style=\"\"> *          -          |         10</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      Flush every events below timestamp 7</span></span>\n<span class=\"line\"><span style=\"\"> *      etc...</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/session.c#L1041-L1079",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/util/session.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       (\\Sum n_i^2) - ((\\Sum n_i)^2)/n</span></span>\n<span class=\"line\"><span style=\"\"> * s^2 = -------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *                  n - 1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * http://en.wikipedia.org/wiki/Stddev</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The std dev of the mean is related to the std dev by:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *             s</span></span>\n<span class=\"line\"><span style=\"\"> * s_mean = -------</span></span>\n<span class=\"line\"><span style=\"\"> *          sqrt(n)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/stat.c#L41-L56",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": true
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/util/stat.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Use trigger to model operations which need to be executed when</span></span>\n<span class=\"line\"><span style=\"\"> * an event (a signal, for example) is observed.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * States and transits:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  OFF--> ON --> READY --(hit)--> HIT</span></span>\n<span class=\"line\"><span style=\"\"> *                 ^               |</span></span>\n<span class=\"line\"><span style=\"\"> *                 |            (ready)</span></span>\n<span class=\"line\"><span style=\"\"> *                 |               |</span></span>\n<span class=\"line\"><span style=\"\"> *                  \\_____________/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * is_hit and is_ready are two key functions to query the state of</span></span>\n<span class=\"line\"><span style=\"\"> * a trigger. is_hit means the event already happen; is_ready means the</span></span>\n<span class=\"line\"><span style=\"\"> * trigger is waiting for the event.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/perf/util/trigger.h#L7-L23",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/perf/util/trigger.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* This magnitude comparison uses the signless first words and</span></span>\n<span class=\"line\"><span style=\"\"> * the regular part2 words.  The comparison is graphically:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       1st greater?  -------------</span></span>\n<span class=\"line\"><span style=\"\"> *                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *       1st less?-----------------+---------</span></span>\n<span class=\"line\"><span style=\"\"> *                                 |        |</span></span>\n<span class=\"line\"><span style=\"\"> *       2nd greater or equal----->|        |</span></span>\n<span class=\"line\"><span style=\"\"> *                               False     True</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/parisc/math-emu/dbl_float.h#L213-L222",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/parisc/math-emu/dbl_float.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Generate an NFIT table to describe the following topology:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * BUS0: Interleaved PMEM regions, and aliasing with BLK regions</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     (a)                       (b)            DIMM   BLK-REGION</span></span>\n<span class=\"line\"><span style=\"\"> *           +----------+--------------+----------+---------+</span></span>\n<span class=\"line\"><span style=\"\"> * +------+  |  blk2.0  |     pm0.0    |  blk2.1  |  pm1.0  |    0      region2</span></span>\n<span class=\"line\"><span style=\"\"> * | imc0 +--+- - - - - region0 - - - -+----------+         +</span></span>\n<span class=\"line\"><span style=\"\"> * +--+---+  |  blk3.0  |     pm0.0    |  blk3.1  |  pm1.0  |    1      region3</span></span>\n<span class=\"line\"><span style=\"\"> *    |      +----------+--------------v----------v         v</span></span>\n<span class=\"line\"><span style=\"\"> * +--+---+                            |                    |</span></span>\n<span class=\"line\"><span style=\"\"> * | cpu0 |                                    region1</span></span>\n<span class=\"line\"><span style=\"\"> * +--+---+                            |                    |</span></span>\n<span class=\"line\"><span style=\"\"> *    |      +-------------------------^----------^         ^</span></span>\n<span class=\"line\"><span style=\"\"> * +--+---+  |                 blk4.0             |  pm1.0  |    2      region4</span></span>\n<span class=\"line\"><span style=\"\"> * | imc1 +--+-------------------------+----------+         +</span></span>\n<span class=\"line\"><span style=\"\"> * +------+  |                 blk5.0             |  pm1.0  |    3      region5</span></span>\n<span class=\"line\"><span style=\"\"> *           +-------------------------+----------+-+-------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * +--+---+</span></span>\n<span class=\"line\"><span style=\"\"> * | cpu1 |</span></span>\n<span class=\"line\"><span style=\"\"> * +--+---+                   (Hotplug DIMM)</span></span>\n<span class=\"line\"><span style=\"\"> *    |      +----------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +--+---+  |                 blk6.0/pm7.0                 |    4      region6/7</span></span>\n<span class=\"line\"><span style=\"\"> * | imc0 +--+----------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * *) In this layout we have four dimms and two memory controllers in one</span></span>\n<span class=\"line\"><span style=\"\"> *    socket.  Each unique interface (BLK or PMEM) to DPA space</span></span>\n<span class=\"line\"><span style=\"\"> *    is identified by a region device with a dynamically assigned id.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * *) The first portion of dimm0 and dimm1 are interleaved as REGION0.</span></span>\n<span class=\"line\"><span style=\"\"> *    A single PMEM namespace \"pm0.0\" is created using half of the</span></span>\n<span class=\"line\"><span style=\"\"> *    REGION0 SPA-range.  REGION0 spans dimm0 and dimm1.  PMEM namespace</span></span>\n<span class=\"line\"><span style=\"\"> *    allocate from from the bottom of a region.  The unallocated</span></span>\n<span class=\"line\"><span style=\"\"> *    portion of REGION0 aliases with REGION2 and REGION3.  That</span></span>\n<span class=\"line\"><span style=\"\"> *    unallacted capacity is reclaimed as BLK namespaces (\"blk2.0\" and</span></span>\n<span class=\"line\"><span style=\"\"> *    \"blk3.0\") starting at the base of each DIMM to offset (a) in those</span></span>\n<span class=\"line\"><span style=\"\"> *    DIMMs.  \"pm0.0\", \"blk2.0\" and \"blk3.0\" are free-form readable</span></span>\n<span class=\"line\"><span style=\"\"> *    names that can be assigned to a namespace.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * *) In the last portion of dimm0 and dimm1 we have an interleaved</span></span>\n<span class=\"line\"><span style=\"\"> *    SPA range, REGION1, that spans those two dimms as well as dimm2</span></span>\n<span class=\"line\"><span style=\"\"> *    and dimm3.  Some of REGION1 allocated to a PMEM namespace named</span></span>\n<span class=\"line\"><span style=\"\"> *    \"pm1.0\" the rest is reclaimed in 4 BLK namespaces (for each</span></span>\n<span class=\"line\"><span style=\"\"> *    dimm in the interleave set), \"blk2.1\", \"blk3.1\", \"blk4.0\", and</span></span>\n<span class=\"line\"><span style=\"\"> *    \"blk5.0\".</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * *) The portion of dimm2 and dimm3 that do not participate in the</span></span>\n<span class=\"line\"><span style=\"\"> *    REGION1 interleaved SPA range (i.e. the DPA address below offset</span></span>\n<span class=\"line\"><span style=\"\"> *    (b) are also included in the \"blk4.0\" and \"blk5.0\" namespaces.</span></span>\n<span class=\"line\"><span style=\"\"> *    Note, that BLK namespaces need not be contiguous in DPA-space, and</span></span>\n<span class=\"line\"><span style=\"\"> *    can consume aliased capacity from multiple interleave sets.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * BUS1: Legacy NVDIMM (single contiguous range)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  region2</span></span>\n<span class=\"line\"><span style=\"\"> * +---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |---------------------|</span></span>\n<span class=\"line\"><span style=\"\"> * ||       pm2.0       ||</span></span>\n<span class=\"line\"><span style=\"\"> * |---------------------|</span></span>\n<span class=\"line\"><span style=\"\"> * +---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * *) A NFIT-table may describe a simple system-physical-address range</span></span>\n<span class=\"line\"><span style=\"\"> *    with no BLK aliasing.  This type of region may optionally</span></span>\n<span class=\"line\"><span style=\"\"> *    reference an NVDIMM.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/nvdimm/test/nfit.c#L26-L94",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/nvdimm/test/nfit.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* This program shows clang/llvm is able to generate code pattern</span></span>\n<span class=\"line\"><span style=\"\"> * like:</span></span>\n<span class=\"line\"><span style=\"\"> *   _tcp_send_active_reset:</span></span>\n<span class=\"line\"><span style=\"\"> *      0:       bf 16 00 00 00 00 00 00         r6 = r1</span></span>\n<span class=\"line\"><span style=\"\"> *    ......</span></span>\n<span class=\"line\"><span style=\"\"> *    335:       b7 01 00 00 0f 00 00 00         r1 = 15</span></span>\n<span class=\"line\"><span style=\"\"> *    336:       05 00 48 00 00 00 00 00         goto 72</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   LBB0_3:</span></span>\n<span class=\"line\"><span style=\"\"> *    337:       b7 01 00 00 01 00 00 00         r1 = 1</span></span>\n<span class=\"line\"><span style=\"\"> *    338:       63 1a d0 ff 00 00 00 00         *(u32 *)(r10 - 48) = r1</span></span>\n<span class=\"line\"><span style=\"\"> *    408:       b7 01 00 00 03 00 00 00         r1 = 3</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   LBB0_4:</span></span>\n<span class=\"line\"><span style=\"\"> *    409:       71 a2 fe ff 00 00 00 00         r2 = *(u8 *)(r10 - 2)</span></span>\n<span class=\"line\"><span style=\"\"> *    410:       bf a7 00 00 00 00 00 00         r7 = r10</span></span>\n<span class=\"line\"><span style=\"\"> *    411:       07 07 00 00 b8 ff ff ff         r7 += -72</span></span>\n<span class=\"line\"><span style=\"\"> *    412:       bf 73 00 00 00 00 00 00         r3 = r7</span></span>\n<span class=\"line\"><span style=\"\"> *    413:       0f 13 00 00 00 00 00 00         r3 += r1</span></span>\n<span class=\"line\"><span style=\"\"> *    414:       73 23 2d 00 00 00 00 00         *(u8 *)(r3 + 45) = r2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * From the above code snippet, the code generated by the compiler</span></span>\n<span class=\"line\"><span style=\"\"> * is reasonable. The \"r1\" is assigned to different values in basic</span></span>\n<span class=\"line\"><span style=\"\"> * blocks \"_tcp_send_active_reset\" and \"LBB0_3\", and used in \"LBB0_4\".</span></span>\n<span class=\"line\"><span style=\"\"> * The verifier should be able to handle such code patterns.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/bpf/progs/test_tcp_estats.c#L8-L33",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/bpf/progs/test_tcp_estats.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Array_A  &#x3C;------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *     elem_type == Array_B    |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |        |</span></span>\n<span class=\"line\"><span style=\"\"> *                    |        |</span></span>\n<span class=\"line\"><span style=\"\"> * Array_B  &#x3C;-------- +        |</span></span>\n<span class=\"line\"><span style=\"\"> *      elem_type == Array A --+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/bpf/prog_tests/btf.c#L1185-L1191",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/bpf/prog_tests/btf.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * End-to-end eBPF tunnel test suite</span></span>\n<span class=\"line\"><span style=\"\"> *   The file tests BPF network tunnel implementation.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Topology:</span></span>\n<span class=\"line\"><span style=\"\"> * ---------</span></span>\n<span class=\"line\"><span style=\"\"> *     root namespace   |     at_ns0 namespace</span></span>\n<span class=\"line\"><span style=\"\"> *                       |</span></span>\n<span class=\"line\"><span style=\"\"> *       -----------     |     -----------</span></span>\n<span class=\"line\"><span style=\"\"> *       | tnl dev |     |     | tnl dev |  (overlay network)</span></span>\n<span class=\"line\"><span style=\"\"> *       -----------     |     -----------</span></span>\n<span class=\"line\"><span style=\"\"> *       metadata-mode   |     metadata-mode</span></span>\n<span class=\"line\"><span style=\"\"> *        with bpf       |       with bpf</span></span>\n<span class=\"line\"><span style=\"\"> *                       |</span></span>\n<span class=\"line\"><span style=\"\"> *       ----------      |     ----------</span></span>\n<span class=\"line\"><span style=\"\"> *       |  veth1  | --------- |  veth0  |  (underlay network)</span></span>\n<span class=\"line\"><span style=\"\"> *       ----------    peer    ----------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Device Configuration</span></span>\n<span class=\"line\"><span style=\"\"> *  --------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  root namespace with metadata-mode tunnel + BPF</span></span>\n<span class=\"line\"><span style=\"\"> *  Device names and addresses:</span></span>\n<span class=\"line\"><span style=\"\"> *\tveth1 IP 1: 172.16.1.200, IPv6: 00::22 (underlay)</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tIP 2: 172.16.1.20, IPv6: 00::bb (underlay)</span></span>\n<span class=\"line\"><span style=\"\"> *\ttunnel dev &#x3C;type>11, ex: gre11, IPv4: 10.1.1.200, IPv6: 1::22 (overlay)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Namespace at_ns0 with native tunnel</span></span>\n<span class=\"line\"><span style=\"\"> *  Device names and addresses:</span></span>\n<span class=\"line\"><span style=\"\"> *\tveth0 IPv4: 172.16.1.100, IPv6: 00::11 (underlay)</span></span>\n<span class=\"line\"><span style=\"\"> *\ttunnel dev &#x3C;type>00, ex: gre00, IPv4: 10.1.1.100, IPv6: 1::11 (overlay)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * End-to-end ping packet flow</span></span>\n<span class=\"line\"><span style=\"\"> *  ---------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  Most of the tests start by namespace creation, device configuration,</span></span>\n<span class=\"line\"><span style=\"\"> *  then ping the underlay and overlay network.  When doing 'ping 10.1.1.100'</span></span>\n<span class=\"line\"><span style=\"\"> *  from root namespace, the following operations happen:</span></span>\n<span class=\"line\"><span style=\"\"> *  1) Route lookup shows 10.1.1.100/24 belongs to tnl dev, fwd to tnl dev.</span></span>\n<span class=\"line\"><span style=\"\"> *  2) Tnl device's egress BPF program is triggered and set the tunnel metadata,</span></span>\n<span class=\"line\"><span style=\"\"> *     with local_ip=172.16.1.200, remote_ip=172.16.1.100. BPF program choose</span></span>\n<span class=\"line\"><span style=\"\"> *     the primary or secondary ip of veth1 as the local ip of tunnel. The</span></span>\n<span class=\"line\"><span style=\"\"> *     choice is made based on the value of bpf map local_ip_map.</span></span>\n<span class=\"line\"><span style=\"\"> *  3) Outer tunnel header is prepended and route the packet to veth1's egress.</span></span>\n<span class=\"line\"><span style=\"\"> *  4) veth0's ingress queue receive the tunneled packet at namespace at_ns0.</span></span>\n<span class=\"line\"><span style=\"\"> *  5) Tunnel protocol handler, ex: vxlan_rcv, decap the packet.</span></span>\n<span class=\"line\"><span style=\"\"> *  6) Forward the packet to the overlay tnl dev.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/bpf/prog_tests/test_tunnel.c#L3-L50",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/bpf/prog_tests/test_tunnel.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Topology:</span></span>\n<span class=\"line\"><span style=\"\"> * ---------</span></span>\n<span class=\"line\"><span style=\"\"> *   NS0 namespace         |   NS1 namespace        | NS2 namespace</span></span>\n<span class=\"line\"><span style=\"\"> *                         |                        |</span></span>\n<span class=\"line\"><span style=\"\"> *   +---------------+     |   +---------------+    |</span></span>\n<span class=\"line\"><span style=\"\"> *   |    ipsec0     |---------|    ipsec0     |    |</span></span>\n<span class=\"line\"><span style=\"\"> *   | 192.168.1.100 |     |   | 192.168.1.200 |    |</span></span>\n<span class=\"line\"><span style=\"\"> *   | if_id: bpf    |     |   +---------------+    |</span></span>\n<span class=\"line\"><span style=\"\"> *   +---------------+     |                        |</span></span>\n<span class=\"line\"><span style=\"\"> *           |             |                        |   +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *           |             |                        |   |    ipsec0     |</span></span>\n<span class=\"line\"><span style=\"\"> *           \\------------------------------------------| 192.168.1.200 |</span></span>\n<span class=\"line\"><span style=\"\"> *                         |                        |   +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                         |                        |</span></span>\n<span class=\"line\"><span style=\"\"> *                         |                        | (overlay network)</span></span>\n<span class=\"line\"><span style=\"\"> *      ------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *                         |                        | (underlay network)</span></span>\n<span class=\"line\"><span style=\"\"> *   +--------------+      |   +--------------+     |</span></span>\n<span class=\"line\"><span style=\"\"> *   |    veth01    |----------|    veth10    |     |</span></span>\n<span class=\"line\"><span style=\"\"> *   | 172.16.1.100 |      |   | 172.16.1.200 |     |</span></span>\n<span class=\"line\"><span style=\"\"> *   ---------------+      |   +--------------+     |</span></span>\n<span class=\"line\"><span style=\"\"> *                         |                        |</span></span>\n<span class=\"line\"><span style=\"\"> *   +--------------+      |                        |   +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *   |    veth02    |-----------------------------------|    veth20    |</span></span>\n<span class=\"line\"><span style=\"\"> *   | 172.16.2.100 |      |                        |   | 172.16.2.200 |</span></span>\n<span class=\"line\"><span style=\"\"> *   +--------------+      |                        |   +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Test Packet flow</span></span>\n<span class=\"line\"><span style=\"\"> * -----------</span></span>\n<span class=\"line\"><span style=\"\"> *  The tests perform 'ping 192.168.1.200' from the NS0 namespace:</span></span>\n<span class=\"line\"><span style=\"\"> *  1) request is routed to NS0 ipsec0</span></span>\n<span class=\"line\"><span style=\"\"> *  2) NS0 ipsec0 tc egress BPF program is triggered and sets the if_id based</span></span>\n<span class=\"line\"><span style=\"\"> *     on the requested value. This makes the ipsec0 device in external mode</span></span>\n<span class=\"line\"><span style=\"\"> *     select the destination tunnel</span></span>\n<span class=\"line\"><span style=\"\"> *  3) ping reaches the other namespace (NS1 or NS2 based on which if_id was</span></span>\n<span class=\"line\"><span style=\"\"> *     used) and response is sent</span></span>\n<span class=\"line\"><span style=\"\"> *  4) response is received on NS0 ipsec0, tc ingress program is triggered and</span></span>\n<span class=\"line\"><span style=\"\"> *     records the response if_id</span></span>\n<span class=\"line\"><span style=\"\"> *  5) requested if_id is compared with received if_id</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/bpf/prog_tests/xfrm_info.c#L3-L44",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/bpf/prog_tests/xfrm_info.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* instructions used to output a skb based software event, produced</span></span>\n<span class=\"line\"><span style=\"\"> * from code snippet:</span></span>\n<span class=\"line\"><span style=\"\"> * struct TMP {</span></span>\n<span class=\"line\"><span style=\"\"> *  uint64_t tmp;</span></span>\n<span class=\"line\"><span style=\"\"> * } tt;</span></span>\n<span class=\"line\"><span style=\"\"> * tt.tmp = 5;</span></span>\n<span class=\"line\"><span style=\"\"> * bpf_perf_event_output(skb, &#x26;connection_tracking_event_map, 0,</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t &#x26;tt, sizeof(tt));</span></span>\n<span class=\"line\"><span style=\"\"> * return 1;</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * the bpf assembly from llvm is:</span></span>\n<span class=\"line\"><span style=\"\"> *        0:       b7 02 00 00 05 00 00 00         r2 = 5</span></span>\n<span class=\"line\"><span style=\"\"> *        1:       7b 2a f8 ff 00 00 00 00         *(u64 *)(r10 - 8) = r2</span></span>\n<span class=\"line\"><span style=\"\"> *        2:       bf a4 00 00 00 00 00 00         r4 = r10</span></span>\n<span class=\"line\"><span style=\"\"> *        3:       07 04 00 00 f8 ff ff ff         r4 += -8</span></span>\n<span class=\"line\"><span style=\"\"> *        4:       18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00    r2 = 0ll</span></span>\n<span class=\"line\"><span style=\"\"> *        6:       b7 03 00 00 00 00 00 00         r3 = 0</span></span>\n<span class=\"line\"><span style=\"\"> *        7:       b7 05 00 00 08 00 00 00         r5 = 8</span></span>\n<span class=\"line\"><span style=\"\"> *        8:       85 00 00 00 19 00 00 00         call 25</span></span>\n<span class=\"line\"><span style=\"\"> *        9:       b7 00 00 00 01 00 00 00         r0 = 1</span></span>\n<span class=\"line\"><span style=\"\"> *       10:       95 00 00 00 00 00 00 00         exit</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     The reason I put the code here instead of fill_helpers is that map fixup</span></span>\n<span class=\"line\"><span style=\"\"> *     is against the insns, instead of filled prog.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/bpf/verifier/event_output.c#L1-L25",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/bpf/verifier/event_output.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * NOTES about DMA transfers:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  controller 1: channels 0-3, byte operations, ports 00-1F</span></span>\n<span class=\"line\"><span style=\"\"> *  controller 2: channels 4-7, word operations, ports C0-DF</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - ALL registers are 8 bits only, regardless of transfer size</span></span>\n<span class=\"line\"><span style=\"\"> *  - channel 4 is not used - cascades 1 into 2.</span></span>\n<span class=\"line\"><span style=\"\"> *  - channels 0-3 are byte - addresses/counts are for physical bytes</span></span>\n<span class=\"line\"><span style=\"\"> *  - channels 5-7 are word - addresses/counts are for physical words</span></span>\n<span class=\"line\"><span style=\"\"> *  - transfers must not cross physical 64K (0-3) or 128K (5-7) boundaries</span></span>\n<span class=\"line\"><span style=\"\"> *  - transfer count loaded to registers is 1 less than actual count</span></span>\n<span class=\"line\"><span style=\"\"> *  - controller 2 offsets are all even (2x offsets for controller 1)</span></span>\n<span class=\"line\"><span style=\"\"> *  - page registers for 5-7 don't use data bit 0, represent 128K pages</span></span>\n<span class=\"line\"><span style=\"\"> *  - page registers for 0-3 use bit 0, represent 64K pages</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * On CHRP, the W83C553F (and VLSI Tollgate?) support full 32 bit addressing.</span></span>\n<span class=\"line\"><span style=\"\"> * Note that addresses loaded into registers must be _physical_ addresses,</span></span>\n<span class=\"line\"><span style=\"\"> * not logical addresses (which may differ if paging is active).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Address mapping for channels 0-3:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   A23 ... A16 A15 ... A8  A7 ... A0    (Physical addresses)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   |  ... |   |  ... |</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   |  ... |   |  ... |</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   |  ... |   |  ... |</span></span>\n<span class=\"line\"><span style=\"\"> *   P7  ...  P0  A7 ... A0  A7 ... A0</span></span>\n<span class=\"line\"><span style=\"\"> * |    Page    | Addr MSB | Addr LSB |   (DMA registers)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Address mapping for channels 5-7:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   A23 ... A17 A16 A15 ... A9 A8 A7 ... A1 A0    (Physical addresses)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   \\   \\   ... \\  \\  \\  ... \\  \\</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |    \\   \\   ... \\  \\  \\  ... \\  (not used)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |     \\   \\   ... \\  \\  \\  ... \\</span></span>\n<span class=\"line\"><span style=\"\"> *   P7  ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0</span></span>\n<span class=\"line\"><span style=\"\"> * |      Page      |  Addr MSB   |  Addr LSB  |   (DMA registers)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Again, channels 5-7 transfer _physical_ words (16 bits), so addresses</span></span>\n<span class=\"line\"><span style=\"\"> * and counts _must_ be word-aligned (the lowest address bit is _ignored_ at</span></span>\n<span class=\"line\"><span style=\"\"> * the hardware level, so odd-byte transfers aren't possible).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Transfer count (_not # bytes_) is limited to 64K, represented as actual</span></span>\n<span class=\"line\"><span style=\"\"> * count - 1 : 64K => 0xFFFF, 1 => 0x0000.  Thus, count is always 1 or more,</span></span>\n<span class=\"line\"><span style=\"\"> * and up to 128K bytes may be transferred on channels 5-7 in one operation.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/powerpc/include/asm/dma.h#L41-L87",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/powerpc/include/asm/dma.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * To avoid the need to unnecessarily exit fully to the host kernel, an IPI to</span></span>\n<span class=\"line\"><span style=\"\"> * a CPU thread that's running/napping inside of a guest is by default regarded</span></span>\n<span class=\"line\"><span style=\"\"> * as a request to wake the CPU (if needed) and continue execution within the</span></span>\n<span class=\"line\"><span style=\"\"> * guest, potentially to process new state like externally-generated</span></span>\n<span class=\"line\"><span style=\"\"> * interrupts or IPIs sent from within the guest itself (e.g. H_PROD/H_IPI).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To force an exit to the host kernel, kvmppc_set_host_ipi() must be called</span></span>\n<span class=\"line\"><span style=\"\"> * prior to issuing the IPI to set the corresponding 'host_ipi' flag in the</span></span>\n<span class=\"line\"><span style=\"\"> * target CPU's PACA. To avoid unnecessary exits to the host, this flag should</span></span>\n<span class=\"line\"><span style=\"\"> * be immediately cleared via kvmppc_clear_host_ipi() by the IPI handler on</span></span>\n<span class=\"line\"><span style=\"\"> * the receiving side prior to processing the IPI work.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NOTE:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We currently issue an smp_mb() at the beginning of kvmppc_set_host_ipi().</span></span>\n<span class=\"line\"><span style=\"\"> * This is to guard against sequences such as the following:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      CPU</span></span>\n<span class=\"line\"><span style=\"\"> *        X: smp_muxed_ipi_set_message():</span></span>\n<span class=\"line\"><span style=\"\"> *        X:   smp_mb()</span></span>\n<span class=\"line\"><span style=\"\"> *        X:   message[RESCHEDULE] = 1</span></span>\n<span class=\"line\"><span style=\"\"> *        X: doorbell_global_ipi(42):</span></span>\n<span class=\"line\"><span style=\"\"> *        X:   kvmppc_set_host_ipi(42)</span></span>\n<span class=\"line\"><span style=\"\"> *        X:   ppc_msgsnd_sync()/smp_mb()</span></span>\n<span class=\"line\"><span style=\"\"> *        X:   ppc_msgsnd() -> 42</span></span>\n<span class=\"line\"><span style=\"\"> *       42: doorbell_exception(): // from CPU X</span></span>\n<span class=\"line\"><span style=\"\"> *       42:   ppc_msgsync()</span></span>\n<span class=\"line\"><span style=\"\"> *      105: smp_muxed_ipi_set_message():</span></span>\n<span class=\"line\"><span style=\"\"> *      105:   smb_mb()</span></span>\n<span class=\"line\"><span style=\"\"> *           // STORE DEFERRED DUE TO RE-ORDERING</span></span>\n<span class=\"line\"><span style=\"\"> *    --105:   message[CALL_FUNCTION] = 1</span></span>\n<span class=\"line\"><span style=\"\"> *    | 105: doorbell_global_ipi(42):</span></span>\n<span class=\"line\"><span style=\"\"> *    | 105:   kvmppc_set_host_ipi(42)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  42:   kvmppc_clear_host_ipi(42)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  42: smp_ipi_demux_relaxed()</span></span>\n<span class=\"line\"><span style=\"\"> *    |  42: // returns to executing guest</span></span>\n<span class=\"line\"><span style=\"\"> *    |      // RE-ORDERED STORE COMPLETES</span></span>\n<span class=\"line\"><span style=\"\"> *    ->105:   message[CALL_FUNCTION] = 1</span></span>\n<span class=\"line\"><span style=\"\"> *      105:   ppc_msgsnd_sync()/smp_mb()</span></span>\n<span class=\"line\"><span style=\"\"> *      105:   ppc_msgsnd() -> 42</span></span>\n<span class=\"line\"><span style=\"\"> *       42: local_paca->kvm_hstate.host_ipi == 0 // IPI ignored</span></span>\n<span class=\"line\"><span style=\"\"> *      105: // hangs waiting on 42 to process messages/call_single_queue</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We also issue an smp_mb() at the end of kvmppc_clear_host_ipi(). This is</span></span>\n<span class=\"line\"><span style=\"\"> * to guard against sequences such as the following (as well as to create</span></span>\n<span class=\"line\"><span style=\"\"> * a read-side pairing with the barrier in kvmppc_set_host_ipi()):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      CPU</span></span>\n<span class=\"line\"><span style=\"\"> *        X: smp_muxed_ipi_set_message():</span></span>\n<span class=\"line\"><span style=\"\"> *        X:   smp_mb()</span></span>\n<span class=\"line\"><span style=\"\"> *        X:   message[RESCHEDULE] = 1</span></span>\n<span class=\"line\"><span style=\"\"> *        X: doorbell_global_ipi(42):</span></span>\n<span class=\"line\"><span style=\"\"> *        X:   kvmppc_set_host_ipi(42)</span></span>\n<span class=\"line\"><span style=\"\"> *        X:   ppc_msgsnd_sync()/smp_mb()</span></span>\n<span class=\"line\"><span style=\"\"> *        X:   ppc_msgsnd() -> 42</span></span>\n<span class=\"line\"><span style=\"\"> *       42: doorbell_exception(): // from CPU X</span></span>\n<span class=\"line\"><span style=\"\"> *       42:   ppc_msgsync()</span></span>\n<span class=\"line\"><span style=\"\"> *           // STORE DEFERRED DUE TO RE-ORDERING</span></span>\n<span class=\"line\"><span style=\"\"> *    -- 42:   kvmppc_clear_host_ipi(42)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  42: smp_ipi_demux_relaxed()</span></span>\n<span class=\"line\"><span style=\"\"> *    | 105: smp_muxed_ipi_set_message():</span></span>\n<span class=\"line\"><span style=\"\"> *    | 105:   smb_mb()</span></span>\n<span class=\"line\"><span style=\"\"> *    | 105:   message[CALL_FUNCTION] = 1</span></span>\n<span class=\"line\"><span style=\"\"> *    | 105: doorbell_global_ipi(42):</span></span>\n<span class=\"line\"><span style=\"\"> *    | 105:   kvmppc_set_host_ipi(42)</span></span>\n<span class=\"line\"><span style=\"\"> *    |      // RE-ORDERED STORE COMPLETES</span></span>\n<span class=\"line\"><span style=\"\"> *    -> 42:   kvmppc_clear_host_ipi(42)</span></span>\n<span class=\"line\"><span style=\"\"> *       42: // returns to executing guest</span></span>\n<span class=\"line\"><span style=\"\"> *      105:   ppc_msgsnd_sync()/smp_mb()</span></span>\n<span class=\"line\"><span style=\"\"> *      105:   ppc_msgsnd() -> 42</span></span>\n<span class=\"line\"><span style=\"\"> *       42: local_paca->kvm_hstate.host_ipi == 0 // IPI ignored</span></span>\n<span class=\"line\"><span style=\"\"> *      105: // hangs waiting on 42 to process messages/call_single_queue</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/powerpc/include/asm/kvm_ppc.h#L444-L517",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/powerpc/include/asm/kvm_ppc.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * layout1 hierarchy:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * tmp</span></span>\n<span class=\"line\"><span style=\"\"> * ├── s1d1</span></span>\n<span class=\"line\"><span style=\"\"> * │   ├── f1</span></span>\n<span class=\"line\"><span style=\"\"> * │   ├── f2</span></span>\n<span class=\"line\"><span style=\"\"> * │   └── s1d2</span></span>\n<span class=\"line\"><span style=\"\"> * │       ├── f1</span></span>\n<span class=\"line\"><span style=\"\"> * │       ├── f2</span></span>\n<span class=\"line\"><span style=\"\"> * │       └── s1d3</span></span>\n<span class=\"line\"><span style=\"\"> * │           ├── f1</span></span>\n<span class=\"line\"><span style=\"\"> * │           └── f2</span></span>\n<span class=\"line\"><span style=\"\"> * ├── s2d1</span></span>\n<span class=\"line\"><span style=\"\"> * │   ├── f1</span></span>\n<span class=\"line\"><span style=\"\"> * │   └── s2d2</span></span>\n<span class=\"line\"><span style=\"\"> * │       ├── f1</span></span>\n<span class=\"line\"><span style=\"\"> * │       └── s2d3</span></span>\n<span class=\"line\"><span style=\"\"> * │           ├── f1</span></span>\n<span class=\"line\"><span style=\"\"> * │           └── f2</span></span>\n<span class=\"line\"><span style=\"\"> * └── s3d1</span></span>\n<span class=\"line\"><span style=\"\"> *     ├── f1</span></span>\n<span class=\"line\"><span style=\"\"> *     └── s3d2</span></span>\n<span class=\"line\"><span style=\"\"> *         └── s3d3</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/landlock/fs_test.c#L66-L90",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/landlock/fs_test.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *        Parent + child domain (siblings)</span></span>\n<span class=\"line\"><span style=\"\"> * .------.</span></span>\n<span class=\"line\"><span style=\"\"> * |  P1  ---.          P1 -> P2 : deny</span></span>\n<span class=\"line\"><span style=\"\"> * '------'   \\         P2 -> P1 : deny</span></span>\n<span class=\"line\"><span style=\"\"> *         .---'--.</span></span>\n<span class=\"line\"><span style=\"\"> *         |  P2  |</span></span>\n<span class=\"line\"><span style=\"\"> *         '------'</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/landlock/ptrace_test.c#L131-L139",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/landlock/ptrace_test.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Stack layout:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                   ^</span></span>\n<span class=\"line\"><span style=\"\"> *  User stack       |</span></span>\n<span class=\"line\"><span style=\"\"> *  Back chain ------+\t&#x3C;- r1\t\t&#x3C;-------+</span></span>\n<span class=\"line\"><span style=\"\"> *  ...\t\t\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  Red zone / ABI Gap\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  ...\t\t\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  vr63\t&#x3C;+\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  vr0\t\t |\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  VSCR\t |\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  FSCR\t |\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  r31\t\t | Save area\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  r0\t\t |\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  XER\t\t |\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  CTR\t\t |\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  LR\t\t |\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  CCR\t\t&#x3C;+\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  ...\t\t&#x3C;+\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  LR\t\t | Caller frame\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  CCR\t\t |\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *  Back chain\t&#x3C;+\t&#x3C;- updated r1\t--------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/tools/testing/selftests/powerpc/pmu/ebb/ebb_handler.S#L16-L39",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/tools/testing/selftests/powerpc/pmu/ebb/ebb_handler.S"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * vmemmap is the starting address of the virtual address space where</span></span>\n<span class=\"line\"><span style=\"\"> * struct pages are allocated for all possible PFNs present on the system</span></span>\n<span class=\"line\"><span style=\"\"> * including holes and bad memory (hence sparse). These virtual struct</span></span>\n<span class=\"line\"><span style=\"\"> * pages are stored in sequence in this virtual address space irrespective</span></span>\n<span class=\"line\"><span style=\"\"> * of the fact whether the corresponding PFN is valid or not. This achieves</span></span>\n<span class=\"line\"><span style=\"\"> * constant relationship between address of struct page and its PFN.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * During boot or memory hotplug operation when a new memory section is</span></span>\n<span class=\"line\"><span style=\"\"> * added, physical memory allocation (including hash table bolting) will</span></span>\n<span class=\"line\"><span style=\"\"> * be performed for the set of struct pages which are part of the memory</span></span>\n<span class=\"line\"><span style=\"\"> * section. This saves memory by not allocating struct pages for PFNs</span></span>\n<span class=\"line\"><span style=\"\"> * which are not valid.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t----------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t| PHYSICAL ALLOCATION OF VIRTUAL STRUCT PAGES|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t----------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t   f000000000000000                  c000000000000000</span></span>\n<span class=\"line\"><span style=\"\"> * vmemmap +--------------+                  +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  +      |  page struct | +--------------> |  page struct |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+                  +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | +--------------> |  page struct |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+ |                +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | +       +------> |  page struct |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+         |        +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct |         |   +--> |  page struct |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+         |   |    +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct |         |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+         |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct |         |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+         |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct |         |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+         |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct |         |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+         |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | +-------+   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+             |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | No mapping</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | No mapping</span></span>\n<span class=\"line\"><span style=\"\"> *  v      +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t-----------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t| RELATION BETWEEN STRUCT PAGES AND PFNS|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t-----------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * vmemmap +--------------+                 +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  +      |  page struct | +-------------> |      PFN      |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+                 +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | +-------------> |      PFN      |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+                 +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | +-------------> |      PFN      |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+                 +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | +-------------> |      PFN      |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+                 +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |              |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |              |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |              |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+                 +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | +-------------> |      PFN      |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+                 +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |              |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |              |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+                 +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | +-------------> |      PFN      |</span></span>\n<span class=\"line\"><span style=\"\"> *  |      +--------------+                 +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |      |  page struct | +-------------> |      PFN      |</span></span>\n<span class=\"line\"><span style=\"\"> *  v      +--------------+                 +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/powerpc/mm/book3s64/hash_pgtable.c#L27-L101",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/powerpc/mm/book3s64/hash_pgtable.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Split/unsplit procedure:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * A core can be in one of three states, unsplit, 2-way split, and 4-way split.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The mapping to subcores_per_core is simple:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  State       | subcores_per_core</span></span>\n<span class=\"line\"><span style=\"\"> *  ------------|------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  Unsplit     |        1</span></span>\n<span class=\"line\"><span style=\"\"> *  2-way split |        2</span></span>\n<span class=\"line\"><span style=\"\"> *  4-way split |        4</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The core is split along thread boundaries, the mapping between subcores and</span></span>\n<span class=\"line\"><span style=\"\"> * threads is as follows:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Unsplit:</span></span>\n<span class=\"line\"><span style=\"\"> *          ----------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  Subcore |            0             |</span></span>\n<span class=\"line\"><span style=\"\"> *          ----------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  Thread  |  0  1  2  3  4  5  6  7  |</span></span>\n<span class=\"line\"><span style=\"\"> *          ----------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  2-way split:</span></span>\n<span class=\"line\"><span style=\"\"> *          -------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  Subcore |        0        |        1        |</span></span>\n<span class=\"line\"><span style=\"\"> *          -------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  Thread  |  0   1   2   3  |  4   5   6   7  |</span></span>\n<span class=\"line\"><span style=\"\"> *          -------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  4-way split:</span></span>\n<span class=\"line\"><span style=\"\"> *          -----------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  Subcore |    0    |    1    |    2    |    3    |</span></span>\n<span class=\"line\"><span style=\"\"> *          -----------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  Thread  |  0   1  |  2   3  |  4   5  |  6   7  |</span></span>\n<span class=\"line\"><span style=\"\"> *          -----------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Transitions</span></span>\n<span class=\"line\"><span style=\"\"> * -----------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * It is not possible to transition between either of the split states, the</span></span>\n<span class=\"line\"><span style=\"\"> * core must first be unsplit. The legal transitions are:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  -----------          ---------------</span></span>\n<span class=\"line\"><span style=\"\"> *  |         |  &#x3C;---->  | 2-way split |</span></span>\n<span class=\"line\"><span style=\"\"> *  |         |          ---------------</span></span>\n<span class=\"line\"><span style=\"\"> *  | Unsplit |</span></span>\n<span class=\"line\"><span style=\"\"> *  |         |          ---------------</span></span>\n<span class=\"line\"><span style=\"\"> *  |         |  &#x3C;---->  | 4-way split |</span></span>\n<span class=\"line\"><span style=\"\"> *  -----------          ---------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Unsplitting</span></span>\n<span class=\"line\"><span style=\"\"> * -----------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Unsplitting is the simpler procedure. It requires thread 0 to request the</span></span>\n<span class=\"line\"><span style=\"\"> * unsplit while all other threads NAP.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Thread 0 clears HID0_POWER8_DYNLPARDIS (Dynamic LPAR Disable). This tells</span></span>\n<span class=\"line\"><span style=\"\"> * the hardware that if all threads except 0 are napping, the hardware should</span></span>\n<span class=\"line\"><span style=\"\"> * unsplit the core.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Non-zero threads are sent to a NAP loop, they don't exit the loop until they</span></span>\n<span class=\"line\"><span style=\"\"> * see the core unsplit.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Core 0 spins waiting for the hardware to see all the other threads napping</span></span>\n<span class=\"line\"><span style=\"\"> * and perform the unsplit.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Once thread 0 sees the unsplit, it IPIs the secondary threads to wake them</span></span>\n<span class=\"line\"><span style=\"\"> * out of NAP. They will then see the core unsplit and exit the NAP loop.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Splitting</span></span>\n<span class=\"line\"><span style=\"\"> * ---------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The basic splitting procedure is fairly straight forward. However it is</span></span>\n<span class=\"line\"><span style=\"\"> * complicated by the fact that after the split occurs, the newly created</span></span>\n<span class=\"line\"><span style=\"\"> * subcores are not in a fully initialised state.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Most notably the subcores do not have the correct value for SDR1, which</span></span>\n<span class=\"line\"><span style=\"\"> * means they must not be running in virtual mode when the split occurs. The</span></span>\n<span class=\"line\"><span style=\"\"> * subcores have separate timebases SPRs but these are pre-synchronised by</span></span>\n<span class=\"line\"><span style=\"\"> * opal.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To begin with secondary threads are sent to an assembly routine. There they</span></span>\n<span class=\"line\"><span style=\"\"> * switch to real mode, so they are immune to the uninitialised SDR1 value.</span></span>\n<span class=\"line\"><span style=\"\"> * Once in real mode they indicate that they are in real mode, and spin waiting</span></span>\n<span class=\"line\"><span style=\"\"> * to see the core split.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Thread 0 waits to see that all secondaries are in real mode, and then begins</span></span>\n<span class=\"line\"><span style=\"\"> * the splitting procedure. It firstly sets HID0_POWER8_DYNLPARDIS, which</span></span>\n<span class=\"line\"><span style=\"\"> * prevents the hardware from unsplitting. Then it sets the appropriate HID bit</span></span>\n<span class=\"line\"><span style=\"\"> * to request the split, and spins waiting to see that the split has happened.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Concurrently the secondaries will notice the split. When they do they set up</span></span>\n<span class=\"line\"><span style=\"\"> * their SPRs, notably SDR1, and then they can return to virtual mode and exit</span></span>\n<span class=\"line\"><span style=\"\"> * the procedure.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/powerpc/platforms/powernv/subcore.c#L27-L123",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/powerpc/platforms/powernv/subcore.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* SPU Opcode Table</span></span>\n<span class=\"line\"><span style=\"\">-=-=-= FORMAT =-=-=-</span></span>\n<span class=\"line\"><span style=\"\">                                             \t\t                                             </span></span>\n<span class=\"line\"><span style=\"\">       +----+-------+-------+-------+-------+  \t\t       +------------+-------+-------+-------+</span></span>\n<span class=\"line\"><span style=\"\">RRR    | op |  RC   |  RB   |  RA   |  RT   |\t\tRI7    | op         |  I7   |  RA   |  RT   |</span></span>\n<span class=\"line\"><span style=\"\">       +----+-------+-------+-------+-------+\t\t       +------------+-------+-------+-------+</span></span>\n<span class=\"line\"><span style=\"\">        0  3       1       1       2       3\t\t        0          1       1       2       3 </span></span>\n<span class=\"line\"><span style=\"\">                   0       7       4       1\t\t                   0       7       4       1 </span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">       +-----------+--------+-------+-------+\t\t       +---------+----------+-------+-------+</span></span>\n<span class=\"line\"><span style=\"\">RI8    | op        |   I8   |  RA   |  RT   |\t\tRI10   | op      |   I10    |  RA   |  RT   |</span></span>\n<span class=\"line\"><span style=\"\">       +-----------+--------+-------+-------+\t\t       +---------+----------+-------+-------+</span></span>\n<span class=\"line\"><span style=\"\">        0         9        1       2       3\t\t        0       7          1       2       3 </span></span>\n<span class=\"line\"><span style=\"\">                           7       4       1\t\t                           7       4       1 </span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">       +----------+-----------------+-------+\t\t       +--------+-------------------+-------+</span></span>\n<span class=\"line\"><span style=\"\">RI16   | op       |       I16       |  RT   |\t\tRI18   | op     |       I18         |  RT   |</span></span>\n<span class=\"line\"><span style=\"\">       +----------+-----------------+-------+\t\t       +--------+-------------------+-------+</span></span>\n<span class=\"line\"><span style=\"\">        0        8                 2       3\t\t        0      6                   2       3 </span></span>\n<span class=\"line\"><span style=\"\">                                   4       1\t\t                                   4       1 </span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">       +------------+-------+-------+-------+\t\t       +-------+--+-----------------+-------+</span></span>\n<span class=\"line\"><span style=\"\">RR     | op         |  RB   |  RA   |  RT   |\t\tLBT    | op    |RO|       I16       |  RO   |</span></span>\n<span class=\"line\"><span style=\"\">       +------------+-------+-------+-------+\t\t       +-------+--+-----------------+-------+</span></span>\n<span class=\"line\"><span style=\"\">        0          1       1       2       3\t\t        0     6  8                 2       3 </span></span>\n<span class=\"line\"><span style=\"\">                   0       7       4       1\t\t                                   4       1 </span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">\t\t\t\t\t\t\t       +------------+----+--+-------+-------+</span></span>\n<span class=\"line\"><span style=\"\">\t\t\t\t\t\t\tLBTI   | op         | // |RO|  RA   |  RO   |</span></span>\n<span class=\"line\"><span style=\"\">\t\t\t\t\t\t\t       +------------+----+--+-------+-------+</span></span>\n<span class=\"line\"><span style=\"\">\t\t\t\t\t\t\t        0          1    1  1       2       3</span></span>\n<span class=\"line\"><span style=\"\">\t\t\t\t\t\t\t                   0    5  7       4       1</span></span>\n<span class=\"line\"><span style=\"\">-=-=-= OPCODE =-=-=-</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">OPCODE field specifies the most significant 11bit of the instruction. Some formats don't have 11bits for opcode field, and in this</span></span>\n<span class=\"line\"><span style=\"\">case, bit field other than op are defined as 0s. For example, opcode of fma instruction which is RRR format is defined as 0x700,</span></span>\n<span class=\"line\"><span style=\"\">since 0x700 -> 11'b11100000000, this means opcode is 4'b1110, and other 7bits are defined as 7'b0000000.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">-=-=-= ASM_FORMAT =-=-=-</span></span>\n<span class=\"line\"><span style=\"\">RRR category\t\t\t\t\t\tRI7 category                               </span></span>\n<span class=\"line\"><span style=\"\">\tASM_RRR\t\tmnemonic RC, RA, RB, RT\t\t        ASM_RI4         mnemonic RT, RA, I4</span></span>\n<span class=\"line\"><span style=\"\">\t\t\t\t\t\t\t        ASM_RI7         mnemonic RT, RA, I7</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">RI8 category\t\t\t\t\t\tRI10 category                               </span></span>\n<span class=\"line\"><span style=\"\">\tASM_RUI8\tmnemonic RT, RA, UI8\t\t        ASM_AI10        mnemonic RA, I10    </span></span>\n<span class=\"line\"><span style=\"\">\t\t\t\t\t\t\t        ASM_RI10        mnemonic RT, RA, R10</span></span>\n<span class=\"line\"><span style=\"\">\t\t\t\t\t\t\t        ASM_RI10IDX     mnemonic RT, I10(RA)</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">RI16 category\t\t\t\t\t\tRI18 category                           </span></span>\n<span class=\"line\"><span style=\"\">\tASM_I16W\tmnemonic I16W\t\t\t        ASM_RI18        mnemonic RT, I18</span></span>\n<span class=\"line\"><span style=\"\">\tASM_RI16\tmnemonic RT, I16</span></span>\n<span class=\"line\"><span style=\"\">\tASM_RI16W\tmnemonic RT, I16W</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">RR category\t\t\t\t\t\tLBT category                                    </span></span>\n<span class=\"line\"><span style=\"\">\tASM_MFSPR\tmnemonic RT, SA\t\t\t        ASM_LBT         mnemonic brinst, brtarg </span></span>\n<span class=\"line\"><span style=\"\">\tASM_MTSPR\tmnemonic SA, RT\t\t\t                                                </span></span>\n<span class=\"line\"><span style=\"\">\tASM_NOOP\tmnemonic\t\t\tLBTI category                                   </span></span>\n<span class=\"line\"><span style=\"\">\tASM_RA\t\tmnemonic RA\t\t\t        ASM_LBTI        mnemonic brinst, RA     </span></span>\n<span class=\"line\"><span style=\"\">\tASM_RAB\t\tmnemonic RA, RB</span></span>\n<span class=\"line\"><span style=\"\">\tASM_RDCH\tmnemonic RT, CA</span></span>\n<span class=\"line\"><span style=\"\">\tASM_RR\t\tmnemonic RT, RA, RB</span></span>\n<span class=\"line\"><span style=\"\">\tASM_RT\t\tmnemonic RT</span></span>\n<span class=\"line\"><span style=\"\">\tASM_RTA\t\tmnemonic RT, RA</span></span>\n<span class=\"line\"><span style=\"\">\tASM_WRCH\tmnemonic CA, RT</span></span>\n<span class=\"line\"><span style=\"\">Note that RRR instructions have the names for RC and RT reversed from</span></span>\n<span class=\"line\"><span style=\"\">what's in the ISA, in order to put RT in the same position it appears</span></span>\n<span class=\"line\"><span style=\"\">for other formats.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">-=-=-= DEPENDENCY =-=-=-</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">DEPENDENCY filed consists of 5 digits. This represents which register is used as source and which register is used as target.</span></span>\n<span class=\"line\"><span style=\"\">The first(most significant) digit is always 0. Then it is followd by RC, RB, RA and RT digits.</span></span>\n<span class=\"line\"><span style=\"\">If the digit is 0, this means the corresponding register is not used in the instruction.</span></span>\n<span class=\"line\"><span style=\"\">If the digit is 1, this means the corresponding register is used as a source in the instruction.</span></span>\n<span class=\"line\"><span style=\"\">If the digit is 2, this means the corresponding register is used as a target in the instruction.</span></span>\n<span class=\"line\"><span style=\"\">If the digit is 3, this means the corresponding register is used as both source and target in the instruction.</span></span>\n<span class=\"line\"><span style=\"\">For example, fms instruction has 00113 as the DEPENDENCY field. This means RC is not used in this operation, RB and RA are</span></span>\n<span class=\"line\"><span style=\"\">used as sources and RT is the target.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">-=-=-= PIPE =-=-=-</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">This field shows which execution pipe is used for the instruction</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">pipe0 execution pipelines:</span></span>\n<span class=\"line\"><span style=\"\">\tFP6\tSP floating pipeline</span></span>\n<span class=\"line\"><span style=\"\">\tFP7\tinteger operations executed in SP floating pipeline</span></span>\n<span class=\"line\"><span style=\"\">\tFPD\tDP floating pipeline</span></span>\n<span class=\"line\"><span style=\"\">\tFX2\tFXU pipeline</span></span>\n<span class=\"line\"><span style=\"\">\tFX3\tRotate/Shift pipeline</span></span>\n<span class=\"line\"><span style=\"\">\tFXB\tByte pipeline</span></span>\n<span class=\"line\"><span style=\"\">\tNOP\tNo pipeline</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">pipe1 execution pipelines:</span></span>\n<span class=\"line\"><span style=\"\">\tBR\tBranch pipeline</span></span>\n<span class=\"line\"><span style=\"\">\tLNOP\tNo pipeline</span></span>\n<span class=\"line\"><span style=\"\">\tLS\tLoad/Store pipeline</span></span>\n<span class=\"line\"><span style=\"\">\tSHUF\tShuffle pipeline</span></span>\n<span class=\"line\"><span style=\"\">\tSPR\tSPR/CH pipeline</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/powerpc/xmon/spu-insns.h#L10-L113",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/powerpc/xmon/spu-insns.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * ioctl flag definitions</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * POINT\t- Toggle decimal point\t(0=absent 1=present)</span></span>\n<span class=\"line\"><span style=\"\"> * ALARM\t- Toggle alarm LED \t\t(0=green  1=red)</span></span>\n<span class=\"line\"><span style=\"\"> * FLIP\t\t- Toggle inverted mode \t(0=normal 1=flipped)</span></span>\n<span class=\"line\"><span style=\"\"> * bits 0-4\t- Character displayed\t(see definitions below)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Display segments are defined as follows,</span></span>\n<span class=\"line\"><span style=\"\"> * subject to D7S_FLIP register state:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    a</span></span>\n<span class=\"line\"><span style=\"\"> *   ---</span></span>\n<span class=\"line\"><span style=\"\"> * f|   |b</span></span>\n<span class=\"line\"><span style=\"\"> *   -g-</span></span>\n<span class=\"line\"><span style=\"\"> * e|   |c</span></span>\n<span class=\"line\"><span style=\"\"> *   ---</span></span>\n<span class=\"line\"><span style=\"\"> *    d</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/sparc/include/uapi/asm/display7seg.h#L20-L38",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/sparc/include/uapi/asm/display7seg.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* The Sparc PSR fields are laid out as the following:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  ------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  | impl  | vers  | icc   | resv  | EC | EF | PIL  | S | PS | ET |  CWP  |</span></span>\n<span class=\"line\"><span style=\"\"> *  | 31-28 | 27-24 | 23-20 | 19-14 | 13 | 12 | 11-8 | 7 | 6  | 5  |  4-0  |</span></span>\n<span class=\"line\"><span style=\"\"> *  ------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/sparc/include/uapi/asm/psr.h#L15-L21",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/sparc/include/uapi/asm/psr.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * When booting in 64-bit mode on 32-bit EFI firmware, startup_64_mixed_mode()</span></span>\n<span class=\"line\"><span style=\"\"> * is the first thing that runs after switching to long mode. Depending on</span></span>\n<span class=\"line\"><span style=\"\"> * whether the EFI handover protocol or the compat entry point was used to</span></span>\n<span class=\"line\"><span style=\"\"> * enter the kernel, it will either branch to the 64-bit EFI handover</span></span>\n<span class=\"line\"><span style=\"\"> * entrypoint at offset 0x390 in the image, or to the 64-bit EFI PE/COFF</span></span>\n<span class=\"line\"><span style=\"\"> * entrypoint efi_pe_entry(). In the former case, the bootloader must provide a</span></span>\n<span class=\"line\"><span style=\"\"> * struct bootparams pointer as the third argument, so the presence of such a</span></span>\n<span class=\"line\"><span style=\"\"> * pointer is used to disambiguate.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                                             +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  +------------------+     +------------+            +------>| efi_pe_entry |</span></span>\n<span class=\"line\"><span style=\"\"> *  | efi32_pe_entry   |---->|            |            |       +-----------+--+</span></span>\n<span class=\"line\"><span style=\"\"> *  +------------------+     |            |     +------+----------------+  |</span></span>\n<span class=\"line\"><span style=\"\"> *                           | startup_32 |---->| startup_64_mixed_mode |  |</span></span>\n<span class=\"line\"><span style=\"\"> *  +------------------+     |            |     +------+----------------+  V</span></span>\n<span class=\"line\"><span style=\"\"> *  | efi32_stub_entry |---->|            |            |     +------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  +------------------+     +------------+            +---->| efi64_stub_entry |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                           +-------------+----+</span></span>\n<span class=\"line\"><span style=\"\"> *                           +------------+     +----------+               |</span></span>\n<span class=\"line\"><span style=\"\"> *                           | startup_64 |&#x3C;----| efi_main |&#x3C;--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                           +------------+     +----------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/boot/compressed/efi_mixed.S#L25-L47",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/arch/x86/boot/compressed/efi_mixed.S"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* AES inverse affine and S2 combined:</span></span>\n<span class=\"line\"><span style=\"\"> *      1 1 0 0 0 0 0 1     x0     0</span></span>\n<span class=\"line\"><span style=\"\"> *      0 1 0 0 1 0 0 0     x1     0</span></span>\n<span class=\"line\"><span style=\"\"> *      1 1 0 0 1 1 1 1     x2     0</span></span>\n<span class=\"line\"><span style=\"\"> *      0 1 1 0 1 0 0 1     x3     1</span></span>\n<span class=\"line\"><span style=\"\"> *      0 1 0 0 1 1 0 0  *  x4  +  0</span></span>\n<span class=\"line\"><span style=\"\"> *      0 1 0 1 1 0 0 0     x5     0</span></span>\n<span class=\"line\"><span style=\"\"> *      0 0 0 0 0 1 0 1     x6     0</span></span>\n<span class=\"line\"><span style=\"\"> *      1 1 1 0 0 1 1 1     x7     1</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/crypto/aria-aesni-avx-asm_64.S#L729-L738",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/crypto/aria-aesni-avx-asm_64.S"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The CPU_BUS_NUMBER MSR returns the values of the respective CPUBUSNO CSR</span></span>\n<span class=\"line\"><span style=\"\"> * that BIOS programmed. MSR has package scope.</span></span>\n<span class=\"line\"><span style=\"\"> * |  Bit  |  Default  |  Description</span></span>\n<span class=\"line\"><span style=\"\"> * | [63]  |    00h    | VALID - When set, indicates the CPU bus</span></span>\n<span class=\"line\"><span style=\"\"> *                       numbers have been initialized. (RO)</span></span>\n<span class=\"line\"><span style=\"\"> * |[62:48]|    ---    | Reserved</span></span>\n<span class=\"line\"><span style=\"\"> * |[47:40]|    00h    | BUS_NUM_5 - Return the bus number BIOS assigned</span></span>\n<span class=\"line\"><span style=\"\"> *                       CPUBUSNO(5). (RO)</span></span>\n<span class=\"line\"><span style=\"\"> * |[39:32]|    00h    | BUS_NUM_4 - Return the bus number BIOS assigned</span></span>\n<span class=\"line\"><span style=\"\"> *                       CPUBUSNO(4). (RO)</span></span>\n<span class=\"line\"><span style=\"\"> * |[31:24]|    00h    | BUS_NUM_3 - Return the bus number BIOS assigned</span></span>\n<span class=\"line\"><span style=\"\"> *                       CPUBUSNO(3). (RO)</span></span>\n<span class=\"line\"><span style=\"\"> * |[23:16]|    00h    | BUS_NUM_2 - Return the bus number BIOS assigned</span></span>\n<span class=\"line\"><span style=\"\"> *                       CPUBUSNO(2). (RO)</span></span>\n<span class=\"line\"><span style=\"\"> * |[15:8] |    00h    | BUS_NUM_1 - Return the bus number BIOS assigned</span></span>\n<span class=\"line\"><span style=\"\"> *                       CPUBUSNO(1). (RO)</span></span>\n<span class=\"line\"><span style=\"\"> * | [7:0] |    00h    | BUS_NUM_0 - Return the bus number BIOS assigned</span></span>\n<span class=\"line\"><span style=\"\"> *                       CPUBUSNO(0). (RO)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/events/intel/uncore_snbep.c#L277-L296",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/events/intel/uncore_snbep.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * NOTES about DMA transfers:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  controller 1: channels 0-3, byte operations, ports 00-1F</span></span>\n<span class=\"line\"><span style=\"\"> *  controller 2: channels 4-7, word operations, ports C0-DF</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - ALL registers are 8 bits only, regardless of transfer size</span></span>\n<span class=\"line\"><span style=\"\"> *  - channel 4 is not used - cascades 1 into 2.</span></span>\n<span class=\"line\"><span style=\"\"> *  - channels 0-3 are byte - addresses/counts are for physical bytes</span></span>\n<span class=\"line\"><span style=\"\"> *  - channels 5-7 are word - addresses/counts are for physical words</span></span>\n<span class=\"line\"><span style=\"\"> *  - transfers must not cross physical 64K (0-3) or 128K (5-7) boundaries</span></span>\n<span class=\"line\"><span style=\"\"> *  - transfer count loaded to registers is 1 less than actual count</span></span>\n<span class=\"line\"><span style=\"\"> *  - controller 2 offsets are all even (2x offsets for controller 1)</span></span>\n<span class=\"line\"><span style=\"\"> *  - page registers for 5-7 don't use data bit 0, represent 128K pages</span></span>\n<span class=\"line\"><span style=\"\"> *  - page registers for 0-3 use bit 0, represent 64K pages</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * DMA transfers are limited to the lower 16MB of _physical_ memory.</span></span>\n<span class=\"line\"><span style=\"\"> * Note that addresses loaded into registers must be _physical_ addresses,</span></span>\n<span class=\"line\"><span style=\"\"> * not logical addresses (which may differ if paging is active).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Address mapping for channels 0-3:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   A23 ... A16 A15 ... A8  A7 ... A0    (Physical addresses)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   |  ... |   |  ... |</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   |  ... |   |  ... |</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   |  ... |   |  ... |</span></span>\n<span class=\"line\"><span style=\"\"> *   P7  ...  P0  A7 ... A0  A7 ... A0</span></span>\n<span class=\"line\"><span style=\"\"> * |    Page    | Addr MSB | Addr LSB |   (DMA registers)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Address mapping for channels 5-7:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   A23 ... A17 A16 A15 ... A9 A8 A7 ... A1 A0    (Physical addresses)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   \\   \\   ... \\  \\  \\  ... \\  \\</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |    \\   \\   ... \\  \\  \\  ... \\  (not used)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |     \\   \\   ... \\  \\  \\  ... \\</span></span>\n<span class=\"line\"><span style=\"\"> *   P7  ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0</span></span>\n<span class=\"line\"><span style=\"\"> * |      Page      |  Addr MSB   |  Addr LSB  |   (DMA registers)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Again, channels 5-7 transfer _physical_ words (16 bits), so addresses</span></span>\n<span class=\"line\"><span style=\"\"> * and counts _must_ be word-aligned (the lowest address bit is _ignored_ at</span></span>\n<span class=\"line\"><span style=\"\"> * the hardware level, so odd-byte transfers aren't possible).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Transfer count (_not # bytes_) is limited to 64K, represented as actual</span></span>\n<span class=\"line\"><span style=\"\"> * count - 1 : 64K => 0xFFFF, 1 => 0x0000.  Thus, count is always 1 or more,</span></span>\n<span class=\"line\"><span style=\"\"> * and up to 128K bytes may be transferred on channels 5-7 in one operation.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/include/asm/dma.h#L23-L69",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/include/asm/dma.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *  Check for clue free BIOS implementations who use</span></span>\n<span class=\"line\"><span style=\"\"> *  the following QA technique</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      [ Write BIOS Code ]&#x3C;------</span></span>\n<span class=\"line\"><span style=\"\"> *               |                ^</span></span>\n<span class=\"line\"><span style=\"\"> *      &#x3C; Does it Compile >----N--</span></span>\n<span class=\"line\"><span style=\"\"> *               |Y               ^</span></span>\n<span class=\"line\"><span style=\"\"> *\t&#x3C; Does it Boot Win98 >-N--</span></span>\n<span class=\"line\"><span style=\"\"> *               |Y</span></span>\n<span class=\"line\"><span style=\"\"> *           [Ship It]</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tPhoenix A04  08/24/2000 is known bad (Dell Inspiron 5000e)</span></span>\n<span class=\"line\"><span style=\"\"> *\tPhoenix A07  09/29/2000 is known good (Dell Inspiron 5000)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/kernel/apm_32.c#L2003-L2017",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/kernel/apm_32.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*---------------------------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> | Divide the 96 bit quantity pointed to by a, by that pointed to by b, and  |</span></span>\n<span class=\"line\"><span style=\"\"> | put the 96 bit result at the location d.                                  |</span></span>\n<span class=\"line\"><span style=\"\"> |                                                                           |</span></span>\n<span class=\"line\"><span style=\"\"> | The result may not be accurate to 96 bits. It is intended for use where   |</span></span>\n<span class=\"line\"><span style=\"\"> | a result better than 64 bits is required. The result should usually be    |</span></span>\n<span class=\"line\"><span style=\"\"> | good to at least 94 bits.                                                 |</span></span>\n<span class=\"line\"><span style=\"\"> | The returned result is actually divided by one half. This is done to      |</span></span>\n<span class=\"line\"><span style=\"\"> | prevent overflow.                                                         |</span></span>\n<span class=\"line\"><span style=\"\"> |                                                                           |</span></span>\n<span class=\"line\"><span style=\"\"> |  .aaaaaaaaaaaaaa / .bbbbbbbbbbbbb  ->  .dddddddddddd                      |</span></span>\n<span class=\"line\"><span style=\"\"> |                                                                           |</span></span>\n<span class=\"line\"><span style=\"\"> |  void div_Xsig(Xsig *a, Xsig *b, Xsig *dest)                              |</span></span>\n<span class=\"line\"><span style=\"\"> |                                                                           |</span></span>\n<span class=\"line\"><span style=\"\"> +---------------------------------------------------------------------------*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/math-emu/div_Xsig.S#L15-L29",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/math-emu/div_Xsig.S"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Xen leaves the responsibility for maintaining p2m mappings to the</span></span>\n<span class=\"line\"><span style=\"\"> * guests themselves, but it must also access and update the p2m array</span></span>\n<span class=\"line\"><span style=\"\"> * during suspend/resume when all the pages are reallocated.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The logical flat p2m table is mapped to a linear kernel memory area.</span></span>\n<span class=\"line\"><span style=\"\"> * For accesses by Xen a three-level tree linked via mfns only is set up to</span></span>\n<span class=\"line\"><span style=\"\"> * allow the address space to be sparse.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *               Xen</span></span>\n<span class=\"line\"><span style=\"\"> *                |</span></span>\n<span class=\"line\"><span style=\"\"> *          p2m_top_mfn</span></span>\n<span class=\"line\"><span style=\"\"> *              /   \\</span></span>\n<span class=\"line\"><span style=\"\"> * p2m_mid_mfn p2m_mid_mfn</span></span>\n<span class=\"line\"><span style=\"\"> *         /           /</span></span>\n<span class=\"line\"><span style=\"\"> *  p2m p2m p2m ...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The p2m_mid_mfn pages are mapped by p2m_top_mfn_p.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The p2m_top_mfn level is limited to 1 page, so the maximum representable</span></span>\n<span class=\"line\"><span style=\"\"> * pseudo-physical address space is:</span></span>\n<span class=\"line\"><span style=\"\"> *  P2M_TOP_PER_PAGE * P2M_MID_PER_PAGE * P2M_PER_PAGE pages</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * P2M_PER_PAGE depends on the architecture, as a mfn is always</span></span>\n<span class=\"line\"><span style=\"\"> * unsigned long (8 bytes on 64-bit, 4 bytes on 32), leading to</span></span>\n<span class=\"line\"><span style=\"\"> * 512 and 1024 entries respectively.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In short, these structures contain the Machine Frame Number (MFN) of the PFN.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * However not all entries are filled with MFNs. Specifically for all other</span></span>\n<span class=\"line\"><span style=\"\"> * leaf entries, or for the top  root, or middle one, for which there is a void</span></span>\n<span class=\"line\"><span style=\"\"> * entry, we assume it is  \"missing\". So (for example)</span></span>\n<span class=\"line\"><span style=\"\"> *  pfn_to_mfn(0x90909090)=INVALID_P2M_ENTRY.</span></span>\n<span class=\"line\"><span style=\"\"> * We have a dedicated page p2m_missing with all entries being</span></span>\n<span class=\"line\"><span style=\"\"> * INVALID_P2M_ENTRY. This page may be referenced multiple times in the p2m</span></span>\n<span class=\"line\"><span style=\"\"> * list/tree in case there are multiple areas with P2M_PER_PAGE invalid pfns.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We also have the possibility of setting 1-1 mappings on certain regions, so</span></span>\n<span class=\"line\"><span style=\"\"> * that:</span></span>\n<span class=\"line\"><span style=\"\"> *  pfn_to_mfn(0xc0000)=0xc0000</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The benefit of this is, that we can assume for non-RAM regions (think</span></span>\n<span class=\"line\"><span style=\"\"> * PCI BARs, or ACPI spaces), we can create mappings easily because we</span></span>\n<span class=\"line\"><span style=\"\"> * get the PFN value to match the MFN.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For this to work efficiently we have one new page p2m_identity. All entries</span></span>\n<span class=\"line\"><span style=\"\"> * in p2m_identity are set to INVALID_P2M_ENTRY type (Xen toolstack only</span></span>\n<span class=\"line\"><span style=\"\"> * recognizes that and MFNs, no other fancy value).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * On lookup we spot that the entry points to p2m_identity and return the</span></span>\n<span class=\"line\"><span style=\"\"> * identity value instead of dereferencing and returning INVALID_P2M_ENTRY.</span></span>\n<span class=\"line\"><span style=\"\"> * If the entry points to an allocated page, we just proceed as before and</span></span>\n<span class=\"line\"><span style=\"\"> * return the PFN. If the PFN has IDENTITY_FRAME_BIT set we unmask that in</span></span>\n<span class=\"line\"><span style=\"\"> * appropriate functions (pfn_to_mfn).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The reason for having the IDENTITY_FRAME_BIT instead of just returning the</span></span>\n<span class=\"line\"><span style=\"\"> * PFN is that we could find ourselves where pfn_to_mfn(pfn)==pfn for a</span></span>\n<span class=\"line\"><span style=\"\"> * non-identity pfn. To protect ourselves against we elect to set (and get) the</span></span>\n<span class=\"line\"><span style=\"\"> * IDENTITY_FRAME_BIT on all identity mapped PFNs.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/x86/xen/p2m.c#L3-L62",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/x86/xen/p2m.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* NOTE: the time values in jiffies should be in msec!</span></span>\n<span class=\"line\"><span style=\"\"> CMOS drive type</span></span>\n<span class=\"line\"><span style=\"\">  |     Maximum data rate supported by drive type</span></span>\n<span class=\"line\"><span style=\"\">  |     |   Head load time, msec</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   Head unload time, msec (not used)</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   |     Step rate interval, usec</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   |     |       Time needed for spinup time (jiffies)</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   |     |       |      Timeout for spinning down (jiffies)</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   |     |       |      |   Spindown offset (where disk stops)</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   |     |       |      |   |     Select delay</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   |     |       |      |   |     |     RPS</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   |     |       |      |   |     |     |    Max number of tracks</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   |     |       |      |   |     |     |    |     Interrupt timeout</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   |     |       |      |   |     |     |    |     |   Max nonintlv. sectors</span></span>\n<span class=\"line\"><span style=\"\">  |     |   |   |     |       |      |   |     |     |    |     |   | -Max Errors- flags */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/block/floppy.c#L359-L373",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/block/floppy.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Clock dividers in Berlin2 SoCs comprise a complex cell to select</span></span>\n<span class=\"line\"><span style=\"\"> * input pll and divider. The virtual structure as it is used in Marvell</span></span>\n<span class=\"line\"><span style=\"\"> * BSP code can be seen as:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                      +---+</span></span>\n<span class=\"line\"><span style=\"\"> * pll0 --------------->| 0 |                   +---+</span></span>\n<span class=\"line\"><span style=\"\"> *           +---+      |(B)|--+--------------->| 0 |      +---+</span></span>\n<span class=\"line\"><span style=\"\"> * pll1.0 -->| 0 |  +-->| 1 |  |   +--------+   |(E)|----->| 0 |   +---+</span></span>\n<span class=\"line\"><span style=\"\"> * pll1.1 -->| 1 |  |   +---+  +-->|(C) 1:M |-->| 1 |      |(F)|-->|(G)|-></span></span>\n<span class=\"line\"><span style=\"\"> * ...    -->|(A)|--+          |   +--------+   +---+  +-->| 1 |   +---+</span></span>\n<span class=\"line\"><span style=\"\"> * ...    -->|   |             +-->|(D) 1:3 |----------+   +---+</span></span>\n<span class=\"line\"><span style=\"\"> * pll1.N -->| N |                 +---------</span></span>\n<span class=\"line\"><span style=\"\"> *           +---+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (A) input pll clock mux controlled by               &#x3C;PllSelect[1:n]></span></span>\n<span class=\"line\"><span style=\"\"> * (B) input pll bypass mux controlled by              &#x3C;PllSwitch></span></span>\n<span class=\"line\"><span style=\"\"> * (C) programmable clock divider controlled by        &#x3C;Select[1:n]></span></span>\n<span class=\"line\"><span style=\"\"> * (D) constant div-by-3 clock divider</span></span>\n<span class=\"line\"><span style=\"\"> * (E) programmable clock divider bypass controlled by &#x3C;Switch></span></span>\n<span class=\"line\"><span style=\"\"> * (F) constant div-by-3 clock mux controlled by       &#x3C;D3Switch></span></span>\n<span class=\"line\"><span style=\"\"> * (G) clock gate controlled by                        &#x3C;Enable></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For whatever reason, above control signals come in two flavors:</span></span>\n<span class=\"line\"><span style=\"\"> * - single register dividers with all bits in one register</span></span>\n<span class=\"line\"><span style=\"\"> * - shared register dividers with bits spread over multiple registers</span></span>\n<span class=\"line\"><span style=\"\"> *   (including signals for the same cell spread over consecutive registers)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Also, clock gate and pll mux is not available on every div cell, so</span></span>\n<span class=\"line\"><span style=\"\"> * we have to deal with those, too. We reuse common clock composite driver</span></span>\n<span class=\"line\"><span style=\"\"> * for it.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/berlin/berlin2-div.c#L18-L49",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/berlin/berlin2-div.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * We have to follow a strict procedure when changing the LDB clock source,</span></span>\n<span class=\"line\"><span style=\"\"> * otherwise we risk introducing a glitch that can lock up the LDB divider.</span></span>\n<span class=\"line\"><span style=\"\"> * Things to keep in mind:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 1. The current and new parent clock inputs to the mux must be disabled.</span></span>\n<span class=\"line\"><span style=\"\"> * 2. The default clock input for ldb_di0/1_clk_sel is mmdc_ch1_axi, which</span></span>\n<span class=\"line\"><span style=\"\"> *    has no CG bit.</span></span>\n<span class=\"line\"><span style=\"\"> * 3. pll2_pfd2_396m can not be gated if it is used as memory clock.</span></span>\n<span class=\"line\"><span style=\"\"> * 4. In the RTL implementation of the LDB_DI_CLK_SEL muxes the top four</span></span>\n<span class=\"line\"><span style=\"\"> *    options are in one mux and the PLL3 option along with three unused</span></span>\n<span class=\"line\"><span style=\"\"> *    inputs is in a second mux. There is a third mux with two inputs used</span></span>\n<span class=\"line\"><span style=\"\"> *    to decide between the first and second 4-port mux:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    pll5_video_div 0 --|\\</span></span>\n<span class=\"line\"><span style=\"\"> *    pll2_pfd0_352m 1 --| |_</span></span>\n<span class=\"line\"><span style=\"\"> *    pll2_pfd2_396m 2 --| | `-|\\</span></span>\n<span class=\"line\"><span style=\"\"> *    mmdc_ch1_axi   3 --|/    | |</span></span>\n<span class=\"line\"><span style=\"\"> *                             | |--</span></span>\n<span class=\"line\"><span style=\"\"> *    pll3_usb_otg   4 --|\\    | |</span></span>\n<span class=\"line\"><span style=\"\"> *                   5 --| |_,-|/</span></span>\n<span class=\"line\"><span style=\"\"> *                   6 --| |</span></span>\n<span class=\"line\"><span style=\"\"> *                   7 --|/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The ldb_di0/1_clk_sel[1:0] bits control both 4-port muxes at the same time.</span></span>\n<span class=\"line\"><span style=\"\"> * The ldb_di0/1_clk_sel[2] bit controls the 2-port mux. The code below</span></span>\n<span class=\"line\"><span style=\"\"> * switches the parent to the bottom mux first and then manipulates the top</span></span>\n<span class=\"line\"><span style=\"\"> * mux to ensure that no glitch will enter the divider.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/imx/clk-imx6q.c#L289-L317",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/imx/clk-imx6q.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * CKEN clock type</span></span>\n<span class=\"line\"><span style=\"\"> * This clock takes it source from 2 possible parents :</span></span>\n<span class=\"line\"><span style=\"\"> *  - a low power parent</span></span>\n<span class=\"line\"><span style=\"\"> *  - a normal parent</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  +------------+     +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |  Low Power | --- | x mult_lp |</span></span>\n<span class=\"line\"><span style=\"\"> *  |    Clock   |     | / div_lp  |\\</span></span>\n<span class=\"line\"><span style=\"\"> *  +------------+     +-----------+ \\+-----+   +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                    | Mux |---| CKEN gate |</span></span>\n<span class=\"line\"><span style=\"\"> *  +------------+     +-----------+ /+-----+   +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> *  | High Power |     | x mult_hp |/</span></span>\n<span class=\"line\"><span style=\"\"> *  |    Clock   | --- | / div_hp  |</span></span>\n<span class=\"line\"><span style=\"\"> *  +------------+     +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/pxa/clk-pxa.h#L89-L104",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/pxa/clk-pxa.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * This is a frequency table for \"General Purpose\" clocks.</span></span>\n<span class=\"line\"><span style=\"\"> * These clocks can be muxed to the SoC pins and may be used by</span></span>\n<span class=\"line\"><span style=\"\"> * external devices. They're often used as PWM source.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Please note that MND divider must be enabled for duty-cycle</span></span>\n<span class=\"line\"><span style=\"\"> * control to be possible. (M != N) Also since D register is configured</span></span>\n<span class=\"line\"><span style=\"\"> * with a value multiplied by 2, and duty cycle is calculated as</span></span>\n<span class=\"line\"><span style=\"\"> *                             (2 * D) % 2^W</span></span>\n<span class=\"line\"><span style=\"\"> *                DutyCycle = ----------------</span></span>\n<span class=\"line\"><span style=\"\"> *                              2 * (N % 2^W)</span></span>\n<span class=\"line\"><span style=\"\"> * (where W = .mnd_width)</span></span>\n<span class=\"line\"><span style=\"\"> * N must be half or less than maximum value for the register.</span></span>\n<span class=\"line\"><span style=\"\"> * Otherwise duty-cycle control would be limited.</span></span>\n<span class=\"line\"><span style=\"\"> * (e.g. for 8-bit NMD N should be less than 128)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/qcom/gcc-msm8916.c#L959-L974",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/qcom/gcc-msm8916.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Register a clock branch.</span></span>\n<span class=\"line\"><span style=\"\"> * Most clock branches have a form like</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * src1 --|--\\</span></span>\n<span class=\"line\"><span style=\"\"> *        |M |--[GATE]-[DIV]-</span></span>\n<span class=\"line\"><span style=\"\"> * src2 --|--/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * sometimes without one of those components.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/rockchip/clk.c#L28-L37",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/rockchip/clk.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * sunxi_divs_clk_setup() - Setup function for leaf divisors on clocks</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * These clocks look something like this</span></span>\n<span class=\"line\"><span style=\"\"> *            ________________________</span></span>\n<span class=\"line\"><span style=\"\"> *           |         ___divisor 1---|----> to consumer</span></span>\n<span class=\"line\"><span style=\"\"> * parent >--|  pll___/___divisor 2---|----> to consumer</span></span>\n<span class=\"line\"><span style=\"\"> *           |        \\_______________|____> to consumer</span></span>\n<span class=\"line\"><span style=\"\"> *           |________________________|</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/clk/sunxi/clk-sunxi.c#L932-L941",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/clk/sunxi/clk-sunxi.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Copy architecture-specific thread state</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Layout of Child kernel mode stack as setup at the end of this function is</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * |     ...        |</span></span>\n<span class=\"line\"><span style=\"\"> * |     ...        |</span></span>\n<span class=\"line\"><span style=\"\"> * |    unused      |</span></span>\n<span class=\"line\"><span style=\"\"> * |                |</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------</span></span>\n<span class=\"line\"><span style=\"\"> * |     r25        |   &#x3C;==== top of Stack (thread.ksp)</span></span>\n<span class=\"line\"><span style=\"\"> * ~                ~</span></span>\n<span class=\"line\"><span style=\"\"> * |    --to--      |   (CALLEE Regs of kernel mode)</span></span>\n<span class=\"line\"><span style=\"\"> * |     r13        |</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------</span></span>\n<span class=\"line\"><span style=\"\"> * |     fp         |</span></span>\n<span class=\"line\"><span style=\"\"> * |    blink       |   @ret_from_fork</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------</span></span>\n<span class=\"line\"><span style=\"\"> * |                |</span></span>\n<span class=\"line\"><span style=\"\"> * ~                ~</span></span>\n<span class=\"line\"><span style=\"\"> * ~                ~</span></span>\n<span class=\"line\"><span style=\"\"> * |                |</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------</span></span>\n<span class=\"line\"><span style=\"\"> * |     r12        |</span></span>\n<span class=\"line\"><span style=\"\"> * ~                ~</span></span>\n<span class=\"line\"><span style=\"\"> * |    --to--      |   (scratch Regs of user mode)</span></span>\n<span class=\"line\"><span style=\"\"> * |     r0         |</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------</span></span>\n<span class=\"line\"><span style=\"\"> * |      SP        |</span></span>\n<span class=\"line\"><span style=\"\"> * |    orig_r0     |</span></span>\n<span class=\"line\"><span style=\"\"> * |    event/ECR   |</span></span>\n<span class=\"line\"><span style=\"\"> * |    user_r25    |</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------  &#x3C;===== END of PAGE</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arc/kernel/process.c#L131-L164",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arc/kernel/process.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * i.MX8M DRAM Controller clocks have the following structure (abridged):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * +----------+       |\\            +------+</span></span>\n<span class=\"line\"><span style=\"\"> * | dram_pll |-------|M| dram_core |      |</span></span>\n<span class=\"line\"><span style=\"\"> * +----------+       |U|---------->| D    |</span></span>\n<span class=\"line\"><span style=\"\"> *                 /--|X|           |  D   |</span></span>\n<span class=\"line\"><span style=\"\"> *   dram_alt_root |  |/            |   R  |</span></span>\n<span class=\"line\"><span style=\"\"> *                 |                |    C |</span></span>\n<span class=\"line\"><span style=\"\"> *            +---------+           |      |</span></span>\n<span class=\"line\"><span style=\"\"> *            |FIX DIV/4|           |      |</span></span>\n<span class=\"line\"><span style=\"\"> *            +---------+           |      |</span></span>\n<span class=\"line\"><span style=\"\"> *  composite:     |                |      |</span></span>\n<span class=\"line\"><span style=\"\"> * +----------+    |                |      |</span></span>\n<span class=\"line\"><span style=\"\"> * | dram_alt |----/                |      |</span></span>\n<span class=\"line\"><span style=\"\"> * +----------+                     |      |</span></span>\n<span class=\"line\"><span style=\"\"> * | dram_apb |-------------------->|      |</span></span>\n<span class=\"line\"><span style=\"\"> * +----------+                     +------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The dram_pll is used for higher rates and dram_alt is used for lower rates.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Frequency switching is implemented in TF-A (via SMC call) and can change the</span></span>\n<span class=\"line\"><span style=\"\"> * configuration of the clocks, including mux parents. The dram_alt and</span></span>\n<span class=\"line\"><span style=\"\"> * dram_apb clocks are \"imx composite\" and their parent can change too.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We need to prepare/enable the new mux parents head of switching and update</span></span>\n<span class=\"line\"><span style=\"\"> * their information afterwards.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/devfreq/imx8m-ddrc.c#L37-L64",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/devfreq/imx8m-ddrc.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*****************************************************************************</span></span>\n<span class=\"line\"><span style=\"\"> * MVEBU GPIO IRQ</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * GPIO_IN_POL register controls whether GPIO_DATA_IN will hold the same</span></span>\n<span class=\"line\"><span style=\"\"> * value of the line or the opposite value.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Level IRQ handlers: DATA_IN is used directly as cause register.</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t       Interrupt are masked by LEVEL_MASK registers.</span></span>\n<span class=\"line\"><span style=\"\"> * Edge IRQ handlers:  Change in DATA_IN are latched in EDGE_CAUSE.</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t       Interrupt are masked by EDGE_MASK registers.</span></span>\n<span class=\"line\"><span style=\"\"> * Both-edge handlers: Similar to regular Edge handlers, but also swaps</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t       the polarity to catch the next line transaction.</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t       This is a race condition that might not perfectly</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t       work on some use cases.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Every eight GPIO lines are grouped (OR'ed) before going up to main</span></span>\n<span class=\"line\"><span style=\"\"> * cause register.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t      EDGE  cause    mask</span></span>\n<span class=\"line\"><span style=\"\"> *\t  data-in   /--------| |-----| |----\\</span></span>\n<span class=\"line\"><span style=\"\"> *     -----| |-----\t\t\t     ---- to main cause reg</span></span>\n<span class=\"line\"><span style=\"\"> *\t     X\t    \\----------------| |----/</span></span>\n<span class=\"line\"><span style=\"\"> *\t  polarity    LEVEL\t     mask</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> ****************************************************************************/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpio/gpio-mvebu.c#L468-L492",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpio/gpio-mvebu.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * TS-5500 DIO1 block</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  value    control  dir    hw</span></span>\n<span class=\"line\"><span style=\"\"> *  addr bit addr bit in out irq name     pin offset</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7b  0  0x7a  0  x   x      DIO1_0   1   0</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7b  1  0x7a  0  x   x      DIO1_1   3   1</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7b  2  0x7a  0  x   x      DIO1_2   5   2</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7b  3  0x7a  0  x   x      DIO1_3   7   3</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7b  4  0x7a  1  x   x      DIO1_4   9   4</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7b  5  0x7a  1  x   x      DIO1_5   11  5</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7b  6  0x7a  1  x   x      DIO1_6   13  6</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7b  7  0x7a  1  x   x      DIO1_7   15  7</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7c  0  0x7a  5  x   x      DIO1_8   4   8</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7c  1  0x7a  5  x   x      DIO1_9   6   9</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7c  2  0x7a  5  x   x      DIO1_10  8   10</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7c  3  0x7a  5  x   x      DIO1_11  10  11</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7c  4           x          DIO1_12  12  12</span></span>\n<span class=\"line\"><span style=\"\"> *  0x7c  5           x      7   DIO1_13  14  13</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpio/gpio-ts5500.c#L101-L121",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpio/gpio-ts5500.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * DOC: overview</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The basic plane composition model supported by standard plane properties only</span></span>\n<span class=\"line\"><span style=\"\"> * has a source rectangle (in logical pixels within the &#x26;drm_framebuffer), with</span></span>\n<span class=\"line\"><span style=\"\"> * sub-pixel accuracy, which is scaled up to a pixel-aligned destination</span></span>\n<span class=\"line\"><span style=\"\"> * rectangle in the visible area of a &#x26;drm_crtc. The visible area of a CRTC is</span></span>\n<span class=\"line\"><span style=\"\"> * defined by the horizontal and vertical visible pixels (stored in @hdisplay</span></span>\n<span class=\"line\"><span style=\"\"> * and @vdisplay) of the requested mode (stored in &#x26;drm_crtc_state.mode). These</span></span>\n<span class=\"line\"><span style=\"\"> * two rectangles are both stored in the &#x26;drm_plane_state.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For the atomic ioctl the following standard (atomic) properties on the plane object</span></span>\n<span class=\"line\"><span style=\"\"> * encode the basic plane composition model:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * SRC_X:</span></span>\n<span class=\"line\"><span style=\"\"> * \tX coordinate offset for the source rectangle within the</span></span>\n<span class=\"line\"><span style=\"\"> * \t&#x26;drm_framebuffer, in 16.16 fixed point. Must be positive.</span></span>\n<span class=\"line\"><span style=\"\"> * SRC_Y:</span></span>\n<span class=\"line\"><span style=\"\"> * \tY coordinate offset for the source rectangle within the</span></span>\n<span class=\"line\"><span style=\"\"> * \t&#x26;drm_framebuffer, in 16.16 fixed point. Must be positive.</span></span>\n<span class=\"line\"><span style=\"\"> * SRC_W:</span></span>\n<span class=\"line\"><span style=\"\"> * \tWidth for the source rectangle within the &#x26;drm_framebuffer, in 16.16</span></span>\n<span class=\"line\"><span style=\"\"> * \tfixed point. SRC_X plus SRC_W must be within the width of the source</span></span>\n<span class=\"line\"><span style=\"\"> * \tframebuffer. Must be positive.</span></span>\n<span class=\"line\"><span style=\"\"> * SRC_H:</span></span>\n<span class=\"line\"><span style=\"\"> * \tHeight for the source rectangle within the &#x26;drm_framebuffer, in 16.16</span></span>\n<span class=\"line\"><span style=\"\"> * \tfixed point. SRC_Y plus SRC_H must be within the height of the source</span></span>\n<span class=\"line\"><span style=\"\"> * \tframebuffer. Must be positive.</span></span>\n<span class=\"line\"><span style=\"\"> * CRTC_X:</span></span>\n<span class=\"line\"><span style=\"\"> * \tX coordinate offset for the destination rectangle. Can be negative.</span></span>\n<span class=\"line\"><span style=\"\"> * CRTC_Y:</span></span>\n<span class=\"line\"><span style=\"\"> * \tY coordinate offset for the destination rectangle. Can be negative.</span></span>\n<span class=\"line\"><span style=\"\"> * CRTC_W:</span></span>\n<span class=\"line\"><span style=\"\"> * \tWidth for the destination rectangle. CRTC_X plus CRTC_W can extend past</span></span>\n<span class=\"line\"><span style=\"\"> * \tthe currently visible horizontal area of the &#x26;drm_crtc.</span></span>\n<span class=\"line\"><span style=\"\"> * CRTC_H:</span></span>\n<span class=\"line\"><span style=\"\"> * \tHeight for the destination rectangle. CRTC_Y plus CRTC_H can extend past</span></span>\n<span class=\"line\"><span style=\"\"> * \tthe currently visible vertical area of the &#x26;drm_crtc.</span></span>\n<span class=\"line\"><span style=\"\"> * FB_ID:</span></span>\n<span class=\"line\"><span style=\"\"> * \tMode object ID of the &#x26;drm_framebuffer this plane should scan out.</span></span>\n<span class=\"line\"><span style=\"\"> * CRTC_ID:</span></span>\n<span class=\"line\"><span style=\"\"> * \tMode object ID of the &#x26;drm_crtc this plane should be connected to.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that the source rectangle must fully lie within the bounds of the</span></span>\n<span class=\"line\"><span style=\"\"> * &#x26;drm_framebuffer. The destination rectangle can lie outside of the visible</span></span>\n<span class=\"line\"><span style=\"\"> * area of the current mode of the CRTC. It must be appropriately clipped by the</span></span>\n<span class=\"line\"><span style=\"\"> * driver, which can be done by calling drm_plane_helper_check_update(). Drivers</span></span>\n<span class=\"line\"><span style=\"\"> * are also allowed to round the subpixel sampling positions appropriately, but</span></span>\n<span class=\"line\"><span style=\"\"> * only to the next full pixel. No pixel outside of the source rectangle may</span></span>\n<span class=\"line\"><span style=\"\"> * ever be sampled, which is important when applying more sophisticated</span></span>\n<span class=\"line\"><span style=\"\"> * filtering than just a bilinear one when scaling. The filtering mode when</span></span>\n<span class=\"line\"><span style=\"\"> * scaling is unspecified.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * On top of this basic transformation additional properties can be exposed by</span></span>\n<span class=\"line\"><span style=\"\"> * the driver:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * alpha:</span></span>\n<span class=\"line\"><span style=\"\"> * \tAlpha is setup with drm_plane_create_alpha_property(). It controls the</span></span>\n<span class=\"line\"><span style=\"\"> * \tplane-wide opacity, from transparent (0) to opaque (0xffff). It can be</span></span>\n<span class=\"line\"><span style=\"\"> * \tcombined with pixel alpha.</span></span>\n<span class=\"line\"><span style=\"\"> *\tThe pixel values in the framebuffers are expected to not be</span></span>\n<span class=\"line\"><span style=\"\"> *\tpre-multiplied by the global alpha associated to the plane.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * rotation:</span></span>\n<span class=\"line\"><span style=\"\"> *\tRotation is set up with drm_plane_create_rotation_property(). It adds a</span></span>\n<span class=\"line\"><span style=\"\"> *\trotation and reflection step between the source and destination rectangles.</span></span>\n<span class=\"line\"><span style=\"\"> *\tWithout this property the rectangle is only scaled, but not rotated or</span></span>\n<span class=\"line\"><span style=\"\"> *\treflected.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tPossbile values:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\"rotate-&#x3C;degrees>\":</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tSignals that a drm plane is rotated &#x3C;degrees> degrees in counter</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tclockwise direction.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\"reflect-&#x3C;axis>\":</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tSignals that the contents of a drm plane is reflected along the</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t&#x3C;axis> axis, in the same way as mirroring.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\treflect-x::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t|o |    | o|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t|  | -> |  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t| v|    |v |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\treflect-y::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t|o |    | ^|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t|  | -> |  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t| v|    |o |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * zpos:</span></span>\n<span class=\"line\"><span style=\"\"> *\tZ position is set up with drm_plane_create_zpos_immutable_property() and</span></span>\n<span class=\"line\"><span style=\"\"> *\tdrm_plane_create_zpos_property(). It controls the visibility of overlapping</span></span>\n<span class=\"line\"><span style=\"\"> *\tplanes. Without this property the primary plane is always below the cursor</span></span>\n<span class=\"line\"><span style=\"\"> *\tplane, and ordering between all other planes is undefined. The positive</span></span>\n<span class=\"line\"><span style=\"\"> *\tZ axis points towards the user, i.e. planes with lower Z position values</span></span>\n<span class=\"line\"><span style=\"\"> *\tare underneath planes with higher Z position values. Two planes with the</span></span>\n<span class=\"line\"><span style=\"\"> *\tsame Z position value have undefined ordering. Note that the Z position</span></span>\n<span class=\"line\"><span style=\"\"> *\tvalue can also be immutable, to inform userspace about the hard-coded</span></span>\n<span class=\"line\"><span style=\"\"> *\tstacking of planes, see drm_plane_create_zpos_immutable_property(). If</span></span>\n<span class=\"line\"><span style=\"\"> *\tany plane has a zpos property (either mutable or immutable), then all</span></span>\n<span class=\"line\"><span style=\"\"> *\tplanes shall have a zpos property.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * pixel blend mode:</span></span>\n<span class=\"line\"><span style=\"\"> *\tPixel blend mode is set up with drm_plane_create_blend_mode_property().</span></span>\n<span class=\"line\"><span style=\"\"> *\tIt adds a blend mode for alpha blending equation selection, describing</span></span>\n<span class=\"line\"><span style=\"\"> *\thow the pixels from the current plane are composited with the</span></span>\n<span class=\"line\"><span style=\"\"> *\tbackground.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t Three alpha blending equations are defined:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t \"None\":</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t Blend formula that ignores the pixel alpha::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t out.rgb = plane_alpha * fg.rgb +</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t (1 - plane_alpha) * bg.rgb</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t \"Pre-multiplied\":</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t Blend formula that assumes the pixel color values</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t have been already pre-multiplied with the alpha</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t channel values::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t out.rgb = plane_alpha * fg.rgb +</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t (1 - (plane_alpha * fg.alpha)) * bg.rgb</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t \"Coverage\":</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t Blend formula that assumes the pixel color values have not</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t been pre-multiplied and will do so when blending them to the</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t background color values::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t out.rgb = plane_alpha * fg.alpha * fg.rgb +</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t (1 - (plane_alpha * fg.alpha)) * bg.rgb</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t Using the following symbols:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t \"fg.rgb\":</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t Each of the RGB component values from the plane's pixel</span></span>\n<span class=\"line\"><span style=\"\"> *\t \"fg.alpha\":</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t Alpha component value from the plane's pixel. If the plane's</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t pixel format has no alpha component, then this is assumed to be</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t 1.0. In these cases, this property has no effect, as all three</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t equations become equivalent.</span></span>\n<span class=\"line\"><span style=\"\"> *\t \"bg.rgb\":</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t Each of the RGB component values from the background</span></span>\n<span class=\"line\"><span style=\"\"> *\t \"plane_alpha\":</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t Plane alpha value set by the plane \"alpha\" property. If the</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t plane does not expose the \"alpha\" property, then this is</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t assumed to be 1.0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that all the property extensions described here apply either to the</span></span>\n<span class=\"line\"><span style=\"\"> * plane or the CRTC (e.g. for the background color, which currently is not</span></span>\n<span class=\"line\"><span style=\"\"> * exposed and assumed to be black).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * SCALING_FILTER:</span></span>\n<span class=\"line\"><span style=\"\"> *     Indicates scaling filter to be used for plane scaler</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     The value of this property can be one of the following:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     Default:</span></span>\n<span class=\"line\"><span style=\"\"> *             Driver's default scaling filter</span></span>\n<span class=\"line\"><span style=\"\"> *     Nearest Neighbor:</span></span>\n<span class=\"line\"><span style=\"\"> *             Nearest Neighbor scaling filter</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Drivers can set up this property for a plane by calling</span></span>\n<span class=\"line\"><span style=\"\"> * drm_plane_create_scaling_filter_property</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/drm_blend.c#L38-L204",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/drm_blend.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * DOC: vblank handling</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * From the computer's perspective, every time the monitor displays</span></span>\n<span class=\"line\"><span style=\"\"> * a new frame the scanout engine has \"scanned out\" the display image</span></span>\n<span class=\"line\"><span style=\"\"> * from top to bottom, one row of pixels at a time. The current row</span></span>\n<span class=\"line\"><span style=\"\"> * of pixels is referred to as the current scanline.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In addition to the display's visible area, there's usually a couple of</span></span>\n<span class=\"line\"><span style=\"\"> * extra scanlines which aren't actually displayed on the screen.</span></span>\n<span class=\"line\"><span style=\"\"> * These extra scanlines don't contain image data and are occasionally used</span></span>\n<span class=\"line\"><span style=\"\"> * for features like audio and infoframes. The region made up of these</span></span>\n<span class=\"line\"><span style=\"\"> * scanlines is referred to as the vertical blanking region, or vblank for</span></span>\n<span class=\"line\"><span style=\"\"> * short.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For historical reference, the vertical blanking period was designed to</span></span>\n<span class=\"line\"><span style=\"\"> * give the electron gun (on CRTs) enough time to move back to the top of</span></span>\n<span class=\"line\"><span style=\"\"> * the screen to start scanning out the next frame. Similar for horizontal</span></span>\n<span class=\"line\"><span style=\"\"> * blanking periods. They were designed to give the electron gun enough</span></span>\n<span class=\"line\"><span style=\"\"> * time to move back to the other side of the screen to start scanning the</span></span>\n<span class=\"line\"><span style=\"\"> * next scanline.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    physical →   ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽</span></span>\n<span class=\"line\"><span style=\"\"> *    top of      |                                        |</span></span>\n<span class=\"line\"><span style=\"\"> *    display     |                                        |</span></span>\n<span class=\"line\"><span style=\"\"> *                |               New frame                |</span></span>\n<span class=\"line\"><span style=\"\"> *                |                                        |</span></span>\n<span class=\"line\"><span style=\"\"> *                |↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓|</span></span>\n<span class=\"line\"><span style=\"\"> *                |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~| ← Scanline,</span></span>\n<span class=\"line\"><span style=\"\"> *                |↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓|   updates the</span></span>\n<span class=\"line\"><span style=\"\"> *                |                                        |   frame as it</span></span>\n<span class=\"line\"><span style=\"\"> *                |                                        |   travels down</span></span>\n<span class=\"line\"><span style=\"\"> *                |                                        |   (\"scan out\")</span></span>\n<span class=\"line\"><span style=\"\"> *                |               Old frame                |</span></span>\n<span class=\"line\"><span style=\"\"> *                |                                        |</span></span>\n<span class=\"line\"><span style=\"\"> *                |                                        |</span></span>\n<span class=\"line\"><span style=\"\"> *                |                                        |</span></span>\n<span class=\"line\"><span style=\"\"> *                |                                        |   physical</span></span>\n<span class=\"line\"><span style=\"\"> *                |                                        |   bottom of</span></span>\n<span class=\"line\"><span style=\"\"> *    vertical    |⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽| ← display</span></span>\n<span class=\"line\"><span style=\"\"> *    blanking    ┆xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx┆</span></span>\n<span class=\"line\"><span style=\"\"> *    region   →  ┆xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx┆</span></span>\n<span class=\"line\"><span style=\"\"> *                ┆xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx┆</span></span>\n<span class=\"line\"><span style=\"\"> *    start of →   ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽</span></span>\n<span class=\"line\"><span style=\"\"> *    new frame</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * \"Physical top of display\" is the reference point for the high-precision/</span></span>\n<span class=\"line\"><span style=\"\"> * corrected timestamp.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * On a lot of display hardware, programming needs to take effect during the</span></span>\n<span class=\"line\"><span style=\"\"> * vertical blanking period so that settings like gamma, the image buffer</span></span>\n<span class=\"line\"><span style=\"\"> * buffer to be scanned out, etc. can safely be changed without showing</span></span>\n<span class=\"line\"><span style=\"\"> * any visual artifacts on the screen. In some unforgiving hardware, some of</span></span>\n<span class=\"line\"><span style=\"\"> * this programming has to both start and end in the same vblank. To help</span></span>\n<span class=\"line\"><span style=\"\"> * with the timing of the hardware programming, an interrupt is usually</span></span>\n<span class=\"line\"><span style=\"\"> * available to notify the driver when it can start the updating of registers.</span></span>\n<span class=\"line\"><span style=\"\"> * The interrupt is in this context named the vblank interrupt.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The vblank interrupt may be fired at different points depending on the</span></span>\n<span class=\"line\"><span style=\"\"> * hardware. Some hardware implementations will fire the interrupt when the</span></span>\n<span class=\"line\"><span style=\"\"> * new frame start, other implementations will fire the interrupt at different</span></span>\n<span class=\"line\"><span style=\"\"> * points in time.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Vertical blanking plays a major role in graphics rendering. To achieve</span></span>\n<span class=\"line\"><span style=\"\"> * tear-free display, users must synchronize page flips and/or rendering to</span></span>\n<span class=\"line\"><span style=\"\"> * vertical blanking. The DRM API offers ioctls to perform page flips</span></span>\n<span class=\"line\"><span style=\"\"> * synchronized to vertical blanking and wait for vertical blanking.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The DRM core handles most of the vertical blanking management logic, which</span></span>\n<span class=\"line\"><span style=\"\"> * involves filtering out spurious interrupts, keeping race-free blanking</span></span>\n<span class=\"line\"><span style=\"\"> * counters, coping with counter wrap-around and resets and keeping use counts.</span></span>\n<span class=\"line\"><span style=\"\"> * It relies on the driver to generate vertical blanking interrupts and</span></span>\n<span class=\"line\"><span style=\"\"> * optionally provide a hardware vertical blanking counter.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Drivers must initialize the vertical blanking handling core with a call to</span></span>\n<span class=\"line\"><span style=\"\"> * drm_vblank_init(). Minimally, a driver needs to implement</span></span>\n<span class=\"line\"><span style=\"\"> * &#x26;drm_crtc_funcs.enable_vblank and &#x26;drm_crtc_funcs.disable_vblank plus call</span></span>\n<span class=\"line\"><span style=\"\"> * drm_crtc_handle_vblank() in its vblank interrupt handler for working vblank</span></span>\n<span class=\"line\"><span style=\"\"> * support.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Vertical blanking interrupts can be enabled by the DRM core or by drivers</span></span>\n<span class=\"line\"><span style=\"\"> * themselves (for instance to handle page flipping operations).  The DRM core</span></span>\n<span class=\"line\"><span style=\"\"> * maintains a vertical blanking use count to ensure that the interrupts are not</span></span>\n<span class=\"line\"><span style=\"\"> * disabled while a user still needs them. To increment the use count, drivers</span></span>\n<span class=\"line\"><span style=\"\"> * call drm_crtc_vblank_get() and release the vblank reference again with</span></span>\n<span class=\"line\"><span style=\"\"> * drm_crtc_vblank_put(). In between these two calls vblank interrupts are</span></span>\n<span class=\"line\"><span style=\"\"> * guaranteed to be enabled.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * On many hardware disabling the vblank interrupt cannot be done in a race-free</span></span>\n<span class=\"line\"><span style=\"\"> * manner, see &#x26;drm_driver.vblank_disable_immediate and</span></span>\n<span class=\"line\"><span style=\"\"> * &#x26;drm_driver.max_vblank_count. In that case the vblank core only disables the</span></span>\n<span class=\"line\"><span style=\"\"> * vblanks after a timer has expired, which can be configured through the</span></span>\n<span class=\"line\"><span style=\"\"> * ``vblankoffdelay`` module parameter.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Drivers for hardware without support for vertical-blanking interrupts</span></span>\n<span class=\"line\"><span style=\"\"> * must not call drm_vblank_init(). For such drivers, atomic helpers will</span></span>\n<span class=\"line\"><span style=\"\"> * automatically generate fake vblank events as part of the display update.</span></span>\n<span class=\"line\"><span style=\"\"> * This functionality also can be controlled by the driver by enabling and</span></span>\n<span class=\"line\"><span style=\"\"> * disabling struct drm_crtc_state.no_vblank.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/drm_vblank.c#L42-L144",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/drm_vblank.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * speakersToChannels</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @brief</span></span>\n<span class=\"line\"><span style=\"\"> *  translate speakers to channels</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  FL  - Front Left</span></span>\n<span class=\"line\"><span style=\"\"> *  FR  - Front Right</span></span>\n<span class=\"line\"><span style=\"\"> *  RL  - Rear Left</span></span>\n<span class=\"line\"><span style=\"\"> *  RR  - Rear Right</span></span>\n<span class=\"line\"><span style=\"\"> *  RC  - Rear Center</span></span>\n<span class=\"line\"><span style=\"\"> *  FC  - Front Center</span></span>\n<span class=\"line\"><span style=\"\"> *  FLC - Front Left Center</span></span>\n<span class=\"line\"><span style=\"\"> *  FRC - Front Right Center</span></span>\n<span class=\"line\"><span style=\"\"> *  RLC - Rear Left Center</span></span>\n<span class=\"line\"><span style=\"\"> *  RRC - Rear Right Center</span></span>\n<span class=\"line\"><span style=\"\"> *  LFE - Low Freq Effect</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *               FC</span></span>\n<span class=\"line\"><span style=\"\"> *          FLC      FRC</span></span>\n<span class=\"line\"><span style=\"\"> *    FL                    FR</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                    LFE</span></span>\n<span class=\"line\"><span style=\"\"> *              ()</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    RL                    RR</span></span>\n<span class=\"line\"><span style=\"\"> *          RLC      RRC</span></span>\n<span class=\"line\"><span style=\"\"> *               RC</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *             ch  8   7   6   5   4   3   2   1</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00000011      -   -   -   -   -   -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00000111      -   -   -   -   -   LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00001011      -   -   -   -   FC  -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00001111      -   -   -   -   FC  LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00010011      -   -   -   RC  -   -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00010111      -   -   -   RC  -   LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00011011      -   -   -   RC  FC  -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00011111      -   -   -   RC  FC  LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00110011      -   -   RR  RL  -   -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00110111      -   -   RR  RL  -   LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00111011      -   -   RR  RL  FC  -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b00111111      -   -   RR  RL  FC  LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b01110011      -   RC  RR  RL  -   -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b01110111      -   RC  RR  RL  -   LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b01111011      -   RC  RR  RL  FC  -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b01111111      -   RC  RR  RL  FC  LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11110011      RRC RLC RR  RL  -   -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11110111      RRC RLC RR  RL  -   LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11111011      RRC RLC RR  RL  FC  -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11111111      RRC RLC RR  RL  FC  LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11000011      FRC FLC -   -   -   -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11000111      FRC FLC -   -   -   LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11001011      FRC FLC -   -   FC  -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11001111      FRC FLC -   -   FC  LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11010011      FRC FLC -   RC  -   -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11010111      FRC FLC -   RC  -   LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11011011      FRC FLC -   RC  FC  -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11011111      FRC FLC -   RC  FC  LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11110011      FRC FLC RR  RL  -   -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11110111      FRC FLC RR  RL  -   LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11111011      FRC FLC RR  RL  FC  -   FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> * 0b11111111      FRC FLC RR  RL  FC  LFE FR  FL</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @param</span></span>\n<span class=\"line\"><span style=\"\"> *  speakers - speaker information as it comes from CEA audio block</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/amd/display/dc/inc/hw/hw_shared.h#L292-L358",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/amd/display/dc/inc/hw/hw_shared.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Split is introduced for workaround scaler's input/output size limitation.</span></span>\n<span class=\"line\"><span style=\"\"> * The idea is simple, if one scaler can not fit the requirement, use two.</span></span>\n<span class=\"line\"><span style=\"\"> * So split splits the big source image to two half parts (left/right) and do</span></span>\n<span class=\"line\"><span style=\"\"> * the scaling by two scaler separately and independently.</span></span>\n<span class=\"line\"><span style=\"\"> * But split also imports an edge problem in the middle of the image when</span></span>\n<span class=\"line\"><span style=\"\"> * scaling, to avoid it, split isn't a simple half-and-half, but add an extra</span></span>\n<span class=\"line\"><span style=\"\"> * pixels (overlap) to both side, after split the left/right will be:</span></span>\n<span class=\"line\"><span style=\"\"> * - left: [0, src_length/2 + overlap]</span></span>\n<span class=\"line\"><span style=\"\"> * - right: [src_length/2 - overlap, src_length]</span></span>\n<span class=\"line\"><span style=\"\"> * The extra overlap do eliminate the edge problem, but which may also generates</span></span>\n<span class=\"line\"><span style=\"\"> * unnecessary pixels when scaling, we need to crop them before scaler output</span></span>\n<span class=\"line\"><span style=\"\"> * the result to the next stage. and for the how to crop, it depends on the</span></span>\n<span class=\"line\"><span style=\"\"> * unneeded pixels, another words the position where overlay has been added.</span></span>\n<span class=\"line\"><span style=\"\"> * - left: crop the right</span></span>\n<span class=\"line\"><span style=\"\"> * - right: crop the left</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The diagram for how to do the split</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  &#x3C;---------------------left->out_w ----------------></span></span>\n<span class=\"line\"><span style=\"\"> * |--------------------------------|---right_crop-----| &#x3C;- left after split</span></span>\n<span class=\"line\"><span style=\"\"> *  \\                                \\                /</span></span>\n<span class=\"line\"><span style=\"\"> *   \\                                \\&#x3C;--overlap--->/</span></span>\n<span class=\"line\"><span style=\"\"> *   |-----------------|-------------|(Middle)------|-----------------| &#x3C;- src</span></span>\n<span class=\"line\"><span style=\"\"> *                     /&#x3C;---overlap--->\\                               \\</span></span>\n<span class=\"line\"><span style=\"\"> *                    /                 \\                               \\</span></span>\n<span class=\"line\"><span style=\"\"> * right after split->|-----left_crop---|--------------------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                    ^&#x3C;------------------- right->out_w --------------->^</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NOTE: To consistent with HW the output_w always contains the crop size.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/arm/display/komeda/komeda_pipeline_state.c#L913-L943",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/arm/display/komeda/komeda_pipeline_state.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * A note about interlacing.  Let's consider HDMI 1920x1080i.</span></span>\n<span class=\"line\"><span style=\"\"> * The timing parameters we have from X are:</span></span>\n<span class=\"line\"><span style=\"\"> *  Hact HsyA HsyI Htot  Vact VsyA VsyI Vtot</span></span>\n<span class=\"line\"><span style=\"\"> *  1920 2448 2492 2640  1080 1084 1094 1125</span></span>\n<span class=\"line\"><span style=\"\"> * Which get translated to:</span></span>\n<span class=\"line\"><span style=\"\"> *  Hact HsyA HsyI Htot  Vact VsyA VsyI Vtot</span></span>\n<span class=\"line\"><span style=\"\"> *  1920 2448 2492 2640   540  542  547  562</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This is how it is defined by CEA-861-D - line and pixel numbers are</span></span>\n<span class=\"line\"><span style=\"\"> * referenced to the rising edge of VSYNC and HSYNC.  Total clocks per</span></span>\n<span class=\"line\"><span style=\"\"> * line: 2640.  The odd frame, the first active line is at line 21, and</span></span>\n<span class=\"line\"><span style=\"\"> * the even frame, the first active line is 584.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * LN:    560     561     562     563             567     568    569</span></span>\n<span class=\"line\"><span style=\"\"> * DE:    ~~~|____________________________//__________________________</span></span>\n<span class=\"line\"><span style=\"\"> * HSYNC: ____|~|_____|~|_____|~|_____|~|_//__|~|_____|~|_____|~|_____</span></span>\n<span class=\"line\"><span style=\"\"> * VSYNC: _________________________|~~~~~~//~~~~~~~~~~~~~~~|__________</span></span>\n<span class=\"line\"><span style=\"\"> *  22 blanking lines.  VSYNC at 1320 (referenced to the HSYNC rising edge).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * LN:    1123   1124    1125      1               5       6      7</span></span>\n<span class=\"line\"><span style=\"\"> * DE:    ~~~|____________________________//__________________________</span></span>\n<span class=\"line\"><span style=\"\"> * HSYNC: ____|~|_____|~|_____|~|_____|~|_//__|~|_____|~|_____|~|_____</span></span>\n<span class=\"line\"><span style=\"\"> * VSYNC: ____________________|~~~~~~~~~~~//~~~~~~~~~~|_______________</span></span>\n<span class=\"line\"><span style=\"\"> *  23 blanking lines</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The Armada LCD Controller line and pixel numbers are, like X timings,</span></span>\n<span class=\"line\"><span style=\"\"> * referenced to the top left of the active frame.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * So, translating these to our LCD controller:</span></span>\n<span class=\"line\"><span style=\"\"> *  Odd frame, 563 total lines, VSYNC at line 543-548, pixel 1128.</span></span>\n<span class=\"line\"><span style=\"\"> *  Even frame, 562 total lines, VSYNC at line 542-547, pixel 2448.</span></span>\n<span class=\"line\"><span style=\"\"> * Note: Vsync front porch remains constant!</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * if (odd_frame) {</span></span>\n<span class=\"line\"><span style=\"\"> *   vtotal = mode->crtc_vtotal + 1;</span></span>\n<span class=\"line\"><span style=\"\"> *   vbackporch = mode->crtc_vsync_start - mode->crtc_vdisplay + 1;</span></span>\n<span class=\"line\"><span style=\"\"> *   vhorizpos = mode->crtc_hsync_start - mode->crtc_htotal / 2</span></span>\n<span class=\"line\"><span style=\"\"> * } else {</span></span>\n<span class=\"line\"><span style=\"\"> *   vtotal = mode->crtc_vtotal;</span></span>\n<span class=\"line\"><span style=\"\"> *   vbackporch = mode->crtc_vsync_start - mode->crtc_vdisplay;</span></span>\n<span class=\"line\"><span style=\"\"> *   vhorizpos = mode->crtc_hsync_start;</span></span>\n<span class=\"line\"><span style=\"\"> * }</span></span>\n<span class=\"line\"><span style=\"\"> * vfrontporch = mode->crtc_vtotal - mode->crtc_vsync_end;</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * So, we need to reprogram these registers on each vsync event:</span></span>\n<span class=\"line\"><span style=\"\"> *  LCD_SPU_V_PORCH, LCD_SPU_ADV_REG, LCD_SPUT_V_H_TOTAL</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note: we do not use the frame done interrupts because these appear</span></span>\n<span class=\"line\"><span style=\"\"> * to happen too early, and lead to jitter on the display (presumably</span></span>\n<span class=\"line\"><span style=\"\"> * they occur at the end of the last active line, before the vsync back</span></span>\n<span class=\"line\"><span style=\"\"> * porch, which we're reprogramming.)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/armada/armada_crtc.c#L26-L78",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/armada/armada_crtc.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * This timing diagram depicts the video signal in and</span></span>\n<span class=\"line\"><span style=\"\"> * around the vertical blanking period.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Assumptions about the fictitious mode used in this example:</span></span>\n<span class=\"line\"><span style=\"\"> *  vblank_start >= 3</span></span>\n<span class=\"line\"><span style=\"\"> *  vsync_start = vblank_start + 1</span></span>\n<span class=\"line\"><span style=\"\"> *  vsync_end = vblank_start + 2</span></span>\n<span class=\"line\"><span style=\"\"> *  vtotal = vblank_start + 3</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *           start of vblank:</span></span>\n<span class=\"line\"><span style=\"\"> *           latch double buffered registers</span></span>\n<span class=\"line\"><span style=\"\"> *           increment frame counter (ctg+)</span></span>\n<span class=\"line\"><span style=\"\"> *           generate start of vblank interrupt (gen4+)</span></span>\n<span class=\"line\"><span style=\"\"> *           |</span></span>\n<span class=\"line\"><span style=\"\"> *           |          frame start:</span></span>\n<span class=\"line\"><span style=\"\"> *           |          generate frame start interrupt (aka. vblank interrupt) (gmch)</span></span>\n<span class=\"line\"><span style=\"\"> *           |          may be shifted forward 1-3 extra lines via PIPECONF</span></span>\n<span class=\"line\"><span style=\"\"> *           |          |</span></span>\n<span class=\"line\"><span style=\"\"> *           |          |  start of vsync:</span></span>\n<span class=\"line\"><span style=\"\"> *           |          |  generate vsync interrupt</span></span>\n<span class=\"line\"><span style=\"\"> *           |          |  |</span></span>\n<span class=\"line\"><span style=\"\"> * ___xxxx___    ___xxxx___    ___xxxx___    ___xxxx___    ___xxxx___    ___xxxx</span></span>\n<span class=\"line\"><span style=\"\"> *       .   \\hs/   .      \\hs/          \\hs/          \\hs/   .      \\hs/</span></span>\n<span class=\"line\"><span style=\"\"> * ----va---> &#x3C;-----------------vb--------------------> &#x3C;--------va-------------</span></span>\n<span class=\"line\"><span style=\"\"> *       |          |       &#x3C;----vs----->                     |</span></span>\n<span class=\"line\"><span style=\"\"> * -vbs-----> &#x3C;---vbs+1---> &#x3C;---vbs+2---> &#x3C;-----0-----> &#x3C;-----1-----> &#x3C;-----2--- (scanline counter gen2)</span></span>\n<span class=\"line\"><span style=\"\"> * -vbs-2---> &#x3C;---vbs-1---> &#x3C;---vbs-----> &#x3C;---vbs+1---> &#x3C;---vbs+2---> &#x3C;-----0--- (scanline counter gen3+)</span></span>\n<span class=\"line\"><span style=\"\"> * -vbs-2---> &#x3C;---vbs-2---> &#x3C;---vbs-1---> &#x3C;---vbs-----> &#x3C;---vbs+1---> &#x3C;---vbs+2- (scanline counter hsw+ hdmi)</span></span>\n<span class=\"line\"><span style=\"\"> *       |          |                                         |</span></span>\n<span class=\"line\"><span style=\"\"> *       last visible pixel                                   first visible pixel</span></span>\n<span class=\"line\"><span style=\"\"> *                  |                                         increment frame counter (gen3/4)</span></span>\n<span class=\"line\"><span style=\"\"> *                  pixel counter = vblank_start * htotal     pixel counter = 0 (gen3/4)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * x  = horizontal active</span></span>\n<span class=\"line\"><span style=\"\"> * _  = horizontal blanking</span></span>\n<span class=\"line\"><span style=\"\"> * hs = horizontal sync</span></span>\n<span class=\"line\"><span style=\"\"> * va = vertical active</span></span>\n<span class=\"line\"><span style=\"\"> * vb = vertical blanking</span></span>\n<span class=\"line\"><span style=\"\"> * vs = vertical sync</span></span>\n<span class=\"line\"><span style=\"\"> * vbs = vblank_start (number)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Summary:</span></span>\n<span class=\"line\"><span style=\"\"> * - most events happen at the start of horizontal sync</span></span>\n<span class=\"line\"><span style=\"\"> * - frame start happens at the start of horizontal blank, 1-4 lines</span></span>\n<span class=\"line\"><span style=\"\"> *   (depending on PIPECONF settings) after the start of vblank</span></span>\n<span class=\"line\"><span style=\"\"> * - gen3/4 pixel and frame counter are synchronized with the start</span></span>\n<span class=\"line\"><span style=\"\"> *   of horizontal active on the first line of vertical active</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/i915/i915_irq.c#L617-L665",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/i915/i915_irq.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * DOC: DPIO</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * VLV, CHV and BXT have slightly peculiar display PHYs for driving DP/HDMI</span></span>\n<span class=\"line\"><span style=\"\"> * ports. DPIO is the name given to such a display PHY. These PHYs</span></span>\n<span class=\"line\"><span style=\"\"> * don't follow the standard programming model using direct MMIO</span></span>\n<span class=\"line\"><span style=\"\"> * registers, and instead their registers must be accessed trough IOSF</span></span>\n<span class=\"line\"><span style=\"\"> * sideband. VLV has one such PHY for driving ports B and C, and CHV</span></span>\n<span class=\"line\"><span style=\"\"> * adds another PHY for driving port D. Each PHY responds to specific</span></span>\n<span class=\"line\"><span style=\"\"> * IOSF-SB port.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each display PHY is made up of one or two channels. Each channel</span></span>\n<span class=\"line\"><span style=\"\"> * houses a common lane part which contains the PLL and other common</span></span>\n<span class=\"line\"><span style=\"\"> * logic. CH0 common lane also contains the IOSF-SB logic for the</span></span>\n<span class=\"line\"><span style=\"\"> * Common Register Interface (CRI) ie. the DPIO registers. CRI clock</span></span>\n<span class=\"line\"><span style=\"\"> * must be running when any DPIO registers are accessed.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In addition to having their own registers, the PHYs are also</span></span>\n<span class=\"line\"><span style=\"\"> * controlled through some dedicated signals from the display</span></span>\n<span class=\"line\"><span style=\"\"> * controller. These include PLL reference clock enable, PLL enable,</span></span>\n<span class=\"line\"><span style=\"\"> * and CRI clock selection, for example.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Eeach channel also has two splines (also called data lanes), and</span></span>\n<span class=\"line\"><span style=\"\"> * each spline is made up of one Physical Access Coding Sub-Layer</span></span>\n<span class=\"line\"><span style=\"\"> * (PCS) block and two TX lanes. So each channel has two PCS blocks</span></span>\n<span class=\"line\"><span style=\"\"> * and four TX lanes. The TX lanes are used as DP lanes or TMDS</span></span>\n<span class=\"line\"><span style=\"\"> * data/clock pairs depending on the output type.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Additionally the PHY also contains an AUX lane with AUX blocks</span></span>\n<span class=\"line\"><span style=\"\"> * for each channel. This is used for DP AUX communication, but</span></span>\n<span class=\"line\"><span style=\"\"> * this fact isn't really relevant for the driver since AUX is</span></span>\n<span class=\"line\"><span style=\"\"> * controlled from the display controller side. No DPIO registers</span></span>\n<span class=\"line\"><span style=\"\"> * need to be accessed during AUX communication,</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Generally on VLV/CHV the common lane corresponds to the pipe and</span></span>\n<span class=\"line\"><span style=\"\"> * the spline (PCS/TX) corresponds to the port.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For dual channel PHY (VLV/CHV):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  pipe A == CMN/PLL/REF CH0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  pipe B == CMN/PLL/REF CH1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  port B == PCS/TX CH0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  port C == PCS/TX CH1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This is especially important when we cross the streams</span></span>\n<span class=\"line\"><span style=\"\"> * ie. drive port B with pipe B, or port C with pipe A.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For single channel PHY (CHV):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  pipe C == CMN/PLL/REF CH0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  port D == PCS/TX CH0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * On BXT the entire PHY channel corresponds to the port. That means</span></span>\n<span class=\"line\"><span style=\"\"> * the PLL is also now associated with the port rather than the pipe,</span></span>\n<span class=\"line\"><span style=\"\"> * and so the clock needs to be routed to the appropriate transcoder.</span></span>\n<span class=\"line\"><span style=\"\"> * Port A PLL is directly connected to transcoder EDP and port B/C</span></span>\n<span class=\"line\"><span style=\"\"> * PLLs can be routed to any transcoder A/B/C.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note: DDI0 is digital port B, DD1 is digital port C, and DDI2 is</span></span>\n<span class=\"line\"><span style=\"\"> * digital port D (CHV) or port A (BXT). ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     Dual channel PHY (VLV/CHV/BXT)</span></span>\n<span class=\"line\"><span style=\"\"> *     ---------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *     |      CH0      |      CH1      |</span></span>\n<span class=\"line\"><span style=\"\"> *     |  CMN/PLL/REF  |  CMN/PLL/REF  |</span></span>\n<span class=\"line\"><span style=\"\"> *     |---------------|---------------| Display PHY</span></span>\n<span class=\"line\"><span style=\"\"> *     | PCS01 | PCS23 | PCS01 | PCS23 |</span></span>\n<span class=\"line\"><span style=\"\"> *     |-------|-------|-------|-------|</span></span>\n<span class=\"line\"><span style=\"\"> *     |TX0|TX1|TX2|TX3|TX0|TX1|TX2|TX3|</span></span>\n<span class=\"line\"><span style=\"\"> *     ---------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *     |     DDI0      |     DDI1      | DP/HDMI ports</span></span>\n<span class=\"line\"><span style=\"\"> *     ---------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     Single channel PHY (CHV/BXT)</span></span>\n<span class=\"line\"><span style=\"\"> *     -----------------</span></span>\n<span class=\"line\"><span style=\"\"> *     |      CH0      |</span></span>\n<span class=\"line\"><span style=\"\"> *     |  CMN/PLL/REF  |</span></span>\n<span class=\"line\"><span style=\"\"> *     |---------------| Display PHY</span></span>\n<span class=\"line\"><span style=\"\"> *     | PCS01 | PCS23 |</span></span>\n<span class=\"line\"><span style=\"\"> *     |-------|-------|</span></span>\n<span class=\"line\"><span style=\"\"> *     |TX0|TX1|TX2|TX3|</span></span>\n<span class=\"line\"><span style=\"\"> *     -----------------</span></span>\n<span class=\"line\"><span style=\"\"> *     |     DDI2      | DP/HDMI port</span></span>\n<span class=\"line\"><span style=\"\"> *     -----------------</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/i915/display/intel_dpio_phy.c#L34-L123",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/i915/display/intel_dpio_phy.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The hardware phase 0.0 refers to the center of the pixel.</span></span>\n<span class=\"line\"><span style=\"\"> * We want to start from the top/left edge which is phase</span></span>\n<span class=\"line\"><span style=\"\"> * -0.5. That matches how the hardware calculates the scaling</span></span>\n<span class=\"line\"><span style=\"\"> * factors (from top-left of the first pixel to bottom-right</span></span>\n<span class=\"line\"><span style=\"\"> * of the last pixel, as opposed to the pixel centers).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For 4:2:0 subsampled chroma planes we obviously have to</span></span>\n<span class=\"line\"><span style=\"\"> * adjust that so that the chroma sample position lands in</span></span>\n<span class=\"line\"><span style=\"\"> * the right spot.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that for packed YCbCr 4:2:2 formats there is no way to</span></span>\n<span class=\"line\"><span style=\"\"> * control chroma siting. The hardware simply replicates the</span></span>\n<span class=\"line\"><span style=\"\"> * chroma samples for both of the luma samples, and thus we don't</span></span>\n<span class=\"line\"><span style=\"\"> * actually get the expected MPEG2 chroma siting convention :(</span></span>\n<span class=\"line\"><span style=\"\"> * The same behaviour is observed on pre-SKL platforms as well.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Theory behind the formula (note that we ignore sub-pixel</span></span>\n<span class=\"line\"><span style=\"\"> * source coordinates):</span></span>\n<span class=\"line\"><span style=\"\"> * s = source sample position</span></span>\n<span class=\"line\"><span style=\"\"> * d = destination sample position</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Downscaling 4:1:</span></span>\n<span class=\"line\"><span style=\"\"> * -0.5</span></span>\n<span class=\"line\"><span style=\"\"> * | 0.0</span></span>\n<span class=\"line\"><span style=\"\"> * | |     1.5 (initial phase)</span></span>\n<span class=\"line\"><span style=\"\"> * | |     |</span></span>\n<span class=\"line\"><span style=\"\"> * v v     v</span></span>\n<span class=\"line\"><span style=\"\"> * | s | s | s | s |</span></span>\n<span class=\"line\"><span style=\"\"> * |       d       |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Upscaling 1:4:</span></span>\n<span class=\"line\"><span style=\"\"> * -0.5</span></span>\n<span class=\"line\"><span style=\"\"> * | -0.375 (initial phase)</span></span>\n<span class=\"line\"><span style=\"\"> * | |     0.0</span></span>\n<span class=\"line\"><span style=\"\"> * | |     |</span></span>\n<span class=\"line\"><span style=\"\"> * v v     v</span></span>\n<span class=\"line\"><span style=\"\"> * |       s       |</span></span>\n<span class=\"line\"><span style=\"\"> * | d | d | d | d |</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/i915/display/skl_scaler.c#L13-L52",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/i915/display/skl_scaler.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+---------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |   PHASE    |           FIRMWARE STATUS TRANSITIONS             |</span></span>\n<span class=\"line\"><span style=\"\"> * +============+===================================================+</span></span>\n<span class=\"line\"><span style=\"\"> * |            |               UNINITIALIZED                       |</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+-               /   |   \\                         -+</span></span>\n<span class=\"line\"><span style=\"\"> * |            |   DISABLED &#x3C;--/    |    \\--> NOT_SUPPORTED        |</span></span>\n<span class=\"line\"><span style=\"\"> * | init_early |                    V                              |</span></span>\n<span class=\"line\"><span style=\"\"> * |            |                 SELECTED                          |</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+-               /   |   \\                         -+</span></span>\n<span class=\"line\"><span style=\"\"> * |            |    MISSING &#x3C;--/    |    \\--> ERROR                |</span></span>\n<span class=\"line\"><span style=\"\"> * |   fetch    |                    V                              |</span></span>\n<span class=\"line\"><span style=\"\"> * |            |                 AVAILABLE                         |</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+-                   |   \\                         -+</span></span>\n<span class=\"line\"><span style=\"\"> * |            |                    |    \\--> INIT FAIL            |</span></span>\n<span class=\"line\"><span style=\"\"> * |   init     |                    V                              |</span></span>\n<span class=\"line\"><span style=\"\"> * |            |        /------> LOADABLE &#x3C;----&#x3C;-----------\\       |</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+-       \\         /    \\        \\           \\     -+</span></span>\n<span class=\"line\"><span style=\"\"> * |            |    LOAD FAIL &#x3C;--&#x3C;      \\--> TRANSFERRED     \\     |</span></span>\n<span class=\"line\"><span style=\"\"> * |   upload   |                  \\           /   \\          /     |</span></span>\n<span class=\"line\"><span style=\"\"> * |            |                   \\---------/     \\--> RUNNING    |</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+---------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.h#L23-L45",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Hardware-wise, we have a two level page table structure, where the first</span></span>\n<span class=\"line\"><span style=\"\"> * level has 4096 entries, and the second level has 256 entries.  Each entry</span></span>\n<span class=\"line\"><span style=\"\"> * is one 32-bit word.  Most of the bits in the second level entry are used</span></span>\n<span class=\"line\"><span style=\"\"> * by hardware, and there aren't any \"accessed\" and \"dirty\" bits.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Linux on the other hand has a three level page table structure, which can</span></span>\n<span class=\"line\"><span style=\"\"> * be wrapped to fit a two level page table structure easily - using the PGD</span></span>\n<span class=\"line\"><span style=\"\"> * and PTE only.  However, Linux also expects one \"PTE\" table per page, and</span></span>\n<span class=\"line\"><span style=\"\"> * at least a \"dirty\" bit.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Therefore, we tweak the implementation slightly - we tell Linux that we</span></span>\n<span class=\"line\"><span style=\"\"> * have 2048 entries in the first level, each of which is 8 bytes (iow, two</span></span>\n<span class=\"line\"><span style=\"\"> * hardware pointers to the second level.)  The second level contains two</span></span>\n<span class=\"line\"><span style=\"\"> * hardware PTE tables arranged contiguously, preceded by Linux versions</span></span>\n<span class=\"line\"><span style=\"\"> * which contain the state information Linux needs.  We, therefore, end up</span></span>\n<span class=\"line\"><span style=\"\"> * with 512 entries in the \"PTE\" level.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This leads to the page tables having the following layout:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    pgd             pte</span></span>\n<span class=\"line\"><span style=\"\"> * |        |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+</span></span>\n<span class=\"line\"><span style=\"\"> * |        |       +------------+ +0</span></span>\n<span class=\"line\"><span style=\"\"> * +- - - - +       | Linux pt 0 |</span></span>\n<span class=\"line\"><span style=\"\"> * |        |       +------------+ +1024</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+ +0    | Linux pt 1 |</span></span>\n<span class=\"line\"><span style=\"\"> * |        |-----> +------------+ +2048</span></span>\n<span class=\"line\"><span style=\"\"> * +- - - - + +4    |  h/w pt 0  |</span></span>\n<span class=\"line\"><span style=\"\"> * |        |-----> +------------+ +3072</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+ +8    |  h/w pt 1  |</span></span>\n<span class=\"line\"><span style=\"\"> * |        |       +------------+ +4096</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * See L_PTE_xxx below for definitions of bits in the \"Linux pt\", and</span></span>\n<span class=\"line\"><span style=\"\"> * PTE_xxx for definitions of bits appearing in the \"h/w pt\".</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * PMD_xxx definitions refer to bits in the first level page table.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The \"dirty\" bit is emulated by only granting hardware write permission</span></span>\n<span class=\"line\"><span style=\"\"> * iff the page is marked \"writable\" and \"dirty\" in the Linux PTE.  This</span></span>\n<span class=\"line\"><span style=\"\"> * means that a write to a clean page will cause a permission fault, and</span></span>\n<span class=\"line\"><span style=\"\"> * the Linux MM layer will mark the page dirty via handle_pte_fault().</span></span>\n<span class=\"line\"><span style=\"\"> * For the hardware to notice the permission change, the TLB entry must</span></span>\n<span class=\"line\"><span style=\"\"> * be flushed, and ptep_set_access_flags() does that for us.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The \"accessed\" or \"young\" bit is emulated by a similar method; we only</span></span>\n<span class=\"line\"><span style=\"\"> * allow accesses to the page if the \"young\" bit is set.  Accesses to the</span></span>\n<span class=\"line\"><span style=\"\"> * page will cause a fault, and handle_pte_fault() will set the young bit</span></span>\n<span class=\"line\"><span style=\"\"> * for us as long as the page is marked present in the corresponding Linux</span></span>\n<span class=\"line\"><span style=\"\"> * PTE entry.  Again, ptep_set_access_flags() will ensure that the TLB is</span></span>\n<span class=\"line\"><span style=\"\"> * up to date.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * However, when the \"young\" bit is cleared, we deny access to the page</span></span>\n<span class=\"line\"><span style=\"\"> * by clearing the hardware PTE.  Currently Linux does not flush the TLB</span></span>\n<span class=\"line\"><span style=\"\"> * for us in this case, which means the TLB will retain the transation</span></span>\n<span class=\"line\"><span style=\"\"> * until either the TLB entry is evicted under pressure, or a context</span></span>\n<span class=\"line\"><span style=\"\"> * switch which changes the user space mapping occurs.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm/include/asm/pgtable-2level.h#L12-L69",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm/include/asm/pgtable-2level.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * DOC: ST-Ericsson MCDE Driver</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The MCDE (short for multi-channel display engine) is a graphics</span></span>\n<span class=\"line\"><span style=\"\"> * controller found in the Ux500 chipsets, such as NovaThor U8500.</span></span>\n<span class=\"line\"><span style=\"\"> * It was initially conceptualized by ST Microelectronics for the</span></span>\n<span class=\"line\"><span style=\"\"> * successor of the Nomadik line, STn8500 but productified in the</span></span>\n<span class=\"line\"><span style=\"\"> * ST-Ericsson U8500 where is was used for mass-market deployments</span></span>\n<span class=\"line\"><span style=\"\"> * in Android phones from Samsung and Sony Ericsson.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * It can do 1080p30 on SDTV CCIR656, DPI-2, DBI-2 or DSI for</span></span>\n<span class=\"line\"><span style=\"\"> * panels with or without frame buffering and can convert most</span></span>\n<span class=\"line\"><span style=\"\"> * input formats including most variants of RGB and YUV.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The hardware has four display pipes, and the layout is a little</span></span>\n<span class=\"line\"><span style=\"\"> * bit like this::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   Memory     -> Overlay -> Channel -> FIFO -> 8 formatters -> DSI/DPI</span></span>\n<span class=\"line\"><span style=\"\"> *   External      0..5       0..3       A,B,    6 x DSI         bridge</span></span>\n<span class=\"line\"><span style=\"\"> *   source 0..9                         C0,C1   2 x DPI</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * FIFOs A and B are for LCD and HDMI while FIFO CO/C1 are for</span></span>\n<span class=\"line\"><span style=\"\"> * panels with embedded buffer.</span></span>\n<span class=\"line\"><span style=\"\"> * 6 of the formatters are for DSI, 3 pairs for VID/CMD respectively.</span></span>\n<span class=\"line\"><span style=\"\"> * 2 of the formatters are for DPI.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Behind the formatters are the DSI or DPI ports that route to</span></span>\n<span class=\"line\"><span style=\"\"> * the external pins of the chip. As there are 3 DSI ports and one</span></span>\n<span class=\"line\"><span style=\"\"> * DPI port, it is possible to configure up to 4 display pipelines</span></span>\n<span class=\"line\"><span style=\"\"> * (effectively using channels 0..3) for concurrent use.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In the current DRM/KMS setup, we use one external source, one overlay,</span></span>\n<span class=\"line\"><span style=\"\"> * one FIFO and one formatter which we connect to the simple DMA framebuffer</span></span>\n<span class=\"line\"><span style=\"\"> * helpers. We then provide a bridge to the DSI port, and on the DSI port</span></span>\n<span class=\"line\"><span style=\"\"> * bridge we connect hang a panel bridge or other bridge. This may be subject</span></span>\n<span class=\"line\"><span style=\"\"> * to change as we exploit more of the hardware capabilities.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * TODO:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - Enabled damaged rectangles using drm_plane_enable_fb_damage_clips()</span></span>\n<span class=\"line\"><span style=\"\"> *   so we can selectively just transmit the damaged area to a</span></span>\n<span class=\"line\"><span style=\"\"> *   command-only display.</span></span>\n<span class=\"line\"><span style=\"\"> * - Enable mixing of more planes, possibly at the cost of moving away</span></span>\n<span class=\"line\"><span style=\"\"> *   from using the simple framebuffer pipeline.</span></span>\n<span class=\"line\"><span style=\"\"> * - Enable output to bridges such as the AV8100 HDMI encoder from</span></span>\n<span class=\"line\"><span style=\"\"> *   the DSI bridge.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/mcde/mcde_drv.c#L8-L54",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/mcde/mcde_drv.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * DOC: Video Clocks</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * VCLK is the \"Pixel Clock\" frequency generator from a dedicated PLL.</span></span>\n<span class=\"line\"><span style=\"\"> * We handle the following encodings :</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - CVBS 27MHz generator via the VCLK2 to the VENCI and VDAC blocks</span></span>\n<span class=\"line\"><span style=\"\"> * - HDMI Pixel Clocks generation</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * What is missing :</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - Genenate Pixel clocks for 2K/4K 10bit formats</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Clock generator scheme :</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * .. code::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    __________   _________            _____</span></span>\n<span class=\"line\"><span style=\"\"> *   |          | |         |          |     |--ENCI</span></span>\n<span class=\"line\"><span style=\"\"> *   | HDMI PLL |-| PLL_DIV |--- VCLK--|     |--ENCL</span></span>\n<span class=\"line\"><span style=\"\"> *   |__________| |_________| \\        | MUX |--ENCP</span></span>\n<span class=\"line\"><span style=\"\"> *                             --VCLK2-|     |--VDAC</span></span>\n<span class=\"line\"><span style=\"\"> *                                     |_____|--HDMI-TX</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Final clocks can take input for either VCLK or VCLK2, but</span></span>\n<span class=\"line\"><span style=\"\"> * VCLK is the preferred path for HDMI clocking and VCLK2 is the</span></span>\n<span class=\"line\"><span style=\"\"> * preferred path for CVBS VDAC clocking.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * VCLK and VCLK2 have fixed divided clocks paths for /1, /2, /4, /6 or /12.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The PLL_DIV can achieve an additional fractional dividing like</span></span>\n<span class=\"line\"><span style=\"\"> * 1.5, 3.5, 3.75... to generate special 2K and 4K 10bit clocks.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/meson/meson_vclk.c#L15-L47",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/meson/meson_vclk.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * As of now, there are only 2 combinations possible for source split:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Left | Right</span></span>\n<span class=\"line\"><span style=\"\"> * -----|------</span></span>\n<span class=\"line\"><span style=\"\"> *  LM0 | LM1</span></span>\n<span class=\"line\"><span style=\"\"> *  LM2 | LM5</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/msm/disp/mdp5/mdp5_mixer.c#L8-L16",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/msm/disp/mdp5/mdp5_mixer.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * DSI PLL 14nm - clock diagram (eg: DSI0):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         dsi0n1_postdiv_clk</span></span>\n<span class=\"line\"><span style=\"\"> *                         |</span></span>\n<span class=\"line\"><span style=\"\"> *                         |</span></span>\n<span class=\"line\"><span style=\"\"> *                 +----+  |  +----+</span></span>\n<span class=\"line\"><span style=\"\"> *  dsi0vco_clk ---| n1 |--o--| /8 |-- dsi0pllbyte</span></span>\n<span class=\"line\"><span style=\"\"> *                 +----+  |  +----+</span></span>\n<span class=\"line\"><span style=\"\"> *                         |           dsi0n1_postdivby2_clk</span></span>\n<span class=\"line\"><span style=\"\"> *                         |   +----+  |</span></span>\n<span class=\"line\"><span style=\"\"> *                         o---| /2 |--o--|\\</span></span>\n<span class=\"line\"><span style=\"\"> *                         |   +----+     | \\   +----+</span></span>\n<span class=\"line\"><span style=\"\"> *                         |              |  |--| n2 |-- dsi0pll</span></span>\n<span class=\"line\"><span style=\"\"> *                         o--------------| /   +----+</span></span>\n<span class=\"line\"><span style=\"\"> *                                        |/</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/msm/dsi/phy/dsi_phy_14nm.c#L16-L32",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/msm/dsi/phy/dsi_phy_14nm.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * DSI PLL 28nm (8960/A family) - clock diagram (eg: DSI1):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                        +------+</span></span>\n<span class=\"line\"><span style=\"\"> *  dsi1vco_clk ----o-----| DIV1 |---dsi1pllbit (not exposed as clock)</span></span>\n<span class=\"line\"><span style=\"\"> *  F * byte_clk    |     +------+</span></span>\n<span class=\"line\"><span style=\"\"> *                  | bit clock divider (F / 8)</span></span>\n<span class=\"line\"><span style=\"\"> *                  |</span></span>\n<span class=\"line\"><span style=\"\"> *                  |     +------+</span></span>\n<span class=\"line\"><span style=\"\"> *                  o-----| DIV2 |---dsi0pllbyte---o---> To byte RCG</span></span>\n<span class=\"line\"><span style=\"\"> *                  |     +------+                 | (sets parent rate)</span></span>\n<span class=\"line\"><span style=\"\"> *                  | byte clock divider (F)       |</span></span>\n<span class=\"line\"><span style=\"\"> *                  |                              |</span></span>\n<span class=\"line\"><span style=\"\"> *                  |                              o---> To esc RCG</span></span>\n<span class=\"line\"><span style=\"\"> *                  |                                (doesn't set parent rate)</span></span>\n<span class=\"line\"><span style=\"\"> *                  |</span></span>\n<span class=\"line\"><span style=\"\"> *                  |     +------+</span></span>\n<span class=\"line\"><span style=\"\"> *                  o-----| DIV3 |----dsi0pll------o---> To dsi RCG</span></span>\n<span class=\"line\"><span style=\"\"> *                        +------+                 | (sets parent rate)</span></span>\n<span class=\"line\"><span style=\"\"> *                  dsi clock divider (F * magic)  |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                 o---> To pixel rcg</span></span>\n<span class=\"line\"><span style=\"\"> *                                                  (doesn't set parent rate)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/msm/dsi/phy/dsi_phy_28nm_8960.c#L13-L37",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/msm/dsi/phy/dsi_phy_28nm_8960.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * DSI PLL 7nm - clock diagram (eg: DSI0): TODO: updated CPHY diagram</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *           dsi0_pll_out_div_clk  dsi0_pll_bit_clk</span></span>\n<span class=\"line\"><span style=\"\"> *                              |                |</span></span>\n<span class=\"line\"><span style=\"\"> *                              |                |</span></span>\n<span class=\"line\"><span style=\"\"> *                 +---------+  |  +----------+  |  +----+</span></span>\n<span class=\"line\"><span style=\"\"> *  dsi0vco_clk ---| out_div |--o--| divl_3_0 |--o--| /8 |-- dsi0_phy_pll_out_byteclk</span></span>\n<span class=\"line\"><span style=\"\"> *                 +---------+  |  +----------+  |  +----+</span></span>\n<span class=\"line\"><span style=\"\"> *                              |                |</span></span>\n<span class=\"line\"><span style=\"\"> *                              |                |         dsi0_pll_by_2_bit_clk</span></span>\n<span class=\"line\"><span style=\"\"> *                              |                |          |</span></span>\n<span class=\"line\"><span style=\"\"> *                              |                |  +----+  |  |\\  dsi0_pclk_mux</span></span>\n<span class=\"line\"><span style=\"\"> *                              |                |--| /2 |--o--| \\   |</span></span>\n<span class=\"line\"><span style=\"\"> *                              |                |  +----+     |  \\  |  +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *                              |                --------------|  |--o--| div_7_4 |-- dsi0_phy_pll_out_dsiclk</span></span>\n<span class=\"line\"><span style=\"\"> *                              |------------------------------|  /     +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *                              |          +-----+             | /</span></span>\n<span class=\"line\"><span style=\"\"> *                              -----------| /4? |--o----------|/</span></span>\n<span class=\"line\"><span style=\"\"> *                                         +-----+  |           |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                  |           |dsiclk_sel</span></span>\n<span class=\"line\"><span style=\"\"> *                                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                  dsi0_pll_post_out_div_clk</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/msm/dsi/phy/dsi_phy_7nm.c#L14-L37",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/msm/dsi/phy/dsi_phy_7nm.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/****************************************************************</span></span>\n<span class=\"line\"><span style=\"\"> *            Log2(block height) ----------------------------+  *</span></span>\n<span class=\"line\"><span style=\"\"> *            Page Kind ----------------------------------+  |  *</span></span>\n<span class=\"line\"><span style=\"\"> *            Gob Height/Page Kind Generation ------+     |  |  *</span></span>\n<span class=\"line\"><span style=\"\"> *                          Sector layout -------+  |     |  |  *</span></span>\n<span class=\"line\"><span style=\"\"> *                          Compression ------+  |  |     |  |  */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/nouveau/dispnv50/disp.c#L2702-L2707",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/nouveau/dispnv50/disp.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/****************************************************************</span></span>\n<span class=\"line\"><span style=\"\"> *            Log2(block height) ----------------------------+  *</span></span>\n<span class=\"line\"><span style=\"\"> *            Page Kind ----------------------------------+  |  *</span></span>\n<span class=\"line\"><span style=\"\"> *            Gob Height/Page Kind Generation ------+     |  |  *</span></span>\n<span class=\"line\"><span style=\"\"> *                          Sector layout -------+  |     |  |  *</span></span>\n<span class=\"line\"><span style=\"\"> *                          Compression ------+  |  |     |  |  */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/nouveau/dispnv50/wndwc57e.c#L196-L201",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/nouveau/dispnv50/wndwc57e.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * struct ili9322_config - the system specific ILI9322 configuration</span></span>\n<span class=\"line\"><span style=\"\"> * @width_mm: physical panel width [mm]</span></span>\n<span class=\"line\"><span style=\"\"> * @height_mm: physical panel height [mm]</span></span>\n<span class=\"line\"><span style=\"\"> * @flip_horizontal: flip the image horizontally (right-to-left scan)</span></span>\n<span class=\"line\"><span style=\"\"> * (only in RGB and YUV modes)</span></span>\n<span class=\"line\"><span style=\"\"> * @flip_vertical: flip the image vertically (down-to-up scan)</span></span>\n<span class=\"line\"><span style=\"\"> * (only in RGB and YUV modes)</span></span>\n<span class=\"line\"><span style=\"\"> * @input: the input/entry type used in this system, if this is set to</span></span>\n<span class=\"line\"><span style=\"\"> * ILI9322_INPUT_UNKNOWN the driver will try to figure it out by probing</span></span>\n<span class=\"line\"><span style=\"\"> * the hardware</span></span>\n<span class=\"line\"><span style=\"\"> * @vreg1out_mv: the output in microvolts for the VREGOUT1 regulator used</span></span>\n<span class=\"line\"><span style=\"\"> * to drive the physical display. Valid ranges are 3600 thru 6000 in 100</span></span>\n<span class=\"line\"><span style=\"\"> * microvolt increments. If not specified, hardware defaults will be</span></span>\n<span class=\"line\"><span style=\"\"> * used (4.5V).</span></span>\n<span class=\"line\"><span style=\"\"> * @vcom_high_percent: the percentage of VREGOUT1 used for the peak</span></span>\n<span class=\"line\"><span style=\"\"> * voltage on the communications link. Valid ranges are 37 thru 100</span></span>\n<span class=\"line\"><span style=\"\"> * percent. If not specified, hardware defaults will be used (91%).</span></span>\n<span class=\"line\"><span style=\"\"> * @vcom_amplitude_percent: the percentage of VREGOUT1 used for the</span></span>\n<span class=\"line\"><span style=\"\"> * peak-to-peak amplitude of the communcation signals to the physical</span></span>\n<span class=\"line\"><span style=\"\"> * display. Valid ranges are 70 thru 132 percent in increments if two</span></span>\n<span class=\"line\"><span style=\"\"> * percent. Odd percentages will be truncated. If not specified, hardware</span></span>\n<span class=\"line\"><span style=\"\"> * defaults will be used (114%).</span></span>\n<span class=\"line\"><span style=\"\"> * @dclk_active_high: data/pixel clock active high, data will be clocked</span></span>\n<span class=\"line\"><span style=\"\"> * in on the rising edge of the DCLK (this is usually the case).</span></span>\n<span class=\"line\"><span style=\"\"> * @syncmode: The synchronization mode, what sync signals are emitted.</span></span>\n<span class=\"line\"><span style=\"\"> * See the enum for details.</span></span>\n<span class=\"line\"><span style=\"\"> * @de_active_high: DE (data entry) is active high</span></span>\n<span class=\"line\"><span style=\"\"> * @hsync_active_high: HSYNC is active high</span></span>\n<span class=\"line\"><span style=\"\"> * @vsync_active_high: VSYNC is active high</span></span>\n<span class=\"line\"><span style=\"\"> * @gamma_corr_pos: a set of 8 nybbles describing positive</span></span>\n<span class=\"line\"><span style=\"\"> * gamma correction for voltages V1 thru V8. Valid range 0..15</span></span>\n<span class=\"line\"><span style=\"\"> * @gamma_corr_neg: a set of 8 nybbles describing negative</span></span>\n<span class=\"line\"><span style=\"\"> * gamma correction for voltages V1 thru V8. Valid range 0..15</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * These adjust what grayscale voltage will be output for input data V1 = 0,</span></span>\n<span class=\"line\"><span style=\"\"> * V2 = 16, V3 = 48, V4 = 96, V5 = 160, V6 = 208, V7 = 240 and V8 = 255.</span></span>\n<span class=\"line\"><span style=\"\"> * The curve is shaped like this:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  ^</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                                        V8</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                                   V7</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                          V6</span></span>\n<span class=\"line\"><span style=\"\"> *  |                               V5</span></span>\n<span class=\"line\"><span style=\"\"> *  |                    V4</span></span>\n<span class=\"line\"><span style=\"\"> *  |            V3</span></span>\n<span class=\"line\"><span style=\"\"> *  |     V2</span></span>\n<span class=\"line\"><span style=\"\"> *  | V1</span></span>\n<span class=\"line\"><span style=\"\"> *  +-----------------------------------------------------------></span></span>\n<span class=\"line\"><span style=\"\"> *    0   16     48      96         160        208      240  255</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The negative and postive gamma values adjust the V1 thru V8 up/down</span></span>\n<span class=\"line\"><span style=\"\"> * according to the datasheet specifications. This is a property of the</span></span>\n<span class=\"line\"><span style=\"\"> * physical display connected to the display controller and may vary.</span></span>\n<span class=\"line\"><span style=\"\"> * If defined, both arrays must be supplied in full. If the properties</span></span>\n<span class=\"line\"><span style=\"\"> * are not supplied, hardware defaults will be used.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/panel/panel-ilitek-ili9322.c#L194-L250",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/panel/panel-ilitek-ili9322.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * struct nt35510_config - the display-specific NT35510 configuration</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Some of the settings provide an array of bytes, A, B C which mean:</span></span>\n<span class=\"line\"><span style=\"\"> * A = normal / idle off mode</span></span>\n<span class=\"line\"><span style=\"\"> * B = idle on mode</span></span>\n<span class=\"line\"><span style=\"\"> * C = partial / idle off mode</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Gamma correction arrays are 10bit numbers, two consecutive bytes</span></span>\n<span class=\"line\"><span style=\"\"> * makes out one point on the gamma correction curve. The points are</span></span>\n<span class=\"line\"><span style=\"\"> * not linearly placed along the X axis, we get points 0, 1, 3, 5</span></span>\n<span class=\"line\"><span style=\"\"> * 7, 11, 15, 23, 31, 47, 63, 95, 127, 128, 160, 192, 208, 224, 232,</span></span>\n<span class=\"line\"><span style=\"\"> * 240, 244, 248, 250, 252, 254, 255. The voltages tuples form</span></span>\n<span class=\"line\"><span style=\"\"> * V0, V1, V3 ... V255, with 0x0000 being the lowest voltage and</span></span>\n<span class=\"line\"><span style=\"\"> * 0x03FF being the highest voltage.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each value must be strictly higher than the previous value forming</span></span>\n<span class=\"line\"><span style=\"\"> * a rising curve like this:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ^</span></span>\n<span class=\"line\"><span style=\"\"> * |                                        V255</span></span>\n<span class=\"line\"><span style=\"\"> * |                                 V254</span></span>\n<span class=\"line\"><span style=\"\"> * |                         ....</span></span>\n<span class=\"line\"><span style=\"\"> * |                    V5</span></span>\n<span class=\"line\"><span style=\"\"> * |           V3</span></span>\n<span class=\"line\"><span style=\"\"> * |     V1</span></span>\n<span class=\"line\"><span style=\"\"> * | V0</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------------------------------------></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The details about all settings can be found in the NT35510 Application</span></span>\n<span class=\"line\"><span style=\"\"> * Note.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/panel/panel-novatek-nt35510.c#L127-L158",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/panel/panel-novatek-nt35510.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * (1) each frame starts at the start of the Vsync pulse which is signaled by</span></span>\n<span class=\"line\"><span style=\"\"> *     the \"FRAME_SYNC\" interrupt.</span></span>\n<span class=\"line\"><span style=\"\"> * (2) the active data region of each frame ends at dsp_vact_end</span></span>\n<span class=\"line\"><span style=\"\"> * (3) we should program this same number (dsp_vact_end) into dsp_line_frag_num,</span></span>\n<span class=\"line\"><span style=\"\"> *      to get \"LINE_FLAG\" interrupt at the end of the active on screen data.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * VOP_INTR_CTRL0.dsp_line_frag_num = VOP_DSP_VACT_ST_END.dsp_vact_end</span></span>\n<span class=\"line\"><span style=\"\"> * Interrupts</span></span>\n<span class=\"line\"><span style=\"\"> * LINE_FLAG -------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * FRAME_SYNC ----+                         |</span></span>\n<span class=\"line\"><span style=\"\"> *                |                         |</span></span>\n<span class=\"line\"><span style=\"\"> *                v                         v</span></span>\n<span class=\"line\"><span style=\"\"> *                | Vsync | Vbp |  Vactive  | Vfp |</span></span>\n<span class=\"line\"><span style=\"\"> *                        ^     ^           ^     ^</span></span>\n<span class=\"line\"><span style=\"\"> *                        |     |           |     |</span></span>\n<span class=\"line\"><span style=\"\"> *                        |     |           |     |</span></span>\n<span class=\"line\"><span style=\"\"> * dsp_vs_end ------------+     |           |     |   VOP_DSP_VTOTAL_VS_END</span></span>\n<span class=\"line\"><span style=\"\"> * dsp_vact_start --------------+           |     |   VOP_DSP_VACT_ST_END</span></span>\n<span class=\"line\"><span style=\"\"> * dsp_vact_end ----------------------------+     |   VOP_DSP_VACT_ST_END</span></span>\n<span class=\"line\"><span style=\"\"> * dsp_total -------------------------------------+   VOP_DSP_VTOTAL_VS_END</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/rockchip/rockchip_drm_vop.c#L495-L516",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/rockchip/rockchip_drm_vop.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * VOP2 architecture</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+                                                        +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> |  Cluster |   | Sel 1 from 6|                                                        | 1 from 3  |</span></span>\n<span class=\"line\"><span style=\"\"> |  window0 |   |    Layer0   |                                                        |    RGB    |</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+              +---------------+    +-------------+      +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+              |N from 6 layers|    |             |</span></span>\n<span class=\"line\"><span style=\"\"> |  Cluster |   | Sel 1 from 6|              |   Overlay0    +--->| Video Port0 |      +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> |  window1 |   |    Layer1   |              |               |    |             |      | 1 from 3  |</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+              +---------------+    +-------------+      |   LVDS    |</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+                                                        +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> |  Esmart  |   | Sel 1 from 6|</span></span>\n<span class=\"line\"><span style=\"\"> |  window0 |   |   Layer2    |              +---------------+    +-------------+      +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+              |N from 6 Layers|    |             | +--> | 1 from 3  |</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+   -------->  |   Overlay1    +--->| Video Port1 |      |   MIPI    |</span></span>\n<span class=\"line\"><span style=\"\"> |  Esmart  |   | Sel 1 from 6|   -------->  |               |    |             |      +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> |  Window1 |   |   Layer3    |              +---------------+    +-------------+</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+                                                        +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+                                                        | 1 from 3  |</span></span>\n<span class=\"line\"><span style=\"\"> |  Smart   |   | Sel 1 from 6|              +---------------+    +-------------+      |   HDMI    |</span></span>\n<span class=\"line\"><span style=\"\"> |  Window0 |   |    Layer4   |              |N from 6 Layers|    |             |      +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+              |   Overlay2    +--->| Video Port2 |</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+              |               |    |             |      +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> |  Smart   |   | Sel 1 from 6|              +---------------+    +-------------+      |  1 from 3 |</span></span>\n<span class=\"line\"><span style=\"\"> |  Window1 |   |    Layer5   |                                                        |    eDP    |</span></span>\n<span class=\"line\"><span style=\"\"> +----------+   +-------------+                                                        +-----------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c#L43-L71",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Overview</span></span>\n<span class=\"line\"><span style=\"\"> * --------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The display controller part of ZynqMP DP subsystem, made of the Audio/Video</span></span>\n<span class=\"line\"><span style=\"\"> * Buffer Manager, the Video Rendering Pipeline (blender) and the Audio Mixer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *              +------------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+   | +----------------+     +-----------+                       |</span></span>\n<span class=\"line\"><span style=\"\"> * | DPDMA  | --->|                | --> |   Video   | Video +-------------+ |</span></span>\n<span class=\"line\"><span style=\"\"> * | 4x vid |   | |                |     | Rendering | -+--> |             | |   +------+</span></span>\n<span class=\"line\"><span style=\"\"> * | 2x aud |   | |  Audio/Video   | --> | Pipeline  |  |    | DisplayPort |---> | PHY0 |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+   | | Buffer Manager |     +-----------+  |    |   Source    | |   +------+</span></span>\n<span class=\"line\"><span style=\"\"> *              | |    and STC     |     +-----------+  |    | Controller  | |   +------+</span></span>\n<span class=\"line\"><span style=\"\"> * Live Video --->|                | --> |   Audio   | Audio |             |---> | PHY1 |</span></span>\n<span class=\"line\"><span style=\"\"> *              | |                |     |   Mixer   | --+-> |             | |   +------+</span></span>\n<span class=\"line\"><span style=\"\"> * Live Audio --->|                | --> |           |  ||   +-------------+ |</span></span>\n<span class=\"line\"><span style=\"\"> *              | +----------------+     +-----------+  ||                   |</span></span>\n<span class=\"line\"><span style=\"\"> *              +---------------------------------------||-------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                                      vv</span></span>\n<span class=\"line\"><span style=\"\"> *                                                Blended Video and</span></span>\n<span class=\"line\"><span style=\"\"> *                                                Mixed Audio to PL</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Only non-live input from the DPDMA and output to the DisplayPort Source</span></span>\n<span class=\"line\"><span style=\"\"> * Controller are currently supported. Interface with the programmable logic</span></span>\n<span class=\"line\"><span style=\"\"> * for live streams is not implemented.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The display controller code creates planes for the DPDMA video and graphics</span></span>\n<span class=\"line\"><span style=\"\"> * layers, and a CRTC for the Video Rendering Pipeline.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/drm/xlnx/zynqmp_disp.c#L31-L60",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/drm/xlnx/zynqmp_disp.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The IC Resizer has a restriction that the output frame from the</span></span>\n<span class=\"line\"><span style=\"\"> * resizer must be 1024 or less in both width (pixels) and height</span></span>\n<span class=\"line\"><span style=\"\"> * (lines).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The image converter attempts to split up a conversion when</span></span>\n<span class=\"line\"><span style=\"\"> * the desired output (converted) frame resolution exceeds the</span></span>\n<span class=\"line\"><span style=\"\"> * IC resizer limit of 1024 in either dimension.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If either dimension of the output frame exceeds the limit, the</span></span>\n<span class=\"line\"><span style=\"\"> * dimension is split into 1, 2, or 4 equal stripes, for a maximum</span></span>\n<span class=\"line\"><span style=\"\"> * of 4*4 or 16 tiles. A conversion is then carried out for each</span></span>\n<span class=\"line\"><span style=\"\"> * tile (but taking care to pass the full frame stride length to</span></span>\n<span class=\"line\"><span style=\"\"> * the DMA channel's parameter memory!). IDMA double-buffering is used</span></span>\n<span class=\"line\"><span style=\"\"> * to convert each tile back-to-back when possible (see note below</span></span>\n<span class=\"line\"><span style=\"\"> * when double_buffering boolean is set).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that the input frame must be split up into the same number</span></span>\n<span class=\"line\"><span style=\"\"> * of tiles as the output frame:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                       +---------+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *   +-----+---+         |  A      | B   |</span></span>\n<span class=\"line\"><span style=\"\"> *   | A   | B |         |         |     |</span></span>\n<span class=\"line\"><span style=\"\"> *   +-----+---+   -->   +---------+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *   | C   | D |         |  C      | D   |</span></span>\n<span class=\"line\"><span style=\"\"> *   +-----+---+         |         |     |</span></span>\n<span class=\"line\"><span style=\"\"> *                       +---------+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Clockwise 90° rotations are handled by first rescaling into a</span></span>\n<span class=\"line\"><span style=\"\"> * reusable temporary tile buffer and then rotating with the 8x8</span></span>\n<span class=\"line\"><span style=\"\"> * block rotator, writing to the correct destination:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                         +-----+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *                                         |     |     |</span></span>\n<span class=\"line\"><span style=\"\"> *   +-----+---+         +---------+       | C   | A   |</span></span>\n<span class=\"line\"><span style=\"\"> *   | A   | B |         | A,B, |  |       |     |     |</span></span>\n<span class=\"line\"><span style=\"\"> *   +-----+---+   -->   | C,D  |  |  -->  |     |     |</span></span>\n<span class=\"line\"><span style=\"\"> *   | C   | D |         +---------+       +-----+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *   +-----+---+                           | D   | B   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                         |     |     |</span></span>\n<span class=\"line\"><span style=\"\"> *                                         +-----+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If the 8x8 block rotator is used, horizontal or vertical flipping</span></span>\n<span class=\"line\"><span style=\"\"> * is done during the rotation step, otherwise flipping is done</span></span>\n<span class=\"line\"><span style=\"\"> * during the scaling step.</span></span>\n<span class=\"line\"><span style=\"\"> * With rotation or flipping, tile order changes between input and</span></span>\n<span class=\"line\"><span style=\"\"> * output image. Tiles are numbered row major from top left to bottom</span></span>\n<span class=\"line\"><span style=\"\"> * right for both input and output image.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/gpu/ipu-v3/ipu-image-convert.c#L13-L61",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/gpu/ipu-v3/ipu-image-convert.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Framebuffer</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The PicoLCD use a Topway LCD module of 256x64 pixel</span></span>\n<span class=\"line\"><span style=\"\"> * This display area is tiled over 4 controllers with 8 tiles</span></span>\n<span class=\"line\"><span style=\"\"> * each. Each tile has 8x64 pixel, each data byte representing</span></span>\n<span class=\"line\"><span style=\"\"> * a 1-bit wide vertical line of the tile.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The display can be updated at a tile granularity.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       Chip 1           Chip 2           Chip 3           Chip 4</span></span>\n<span class=\"line\"><span style=\"\"> * +----------------+----------------+----------------+----------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |     Tile 1     |     Tile 1     |     Tile 1     |     Tile 1     |</span></span>\n<span class=\"line\"><span style=\"\"> * +----------------+----------------+----------------+----------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |     Tile 2     |     Tile 2     |     Tile 2     |     Tile 2     |</span></span>\n<span class=\"line\"><span style=\"\"> * +----------------+----------------+----------------+----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                  ...</span></span>\n<span class=\"line\"><span style=\"\"> * +----------------+----------------+----------------+----------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |     Tile 8     |     Tile 8     |     Tile 8     |     Tile 8     |</span></span>\n<span class=\"line\"><span style=\"\"> * +----------------+----------------+----------------+----------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/hid/hid-picolcd_fb.c#L18-L37",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/hid/hid-picolcd_fb.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * TRBE Buffer Management</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The TRBE buffer spans from the base pointer till the limit pointer. When enabled,</span></span>\n<span class=\"line\"><span style=\"\"> * it starts writing trace data from the write pointer onward till the limit pointer.</span></span>\n<span class=\"line\"><span style=\"\"> * When the write pointer reaches the address just before the limit pointer, it gets</span></span>\n<span class=\"line\"><span style=\"\"> * wrapped around again to the base pointer. This is called a TRBE wrap event, which</span></span>\n<span class=\"line\"><span style=\"\"> * generates a maintenance interrupt when operated in WRAP or FILL mode. This driver</span></span>\n<span class=\"line\"><span style=\"\"> * uses FILL mode, where the TRBE stops the trace collection at wrap event. The IRQ</span></span>\n<span class=\"line\"><span style=\"\"> * handler updates the AUX buffer and re-enables the TRBE with updated WRITE and</span></span>\n<span class=\"line\"><span style=\"\"> * LIMIT pointers.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tWrap around with an IRQ</span></span>\n<span class=\"line\"><span style=\"\"> *\t------ &#x3C; ------ &#x3C; ------- &#x3C; ----- &#x3C; -----</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t------ > ------ > ------- > ----- > -----</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t+---------------+-----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t|\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t+---------------+-----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\tBase Pointer\tWrite Pointer\t\tLimit Pointer</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The base and limit pointers always needs to be PAGE_SIZE aligned. But the write</span></span>\n<span class=\"line\"><span style=\"\"> * pointer can be aligned to the implementation defined TRBE trace buffer alignment</span></span>\n<span class=\"line\"><span style=\"\"> * as captured in trbe_cpudata->trbe_align.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\thead\t\ttail\t\twakeup</span></span>\n<span class=\"line\"><span style=\"\"> *\t+---------------------------------------+----- ~ ~ ------</span></span>\n<span class=\"line\"><span style=\"\"> *\t|$$$$$$$|################|$$$$$$$$$$$$$$|\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t+---------------------------------------+----- ~ ~ ------</span></span>\n<span class=\"line\"><span style=\"\"> *\tBase Pointer\tWrite Pointer\t\tLimit Pointer</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The perf_output_handle indices (head, tail, wakeup) are monotonically increasing</span></span>\n<span class=\"line\"><span style=\"\"> * values which tracks all the driver writes and user reads from the perf auxiliary</span></span>\n<span class=\"line\"><span style=\"\"> * buffer. Generally [head..tail] is the area where the driver can write into unless</span></span>\n<span class=\"line\"><span style=\"\"> * the wakeup is behind the tail. Enabled TRBE buffer span needs to be adjusted and</span></span>\n<span class=\"line\"><span style=\"\"> * configured depending on the perf_output_handle indices, so that the driver does</span></span>\n<span class=\"line\"><span style=\"\"> * not override into areas in the perf auxiliary buffer which is being or yet to be</span></span>\n<span class=\"line\"><span style=\"\"> * consumed from the user space. The enabled TRBE buffer area is a moving subset of</span></span>\n<span class=\"line\"><span style=\"\"> * the allocated perf auxiliary buffer.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/hwtracing/coresight/coresight-trbe.c#L298-L339",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/hwtracing/coresight/coresight-trbe.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* MUX logic description.</span></span>\n<span class=\"line\"><span style=\"\"> * Driver can support different mux control logic, according to CPLD</span></span>\n<span class=\"line\"><span style=\"\"> * implementation.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Connectivity schema.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * i2c-mlxcpld                                 Digital               Analog</span></span>\n<span class=\"line\"><span style=\"\"> * driver</span></span>\n<span class=\"line\"><span style=\"\"> * *--------*                                 * -> mux1 (virt bus2) -> mux -> |</span></span>\n<span class=\"line\"><span style=\"\"> * | I2CLPC | i2c physical                    * -> mux2 (virt bus3) -> mux -> |</span></span>\n<span class=\"line\"><span style=\"\"> * | bridge | bus 1                 *---------*                               |</span></span>\n<span class=\"line\"><span style=\"\"> * | logic  |---------------------> * mux reg *                               |</span></span>\n<span class=\"line\"><span style=\"\"> * | in CPLD|                       *---------*                               |</span></span>\n<span class=\"line\"><span style=\"\"> * *--------*   i2c-mux-mlxpcld          ^    * -> muxn (virt busn) -> mux -> |</span></span>\n<span class=\"line\"><span style=\"\"> *     |        driver                   |                                    |</span></span>\n<span class=\"line\"><span style=\"\"> *     |        *---------------*        |                              Devices</span></span>\n<span class=\"line\"><span style=\"\"> *     |        * CPLD (i2c bus)* select |</span></span>\n<span class=\"line\"><span style=\"\"> *     |        * registers for *--------*</span></span>\n<span class=\"line\"><span style=\"\"> *     |        * mux selection * deselect</span></span>\n<span class=\"line\"><span style=\"\"> *     |        *---------------*</span></span>\n<span class=\"line\"><span style=\"\"> *     |                 |</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;-------->     &#x3C;-----------></span></span>\n<span class=\"line\"><span style=\"\"> * i2c cntrl      Board cntrl reg</span></span>\n<span class=\"line\"><span style=\"\"> * reg space      space (mux select,</span></span>\n<span class=\"line\"><span style=\"\"> *                IO, LED, WD, info)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/i2c/muxes/i2c-mux-mlxcpld.c#L29-L55",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/i2c/muxes/i2c-mux-mlxcpld.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The diagram below details the relationship of the mapping structures</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Since the mapping now allows for non-uniform send contexts per vl, the</span></span>\n<span class=\"line\"><span style=\"\"> * number of send contexts for a vl is either the vl_scontexts[vl] or</span></span>\n<span class=\"line\"><span style=\"\"> * a computation based on num_kernel_send_contexts/num_vls:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For example:</span></span>\n<span class=\"line\"><span style=\"\"> * nactual = vl_scontexts ? vl_scontexts[vl] : num_kernel_send_contexts/num_vls</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * n = roundup to next highest power of 2 using nactual</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In the case where there are num_kernel_send_contexts/num_vls doesn't divide</span></span>\n<span class=\"line\"><span style=\"\"> * evenly, the extras are added from the last vl downward.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For the case where n > nactual, the send contexts are assigned</span></span>\n<span class=\"line\"><span style=\"\"> * in a round robin fashion wrapping back to the first send context</span></span>\n<span class=\"line\"><span style=\"\"> * for a particular vl.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *               dd->pio_map</span></span>\n<span class=\"line\"><span style=\"\"> *                    |                                   pio_map_elem[0]</span></span>\n<span class=\"line\"><span style=\"\"> *                    |                                +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                    v                                |       mask         |</span></span>\n<span class=\"line\"><span style=\"\"> *               pio_vl_map                            |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      +--------------------------+                   | ksc[0] -> sc 1     |</span></span>\n<span class=\"line\"><span style=\"\"> *      |    list (RCU)            |                   |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|                 ->| ksc[1] -> sc 2     |</span></span>\n<span class=\"line\"><span style=\"\"> *      |    mask                  |              --/  |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|            -/     |        *           |</span></span>\n<span class=\"line\"><span style=\"\"> *      |    actual_vls (max 8)    |          -/       |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|       --/         | ksc[n-1] -> sc n   |</span></span>\n<span class=\"line\"><span style=\"\"> *      |    vls (max 8)           |     -/            +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|  --/</span></span>\n<span class=\"line\"><span style=\"\"> *      |    map[0]                |-/</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|                   +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *      |    map[1]                |---                |       mask         |</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|   \\----           |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |           *              |        \\--        | ksc[0] -> sc 1+n   |</span></span>\n<span class=\"line\"><span style=\"\"> *      |           *              |           \\----   |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |           *              |                \\->| ksc[1] -> sc 2+n   |</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|                   |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |   map[vls - 1]           |-                  |         *          |</span></span>\n<span class=\"line\"><span style=\"\"> *      +--------------------------+ \\-                |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                                     \\-              | ksc[m-1] -> sc m+n |</span></span>\n<span class=\"line\"><span style=\"\"> *                                       \\             +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                        \\-</span></span>\n<span class=\"line\"><span style=\"\"> *                                          \\</span></span>\n<span class=\"line\"><span style=\"\"> *                                           \\-        +----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                             \\-      |       mask           |</span></span>\n<span class=\"line\"><span style=\"\"> *                                               \\     |----------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                                                \\-   | ksc[0] -> sc 1+m+n   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                  \\- |----------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                                                    >| ksc[1] -> sc 2+m+n   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                     |----------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                                                     |         *            |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                     |----------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                                                     | ksc[o-1] -> sc o+m+n |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                     +----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/infiniband/hw/hfi1/pio.h#L129-L188",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/infiniband/hw/hfi1/pio.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The diagram below details the relationship of the mapping structures</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Since the mapping now allows for non-uniform engines per vl, the</span></span>\n<span class=\"line\"><span style=\"\"> * number of engines for a vl is either the vl_engines[vl] or</span></span>\n<span class=\"line\"><span style=\"\"> * a computation based on num_sdma/num_vls:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For example:</span></span>\n<span class=\"line\"><span style=\"\"> * nactual = vl_engines ? vl_engines[vl] : num_sdma/num_vls</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * n = roundup to next highest power of 2 using nactual</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In the case where there are num_sdma/num_vls doesn't divide</span></span>\n<span class=\"line\"><span style=\"\"> * evenly, the extras are added from the last vl downward.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For the case where n > nactual, the engines are assigned</span></span>\n<span class=\"line\"><span style=\"\"> * in a round robin fashion wrapping back to the first engine</span></span>\n<span class=\"line\"><span style=\"\"> * for a particular vl.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *               dd->sdma_map</span></span>\n<span class=\"line\"><span style=\"\"> *                    |                                   sdma_map_elem[0]</span></span>\n<span class=\"line\"><span style=\"\"> *                    |                                +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                    v                                |       mask         |</span></span>\n<span class=\"line\"><span style=\"\"> *               sdma_vl_map                           |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      +--------------------------+                   | sde[0] -> eng 1    |</span></span>\n<span class=\"line\"><span style=\"\"> *      |    list (RCU)            |                   |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|                 ->| sde[1] -> eng 2    |</span></span>\n<span class=\"line\"><span style=\"\"> *      |    mask                  |              --/  |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|            -/     |        *           |</span></span>\n<span class=\"line\"><span style=\"\"> *      |    actual_vls (max 8)    |          -/       |--------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|       --/         | sde[n-1] -> eng n  |</span></span>\n<span class=\"line\"><span style=\"\"> *      |    vls (max 8)           |     -/            +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|  --/</span></span>\n<span class=\"line\"><span style=\"\"> *      |    map[0]                |-/</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|                   +---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *      |    map[1]                |---                |       mask          |</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|   \\----           |---------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |           *              |        \\--        | sde[0] -> eng 1+n   |</span></span>\n<span class=\"line\"><span style=\"\"> *      |           *              |           \\----   |---------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |           *              |                \\->| sde[1] -> eng 2+n   |</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------------------|                   |---------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *      |   map[vls - 1]           |-                  |         *           |</span></span>\n<span class=\"line\"><span style=\"\"> *      +--------------------------+ \\-                |---------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                                     \\-              | sde[m-1] -> eng m+n |</span></span>\n<span class=\"line\"><span style=\"\"> *                                       \\             +---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                        \\-</span></span>\n<span class=\"line\"><span style=\"\"> *                                          \\</span></span>\n<span class=\"line\"><span style=\"\"> *                                           \\-        +----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                             \\-      |       mask           |</span></span>\n<span class=\"line\"><span style=\"\"> *                                               \\     |----------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                                                \\-   | sde[0] -> eng 1+m+n  |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                  \\- |----------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                                                    >| sde[1] -> eng 2+m+n  |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                     |----------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                                                     |         *            |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                     |----------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *                                                     | sde[o-1] -> eng o+m+n|</span></span>\n<span class=\"line\"><span style=\"\"> *                                                     +----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/infiniband/hw/hfi1/sdma.h#L873-L933",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/infiniband/hw/hfi1/sdma.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * DEC LK201 and LK401 keyboard driver for Linux (primary for DECstations</span></span>\n<span class=\"line\"><span style=\"\"> * and VAXstations, but can also be used on any standard RS232 with an</span></span>\n<span class=\"line\"><span style=\"\"> * adaptor).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * DISCLAIMER: This works for _me_. If you break anything by using the</span></span>\n<span class=\"line\"><span style=\"\"> * information given below, I will _not_ be liable!</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * RJ10 pinout:\t\tTo DE9:\t\tOr DB25:</span></span>\n<span class=\"line\"><span style=\"\"> *\t1 - RxD &#x3C;---->\tPin 3 (TxD) &#x3C;->\tPin 2 (TxD)</span></span>\n<span class=\"line\"><span style=\"\"> *\t2 - GND &#x3C;---->\tPin 5 (GND) &#x3C;->\tPin 7 (GND)</span></span>\n<span class=\"line\"><span style=\"\"> *\t4 - TxD &#x3C;---->\tPin 2 (RxD) &#x3C;->\tPin 3 (RxD)</span></span>\n<span class=\"line\"><span style=\"\"> *\t3 - +12V (from HDD drive connector), DON'T connect to DE9 or DB25!!!</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Pin numbers for DE9 and DB25 are noted on the plug (quite small:). For</span></span>\n<span class=\"line\"><span style=\"\"> * RJ10, it's like this:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      __=__\tHold the plug in front of you, cable downwards,</span></span>\n<span class=\"line\"><span style=\"\"> *     /___/|\tnose is hidden behind the plug. Now, pin 1 is at</span></span>\n<span class=\"line\"><span style=\"\"> *    |1234||\tthe left side, pin 4 at the right and 2 and 3 are</span></span>\n<span class=\"line\"><span style=\"\"> *    |IIII||\tin between, of course:)</span></span>\n<span class=\"line\"><span style=\"\"> *    |    ||</span></span>\n<span class=\"line\"><span style=\"\"> *    |____|/</span></span>\n<span class=\"line\"><span style=\"\"> *      ||\tSo the adaptor consists of three connected cables</span></span>\n<span class=\"line\"><span style=\"\"> *      ||\tfor data transmission (RxD and TxD) and signal ground.</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tAdditionally, you have to get +12V from somewhere.</span></span>\n<span class=\"line\"><span style=\"\"> * Most easily, you'll get that from a floppy or HDD power connector.</span></span>\n<span class=\"line\"><span style=\"\"> * It's the yellow cable there (black is ground and red is +5V).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The keyboard and all the commands it understands are documented in</span></span>\n<span class=\"line\"><span style=\"\"> * \"VCB02 Video Subsystem - Technical Manual\", EK-104AA-TM-001. This</span></span>\n<span class=\"line\"><span style=\"\"> * document is LK201 specific, but LK401 is mostly compatible. It comes</span></span>\n<span class=\"line\"><span style=\"\"> * up in LK201 mode and doesn't report any of the additional keys it</span></span>\n<span class=\"line\"><span style=\"\"> * has. These need to be switched on with the LK_CMD_ENABLE_LK401</span></span>\n<span class=\"line\"><span style=\"\"> * command. You'll find this document (scanned .pdf file) on MANX,</span></span>\n<span class=\"line\"><span style=\"\"> * a search engine specific to DEC documentation. Try</span></span>\n<span class=\"line\"><span style=\"\"> * http://www.vt100.net/manx/details?pn=EK-104AA-TM-001;id=21;cp=1</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/keyboard/lkkbd.c#L10-L47",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": true
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/keyboard/lkkbd.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Map device buttons to internal key events.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The \"up\" and \"down\" keys, are symbolised by arrows on the button.</span></span>\n<span class=\"line\"><span style=\"\"> * The \"pickup\" and \"hangup\" keys are symbolised by a green and red phone</span></span>\n<span class=\"line\"><span style=\"\"> * on the button.</span></span>\n<span class=\"line\"><span style=\"\"> Komunikate KIP1000 Keyboard Matrix</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">     -> -- 1 -- 2 -- 3  --> GPI pin 4 (0x10)</span></span>\n<span class=\"line\"><span style=\"\">      |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">     &#x3C;- -- 4 -- 5 -- 6  --> GPI pin 5 (0x20)</span></span>\n<span class=\"line\"><span style=\"\">      |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">     END - 7 -- 8 -- 9  --> GPI pin 6 (0x40)</span></span>\n<span class=\"line\"><span style=\"\">      |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">     OK -- * -- 0 -- #  --> GPI pin 7 (0x80)</span></span>\n<span class=\"line\"><span style=\"\">      |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">     /|\\  /|\\  /|\\  /|\\</span></span>\n<span class=\"line\"><span style=\"\">      |    |    |    |</span></span>\n<span class=\"line\"><span style=\"\">GPO</span></span>\n<span class=\"line\"><span style=\"\">pin:  3    2    1    0</span></span>\n<span class=\"line\"><span style=\"\">     0x8  0x4  0x2  0x1</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/misc/cm109.c#L148-L171",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/misc/cm109.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Map device buttons to internal key events.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * USB-P1K button layout:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *             up</span></span>\n<span class=\"line\"><span style=\"\"> *       IN           OUT</span></span>\n<span class=\"line\"><span style=\"\"> *            down</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     pickup   C    hangup</span></span>\n<span class=\"line\"><span style=\"\"> *       1      2      3</span></span>\n<span class=\"line\"><span style=\"\"> *       4      5      6</span></span>\n<span class=\"line\"><span style=\"\"> *       7      8      9</span></span>\n<span class=\"line\"><span style=\"\"> *       *      0      #</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The \"up\" and \"down\" keys, are symbolised by arrows on the button.</span></span>\n<span class=\"line\"><span style=\"\"> * The \"pickup\" and \"hangup\" keys are symbolised by a green and red phone</span></span>\n<span class=\"line\"><span style=\"\"> * on the button.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/misc/yealink.c#L172-L189",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/misc/yealink.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* LCD, each segment must be driven separately.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Layout:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   |[]   [][]   [][]   [][]   in   |[][]</span></span>\n<span class=\"line\"><span style=\"\"> *   |[] M [][] D [][] : [][]   out  |[][]</span></span>\n<span class=\"line\"><span style=\"\"> *                             store</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    NEW REP         SU MO TU WE TH FR SA</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    [] [] [] [] [] [] [] [] [] [] [] []</span></span>\n<span class=\"line\"><span style=\"\"> *    [] [] [] [] [] [] [] [] [] [] [] []</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/misc/yealink.h#L116-L128",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/misc/yealink.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Building an adaptor to DE9 / DB25 RS232</span></span>\n<span class=\"line\"><span style=\"\"> * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * DISCLAIMER: Use this description AT YOUR OWN RISK! I'll not pay for</span></span>\n<span class=\"line\"><span style=\"\"> * anything if you break your mouse, your computer or whatever!</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In theory, this mouse is a simple RS232 device. In practice, it has got</span></span>\n<span class=\"line\"><span style=\"\"> * a quite uncommon plug and the requirement to additionally get a power</span></span>\n<span class=\"line\"><span style=\"\"> * supply at +5V and -12V.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If you look at the socket/jack (_not_ at the plug), we use this pin</span></span>\n<span class=\"line\"><span style=\"\"> * numbering:</span></span>\n<span class=\"line\"><span style=\"\"> *    _______</span></span>\n<span class=\"line\"><span style=\"\"> *   / 7 6 5 \\</span></span>\n<span class=\"line\"><span style=\"\"> *  | 4 --- 3 |</span></span>\n<span class=\"line\"><span style=\"\"> *   \\  2 1  /</span></span>\n<span class=\"line\"><span style=\"\"> *    -------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tDEC socket\tDE9\tDB25\tNote</span></span>\n<span class=\"line\"><span style=\"\"> *\t1 (GND)\t\t5\t7\t-</span></span>\n<span class=\"line\"><span style=\"\"> *\t2 (RxD)\t\t2\t3\t-</span></span>\n<span class=\"line\"><span style=\"\"> *\t3 (TxD)\t\t3\t2\t-</span></span>\n<span class=\"line\"><span style=\"\"> *\t4 (-12V)\t-\t-\tSomewhere from the PSU. At ATX, it's</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\tthe thin blue wire at pin 12 of the</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\tATX power connector. Only required for</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\tVSXXX-AA/-GA mice.</span></span>\n<span class=\"line\"><span style=\"\"> *\t5 (+5V)\t\t-\t-\tPSU (red wires of ATX power connector</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\ton pin 4, 6, 19 or 20) or HDD power</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\tconnector (also red wire).</span></span>\n<span class=\"line\"><span style=\"\"> *\t6 (+12V)\t-\t-\tHDD power connector, yellow wire. Only</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\trequired for VSXXX-AB digitizer.</span></span>\n<span class=\"line\"><span style=\"\"> *\t7 (dev. avail.)\t-\t-\tThe mouse shorts this one to pin 1.</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\tThis way, the host computer can detect</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\tthe mouse. To use it with the adaptor,</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\tsimply don't connect this pin.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * So to get a working adaptor, you need to connect the mouse with three</span></span>\n<span class=\"line\"><span style=\"\"> * wires to a RS232 port and two or three additional wires for +5V, +12V and</span></span>\n<span class=\"line\"><span style=\"\"> * -12V to the PSU.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Flow specification for the link is 4800, 8o1.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The mice and tablet are described in \"VCB02 Video Subsystem - Technical</span></span>\n<span class=\"line\"><span style=\"\"> * Manual\", DEC EK-104AA-TM-001. You'll find it at MANX, a search engine</span></span>\n<span class=\"line\"><span style=\"\"> * specific for DEC documentation. Try</span></span>\n<span class=\"line\"><span style=\"\"> * http://www.vt100.net/manx/details?pn=EK-104AA-TM-001;id=21;cp=1</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/mouse/vsxxxaa.c#L15-L62",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/mouse/vsxxxaa.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The PS2 protocol specifies a clock frequency between 10kHz and 16.7kHz,</span></span>\n<span class=\"line\"><span style=\"\"> * therefore the maximal interrupt interval should be 100us and the minimum</span></span>\n<span class=\"line\"><span style=\"\"> * interrupt interval should be ~60us. Let's allow +/- 20us for frequency</span></span>\n<span class=\"line\"><span style=\"\"> * deviations and interrupt latency.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The data line must be samples after ~30us to 50us after the falling edge,</span></span>\n<span class=\"line\"><span style=\"\"> * since the device updates the data line at the rising edge.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ___            ______            ______            ______            ___</span></span>\n<span class=\"line\"><span style=\"\"> *    \\          /      \\          /      \\          /      \\          /</span></span>\n<span class=\"line\"><span style=\"\"> *     \\        /        \\        /        \\        /        \\        /</span></span>\n<span class=\"line\"><span style=\"\"> *      \\______/          \\______/          \\______/          \\______/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     |-----------------|                 |--------|</span></span>\n<span class=\"line\"><span style=\"\"> *          60us/100us                      30us/50us</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/serio/ps2-gpio.c#L47-L63",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/serio/ps2-gpio.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * When we are running in the non-secure world and the secure world</span></span>\n<span class=\"line\"><span style=\"\"> * has not explicitly given us access to the TCM we will get an</span></span>\n<span class=\"line\"><span style=\"\"> * undefined error when reading the TCM region register in the</span></span>\n<span class=\"line\"><span style=\"\"> * setup_tcm_bank function (above).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There are two variants of this register read that we need to trap,</span></span>\n<span class=\"line\"><span style=\"\"> * the read for the data TCM and the read for the instruction TCM:</span></span>\n<span class=\"line\"><span style=\"\"> *  c0370628:       ee196f11        mrc     15, 0, r6, cr9, cr1, {0}</span></span>\n<span class=\"line\"><span style=\"\"> *  c0370674:       ee196f31        mrc     15, 0, r6, cr9, cr1, {1}</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Our undef hook mask explicitly matches all fields of the encoded</span></span>\n<span class=\"line\"><span style=\"\"> * instruction other than the destination register.  The mask also</span></span>\n<span class=\"line\"><span style=\"\"> * only allows operand 2 to have the values 0 or 1.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The undefined hook is defined as __init and __initdata, and therefore</span></span>\n<span class=\"line\"><span style=\"\"> * must be removed before tcm_init returns.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In this particular case (MRC with ARM condition code ALways) the</span></span>\n<span class=\"line\"><span style=\"\"> * Thumb-2 and ARM instruction encoding are identical, so this hook</span></span>\n<span class=\"line\"><span style=\"\"> * will work on a Thumb-2 kernel.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * See A8.8.107, DDI0406C_C ARM Architecture Reference Manual, Encoding</span></span>\n<span class=\"line\"><span style=\"\"> * T1/A1 for the bit-by-bit details.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  mrc   p15, 0, XX, c9, c1, 0</span></span>\n<span class=\"line\"><span style=\"\"> *  mrc   p15, 0, XX, c9, c1, 1</span></span>\n<span class=\"line\"><span style=\"\"> *   |  |  |   |   |   |   |  +---- opc2           0|1 = 000|001</span></span>\n<span class=\"line\"><span style=\"\"> *   |  |  |   |   |   |   +------- CRm              0 = 0001</span></span>\n<span class=\"line\"><span style=\"\"> *   |  |  |   |   |   +----------- CRn              0 = 1001</span></span>\n<span class=\"line\"><span style=\"\"> *   |  |  |   |   +--------------- Rt               ? = ????</span></span>\n<span class=\"line\"><span style=\"\"> *   |  |  |   +------------------- opc1             0 =  000</span></span>\n<span class=\"line\"><span style=\"\"> *   |  |  +----------------------- coproc          15 = 1111</span></span>\n<span class=\"line\"><span style=\"\"> *   |  +-------------------------- condition   ALways = 1110</span></span>\n<span class=\"line\"><span style=\"\"> *   +----------------------------- instruction    MRC = 1110</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Encoding this as per A8.8.107 of DDI0406C, Encoding T1/A1, yields:</span></span>\n<span class=\"line\"><span style=\"\"> *  1111 1111 1111 1111 0000 1111 1101 1111 Required Mask</span></span>\n<span class=\"line\"><span style=\"\"> *  1110 1110 0001 1001 ???? 1111 0001 0001 mrc p15, 0, XX, c9, c1, 0</span></span>\n<span class=\"line\"><span style=\"\"> *  1110 1110 0001 1001 ???? 1111 0011 0001 mrc p15, 0, XX, c9, c1, 1</span></span>\n<span class=\"line\"><span style=\"\"> *  [  ] [  ] [ ]| [  ] [  ] [  ] [ ]| +--- CRm</span></span>\n<span class=\"line\"><span style=\"\"> *    |    |   | |   |    |    |   | +----- SBO</span></span>\n<span class=\"line\"><span style=\"\"> *    |    |   | |   |    |    |   +------- opc2</span></span>\n<span class=\"line\"><span style=\"\"> *    |    |   | |   |    |    +----------- coproc</span></span>\n<span class=\"line\"><span style=\"\"> *    |    |   | |   |    +---------------- Rt</span></span>\n<span class=\"line\"><span style=\"\"> *    |    |   | |   +--------------------- CRn</span></span>\n<span class=\"line\"><span style=\"\"> *    |    |   | +------------------------- SBO</span></span>\n<span class=\"line\"><span style=\"\"> *    |    |   +--------------------------- opc1</span></span>\n<span class=\"line\"><span style=\"\"> *    |    +------------------------------- instruction</span></span>\n<span class=\"line\"><span style=\"\"> *    +------------------------------------ condition</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm/kernel/tcm.c#L182-L232",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm/kernel/tcm.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * YP(open)--+-------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t     |\t\t   |--+</span></span>\n<span class=\"line\"><span style=\"\"> *\t     |\t\t   |  |</span></span>\n<span class=\"line\"><span style=\"\"> *    YM(-)--+-------------+  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t       +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t       |\t      |</span></span>\n<span class=\"line\"><span style=\"\"> *\t   XP(weak+)\t    XM(open)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * \"weak+\" means 200k Ohm VDDIO</span></span>\n<span class=\"line\"><span style=\"\"> * (-) means GND</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/touchscreen/mxs-lradc-ts.c#L260-L271",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/touchscreen/mxs-lradc-ts.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Clang does not store pc or sp in function prologues so we don't know exactly</span></span>\n<span class=\"line\"><span style=\"\"> * where the function starts.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We can treat the current frame's lr as the saved pc and the preceding</span></span>\n<span class=\"line\"><span style=\"\"> * frame's lr as the current frame's lr, but we can't trace the most recent</span></span>\n<span class=\"line\"><span style=\"\"> * call.  Inserting a false stack frame allows us to reference the function</span></span>\n<span class=\"line\"><span style=\"\"> * called last in the stacktrace.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If the call instruction was a bl we can look at the callers branch</span></span>\n<span class=\"line\"><span style=\"\"> * instruction to calculate the saved pc.  We can recover the pc in most cases,</span></span>\n<span class=\"line\"><span style=\"\"> * but in cases such as calling function pointers we cannot. In this case,</span></span>\n<span class=\"line\"><span style=\"\"> * default to using the lr. This will be some address in the function, but will</span></span>\n<span class=\"line\"><span style=\"\"> * not be the function start.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Unfortunately due to the stack frame layout we can't dump r0 - r3, but these</span></span>\n<span class=\"line\"><span style=\"\"> * are less frequently saved.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Stack frame layout:</span></span>\n<span class=\"line\"><span style=\"\"> * \t\t&#x3C;larger addresses></span></span>\n<span class=\"line\"><span style=\"\"> * \t\tsaved lr</span></span>\n<span class=\"line\"><span style=\"\"> * \tframe=> saved fp</span></span>\n<span class=\"line\"><span style=\"\"> * \t\toptionally saved caller registers (r4 - r10)</span></span>\n<span class=\"line\"><span style=\"\"> * \t\toptionally saved arguments (r0 - r3)</span></span>\n<span class=\"line\"><span style=\"\"> * \t\t&#x3C;top of stack frame></span></span>\n<span class=\"line\"><span style=\"\"> * \t\t&#x3C;smaller addresses></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Functions start with the following code sequence:</span></span>\n<span class=\"line\"><span style=\"\"> * corrected pc =>  stmfd sp!, {..., fp, lr}</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tadd fp, sp, #x</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tstmfd sp!, {r0 - r3} (optional)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The diagram below shows an example stack setup for dump_stack.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The frame for c_backtrace has pointers to the code of dump_stack. This is</span></span>\n<span class=\"line\"><span style=\"\"> * why the frame of c_backtrace is used to for the pc calculation of</span></span>\n<span class=\"line\"><span style=\"\"> * dump_stack. This is why we must move back a frame to print dump_stack.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The stored locals for dump_stack are in dump_stack's frame. This means that</span></span>\n<span class=\"line\"><span style=\"\"> * to fully print dump_stack's frame we need both the frame for dump_stack (for</span></span>\n<span class=\"line\"><span style=\"\"> * locals) and the frame that was called by dump_stack (for pc).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To print locals we must know where the function start is. If we read the</span></span>\n<span class=\"line\"><span style=\"\"> * function prologue opcodes we can determine which variables are stored in the</span></span>\n<span class=\"line\"><span style=\"\"> * stack frame.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To find the function start of dump_stack we can look at the stored LR of</span></span>\n<span class=\"line\"><span style=\"\"> * show_stack. It points at the instruction directly after the bl dump_stack.</span></span>\n<span class=\"line\"><span style=\"\"> * We can then read the offset from the bl opcode to determine where the branch</span></span>\n<span class=\"line\"><span style=\"\"> * takes us.  The address calculated must be the start of dump_stack.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * c_backtrace frame           dump_stack:</span></span>\n<span class=\"line\"><span style=\"\"> * {[LR]    }  ============|   ...</span></span>\n<span class=\"line\"><span style=\"\"> * {[FP]    }  =======|    |   bl c_backtrace</span></span>\n<span class=\"line\"><span style=\"\"> *                    |    |=> ...</span></span>\n<span class=\"line\"><span style=\"\"> * {[R4-R10]}         |</span></span>\n<span class=\"line\"><span style=\"\"> * {[R0-R3] }         |        show_stack:</span></span>\n<span class=\"line\"><span style=\"\"> * dump_stack frame   |        ...</span></span>\n<span class=\"line\"><span style=\"\"> * {[LR]    } =============|   bl dump_stack</span></span>\n<span class=\"line\"><span style=\"\"> * {[FP]    } &#x3C;=======|    |=> ...</span></span>\n<span class=\"line\"><span style=\"\"> * {[R4-R10]}</span></span>\n<span class=\"line\"><span style=\"\"> * {[R0-R3] }</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm/lib/backtrace-clang.S#L30-L97",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm/lib/backtrace-clang.S"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Data is received through COM1 at 9600bit/s,8bit,no parity in packets</span></span>\n<span class=\"line\"><span style=\"\"> * of 5 byte each.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   +--------+   +--------+   +--------+   +--------+   +--------+</span></span>\n<span class=\"line\"><span style=\"\"> *   |1000000p|   |0xxxxxxx|   |0xxxxxxx|   |0yyyyyyy|   |0yyyyyyy|</span></span>\n<span class=\"line\"><span style=\"\"> *   +--------+   +--------+   +--------+   +--------+   +--------+</span></span>\n<span class=\"line\"><span style=\"\"> *                    MSB          LSB          MSB          LSB</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The value of p is 1 as long as the screen is touched and 0 when</span></span>\n<span class=\"line\"><span style=\"\"> * reporting the location where touching stopped, e.g. where the pen was</span></span>\n<span class=\"line\"><span style=\"\"> * lifted from the screen.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When holding the screen in landscape mode as the BIOS text output is</span></span>\n<span class=\"line\"><span style=\"\"> * presented, x is the horizontal axis with values growing from left to</span></span>\n<span class=\"line\"><span style=\"\"> * right and y is the vertical axis with values growing from top to</span></span>\n<span class=\"line\"><span style=\"\"> * bottom.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When holding the screen in portrait mode with the Sahara logo in its</span></span>\n<span class=\"line\"><span style=\"\"> * correct position, x ist the vertical axis with values growing from</span></span>\n<span class=\"line\"><span style=\"\"> * top to bottom and y is the horizontal axis with values growing from</span></span>\n<span class=\"line\"><span style=\"\"> * right to left.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/input/touchscreen/touchit213.c#L31-L53",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/input/touchscreen/touchit213.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Overall diagram of the Armada XP interrupt controller:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    To CPU 0                 To CPU 1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       /\\                       /\\</span></span>\n<span class=\"line\"><span style=\"\"> *       ||                       ||</span></span>\n<span class=\"line\"><span style=\"\"> * +---------------+     +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |               |\t |               |</span></span>\n<span class=\"line\"><span style=\"\"> * |    per-CPU    |\t |    per-CPU    |</span></span>\n<span class=\"line\"><span style=\"\"> * |  mask/unmask  |\t |  mask/unmask  |</span></span>\n<span class=\"line\"><span style=\"\"> * |     CPU0      |\t |     CPU1      |</span></span>\n<span class=\"line\"><span style=\"\"> * |               |\t |               |</span></span>\n<span class=\"line\"><span style=\"\"> * +---------------+\t +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *        /\\                       /\\</span></span>\n<span class=\"line\"><span style=\"\"> *        ||                       ||</span></span>\n<span class=\"line\"><span style=\"\"> *        \\\\_______________________//</span></span>\n<span class=\"line\"><span style=\"\"> *                     ||</span></span>\n<span class=\"line\"><span style=\"\"> *            +-------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *            |                   |</span></span>\n<span class=\"line\"><span style=\"\"> *            | Global interrupt  |</span></span>\n<span class=\"line\"><span style=\"\"> *            |    mask/unmask    |</span></span>\n<span class=\"line\"><span style=\"\"> *            |                   |</span></span>\n<span class=\"line\"><span style=\"\"> *            +-------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                     /\\</span></span>\n<span class=\"line\"><span style=\"\"> *                     ||</span></span>\n<span class=\"line\"><span style=\"\"> *               interrupt from</span></span>\n<span class=\"line\"><span style=\"\"> *                   device</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The \"global interrupt mask/unmask\" is modified using the</span></span>\n<span class=\"line\"><span style=\"\"> * ARMADA_370_XP_INT_SET_ENABLE_OFFS and</span></span>\n<span class=\"line\"><span style=\"\"> * ARMADA_370_XP_INT_CLEAR_ENABLE_OFFS registers, which are relative</span></span>\n<span class=\"line\"><span style=\"\"> * to \"main_int_base\".</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The \"per-CPU mask/unmask\" is modified using the</span></span>\n<span class=\"line\"><span style=\"\"> * ARMADA_370_XP_INT_SET_MASK_OFFS and</span></span>\n<span class=\"line\"><span style=\"\"> * ARMADA_370_XP_INT_CLEAR_MASK_OFFS registers, which are relative to</span></span>\n<span class=\"line\"><span style=\"\"> * \"per_cpu_int_base\". This base address points to a special address,</span></span>\n<span class=\"line\"><span style=\"\"> * which automatically accesses the registers of the current CPU.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The per-CPU mask/unmask can also be adjusted using the global</span></span>\n<span class=\"line\"><span style=\"\"> * per-interrupt ARMADA_370_XP_INT_SOURCE_CTL register, which we use</span></span>\n<span class=\"line\"><span style=\"\"> * to configure interrupt affinity.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Due to this model, all interrupts need to be mask/unmasked at two</span></span>\n<span class=\"line\"><span style=\"\"> * different levels: at the global level and at the per-CPU level.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This driver takes the following approach to deal with this:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - For global interrupts:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    At ->map() time, a global interrupt is unmasked at the per-CPU</span></span>\n<span class=\"line\"><span style=\"\"> *    mask/unmask level. It is therefore unmasked at this level for</span></span>\n<span class=\"line\"><span style=\"\"> *    the current CPU, running the ->map() code. This allows to have</span></span>\n<span class=\"line\"><span style=\"\"> *    the interrupt unmasked at this level in non-SMP</span></span>\n<span class=\"line\"><span style=\"\"> *    configurations. In SMP configurations, the ->set_affinity()</span></span>\n<span class=\"line\"><span style=\"\"> *    callback is called, which using the</span></span>\n<span class=\"line\"><span style=\"\"> *    ARMADA_370_XP_INT_SOURCE_CTL() readjusts the per-CPU mask/unmask</span></span>\n<span class=\"line\"><span style=\"\"> *    for the interrupt.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    The ->mask() and ->unmask() operations only mask/unmask the</span></span>\n<span class=\"line\"><span style=\"\"> *    interrupt at the \"global\" level.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    So, a global interrupt is enabled at the per-CPU level as soon</span></span>\n<span class=\"line\"><span style=\"\"> *    as it is mapped. At run time, the masking/unmasking takes place</span></span>\n<span class=\"line\"><span style=\"\"> *    at the global level.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - For per-CPU interrupts</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    At ->map() time, a per-CPU interrupt is unmasked at the global</span></span>\n<span class=\"line\"><span style=\"\"> *    mask/unmask level.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    The ->mask() and ->unmask() operations mask/unmask the interrupt</span></span>\n<span class=\"line\"><span style=\"\"> *    at the per-CPU level.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    So, a per-CPU interrupt is enabled at the global level as soon</span></span>\n<span class=\"line\"><span style=\"\"> *    as it is mapped. At run time, the masking/unmasking takes place</span></span>\n<span class=\"line\"><span style=\"\"> *    at the per-CPU level.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/irqchip/irq-armada-370-xp.c#L37-L115",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/irqchip/irq-armada-370-xp.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* STRUCTURE:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The dsp module provides layer 2 for b-channels (64kbit). It provides</span></span>\n<span class=\"line\"><span style=\"\"> * transparent audio forwarding with special digital signal processing:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - (1) generation of tones</span></span>\n<span class=\"line\"><span style=\"\"> * - (2) detection of dtmf tones</span></span>\n<span class=\"line\"><span style=\"\"> * - (3) crossconnecting and conferences (clocking)</span></span>\n<span class=\"line\"><span style=\"\"> * - (4) echo generation for delay test</span></span>\n<span class=\"line\"><span style=\"\"> * - (5) volume control</span></span>\n<span class=\"line\"><span style=\"\"> * - (6) disable receive data</span></span>\n<span class=\"line\"><span style=\"\"> * - (7) pipeline</span></span>\n<span class=\"line\"><span style=\"\"> * - (8) encryption/decryption</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Look:</span></span>\n<span class=\"line\"><span style=\"\"> *             TX            RX</span></span>\n<span class=\"line\"><span style=\"\"> *         ------upper layer------</span></span>\n<span class=\"line\"><span style=\"\"> *             |             ^</span></span>\n<span class=\"line\"><span style=\"\"> *             |             |(6)</span></span>\n<span class=\"line\"><span style=\"\"> *             v             |</span></span>\n<span class=\"line\"><span style=\"\"> *       +-----+-------------+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *       |(3)(4)                   |</span></span>\n<span class=\"line\"><span style=\"\"> *       |           CMX           |</span></span>\n<span class=\"line\"><span style=\"\"> *       |                         |</span></span>\n<span class=\"line\"><span style=\"\"> *       |           +-------------+</span></span>\n<span class=\"line\"><span style=\"\"> *       |           |       ^</span></span>\n<span class=\"line\"><span style=\"\"> *       |           |       |</span></span>\n<span class=\"line\"><span style=\"\"> *       |+---------+|  +----+----+</span></span>\n<span class=\"line\"><span style=\"\"> *       ||(1)      ||  |(2)      |</span></span>\n<span class=\"line\"><span style=\"\"> *       ||         ||  |         |</span></span>\n<span class=\"line\"><span style=\"\"> *       ||  Tones  ||  |  DTMF   |</span></span>\n<span class=\"line\"><span style=\"\"> *       ||         ||  |         |</span></span>\n<span class=\"line\"><span style=\"\"> *       ||         ||  |         |</span></span>\n<span class=\"line\"><span style=\"\"> *       |+----+----+|  +----+----+</span></span>\n<span class=\"line\"><span style=\"\"> *       +-----+-----+       ^</span></span>\n<span class=\"line\"><span style=\"\"> *             |             |</span></span>\n<span class=\"line\"><span style=\"\"> *             v             |</span></span>\n<span class=\"line\"><span style=\"\"> *        +----+----+   +----+----+</span></span>\n<span class=\"line\"><span style=\"\"> *        |(5)      |   |(5)      |</span></span>\n<span class=\"line\"><span style=\"\"> *        |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\"> *        |TX Volume|   |RX Volume|</span></span>\n<span class=\"line\"><span style=\"\"> *        |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\"> *        |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\"> *        +----+----+   +----+----+</span></span>\n<span class=\"line\"><span style=\"\"> *             |             ^</span></span>\n<span class=\"line\"><span style=\"\"> *             |             |</span></span>\n<span class=\"line\"><span style=\"\"> *             v             |</span></span>\n<span class=\"line\"><span style=\"\"> *        +----+-------------+----+</span></span>\n<span class=\"line\"><span style=\"\"> *        |(7)                    |</span></span>\n<span class=\"line\"><span style=\"\"> *        |                       |</span></span>\n<span class=\"line\"><span style=\"\"> *        |  Pipeline Processing  |</span></span>\n<span class=\"line\"><span style=\"\"> *        |                       |</span></span>\n<span class=\"line\"><span style=\"\"> *        |                       |</span></span>\n<span class=\"line\"><span style=\"\"> *        +----+-------------+----+</span></span>\n<span class=\"line\"><span style=\"\"> *             |             ^</span></span>\n<span class=\"line\"><span style=\"\"> *             |             |</span></span>\n<span class=\"line\"><span style=\"\"> *             v             |</span></span>\n<span class=\"line\"><span style=\"\"> *        +----+----+   +----+----+</span></span>\n<span class=\"line\"><span style=\"\"> *        |(8)      |   |(8)      |</span></span>\n<span class=\"line\"><span style=\"\"> *        |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\"> *        | Encrypt |   | Decrypt |</span></span>\n<span class=\"line\"><span style=\"\"> *        |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\"> *        |         |   |         |</span></span>\n<span class=\"line\"><span style=\"\"> *        +----+----+   +----+----+</span></span>\n<span class=\"line\"><span style=\"\"> *             |             ^</span></span>\n<span class=\"line\"><span style=\"\"> *             |             |</span></span>\n<span class=\"line\"><span style=\"\"> *             v             |</span></span>\n<span class=\"line\"><span style=\"\"> *         ------card  layer------</span></span>\n<span class=\"line\"><span style=\"\"> *             TX            RX</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Above you can see the logical data flow. If software is used to do the</span></span>\n<span class=\"line\"><span style=\"\"> * process, it is actually the real data flow. If hardware is used, data</span></span>\n<span class=\"line\"><span style=\"\"> * may not flow, but hardware commands to the card, to provide the data flow</span></span>\n<span class=\"line\"><span style=\"\"> * as shown.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NOTE: The channel must be activated in order to make dsp work, even if</span></span>\n<span class=\"line\"><span style=\"\"> * no data flow to the upper layer is intended. Activation can be done</span></span>\n<span class=\"line\"><span style=\"\"> * after and before controlling the setting using PH_CONTROL requests.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * DTMF: Will be detected by hardware if possible. It is done before CMX</span></span>\n<span class=\"line\"><span style=\"\"> * processing.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Tones: Will be generated via software if endless looped audio fifos are</span></span>\n<span class=\"line\"><span style=\"\"> * not supported by hardware. Tones will override all data from CMX.</span></span>\n<span class=\"line\"><span style=\"\"> * It is not required to join a conference to use tones at any time.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * CMX: Is transparent when not used. When it is used, it will do</span></span>\n<span class=\"line\"><span style=\"\"> * crossconnections and conferences via software if not possible through</span></span>\n<span class=\"line\"><span style=\"\"> * hardware. If hardware capability is available, hardware is used.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Echo: Is generated by CMX and is used to check performance of hard and</span></span>\n<span class=\"line\"><span style=\"\"> * software CMX.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The CMX has special functions for conferences with one, two and more</span></span>\n<span class=\"line\"><span style=\"\"> * members. It will allow different types of data flow. Receive and transmit</span></span>\n<span class=\"line\"><span style=\"\"> * data to/form upper layer may be switched on/off individually without losing</span></span>\n<span class=\"line\"><span style=\"\"> * features of CMX, Tones and DTMF.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Echo Cancellation: Sometimes we like to cancel echo from the interface.</span></span>\n<span class=\"line\"><span style=\"\"> * Note that a VoIP call may not have echo caused by the IP phone. The echo</span></span>\n<span class=\"line\"><span style=\"\"> * is generated by the telephone line connected to it. Because the delay</span></span>\n<span class=\"line\"><span style=\"\"> * is high, it becomes an echo. RESULT: Echo Cachelation is required if</span></span>\n<span class=\"line\"><span style=\"\"> * both echo AND delay is applied to an interface.</span></span>\n<span class=\"line\"><span style=\"\"> * Remember that software CMX always generates a more or less delay.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If all used features can be realized in hardware, and if transmit and/or</span></span>\n<span class=\"line\"><span style=\"\"> * receive data ist disabled, the card may not send/receive any data at all.</span></span>\n<span class=\"line\"><span style=\"\"> * Not receiving is useful if only announcements are played. Not sending is</span></span>\n<span class=\"line\"><span style=\"\"> * useful if an answering machine records audio. Not sending and receiving is</span></span>\n<span class=\"line\"><span style=\"\"> * useful during most states of the call. If supported by hardware, tones</span></span>\n<span class=\"line\"><span style=\"\"> * will be played without cpu load. Small PBXs and NT-Mode applications will</span></span>\n<span class=\"line\"><span style=\"\"> * not need expensive hardware when processing calls.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * LOCKING:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When data is received from upper or lower layer (card), the complete dsp</span></span>\n<span class=\"line\"><span style=\"\"> * module is locked by a global lock.  This lock MUST lock irq, because it</span></span>\n<span class=\"line\"><span style=\"\"> * must lock timer events by DSP poll timer.</span></span>\n<span class=\"line\"><span style=\"\"> * When data is ready to be transmitted down, the data is queued and sent</span></span>\n<span class=\"line\"><span style=\"\"> * outside lock and timer event.</span></span>\n<span class=\"line\"><span style=\"\"> * PH_CONTROL must not change any settings, join or split conference members</span></span>\n<span class=\"line\"><span style=\"\"> * during process of data.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * HDLC:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * It works quite the same as transparent, except that HDLC data is forwarded</span></span>\n<span class=\"line\"><span style=\"\"> * to all other conference members if no hardware bridging is possible.</span></span>\n<span class=\"line\"><span style=\"\"> * Send data will be writte to sendq. Sendq will be sent if confirm is received.</span></span>\n<span class=\"line\"><span style=\"\"> * Conference cannot join, if one member is not hdlc.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/isdn/mISDN/dsp_core.c#L21-L152",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/isdn/mISDN/dsp_core.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *  CR0014114 SPI protocol descrtiption:</span></span>\n<span class=\"line\"><span style=\"\"> *  +----+-----------------------------------+----+</span></span>\n<span class=\"line\"><span style=\"\"> *  | CMD|             BRIGHTNESS            |CRC |</span></span>\n<span class=\"line\"><span style=\"\"> *  +----+-----------------------------------+----+</span></span>\n<span class=\"line\"><span style=\"\"> *  |    | LED0| LED1| LED2| LED3| LED4| LED5|    |</span></span>\n<span class=\"line\"><span style=\"\"> *  |    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+    |</span></span>\n<span class=\"line\"><span style=\"\"> *  |    |R|G|B|R|G|B|R|G|B|R|G|B|R|G|B|R|G|B|    |</span></span>\n<span class=\"line\"><span style=\"\"> *  | 1  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 1  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |    |1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|    |</span></span>\n<span class=\"line\"><span style=\"\"> *  |    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+    |</span></span>\n<span class=\"line\"><span style=\"\"> *  |    |               18                  |    |</span></span>\n<span class=\"line\"><span style=\"\"> *  +----+-----------------------------------+----+</span></span>\n<span class=\"line\"><span style=\"\"> *  |                    20                       |</span></span>\n<span class=\"line\"><span style=\"\"> *  +---------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  PS: Boards can be connected to the chain:</span></span>\n<span class=\"line\"><span style=\"\"> *      SPI -> board0 -> board1 -> board2 ..</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/leds/leds-cr0014114.c#L12-L30",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/leds/leds-cr0014114.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * A target may call dm_accept_partial_bio only from the map routine.  It is</span></span>\n<span class=\"line\"><span style=\"\"> * allowed for all bio types except REQ_PREFLUSH, REQ_OP_ZONE_* zone management</span></span>\n<span class=\"line\"><span style=\"\"> * operations, REQ_OP_ZONE_APPEND (zone append writes) and any bio serviced by</span></span>\n<span class=\"line\"><span style=\"\"> * __send_duplicate_bios().</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * dm_accept_partial_bio informs the dm that the target only wants to process</span></span>\n<span class=\"line\"><span style=\"\"> * additional n_sectors sectors of the bio and the rest of the data should be</span></span>\n<span class=\"line\"><span style=\"\"> * sent in a next bio.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * A diagram that explains the arithmetics:</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------------+---------------+-------+</span></span>\n<span class=\"line\"><span style=\"\"> * |         1          |       2       |   3   |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------------+---------------+-------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;-------------- *tio->len_ptr ---------------></span></span>\n<span class=\"line\"><span style=\"\"> *                      &#x3C;----- bio_sectors -----></span></span>\n<span class=\"line\"><span style=\"\"> *                      &#x3C;-- n_sectors --></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Region 1 was already iterated over with bio_advance or similar function.</span></span>\n<span class=\"line\"><span style=\"\"> *\t(it may be empty if the target doesn't use bio_advance)</span></span>\n<span class=\"line\"><span style=\"\"> * Region 2 is the remaining bio size that the target wants to process.</span></span>\n<span class=\"line\"><span style=\"\"> *\t(it may be empty if region 1 is non-empty, although there is no reason</span></span>\n<span class=\"line\"><span style=\"\"> *\t to make it empty)</span></span>\n<span class=\"line\"><span style=\"\"> * The target requires that region 3 is to be sent in the next bio.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If the target wants to receive multiple copies of the bio (via num_*bios, etc),</span></span>\n<span class=\"line\"><span style=\"\"> * the partially processed part (the sum of regions 1+2) must be the same for all</span></span>\n<span class=\"line\"><span style=\"\"> * copies of the bio.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/md/dm.c#L1287-L1316",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/md/dm.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * RAID10 provides a combination of RAID0 and RAID1 functionality.</span></span>\n<span class=\"line\"><span style=\"\"> * The layout of data is defined by</span></span>\n<span class=\"line\"><span style=\"\"> *    chunk_size</span></span>\n<span class=\"line\"><span style=\"\"> *    raid_disks</span></span>\n<span class=\"line\"><span style=\"\"> *    near_copies (stored in low byte of layout)</span></span>\n<span class=\"line\"><span style=\"\"> *    far_copies (stored in second byte of layout)</span></span>\n<span class=\"line\"><span style=\"\"> *    far_offset (stored in bit 16 of layout )</span></span>\n<span class=\"line\"><span style=\"\"> *    use_far_sets (stored in bit 17 of layout )</span></span>\n<span class=\"line\"><span style=\"\"> *    use_far_sets_bugfixed (stored in bit 18 of layout )</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The data to be stored is divided into chunks using chunksize.  Each device</span></span>\n<span class=\"line\"><span style=\"\"> * is divided into far_copies sections.   In each section, chunks are laid out</span></span>\n<span class=\"line\"><span style=\"\"> * in a style similar to raid0, but near_copies copies of each chunk is stored</span></span>\n<span class=\"line\"><span style=\"\"> * (each on a different drive).  The starting device for each section is offset</span></span>\n<span class=\"line\"><span style=\"\"> * near_copies from the starting device of the previous section.  Thus there</span></span>\n<span class=\"line\"><span style=\"\"> * are (near_copies * far_copies) of each chunk, and each is on a different</span></span>\n<span class=\"line\"><span style=\"\"> * drive.  near_copies and far_copies must be at least one, and their product</span></span>\n<span class=\"line\"><span style=\"\"> * is at most raid_disks.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If far_offset is true, then the far_copies are handled a bit differently.</span></span>\n<span class=\"line\"><span style=\"\"> * The copies are still in different stripes, but instead of being very far</span></span>\n<span class=\"line\"><span style=\"\"> * apart on disk, there are adjacent stripes.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The far and offset algorithms are handled slightly differently if</span></span>\n<span class=\"line\"><span style=\"\"> * 'use_far_sets' is true.  In this case, the array's devices are grouped into</span></span>\n<span class=\"line\"><span style=\"\"> * sets that are (near_copies * far_copies) in size.  The far copied stripes</span></span>\n<span class=\"line\"><span style=\"\"> * are still shifted by 'near_copies' devices, but this shifting stays confined</span></span>\n<span class=\"line\"><span style=\"\"> * to the set rather than the entire array.  This is done to improve the number</span></span>\n<span class=\"line\"><span style=\"\"> * of device combinations that can fail without causing the array to fail.</span></span>\n<span class=\"line\"><span style=\"\"> * Example 'far' algorithm w/o 'use_far_sets' (each letter represents a chunk</span></span>\n<span class=\"line\"><span style=\"\"> * on a device):</span></span>\n<span class=\"line\"><span style=\"\"> *    A B C D    A B C D E</span></span>\n<span class=\"line\"><span style=\"\"> *      ...         ...</span></span>\n<span class=\"line\"><span style=\"\"> *    D A B C    E A B C D</span></span>\n<span class=\"line\"><span style=\"\"> * Example 'far' algorithm w/ 'use_far_sets' enabled (sets illustrated w/ []'s):</span></span>\n<span class=\"line\"><span style=\"\"> *    [A B] [C D]    [A B] [C D E]</span></span>\n<span class=\"line\"><span style=\"\"> *    |...| |...|    |...| | ... |</span></span>\n<span class=\"line\"><span style=\"\"> *    [B A] [D C]    [B A] [E C D]</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/md/raid10.c#L26-L65",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/md/raid10.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Before recovery, the log looks like the following</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   ---------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   |           valid log        | invalid log  |</span></span>\n<span class=\"line\"><span style=\"\"> *   ---------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   ^</span></span>\n<span class=\"line\"><span style=\"\"> *   |- log->last_checkpoint</span></span>\n<span class=\"line\"><span style=\"\"> *   |- log->last_cp_seq</span></span>\n<span class=\"line\"><span style=\"\"> * Now we scan through the log until we see invalid entry</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   ---------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   |           valid log        | invalid log  |</span></span>\n<span class=\"line\"><span style=\"\"> *   ---------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   ^                            ^</span></span>\n<span class=\"line\"><span style=\"\"> *   |- log->last_checkpoint      |- ctx->pos</span></span>\n<span class=\"line\"><span style=\"\"> *   |- log->last_cp_seq          |- ctx->seq</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * From this point, we need to increase seq number by 10 to avoid</span></span>\n<span class=\"line\"><span style=\"\"> * confusing next recovery.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   ---------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   |           valid log        | invalid log  |</span></span>\n<span class=\"line\"><span style=\"\"> *   ---------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   ^                              ^</span></span>\n<span class=\"line\"><span style=\"\"> *   |- log->last_checkpoint        |- ctx->pos+1</span></span>\n<span class=\"line\"><span style=\"\"> *   |- log->last_cp_seq            |- ctx->seq+10001</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * However, it is not safe to start the state machine yet, because data only</span></span>\n<span class=\"line\"><span style=\"\"> * parities are not yet secured in RAID. To save these data only parities, we</span></span>\n<span class=\"line\"><span style=\"\"> * rewrite them from seq+11.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   -----------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   |           valid log        | data only stripes | invalid log  |</span></span>\n<span class=\"line\"><span style=\"\"> *   -----------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   ^                                                ^</span></span>\n<span class=\"line\"><span style=\"\"> *   |- log->last_checkpoint                          |- ctx->pos+n</span></span>\n<span class=\"line\"><span style=\"\"> *   |- log->last_cp_seq                              |- ctx->seq+10000+n</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If failure happens again during this process, the recovery can safe start</span></span>\n<span class=\"line\"><span style=\"\"> * again from log->last_checkpoint.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Once data only stripes are rewritten to journal, we move log_tail</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   -----------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   |     old log        |    data only stripes    | invalid log  |</span></span>\n<span class=\"line\"><span style=\"\"> *   -----------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *                        ^                         ^</span></span>\n<span class=\"line\"><span style=\"\"> *                        |- log->last_checkpoint   |- ctx->pos+n</span></span>\n<span class=\"line\"><span style=\"\"> *                        |- log->last_cp_seq       |- ctx->seq+10000+n</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Then we can safely start the state machine. If failure happens from this</span></span>\n<span class=\"line\"><span style=\"\"> * point on, the recovery will start from new log->last_checkpoint.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/md/raid5-cache.c#L2290-L2344",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/md/raid5-cache.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * PPL consists of a 4KB header (struct ppl_header) and at least 128KB for</span></span>\n<span class=\"line\"><span style=\"\"> * partial parity data. The header contains an array of entries</span></span>\n<span class=\"line\"><span style=\"\"> * (struct ppl_header_entry) which describe the logged write requests.</span></span>\n<span class=\"line\"><span style=\"\"> * Partial parity for the entries comes after the header, written in the same</span></span>\n<span class=\"line\"><span style=\"\"> * sequence as the entries:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Header</span></span>\n<span class=\"line\"><span style=\"\"> *   entry0</span></span>\n<span class=\"line\"><span style=\"\"> *   ...</span></span>\n<span class=\"line\"><span style=\"\"> *   entryN</span></span>\n<span class=\"line\"><span style=\"\"> * PP data</span></span>\n<span class=\"line\"><span style=\"\"> *   PP for entry0</span></span>\n<span class=\"line\"><span style=\"\"> *   ...</span></span>\n<span class=\"line\"><span style=\"\"> *   PP for entryN</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * An entry describes one or more consecutive stripe_heads, up to a full</span></span>\n<span class=\"line\"><span style=\"\"> * stripe. The modifed raid data chunks form an m-by-n matrix, where m is the</span></span>\n<span class=\"line\"><span style=\"\"> * number of stripe_heads in the entry and n is the number of modified data</span></span>\n<span class=\"line\"><span style=\"\"> * disks. Every stripe_head in the entry must write to the same data disks.</span></span>\n<span class=\"line\"><span style=\"\"> * An example of a valid case described by a single entry (writes to the first</span></span>\n<span class=\"line\"><span style=\"\"> * stripe of a 4 disk array, 16k chunk size):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * sh->sector   dd0   dd1   dd2    ppl</span></span>\n<span class=\"line\"><span style=\"\"> *            +-----+-----+-----+</span></span>\n<span class=\"line\"><span style=\"\"> * 0          | --- | --- | --- | +----+</span></span>\n<span class=\"line\"><span style=\"\"> * 8          | -W- | -W- | --- | | pp |   data_sector = 8</span></span>\n<span class=\"line\"><span style=\"\"> * 16         | -W- | -W- | --- | | pp |   data_size = 3 * 2 * 4k</span></span>\n<span class=\"line\"><span style=\"\"> * 24         | -W- | -W- | --- | | pp |   pp_size = 3 * 4k</span></span>\n<span class=\"line\"><span style=\"\"> *            +-----+-----+-----+ +----+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * data_sector is the first raid sector of the modified data, data_size is the</span></span>\n<span class=\"line\"><span style=\"\"> * total size of modified data and pp_size is the size of partial parity for</span></span>\n<span class=\"line\"><span style=\"\"> * this entry. Entries for full stripe writes contain no partial parity</span></span>\n<span class=\"line\"><span style=\"\"> * (pp_size = 0), they only mark the stripes for which parity should be</span></span>\n<span class=\"line\"><span style=\"\"> * recalculated after an unclean shutdown. Every entry holds a checksum of its</span></span>\n<span class=\"line\"><span style=\"\"> * partial parity, the header also has a checksum of the header itself.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * A write request is always logged to the PPL instance stored on the parity</span></span>\n<span class=\"line\"><span style=\"\"> * disk of the corresponding stripe. For each member disk there is one ppl_log</span></span>\n<span class=\"line\"><span style=\"\"> * used to handle logging for this disk, independently from others. They are</span></span>\n<span class=\"line\"><span style=\"\"> * grouped in child_logs array in struct ppl_conf, which is assigned to</span></span>\n<span class=\"line\"><span style=\"\"> * r5conf->log_private.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ppl_io_unit represents a full PPL write, header_page contains the ppl_header.</span></span>\n<span class=\"line\"><span style=\"\"> * PPL entries for logged stripes are added in ppl_log_stripe(). A stripe_head</span></span>\n<span class=\"line\"><span style=\"\"> * can be appended to the last entry if it meets the conditions for a valid</span></span>\n<span class=\"line\"><span style=\"\"> * entry described above, otherwise a new entry is added. Checksums of entries</span></span>\n<span class=\"line\"><span style=\"\"> * are calculated incrementally as stripes containing partial parity are being</span></span>\n<span class=\"line\"><span style=\"\"> * added. ppl_submit_iounit() calculates the checksum of the header and submits</span></span>\n<span class=\"line\"><span style=\"\"> * a bio containing the header page and partial parity pages (sh->ppl_page) for</span></span>\n<span class=\"line\"><span style=\"\"> * all stripes of the io_unit. When the PPL write completes, the stripes</span></span>\n<span class=\"line\"><span style=\"\"> * associated with the io_unit are released and raid5d starts writing their data</span></span>\n<span class=\"line\"><span style=\"\"> * and parity. When all stripes are written, the io_unit is freed and the next</span></span>\n<span class=\"line\"><span style=\"\"> * can be submitted.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * An io_unit is used to gather stripes until it is submitted or becomes full</span></span>\n<span class=\"line\"><span style=\"\"> * (if the maximum number of entries or size of PPL is reached). Another io_unit</span></span>\n<span class=\"line\"><span style=\"\"> * can't be submitted until the previous has completed (PPL and stripe</span></span>\n<span class=\"line\"><span style=\"\"> * data+parity is written). The log->io_list tracks all io_units of a log</span></span>\n<span class=\"line\"><span style=\"\"> * (for a single member disk). New io_units are added to the end of the list</span></span>\n<span class=\"line\"><span style=\"\"> * and the first io_unit is submitted, if it is not submitted already.</span></span>\n<span class=\"line\"><span style=\"\"> * The current io_unit accepting new stripes is always at the end of the list.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If write-back cache is enabled for any of the disks in the array, its data</span></span>\n<span class=\"line\"><span style=\"\"> * must be flushed before next io_unit is submitted.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/md/raid5-ppl.c#L17-L83",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/md/raid5-ppl.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * This function is only called when CACHE_SET_IO_DISABLE is set, which means</span></span>\n<span class=\"line\"><span style=\"\"> * cache set is unregistering due to too many I/O errors. In this condition,</span></span>\n<span class=\"line\"><span style=\"\"> * the bcache device might be stopped, it depends on stop_when_cache_set_failed</span></span>\n<span class=\"line\"><span style=\"\"> * value and whether the broken cache has dirty data:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * dc->stop_when_cache_set_failed    dc->has_dirty   stop bcache device</span></span>\n<span class=\"line\"><span style=\"\"> *  BCH_CACHED_STOP_AUTO               0               NO</span></span>\n<span class=\"line\"><span style=\"\"> *  BCH_CACHED_STOP_AUTO               1               YES</span></span>\n<span class=\"line\"><span style=\"\"> *  BCH_CACHED_DEV_STOP_ALWAYS         0               YES</span></span>\n<span class=\"line\"><span style=\"\"> *  BCH_CACHED_DEV_STOP_ALWAYS         1               YES</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The expected behavior is, if stop_when_cache_set_failed is configured to</span></span>\n<span class=\"line\"><span style=\"\"> * \"auto\" via sysfs interface, the bcache device will not be stopped if the</span></span>\n<span class=\"line\"><span style=\"\"> * backing device is clean on the broken cache device.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/md/bcache/super.c#L1754-L1769",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/md/bcache/super.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The AO-CECB embeds a dual/divider to generate a more precise</span></span>\n<span class=\"line\"><span style=\"\"> * 32,768KHz clock for CEC core clock.</span></span>\n<span class=\"line\"><span style=\"\"> *                      ______   ______</span></span>\n<span class=\"line\"><span style=\"\"> *                     |      | |      |</span></span>\n<span class=\"line\"><span style=\"\"> *         ______      | Div1 |-| Cnt1 |       ______</span></span>\n<span class=\"line\"><span style=\"\"> *        |      |    /|______| |______|\\     |      |</span></span>\n<span class=\"line\"><span style=\"\"> * Xtal-->| Gate |---|  ______   ______  X-X--| Gate |--></span></span>\n<span class=\"line\"><span style=\"\"> *        |______| |  \\|      | |      |/  |  |______|</span></span>\n<span class=\"line\"><span style=\"\"> *                 |   | Div2 |-| Cnt2 |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                 |   |______| |______|   |</span></span>\n<span class=\"line\"><span style=\"\"> *                 |_______________________|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The dividing can be switched to single or dual, with a counter</span></span>\n<span class=\"line\"><span style=\"\"> * for each divider to set when the switching is done.</span></span>\n<span class=\"line\"><span style=\"\"> * The entire dividing mechanism can be also bypassed.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/cec/platform/meson/ao-cec-g12a.c#L196-L212",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/cec/platform/meson/ao-cec-g12a.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The IMX290 pixel array is organized as follows:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     +------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *     |           Optical Black            |     }  Vertical effective optical black (10)</span></span>\n<span class=\"line\"><span style=\"\"> * +---+------------------------------------+---+</span></span>\n<span class=\"line\"><span style=\"\"> * |   |                                    |   | }  Effective top margin (8)</span></span>\n<span class=\"line\"><span style=\"\"> * |   |   +----------------------------+   |   | \\</span></span>\n<span class=\"line\"><span style=\"\"> * |   |   |                            |   |   |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |   |   |                            |   |   |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |   |   |                            |   |   |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |   |   |    Recording Pixel Area    |   |   |  | Recommended height (1080)</span></span>\n<span class=\"line\"><span style=\"\"> * |   |   |                            |   |   |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |   |   |                            |   |   |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |   |   |                            |   |   |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |   |   +----------------------------+   |   | /</span></span>\n<span class=\"line\"><span style=\"\"> * |   |                                    |   | }  Effective bottom margin (9)</span></span>\n<span class=\"line\"><span style=\"\"> * +---+------------------------------------+---+</span></span>\n<span class=\"line\"><span style=\"\"> *  &#x3C;-> &#x3C;-> &#x3C;--------------------------> &#x3C;-> &#x3C;-></span></span>\n<span class=\"line\"><span style=\"\"> *                                            \\----  Ignored right margin (4)</span></span>\n<span class=\"line\"><span style=\"\"> *                                        \\--------  Effective right margin (9)</span></span>\n<span class=\"line\"><span style=\"\"> *                       \\-------------------------  Recommended width (1920)</span></span>\n<span class=\"line\"><span style=\"\"> *       \\-----------------------------------------  Effective left margin (8)</span></span>\n<span class=\"line\"><span style=\"\"> *   \\---------------------------------------------  Ignored left margin (4)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The optical black lines are output over CSI-2 with a separate data type.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The pixel array is meant to have 1920x1080 usable pixels after image</span></span>\n<span class=\"line\"><span style=\"\"> * processing in an ISP. It has 8 (9) extra active pixels usable for color</span></span>\n<span class=\"line\"><span style=\"\"> * processing in the ISP on the top and left (bottom and right) sides of the</span></span>\n<span class=\"line\"><span style=\"\"> * image. In addition, 4 additional pixels are present on the left and right</span></span>\n<span class=\"line\"><span style=\"\"> * sides of the image, documented as \"ignored area\".</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * As far as is understood, all pixels of the pixel array (ignored area, color</span></span>\n<span class=\"line\"><span style=\"\"> * processing margins and recording area) can be output by the sensor.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/i2c/imx290.c#L109-L144",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/i2c/imx290.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * PLL1 Clock Tree:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * +-&#x3C; EXTCLK</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * +-+ pll_pre_div_half (0x30a [0])</span></span>\n<span class=\"line\"><span style=\"\"> *   |</span></span>\n<span class=\"line\"><span style=\"\"> *   +-+ pll_pre_div (0x300 [2:0], special values:</span></span>\n<span class=\"line\"><span style=\"\"> *     |              0: 1, 1: 1.5, 3: 2.5, 4: 3, 5: 4, 7: 8)</span></span>\n<span class=\"line\"><span style=\"\"> *     +-+ pll_mul (0x301 [1:0], 0x302 [7:0])</span></span>\n<span class=\"line\"><span style=\"\"> *       |</span></span>\n<span class=\"line\"><span style=\"\"> *       +-+ m_div (0x303 [3:0])</span></span>\n<span class=\"line\"><span style=\"\"> *       | |</span></span>\n<span class=\"line\"><span style=\"\"> *       | +-> PHY_SCLK</span></span>\n<span class=\"line\"><span style=\"\"> *       | |</span></span>\n<span class=\"line\"><span style=\"\"> *       | +-+ mipi_div (0x304 [1:0], special values: 0: 4, 1: 5, 2: 6, 3: 8)</span></span>\n<span class=\"line\"><span style=\"\"> *       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *       |   +-+ pclk_div (0x3020 [3])</span></span>\n<span class=\"line\"><span style=\"\"> *       |     |</span></span>\n<span class=\"line\"><span style=\"\"> *       |     +-> PCLK</span></span>\n<span class=\"line\"><span style=\"\"> *       |</span></span>\n<span class=\"line\"><span style=\"\"> *       +-+ sys_pre_div (0x305 [1:0], special values: 0: 3, 1: 4, 2: 5, 3: 6)</span></span>\n<span class=\"line\"><span style=\"\"> *         |</span></span>\n<span class=\"line\"><span style=\"\"> *         +-+ sys_div (0x306 [0])</span></span>\n<span class=\"line\"><span style=\"\"> *           |</span></span>\n<span class=\"line\"><span style=\"\"> *           +-+ sys_sel (0x3032 [7], 0: PLL1, 1: PLL2)</span></span>\n<span class=\"line\"><span style=\"\"> *             |</span></span>\n<span class=\"line\"><span style=\"\"> *             +-+ sclk_sel (0x3033 [1], 0: sys_sel, 1: PLL2 DAC_CLK)</span></span>\n<span class=\"line\"><span style=\"\"> *               |</span></span>\n<span class=\"line\"><span style=\"\"> *               +-+ sclk_pre_div (0x3106 [3:2], special values:</span></span>\n<span class=\"line\"><span style=\"\"> *                 |               0: 1, 1: 2, 2: 4, 3: 1)</span></span>\n<span class=\"line\"><span style=\"\"> *                 |</span></span>\n<span class=\"line\"><span style=\"\"> *                 +-+ sclk_div (0x3106 [7:4], special values: 0: 1)</span></span>\n<span class=\"line\"><span style=\"\"> *                   |</span></span>\n<span class=\"line\"><span style=\"\"> *                   +-> SCLK</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/i2c/ov8865.c#L482-L517",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/i2c/ov8865.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Update v4l2_bt_timings per current status.</span></span>\n<span class=\"line\"><span style=\"\"> * frame_top/frame_bottom/frame_left/frame_right need to be ready.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The following registers start counting from sync's rising edge:</span></span>\n<span class=\"line\"><span style=\"\"> * 1. VR090: frame edge's left and right</span></span>\n<span class=\"line\"><span style=\"\"> * 2. VR094: frame edge's top and bottom</span></span>\n<span class=\"line\"><span style=\"\"> * 3. VR09C: counting from sync's rising edge to falling edge</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * [Vertical timing]</span></span>\n<span class=\"line\"><span style=\"\"> *             +--+     +-------------------+     +--+</span></span>\n<span class=\"line\"><span style=\"\"> *             |  |     |     v i d e o     |     |  |</span></span>\n<span class=\"line\"><span style=\"\"> *          +--+  +-----+                   +-----+  +---+</span></span>\n<span class=\"line\"><span style=\"\"> *        vsync+--+</span></span>\n<span class=\"line\"><span style=\"\"> *    frame_top+--------+</span></span>\n<span class=\"line\"><span style=\"\"> * frame_bottom+----------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                   +-------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                   |     v i d e o     |</span></span>\n<span class=\"line\"><span style=\"\"> *       +--+  +-----+                   +-----+  +---+</span></span>\n<span class=\"line\"><span style=\"\"> *          |  |                               |  |</span></span>\n<span class=\"line\"><span style=\"\"> *          +--+                               +--+</span></span>\n<span class=\"line\"><span style=\"\"> *        vsync+-------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *    frame_top+-----+</span></span>\n<span class=\"line\"><span style=\"\"> * frame_bottom+-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * [Horizontal timing]</span></span>\n<span class=\"line\"><span style=\"\"> *             +--+     +-------------------+     +--+</span></span>\n<span class=\"line\"><span style=\"\"> *             |  |     |     v i d e o     |     |  |</span></span>\n<span class=\"line\"><span style=\"\"> *          +--+  +-----+                   +-----+  +---+</span></span>\n<span class=\"line\"><span style=\"\"> *        hsync+--+</span></span>\n<span class=\"line\"><span style=\"\"> *   frame_left+--------+</span></span>\n<span class=\"line\"><span style=\"\"> *  frame_right+----------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                   +-------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                   |     v i d e o     |</span></span>\n<span class=\"line\"><span style=\"\"> *       +--+  +-----+                   +-----+  +---+</span></span>\n<span class=\"line\"><span style=\"\"> *          |  |                               |  |</span></span>\n<span class=\"line\"><span style=\"\"> *          +--+                               +--+</span></span>\n<span class=\"line\"><span style=\"\"> *        hsync+-------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *   frame_left+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *  frame_right+-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @v: the struct of aspeed_video</span></span>\n<span class=\"line\"><span style=\"\"> * @det: v4l2_bt_timings to be updated.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/platform/aspeed/aspeed-video.c#L937-L982",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/platform/aspeed/aspeed-video.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * convert us back into redrat3 lengths</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * length * 1000   length * 1000000</span></span>\n<span class=\"line\"><span style=\"\"> * ------------- = ---------------- = micro</span></span>\n<span class=\"line\"><span style=\"\"> * rr3clk / 1000       rr3clk</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"> * 6 * 2       4 * 3        micro * rr3clk          micro * rr3clk / 1000</span></span>\n<span class=\"line\"><span style=\"\"> * ----- = 4   ----- = 6    -------------- = len    ---------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   3           2             1000000                    1000</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/rc/redrat3.c#L315-L325",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/rc/redrat3.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * RX graphical example to better understand the difference between ST IR block</span></span>\n<span class=\"line\"><span style=\"\"> * output and standard definition used by LIRC (and most of the world!)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *           mark                                     mark</span></span>\n<span class=\"line\"><span style=\"\"> *      |-IRB_RX_ON-|                            |-IRB_RX_ON-|</span></span>\n<span class=\"line\"><span style=\"\"> *      ___  ___  ___                            ___  ___  ___             _</span></span>\n<span class=\"line\"><span style=\"\"> *      | |  | |  | |                            | |  | |  | |             |</span></span>\n<span class=\"line\"><span style=\"\"> *      | |  | |  | |         space 0            | |  | |  | |   space 1   |</span></span>\n<span class=\"line\"><span style=\"\"> * _____| |__| |__| |____________________________| |__| |__| |_____________|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      |--------------- IRB_RX_SYS -------------|------ IRB_RX_SYS -------|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      |------------- encoding bit 0 -----------|---- encoding bit 1 -----|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ST hardware returns mark (IRB_RX_ON) and total symbol time (IRB_RX_SYS), so</span></span>\n<span class=\"line\"><span style=\"\"> * convert to standard mark/space we have to calculate space=(IRB_RX_SYS-mark)</span></span>\n<span class=\"line\"><span style=\"\"> * The mark time represents the amount of time the carrier (usually 36-40kHz)</span></span>\n<span class=\"line\"><span style=\"\"> * is detected.The above examples shows Pulse Width Modulation encoding where</span></span>\n<span class=\"line\"><span style=\"\"> * bit 0 is represented by space>mark.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/rc/st_rc.c#L70-L90",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/rc/st_rc.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*  ---- Remote Button Layout ----</span></span>\n<span class=\"line\"><span style=\"\">    POWER   SOURCE  SCAN    MUTE</span></span>\n<span class=\"line\"><span style=\"\">    TV/FM   1       2       3</span></span>\n<span class=\"line\"><span style=\"\">    |>      4       5       6</span></span>\n<span class=\"line\"><span style=\"\">    &#x3C;|      7       8       9</span></span>\n<span class=\"line\"><span style=\"\">    ^^UP    0       +       RECALL</span></span>\n<span class=\"line\"><span style=\"\">    vvDN    RECORD  STOP    PLAY</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">\tMINIMIZE          ZOOM</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">\t\t  CH+</span></span>\n<span class=\"line\"><span style=\"\">      VOL-                   VOL+</span></span>\n<span class=\"line\"><span style=\"\">\t\t  CH-</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">\tSNAPSHOT           MTS</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">     &#x3C;&#x3C;      FUNC    >>     RESET</span></span>\n<span class=\"line\"><span style=\"\">*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/rc/keymaps/rc-msi-tvanywhere-plus.c#L27-L45",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/rc/keymaps/rc-msi-tvanywhere-plus.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * IsSpurInBand() - Checks to see if a spur will be present within the IF's</span></span>\n<span class=\"line\"><span style=\"\"> *                  bandwidth. (fIFOut +/- fIFBW, -fIFOut +/- fIFBW)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                    ma   mb                                     mc   md</span></span>\n<span class=\"line\"><span style=\"\"> *                  &#x3C;--+-+-+-------------------+-------------------+-+-+--></span></span>\n<span class=\"line\"><span style=\"\"> *                     |   ^                   0                   ^   |</span></span>\n<span class=\"line\"><span style=\"\"> *                     ^   b=-fIFOut+fIFBW/2      -b=+fIFOut-fIFBW/2   ^</span></span>\n<span class=\"line\"><span style=\"\"> *                     a=-fIFOut-fIFBW/2              -a=+fIFOut+fIFBW/2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                  Note that some equations are doubled to prevent round-off</span></span>\n<span class=\"line\"><span style=\"\"> *                  problems when calculating fIFBW/2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @pAS_Info:\tAvoid Spurs information block</span></span>\n<span class=\"line\"><span style=\"\"> * @fm:\t\tIf spur, amount f_IF1 has to move negative</span></span>\n<span class=\"line\"><span style=\"\"> * @fp:\t\tIf spur, amount f_IF1 has to move positive</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Returns 1 if an LO spur would be present, otherwise 0.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/tuners/mt2063.c#L659-L677",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/tuners/mt2063.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*\tGPO:</span></span>\n<span class=\"line\"><span style=\"\"> *\t3 - ATSC/MH#   | 1 = ATSC transport, 0 = MH transport      | default 0</span></span>\n<span class=\"line\"><span style=\"\"> *\t4 - ATSC_RST## | 1 = ATSC enable, 0 = ATSC Reset           | default 0</span></span>\n<span class=\"line\"><span style=\"\"> *\t5 - ATSC_EN    | 1 = ATSC power enable, 0 = ATSC power off | default 0</span></span>\n<span class=\"line\"><span style=\"\"> *\t6 - MH_RESET#  | 1 = MH enable, 0 = MH Reset               | default 0</span></span>\n<span class=\"line\"><span style=\"\"> *\t7 - MH_EN      | 1 = MH power enable, 0 = MH power off     | default 0</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/usb/dvb-usb-v2/mxl111sf-gpio.c#L708-L714",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/usb/dvb-usb-v2/mxl111sf-gpio.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Scan the UVC descriptors to locate a chain starting at an Output Terminal</span></span>\n<span class=\"line\"><span style=\"\"> * and containing the following units:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - one or more Output Terminals (USB Streaming or Display)</span></span>\n<span class=\"line\"><span style=\"\"> * - zero or one Processing Unit</span></span>\n<span class=\"line\"><span style=\"\"> * - zero, one or more single-input Selector Units</span></span>\n<span class=\"line\"><span style=\"\"> * - zero or one multiple-input Selector Units, provided all inputs are</span></span>\n<span class=\"line\"><span style=\"\"> *   connected to input terminals</span></span>\n<span class=\"line\"><span style=\"\"> * - zero, one or mode single-input Extension Units</span></span>\n<span class=\"line\"><span style=\"\"> * - one or more Input Terminals (Camera, External or USB Streaming)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The terminal and units must match on of the following structures:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ITT_*(0) -> +---------+    +---------+    +---------+ -> TT_STREAMING(0)</span></span>\n<span class=\"line\"><span style=\"\"> * ...         | SU{0,1} | -> | PU{0,1} | -> | XU{0,n} |    ...</span></span>\n<span class=\"line\"><span style=\"\"> * ITT_*(n) -> +---------+    +---------+    +---------+ -> TT_STREAMING(n)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                 +---------+    +---------+ -> OTT_*(0)</span></span>\n<span class=\"line\"><span style=\"\"> * TT_STREAMING -> | PU{0,1} | -> | XU{0,n} |    ...</span></span>\n<span class=\"line\"><span style=\"\"> *                 +---------+    +---------+ -> OTT_*(n)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The Processing Unit and Extension Units can be in any order. Additional</span></span>\n<span class=\"line\"><span style=\"\"> * Extension Units connected to the main chain as single-unit branches are</span></span>\n<span class=\"line\"><span style=\"\"> * also supported. Single-input Selector Units are ignored.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/media/usb/uvc/uvc_driver.c#L1311-L1336",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/media/usb/uvc/uvc_driver.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Memory Controller (MC) has few Memory Clients that are issuing memory</span></span>\n<span class=\"line\"><span style=\"\"> * bandwidth allocation requests to the MC interconnect provider. The MC</span></span>\n<span class=\"line\"><span style=\"\"> * provider aggregates the requests and then sends the aggregated request</span></span>\n<span class=\"line\"><span style=\"\"> * up to the External Memory Controller (EMC) interconnect provider which</span></span>\n<span class=\"line\"><span style=\"\"> * re-configures hardware interface to External Memory (EMEM) in accordance</span></span>\n<span class=\"line\"><span style=\"\"> * to the required bandwidth. Each MC interconnect node represents an</span></span>\n<span class=\"line\"><span style=\"\"> * individual Memory Client.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Memory interconnect topology:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *               +----+</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+    |    |</span></span>\n<span class=\"line\"><span style=\"\"> * | TEXSRD +--->+    |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+    |    |</span></span>\n<span class=\"line\"><span style=\"\"> *               |    |    +-----+    +------+</span></span>\n<span class=\"line\"><span style=\"\"> *    ...        | MC +--->+ EMC +--->+ EMEM |</span></span>\n<span class=\"line\"><span style=\"\"> *               |    |    +-----+    +------+</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+    |    |</span></span>\n<span class=\"line\"><span style=\"\"> * | DISP.. +--->+    |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+    |    |</span></span>\n<span class=\"line\"><span style=\"\"> *               +----+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/memory/tegra/mc.c#L757-L779",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/memory/tegra/mc.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * N: next DDCB, this is where the next DDCB will be put.</span></span>\n<span class=\"line\"><span style=\"\"> * A: active DDCB, this is where the code will look for the next completion.</span></span>\n<span class=\"line\"><span style=\"\"> * x: DDCB is enqueued, we are waiting for its completion.</span></span>\n<span class=\"line\"><span style=\"\"> * Situation (1): Empty queue</span></span>\n<span class=\"line\"><span style=\"\"> *  +---+---+---+---+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |</span></span>\n<span class=\"line\"><span style=\"\"> *  |   |   |   |   |   |   |   |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  +---+---+---+---+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *           A/N</span></span>\n<span class=\"line\"><span style=\"\"> *  enqueued_ddcbs = A - N = 2 - 2 = 0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Situation (2): Wrapped, N > A</span></span>\n<span class=\"line\"><span style=\"\"> *  +---+---+---+---+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |</span></span>\n<span class=\"line\"><span style=\"\"> *  |   |   | x | x |   |   |   |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  +---+---+---+---+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *            A       N</span></span>\n<span class=\"line\"><span style=\"\"> *  enqueued_ddcbs = N - A = 4 - 2 = 2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Situation (3): Queue wrapped, A > N</span></span>\n<span class=\"line\"><span style=\"\"> *  +---+---+---+---+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |</span></span>\n<span class=\"line\"><span style=\"\"> *  | x | x |   |   | x | x | x | x |</span></span>\n<span class=\"line\"><span style=\"\"> *  +---+---+---+---+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *            N       A</span></span>\n<span class=\"line\"><span style=\"\"> *  enqueued_ddcbs = queue_max  - (A - N) = 8 - (4 - 2) = 6</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Situation (4a): Queue full N > A</span></span>\n<span class=\"line\"><span style=\"\"> *  +---+---+---+---+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |</span></span>\n<span class=\"line\"><span style=\"\"> *  | x | x | x | x | x | x | x |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  +---+---+---+---+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *    A                           N</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  enqueued_ddcbs = N - A = 7 - 0 = 7</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Situation (4a): Queue full A > N</span></span>\n<span class=\"line\"><span style=\"\"> *  +---+---+---+---+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |</span></span>\n<span class=\"line\"><span style=\"\"> *  | x | x | x |   | x | x | x | x |</span></span>\n<span class=\"line\"><span style=\"\"> *  +---+---+---+---+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *                N   A</span></span>\n<span class=\"line\"><span style=\"\"> *  enqueued_ddcbs = queue_max - (A - N) = 8 - (4 - 3) = 7</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/misc/genwqe/card_ddcb.c#L35-L80",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/misc/genwqe/card_ddcb.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;1> Firstly, we should know what's the GPMI-clock means.</span></span>\n<span class=\"line\"><span style=\"\"> *     The GPMI-clock is the internal clock in the gpmi nand controller.</span></span>\n<span class=\"line\"><span style=\"\"> *     If you set 100MHz to gpmi nand controller, the GPMI-clock's period</span></span>\n<span class=\"line\"><span style=\"\"> *     is 10ns. Mark the GPMI-clock's period as GPMI-clock-period.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;2> Secondly, we should know what's the frequency on the nand chip pins.</span></span>\n<span class=\"line\"><span style=\"\"> *     The frequency on the nand chip pins is derived from the GPMI-clock.</span></span>\n<span class=\"line\"><span style=\"\"> *     We can get it from the following equation:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         F = G / (DS + DH)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         F  : the frequency on the nand chip pins.</span></span>\n<span class=\"line\"><span style=\"\"> *         G  : the GPMI clock, such as 100MHz.</span></span>\n<span class=\"line\"><span style=\"\"> *         DS : GPMI_HW_GPMI_TIMING0:DATA_SETUP</span></span>\n<span class=\"line\"><span style=\"\"> *         DH : GPMI_HW_GPMI_TIMING0:DATA_HOLD</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;3> Thirdly, when the frequency on the nand chip pins is above 33MHz,</span></span>\n<span class=\"line\"><span style=\"\"> *     the nand EDO(extended Data Out) timing could be applied.</span></span>\n<span class=\"line\"><span style=\"\"> *     The GPMI implements a feedback read strobe to sample the read data.</span></span>\n<span class=\"line\"><span style=\"\"> *     The feedback read strobe can be delayed to support the nand EDO timing</span></span>\n<span class=\"line\"><span style=\"\"> *     where the read strobe may deasserts before the read data is valid, and</span></span>\n<span class=\"line\"><span style=\"\"> *     read data is valid for some time after read strobe.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     The following figure illustrates some aspects of a NAND Flash read:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                   |&#x3C;---tREA---->|</span></span>\n<span class=\"line\"><span style=\"\"> *                   |             |</span></span>\n<span class=\"line\"><span style=\"\"> *                   |         |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                   |&#x3C;--tRP-->|   |</span></span>\n<span class=\"line\"><span style=\"\"> *                   |         |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                  __          ___|__________________________________</span></span>\n<span class=\"line\"><span style=\"\"> *     RDN            \\________/   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *                                 /---------\\</span></span>\n<span class=\"line\"><span style=\"\"> *     Read Data    --------------&#x3C;           >---------</span></span>\n<span class=\"line\"><span style=\"\"> *                                 \\---------/</span></span>\n<span class=\"line\"><span style=\"\"> *                                |     |</span></span>\n<span class=\"line\"><span style=\"\"> *                                |&#x3C;-D->|</span></span>\n<span class=\"line\"><span style=\"\"> *     FeedbackRDN  ________             ____________</span></span>\n<span class=\"line\"><span style=\"\"> *                          \\___________/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *          D stands for delay, set in the HW_GPMI_CTRL1:RDN_DELAY.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * &#x3C;4> Now, we begin to describe how to compute the right RDN_DELAY.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  4.1) From the aspect of the nand chip pins:</span></span>\n<span class=\"line\"><span style=\"\"> *        Delay = (tREA + C - tRP)               {1}</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        tREA : the maximum read access time.</span></span>\n<span class=\"line\"><span style=\"\"> *        C    : a constant to adjust the delay. default is 4000ps.</span></span>\n<span class=\"line\"><span style=\"\"> *        tRP  : the read pulse width, which is exactly:</span></span>\n<span class=\"line\"><span style=\"\"> *                   tRP = (GPMI-clock-period) * DATA_SETUP</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  4.2) From the aspect of the GPMI nand controller:</span></span>\n<span class=\"line\"><span style=\"\"> *         Delay = RDN_DELAY * 0.125 * RP        {2}</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         RP   : the DLL reference period.</span></span>\n<span class=\"line\"><span style=\"\"> *            if (GPMI-clock-period > DLL_THRETHOLD)</span></span>\n<span class=\"line\"><span style=\"\"> *                   RP = GPMI-clock-period / 2;</span></span>\n<span class=\"line\"><span style=\"\"> *            else</span></span>\n<span class=\"line\"><span style=\"\"> *                   RP = GPMI-clock-period;</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *            Set the HW_GPMI_CTRL1:HALF_PERIOD if GPMI-clock-period</span></span>\n<span class=\"line\"><span style=\"\"> *            is greater DLL_THRETHOLD. In other SOCs, the DLL_THRETHOLD</span></span>\n<span class=\"line\"><span style=\"\"> *            is 16000ps, but in mx6q, we use 12000ps.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  4.3) since {1} equals {2}, we get:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                     (tREA + 4000 - tRP) * 8</span></span>\n<span class=\"line\"><span style=\"\"> *         RDN_DELAY = -----------------------     {3}</span></span>\n<span class=\"line\"><span style=\"\"> *                           RP</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/mtd/nand/raw/gpmi-nand/gpmi-nand.c#L766-L839",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/mtd/nand/raw/gpmi-nand/gpmi-nand.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Calculate the first base_time in the future that satisfies this</span></span>\n<span class=\"line\"><span style=\"\"> * relationship:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * future_base_time = base_time + N x cycle_time >= now, or</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      now - base_time</span></span>\n<span class=\"line\"><span style=\"\"> * N >= ---------------</span></span>\n<span class=\"line\"><span style=\"\"> *         cycle_time</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Because N is an integer, the ceiling value of the above \"a / b\" ratio</span></span>\n<span class=\"line\"><span style=\"\"> * is in fact precisely the floor value of \"(a + b - 1) / b\", which is</span></span>\n<span class=\"line\"><span style=\"\"> * easier to calculate only having integer division tools.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/dsa/sja1105/sja1105_ptp.h#L26-L38",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": true
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/dsa/sja1105/sja1105_ptp.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Lo and behold: the egress scheduler from hell.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At the hardware level, the Time-Aware Shaper holds a global linear arrray of</span></span>\n<span class=\"line\"><span style=\"\"> * all schedule entries for all ports. These are the Gate Control List (GCL)</span></span>\n<span class=\"line\"><span style=\"\"> * entries, let's call them \"timeslots\" for short. This linear array of</span></span>\n<span class=\"line\"><span style=\"\"> * timeslots is held in BLK_IDX_SCHEDULE.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Then there are a maximum of 8 \"execution threads\" inside the switch, which</span></span>\n<span class=\"line\"><span style=\"\"> * iterate cyclically through the \"schedule\". Each \"cycle\" has an entry point</span></span>\n<span class=\"line\"><span style=\"\"> * and an exit point, both being timeslot indices in the schedule table. The</span></span>\n<span class=\"line\"><span style=\"\"> * hardware calls each cycle a \"subschedule\".</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Subschedule (cycle) i starts when</span></span>\n<span class=\"line\"><span style=\"\"> *   ptpclkval >= ptpschtm + BLK_IDX_SCHEDULE_ENTRY_POINTS[i].delta.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The hardware scheduler iterates BLK_IDX_SCHEDULE with a k ranging from</span></span>\n<span class=\"line\"><span style=\"\"> *   k = BLK_IDX_SCHEDULE_ENTRY_POINTS[i].address to</span></span>\n<span class=\"line\"><span style=\"\"> *   k = BLK_IDX_SCHEDULE_PARAMS.subscheind[i]</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For each schedule entry (timeslot) k, the engine executes the gate control</span></span>\n<span class=\"line\"><span style=\"\"> * list entry for the duration of BLK_IDX_SCHEDULE[k].delta.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *         |         | BLK_IDX_SCHEDULE_ENTRY_POINTS_PARAMS</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              +-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                | .actsubsch</span></span>\n<span class=\"line\"><span style=\"\"> *  BLK_IDX_SCHEDULE_ENTRY_POINTS v</span></span>\n<span class=\"line\"><span style=\"\"> *                 +-------+-------+</span></span>\n<span class=\"line\"><span style=\"\"> *                 |cycle 0|cycle 1|</span></span>\n<span class=\"line\"><span style=\"\"> *                 +-------+-------+</span></span>\n<span class=\"line\"><span style=\"\"> *                   |  |      |  |</span></span>\n<span class=\"line\"><span style=\"\"> *  +----------------+  |      |  +-------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |   .subschindx     |      |             .subschindx                |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                   |      +---------------+                        |</span></span>\n<span class=\"line\"><span style=\"\"> *  |          .address |        .address      |                        |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                   |                      |                        |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                   |                      |                        |</span></span>\n<span class=\"line\"><span style=\"\"> *  |  BLK_IDX_SCHEDULE v                      v                        |</span></span>\n<span class=\"line\"><span style=\"\"> *  |              +-------+-------+-------+-------+-------+------+     |</span></span>\n<span class=\"line\"><span style=\"\"> *  |              |entry 0|entry 1|entry 2|entry 3|entry 4|entry5|     |</span></span>\n<span class=\"line\"><span style=\"\"> *  |              +-------+-------+-------+-------+-------+------+     |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                  ^                    ^  ^  ^     |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                  |                    |  |  |     |</span></span>\n<span class=\"line\"><span style=\"\"> *  |        +-------------------------+                    |  |  |     |</span></span>\n<span class=\"line\"><span style=\"\"> *  |        |              +-------------------------------+  |  |     |</span></span>\n<span class=\"line\"><span style=\"\"> *  |        |              |              +-------------------+  |     |</span></span>\n<span class=\"line\"><span style=\"\"> *  |        |              |              |                      |     |</span></span>\n<span class=\"line\"><span style=\"\"> *  | +---------------------------------------------------------------+ |</span></span>\n<span class=\"line\"><span style=\"\"> *  | |subscheind[0]&#x3C;=subscheind[1]&#x3C;=subscheind[2]&#x3C;=...&#x3C;=subscheind[7]| |</span></span>\n<span class=\"line\"><span style=\"\"> *  | +---------------------------------------------------------------+ |</span></span>\n<span class=\"line\"><span style=\"\"> *  |        ^              ^                BLK_IDX_SCHEDULE_PARAMS    |</span></span>\n<span class=\"line\"><span style=\"\"> *  |        |              |                                           |</span></span>\n<span class=\"line\"><span style=\"\"> *  +--------+              +-------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  In the above picture there are two subschedules (cycles):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - cycle 0: iterates the schedule table from 0 to 2 (and back)</span></span>\n<span class=\"line\"><span style=\"\"> *  - cycle 1: iterates the schedule table from 3 to 5 (and back)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  All other possible execution threads must be marked as unused by making</span></span>\n<span class=\"line\"><span style=\"\"> *  their \"subschedule end index\" (subscheind) equal to the last valid</span></span>\n<span class=\"line\"><span style=\"\"> *  subschedule's end index (in this case 5).</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/dsa/sja1105/sja1105_tas.c#L93-L157",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/dsa/sja1105/sja1105_tas.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* The switch flow classification core implements TTEthernet, which 'thinks' in</span></span>\n<span class=\"line\"><span style=\"\"> * terms of Virtual Links (VL), a concept borrowed from ARINC 664 part 7.</span></span>\n<span class=\"line\"><span style=\"\"> * However it also has one other operating mode (VLLUPFORMAT=0) where it acts</span></span>\n<span class=\"line\"><span style=\"\"> * somewhat closer to a pre-standard implementation of IEEE 802.1Qci</span></span>\n<span class=\"line\"><span style=\"\"> * (Per-Stream Filtering and Policing), which is what the driver is going to be</span></span>\n<span class=\"line\"><span style=\"\"> * implementing.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                 VL Lookup</span></span>\n<span class=\"line\"><span style=\"\"> *        Key = {DMAC &#x26;&#x26; VLANID   +---------+  Key = { (DMAC[47:16] &#x26; VLMASK ==</span></span>\n<span class=\"line\"><span style=\"\"> *               &#x26;&#x26; VLAN PCP      |         |                         VLMARKER)</span></span>\n<span class=\"line\"><span style=\"\"> *               &#x26;&#x26; INGRESS PORT} +---------+                      (both fixed)</span></span>\n<span class=\"line\"><span style=\"\"> *            (exact match,            |             &#x26;&#x26; DMAC[15:0] == VLID</span></span>\n<span class=\"line\"><span style=\"\"> *         all specified in rule)      |                    (specified in rule)</span></span>\n<span class=\"line\"><span style=\"\"> *                                     v             &#x26;&#x26; INGRESS PORT }</span></span>\n<span class=\"line\"><span style=\"\"> *                               ------------</span></span>\n<span class=\"line\"><span style=\"\"> *                    0 (PSFP)  /            \\  1 (ARINC664)</span></span>\n<span class=\"line\"><span style=\"\"> *                 +-----------/  VLLUPFORMAT \\----------+</span></span>\n<span class=\"line\"><span style=\"\"> *                 |           \\    (fixed)   /          |</span></span>\n<span class=\"line\"><span style=\"\"> *                 |            \\            /           |</span></span>\n<span class=\"line\"><span style=\"\"> *  0 (forwarding) v             ------------            |</span></span>\n<span class=\"line\"><span style=\"\"> *           ------------                                |</span></span>\n<span class=\"line\"><span style=\"\"> *          /            \\  1 (QoS classification)       |</span></span>\n<span class=\"line\"><span style=\"\"> *     +---/  ISCRITICAL  \\-----------+                  |</span></span>\n<span class=\"line\"><span style=\"\"> *     |   \\  (per rule)  /           |                  |</span></span>\n<span class=\"line\"><span style=\"\"> *     |    \\            /   VLID taken from      VLID taken from</span></span>\n<span class=\"line\"><span style=\"\"> *     v     ------------     index of rule       contents of rule</span></span>\n<span class=\"line\"><span style=\"\"> *  select                     that matched         that matched</span></span>\n<span class=\"line\"><span style=\"\"> * DESTPORTS                          |                  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                 +---------+--------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                           |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                           v</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                     VL Forwarding</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                   (indexed by VLID)</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                      +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |                       +--------------|         |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                       |  select TYPE +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |                       v</span></span>\n<span class=\"line\"><span style=\"\"> *  |   0 (rate      ------------    1 (time</span></span>\n<span class=\"line\"><span style=\"\"> *  |  constrained) /            \\   triggered)</span></span>\n<span class=\"line\"><span style=\"\"> *  |       +------/     TYPE     \\------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |      \\  (per VLID)  /            |</span></span>\n<span class=\"line\"><span style=\"\"> *  |       v       \\            /             v</span></span>\n<span class=\"line\"><span style=\"\"> *  |  VL Policing   ------------         VL Policing</span></span>\n<span class=\"line\"><span style=\"\"> *  | (indexed by VLID)                (indexed by VLID)</span></span>\n<span class=\"line\"><span style=\"\"> *  |  +---------+                        +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |  | TYPE=0  |                        | TYPE=1  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |  +---------+                        +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |  select SHARINDX                 select SHARINDX to</span></span>\n<span class=\"line\"><span style=\"\"> *  |  to rate-limit                 re-enter VL Forwarding</span></span>\n<span class=\"line\"><span style=\"\"> *  |  groups of VL's               with new VLID for egress</span></span>\n<span class=\"line\"><span style=\"\"> *  |  to same quota                           |</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |  select MAXLEN -> exceed => drop    select MAXLEN -> exceed => drop</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |       v                                  v</span></span>\n<span class=\"line\"><span style=\"\"> *  |  VL Forwarding                      VL Forwarding</span></span>\n<span class=\"line\"><span style=\"\"> *  | (indexed by SHARINDX)             (indexed by SHARINDX)</span></span>\n<span class=\"line\"><span style=\"\"> *  |  +---------+                        +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |  | TYPE=0  |                        | TYPE=1  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |  +---------+                        +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |  select PRIORITY,                 select PRIORITY,</span></span>\n<span class=\"line\"><span style=\"\"> *  | PARTITION, DESTPORTS            PARTITION, DESTPORTS</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |       v                                  v</span></span>\n<span class=\"line\"><span style=\"\"> *  |  VL Policing                        VL Policing</span></span>\n<span class=\"line\"><span style=\"\"> *  | (indexed by SHARINDX)           (indexed by SHARINDX)</span></span>\n<span class=\"line\"><span style=\"\"> *  |  +---------+                        +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |  | TYPE=0  |                        | TYPE=1  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |  +---------+                        +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |       v                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |  select BAG, -> exceed => drop           |</span></span>\n<span class=\"line\"><span style=\"\"> *  |    JITTER                                v</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |             ----------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |            /    Reception Window is open for this VL      \\</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |           /    (the Schedule Table executes an entry i     \\</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |          /   M &#x3C;= i &#x3C; N, for which these conditions hold):  \\ no</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |    +----/                                                    \\-+</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |    |yes \\       WINST[M] == 1 &#x26;&#x26; WINSTINDEX[M] == VLID       / |</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |    |     \\     WINEND[N] == 1 &#x26;&#x26; WINSTINDEX[N] == VLID      /  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |    |      \\                                                /   |</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |    |       \\ (the VL window has opened and not yet closed)/    |</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |    |        ----------------------------------------------     |</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |    v                                                           v</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |  dispatch to DESTPORTS when the Schedule Table               drop</span></span>\n<span class=\"line\"><span style=\"\"> *  |       |  executes an entry i with TXEN == 1 &#x26;&#x26; VLINDEX == i</span></span>\n<span class=\"line\"><span style=\"\"> *  v       v</span></span>\n<span class=\"line\"><span style=\"\"> * dispatch immediately to DESTPORTS</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The per-port classification key is always composed of {DMAC, VID, PCP} and</span></span>\n<span class=\"line\"><span style=\"\"> * is non-maskable. This 'looks like' the NULL stream identification function</span></span>\n<span class=\"line\"><span style=\"\"> * from IEEE 802.1CB clause 6, except for the extra VLAN PCP. When the switch</span></span>\n<span class=\"line\"><span style=\"\"> * ports operate as VLAN-unaware, we do allow the user to not specify the VLAN</span></span>\n<span class=\"line\"><span style=\"\"> * ID and PCP, and then the port-based defaults will be used.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In TTEthernet, routing is something that needs to be done manually for each</span></span>\n<span class=\"line\"><span style=\"\"> * Virtual Link. So the flow action must always include one of:</span></span>\n<span class=\"line\"><span style=\"\"> * a. 'redirect', 'trap' or 'drop': select the egress port list</span></span>\n<span class=\"line\"><span style=\"\"> * Additionally, the following actions may be applied on a Virtual Link,</span></span>\n<span class=\"line\"><span style=\"\"> * turning it into 'critical' traffic:</span></span>\n<span class=\"line\"><span style=\"\"> * b. 'police': turn it into a rate-constrained VL, with bandwidth limitation</span></span>\n<span class=\"line\"><span style=\"\"> *    given by the maximum frame length, bandwidth allocation gap (BAG) and</span></span>\n<span class=\"line\"><span style=\"\"> *    maximum jitter.</span></span>\n<span class=\"line\"><span style=\"\"> * c. 'gate': turn it into a time-triggered VL, which can be only be received</span></span>\n<span class=\"line\"><span style=\"\"> *    and forwarded according to a given schedule.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/dsa/sja1105/sja1105_vl.c#L169-L274",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/dsa/sja1105/sja1105_vl.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * ice_gen_key_word - generate 16-bits of a key/mask word</span></span>\n<span class=\"line\"><span style=\"\"> * @val: the value</span></span>\n<span class=\"line\"><span style=\"\"> * @valid: valid bits mask (change only the valid bits)</span></span>\n<span class=\"line\"><span style=\"\"> * @dont_care: don't care mask</span></span>\n<span class=\"line\"><span style=\"\"> * @nvr_mtch: never match mask</span></span>\n<span class=\"line\"><span style=\"\"> * @key: pointer to an array of where the resulting key portion</span></span>\n<span class=\"line\"><span style=\"\"> * @key_inv: pointer to an array of where the resulting key invert portion</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This function generates 16-bits from a 8-bit value, an 8-bit don't care mask</span></span>\n<span class=\"line\"><span style=\"\"> * and an 8-bit never match mask. The 16-bits of output are divided into 8 bits</span></span>\n<span class=\"line\"><span style=\"\"> * of key and 8 bits of key invert.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     '0' =    b01, always match a 0 bit</span></span>\n<span class=\"line\"><span style=\"\"> *     '1' =    b10, always match a 1 bit</span></span>\n<span class=\"line\"><span style=\"\"> *     '?' =    b11, don't care bit (always matches)</span></span>\n<span class=\"line\"><span style=\"\"> *     '~' =    b00, never match bit</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Input:</span></span>\n<span class=\"line\"><span style=\"\"> *          val:         b0  1  0  1  0  1</span></span>\n<span class=\"line\"><span style=\"\"> *          dont_care:   b0  0  1  1  0  0</span></span>\n<span class=\"line\"><span style=\"\"> *          never_mtch:  b0  0  0  0  1  1</span></span>\n<span class=\"line\"><span style=\"\"> *          ------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> * Result:  key:        b01 10 11 11 00 00</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/intel/ice/ice_flex_pipe.c#L653-L677",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/intel/ice/ice_flex_pipe.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* </span></span>\n<span class=\"line\"><span style=\"\"> *  CON5</span></span>\n<span class=\"line\"><span style=\"\"> *\t+--+\t /-----\\</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |    |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |\t|  BAT\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |\t \\_____/</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |  +----+  +----+</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |  | K5 |  | K1 |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |  +----+  +----+</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |  +----+  +----+</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |  | K4 |  | K2 |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |  +----+  +----+</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |  +----+  +----+</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |  | K6 |  | K3 |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |  +----+  +----+</span></span>\n<span class=\"line\"><span style=\"\"> *\t  .....</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm/mach-s3c/mach-mini2440.c#L345-L361",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm/mach-s3c/mach-mini2440.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *                                Nexthop is pointed</span></span>\n<span class=\"line\"><span style=\"\"> *                                to port (not rif)</span></span>\n<span class=\"line\"><span style=\"\"> *                                +-------+</span></span>\n<span class=\"line\"><span style=\"\"> *                              +>|nexthop|</span></span>\n<span class=\"line\"><span style=\"\"> *                              | +-------+</span></span>\n<span class=\"line\"><span style=\"\"> *                              |</span></span>\n<span class=\"line\"><span style=\"\"> *            +--+        +-----++</span></span>\n<span class=\"line\"><span style=\"\"> *   +------->|vr|&#x3C;-+   +>|nh_grp|</span></span>\n<span class=\"line\"><span style=\"\"> *   |        +--+  |   | +------+</span></span>\n<span class=\"line\"><span style=\"\"> *   |              |   |</span></span>\n<span class=\"line\"><span style=\"\"> * +-+-------+   +--+---+-+</span></span>\n<span class=\"line\"><span style=\"\"> * |rif_entry|   |fib_node|</span></span>\n<span class=\"line\"><span style=\"\"> * +---------+   +--------+</span></span>\n<span class=\"line\"><span style=\"\"> *  Rif is        Fib - is exit point</span></span>\n<span class=\"line\"><span style=\"\"> *  used as</span></span>\n<span class=\"line\"><span style=\"\"> *  entry point</span></span>\n<span class=\"line\"><span style=\"\"> *  for vr in hw</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/marvell/prestera/prestera_router_hw.c#L11-L28",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/marvell/prestera/prestera_router_hw.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* We translate the tc filter with CT action to the following HW model:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t+---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t+ ft prio (tc chain)  +</span></span>\n<span class=\"line\"><span style=\"\"> *\t+ original match      +</span></span>\n<span class=\"line\"><span style=\"\"> *\t+---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t | set chain miss mapping</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t | set fte_id</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t | set tunnel_id</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t | do decap</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t |</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------+</span></span>\n<span class=\"line\"><span style=\"\"> * | Chain 0\t |</span></span>\n<span class=\"line\"><span style=\"\"> * | optimization|</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t v</span></span>\n<span class=\"line\"><span style=\"\"> * |\t+---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |\t+ pre_ct/pre_ct_nat   +  if matches     +----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |\t+ zone+nat match      +---------------->+ post_act (see below) +</span></span>\n<span class=\"line\"><span style=\"\"> * |\t+---------------------+  set zone       +----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t |</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------+ set zone</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t v</span></span>\n<span class=\"line\"><span style=\"\"> *\t+--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t+ CT (nat or no nat) +</span></span>\n<span class=\"line\"><span style=\"\"> *\t+ tuple + zone match +</span></span>\n<span class=\"line\"><span style=\"\"> *\t+--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t | set mark</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t | set labels_id</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t | set established</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t | set zone_restore</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t | do nat (if needed)</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t v</span></span>\n<span class=\"line\"><span style=\"\"> *\t+--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t+ post_act     + original filter actions</span></span>\n<span class=\"line\"><span style=\"\"> *\t+ fte_id match +------------------------></span></span>\n<span class=\"line\"><span style=\"\"> *\t+--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c#L1775-L1813",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* For the following typical flow table:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +       original flow table     +</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +         original match        +</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * + sample action + other actions +</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We translate the tc filter with sample action to the following HW model:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *         + original flow table +</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *         +   original match    +</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *               | set fte_id (if reg_c preserve cap)</span></span>\n<span class=\"line\"><span style=\"\"> *               | do decap (if required)</span></span>\n<span class=\"line\"><span style=\"\"> *               v</span></span>\n<span class=\"line\"><span style=\"\"> * +------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +                Flow Sampler Object             +</span></span>\n<span class=\"line\"><span style=\"\"> * +------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +                    sample ratio                +</span></span>\n<span class=\"line\"><span style=\"\"> * +------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +    sample table id    |    default table id    +</span></span>\n<span class=\"line\"><span style=\"\"> * +------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *            |                            |</span></span>\n<span class=\"line\"><span style=\"\"> *            v                            v</span></span>\n<span class=\"line\"><span style=\"\"> * +-----------------------------+  +-------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +        sample table         +  +   default table   +</span></span>\n<span class=\"line\"><span style=\"\"> * +-----------------------------+  +-------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * + forward to management vport +             |</span></span>\n<span class=\"line\"><span style=\"\"> * +-----------------------------+             |</span></span>\n<span class=\"line\"><span style=\"\"> *                                     +-------+------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                     |              |reg_c preserve cap</span></span>\n<span class=\"line\"><span style=\"\"> *                                     |              |or decap action</span></span>\n<span class=\"line\"><span style=\"\"> *                                     v              v</span></span>\n<span class=\"line\"><span style=\"\"> *                        +-----------------+   +-------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                        + per vport table +   + post action +</span></span>\n<span class=\"line\"><span style=\"\"> *                        +-----------------+   +-------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                        + original match  +</span></span>\n<span class=\"line\"><span style=\"\"> *                        +-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                        + other actions   +</span></span>\n<span class=\"line\"><span style=\"\"> *                        +-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c#L422-L467",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/mellanox/mlx5/core/en/tc/sample.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Replace relevant fields, except of:</span></span>\n<span class=\"line\"><span style=\"\"> * htbl - keep the origin htbl</span></span>\n<span class=\"line\"><span style=\"\"> * miss_list + list - already took the src from the list.</span></span>\n<span class=\"line\"><span style=\"\"> * icm_addr/mr_addr - depends on the hosting table.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Before:</span></span>\n<span class=\"line\"><span style=\"\"> * | a | -> | b | -> | c | -></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * After:</span></span>\n<span class=\"line\"><span style=\"\"> * | a | -> | c | -></span></span>\n<span class=\"line\"><span style=\"\"> * While the data that was in b copied to a.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c#L172-L183",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_ste.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *  Amount of packet buffer</span></span>\n<span class=\"line\"><span style=\"\"> *  |  per QoS class</span></span>\n<span class=\"line\"><span style=\"\"> *  |  |  reserved</span></span>\n<span class=\"line\"><span style=\"\"> *  |  |  |   per egress port</span></span>\n<span class=\"line\"><span style=\"\"> *  |  |  |   |</span></span>\n<span class=\"line\"><span style=\"\"> *  V  V  v   v</span></span>\n<span class=\"line\"><span style=\"\"> * BUF_Q_RSRV_E</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/mscc/ocelot_devlink.c#L39-L46",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/mscc/ocelot_devlink.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\">  An EEPROM read command starts by shifting out 0x60+address, and then</span></span>\n<span class=\"line\"><span style=\"\">  shifting in the serial data. See the NatSemi databook for details.</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t   ________________</span></span>\n<span class=\"line\"><span style=\"\"> * CS : __|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t   ___\t   ___</span></span>\n<span class=\"line\"><span style=\"\"> * CLK: ______|\t  |___|\t  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t __ _______ _______</span></span>\n<span class=\"line\"><span style=\"\"> * DI :\t __X_______X_______X</span></span>\n<span class=\"line\"><span style=\"\"> * DO :\t _________X_______X</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/realtek/atp.c#L390-L400",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/realtek/atp.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Bit twiddling:</span></span>\n<span class=\"line\"><span style=\"\"> * Prefix: 1...110...0</span></span>\n<span class=\"line\"><span style=\"\"> *      ~: 0...001...1</span></span>\n<span class=\"line\"><span style=\"\"> *    + 1: 0...010...0 is power of two</span></span>\n<span class=\"line\"><span style=\"\"> * so (~x) &#x26; ((~x) + 1) == 0.  Converse holds also.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/sfc/mae.c#L282-L287",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/sfc/mae.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* DMAC control register GDMACCNTR</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 1(0)\t\t\t\tenable r/tx dma</span></span>\n<span class=\"line\"><span style=\"\"> *  0000000\t\t\t\tfixed to 0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         000000\t\t\tfixed to 0</span></span>\n<span class=\"line\"><span style=\"\"> *               0(1)\t\t\ten/disable descr writeback on force end</span></span>\n<span class=\"line\"><span style=\"\"> *                0(1)\t\t\tforce end</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                 000000\t\tfixed to 0</span></span>\n<span class=\"line\"><span style=\"\"> *                       00\t\tburst alignment: 128 bytes</span></span>\n<span class=\"line\"><span style=\"\"> *                       11\t\tburst alignment: 1024 bytes</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                         00000\tfixed to 0</span></span>\n<span class=\"line\"><span style=\"\"> *                              0\tdescr writeback size 32 bytes</span></span>\n<span class=\"line\"><span style=\"\"> *                               0(1)\tdescr chain end interrupt enable</span></span>\n<span class=\"line\"><span style=\"\"> *                                0(1)\tdescr status writeback enable</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ethernet/toshiba/spider_net.h#L184-L200",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ethernet/toshiba/spider_net.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * DOC: The IPA Generic Software Interface</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The generic software interface (GSI) is an integral component of the IPA,</span></span>\n<span class=\"line\"><span style=\"\"> * providing a well-defined communication layer between the AP subsystem</span></span>\n<span class=\"line\"><span style=\"\"> * and the IPA core.  The modem uses the GSI layer as well.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t--------\t     ---------</span></span>\n<span class=\"line\"><span style=\"\"> *\t|      |\t     |\t     |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  AP  +&#x3C;---.\t.----+ Modem |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|      +--. |\t| .->+\t     |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|      |  | |\t| |  |\t     |</span></span>\n<span class=\"line\"><span style=\"\"> *\t--------  | |\t| |  ---------</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t  v |\tv |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t--+-+---+-+--</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|    GSI    |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|-----------|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|\t    |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|    IPA    |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|\t    |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t-------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In the above diagram, the AP and Modem represent \"execution environments\"</span></span>\n<span class=\"line\"><span style=\"\"> * (EEs), which are independent operating environments that use the IPA for</span></span>\n<span class=\"line\"><span style=\"\"> * data transfer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each EE uses a set of unidirectional GSI \"channels,\" which allow transfer</span></span>\n<span class=\"line\"><span style=\"\"> * of data to or from the IPA.  A channel is implemented as a ring buffer,</span></span>\n<span class=\"line\"><span style=\"\"> * with a DRAM-resident array of \"transfer elements\" (TREs) available to</span></span>\n<span class=\"line\"><span style=\"\"> * describe transfers to or from other EEs through the IPA.  A transfer</span></span>\n<span class=\"line\"><span style=\"\"> * element can also contain an immediate command, requesting the IPA perform</span></span>\n<span class=\"line\"><span style=\"\"> * actions other than data transfer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each TRE refers to a block of data--also located in DRAM.  After writing</span></span>\n<span class=\"line\"><span style=\"\"> * one or more TREs to a channel, the writer (either the IPA or an EE) writes</span></span>\n<span class=\"line\"><span style=\"\"> * a doorbell register to inform the receiving side how many elements have</span></span>\n<span class=\"line\"><span style=\"\"> * been written.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each channel has a GSI \"event ring\" associated with it.  An event ring</span></span>\n<span class=\"line\"><span style=\"\"> * is implemented very much like a channel ring, but is always directed from</span></span>\n<span class=\"line\"><span style=\"\"> * the IPA to an EE.  The IPA notifies an EE (such as the AP) about channel</span></span>\n<span class=\"line\"><span style=\"\"> * events by adding an entry to the event ring associated with the channel.</span></span>\n<span class=\"line\"><span style=\"\"> * The GSI then writes its doorbell for the event ring, causing the target</span></span>\n<span class=\"line\"><span style=\"\"> * EE to be interrupted.  Each entry in an event ring contains a pointer</span></span>\n<span class=\"line\"><span style=\"\"> * to the channel TRE whose completion the event represents.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each TRE in a channel ring has a set of flags.  One flag indicates whether</span></span>\n<span class=\"line\"><span style=\"\"> * the completion of the transfer operation generates an entry (and possibly</span></span>\n<span class=\"line\"><span style=\"\"> * an interrupt) in the channel's event ring.  Other flags allow transfer</span></span>\n<span class=\"line\"><span style=\"\"> * elements to be chained together, forming a single logical transaction.</span></span>\n<span class=\"line\"><span style=\"\"> * TRE flags are used to control whether and when interrupts are generated</span></span>\n<span class=\"line\"><span style=\"\"> * to signal completion of channel transfers.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Elements in channel and event rings are completed (or consumed) strictly</span></span>\n<span class=\"line\"><span style=\"\"> * in order.  Completion of one entry implies the completion of all preceding</span></span>\n<span class=\"line\"><span style=\"\"> * entries.  A single completion interrupt can therefore communicate the</span></span>\n<span class=\"line\"><span style=\"\"> * completion of many transfers.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that all GSI registers are little-endian, which is the assumed</span></span>\n<span class=\"line\"><span style=\"\"> * endianness of I/O space accesses.  The accessor functions perform byte</span></span>\n<span class=\"line\"><span style=\"\"> * swapping if needed (i.e., for a big endian CPU).</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/ipa/gsi.c#L26-L87",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/ipa/gsi.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* RollBall SFPs do not access internal PHY via I2C address 0x56, but</span></span>\n<span class=\"line\"><span style=\"\"> * instead via address 0x51, when SFP page is set to 0x03 and password to</span></span>\n<span class=\"line\"><span style=\"\"> * 0xffffffff.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * address  size  contents  description</span></span>\n<span class=\"line\"><span style=\"\"> * -------  ----  --------  -----------</span></span>\n<span class=\"line\"><span style=\"\"> * 0x80     1     CMD       0x01/0x02/0x04 for write/read/done</span></span>\n<span class=\"line\"><span style=\"\"> * 0x81     1     DEV       Clause 45 device</span></span>\n<span class=\"line\"><span style=\"\"> * 0x82     2     REG       Clause 45 register</span></span>\n<span class=\"line\"><span style=\"\"> * 0x84     2     VAL       Register value</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/mdio/mdio-i2c.c#L97-L107",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/mdio/mdio-i2c.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Get/Allocate a free Tx Data Buffer</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  *--------------*-----------------*----------------------------------*</span></span>\n<span class=\"line\"><span style=\"\"> *  |    PLCP      |    MAC Header   |  DST  SRC         Data ...       |</span></span>\n<span class=\"line\"><span style=\"\"> *  |  (24 bytes)  |    (30 bytes)   |  (6)  (6)  (Ethernet Row Data)   |</span></span>\n<span class=\"line\"><span style=\"\"> *  *--------------*-----------------*----------------------------------*</span></span>\n<span class=\"line\"><span style=\"\"> *  \\               \\- IEEE 802.11 -/ \\-------------- len --------------/</span></span>\n<span class=\"line\"><span style=\"\"> *   \\-struct wl3501_80211_tx_hdr--/   \\-------- Ethernet Frame -------/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Return = Position in Card</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/wl3501_cs.c#L284-L295",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/wl3501_cs.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Fw Mode/SubMode Mask</span></span>\n<span class=\"line\"><span style=\"\"> *-----------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  SUB   |   SUB   |   SUB   |  SUB    |         |         |         |</span></span>\n<span class=\"line\"><span style=\"\"> *MODE[3] | MODE[2] | MODE[1] | MODE[0] | MODE[3] | MODE[2] | MODE[1] | MODE[0]</span></span>\n<span class=\"line\"><span style=\"\"> *  (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)</span></span>\n<span class=\"line\"><span style=\"\"> *-----------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/ath/ath10k/targaddrs.h#L277-L284",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/ath/ath10k/targaddrs.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Fw Mode/SubMode Mask</span></span>\n<span class=\"line\"><span style=\"\">|------------------------------------------------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">|   SUB   |   SUB   |   SUB   |  SUB    |         |         |         |</span></span>\n<span class=\"line\"><span style=\"\">| MODE[3] | MODE[2] | MODE[1] | MODE[0] | MODE[3] | MODE[2] | MODE[1] | MODE[0|</span></span>\n<span class=\"line\"><span style=\"\">|   (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)   |   (2)</span></span>\n<span class=\"line\"><span style=\"\">|------------------------------------------------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/ath/ath6kl/target.h#L319-L325",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/ath/ath6kl/target.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* When driver needs ucode to stop beaconing, it has to make sure that</span></span>\n<span class=\"line\"><span style=\"\"> * MCTL_AP is clear and MCTL_INFRA is set</span></span>\n<span class=\"line\"><span style=\"\"> * Mode           MCTL_AP        MCTL_INFRA</span></span>\n<span class=\"line\"><span style=\"\"> * AP                1              1</span></span>\n<span class=\"line\"><span style=\"\"> * STA               0              1 &#x3C;--- This will ensure no beacons</span></span>\n<span class=\"line\"><span style=\"\"> * IBSS              0              0</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c#L1454-L1460",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Control channel position:</span></span>\n<span class=\"line\"><span style=\"\"> * For legacy set bit means upper channel, otherwise lower.</span></span>\n<span class=\"line\"><span style=\"\"> * For VHT - bit-2 marks if the control is lower/upper relative to center-freq</span></span>\n<span class=\"line\"><span style=\"\"> *   bits-1:0 mark the distance from the center freq. for 20Mhz, offset is 0.</span></span>\n<span class=\"line\"><span style=\"\"> *                                   center_freq</span></span>\n<span class=\"line\"><span style=\"\"> * For EHT - bit-3 is used for extended distance</span></span>\n<span class=\"line\"><span style=\"\"> *                                                |</span></span>\n<span class=\"line\"><span style=\"\"> * 40Mhz                                     |____|____|</span></span>\n<span class=\"line\"><span style=\"\"> * 80Mhz                                |____|____|____|____|</span></span>\n<span class=\"line\"><span style=\"\"> * 160Mhz                     |____|____|____|____|____|____|____|____|</span></span>\n<span class=\"line\"><span style=\"\"> * 320MHz |____|____|____|____|____|____|____|____|____|____|____|____|____|____|____|____|</span></span>\n<span class=\"line\"><span style=\"\"> * code    1011 1010 1001 1000 0011 0010 0001 0000 0100 0101 0110 0111 1100 1101 1110 1111</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/intel/iwlwifi/fw/api/phy-ctxt.h#L23-L36",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/intel/iwlwifi/fw/api/phy-ctxt.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * This function checks if a scanned network is compatible with the driver</span></span>\n<span class=\"line\"><span style=\"\"> * settings.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   WEP     WPA    WPA2   ad-hoc encrypt                  Network</span></span>\n<span class=\"line\"><span style=\"\"> * enabled enabled enabled  AES    mode   Privacy WPA WPA2 Compatible</span></span>\n<span class=\"line\"><span style=\"\"> *    0       0       0      0     NONE      0     0   0   yes No security</span></span>\n<span class=\"line\"><span style=\"\"> *    0       1       0      0      x        1x    1   x   yes WPA (disable</span></span>\n<span class=\"line\"><span style=\"\"> *                                                         HT if no AES)</span></span>\n<span class=\"line\"><span style=\"\"> *    0       0       1      0      x        1x    x   1   yes WPA2 (disable</span></span>\n<span class=\"line\"><span style=\"\"> *                                                         HT if no AES)</span></span>\n<span class=\"line\"><span style=\"\"> *    0       0       0      1     NONE      1     0   0   yes Ad-hoc AES</span></span>\n<span class=\"line\"><span style=\"\"> *    1       0       0      0     NONE      1     0   0   yes Static WEP</span></span>\n<span class=\"line\"><span style=\"\"> *                                                         (disable HT)</span></span>\n<span class=\"line\"><span style=\"\"> *    0       0       0      0    !=NONE     1     0   0   yes Dynamic WEP</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Compatibility is not matched while roaming, except for mode.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/marvell/mwifiex/scan.c#L320-L337",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/marvell/mwifiex/scan.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * key_type_e   key size    key format</span></span>\n<span class=\"line\"><span style=\"\"> * ----------   ---------   ----------</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00         5, 13, 29   Key data</span></span>\n<span class=\"line\"><span style=\"\"> * 0x01         5, 13, 29   Key data</span></span>\n<span class=\"line\"><span style=\"\"> * 0x04         16          16 bytes of key data</span></span>\n<span class=\"line\"><span style=\"\"> * 0x05         16          16 bytes of key data</span></span>\n<span class=\"line\"><span style=\"\"> * 0x0a         32          16 bytes of TKIP key data</span></span>\n<span class=\"line\"><span style=\"\"> *                          8 bytes of RX MIC key data</span></span>\n<span class=\"line\"><span style=\"\"> *                          8 bytes of TX MIC key data</span></span>\n<span class=\"line\"><span style=\"\"> * 0x0b         32          16 bytes of TKIP key data</span></span>\n<span class=\"line\"><span style=\"\"> *                          8 bytes of RX MIC key data</span></span>\n<span class=\"line\"><span style=\"\"> *                          8 bytes of TX MIC key data</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/ti/wl1251/cmd.h#L360-L375",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/ti/wl1251/cmd.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Set the partitions to access the chip addresses</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To simplify driver code, a fixed (virtual) memory map is defined for</span></span>\n<span class=\"line\"><span style=\"\"> * register and memory addresses. Because in the chipset, in different stages</span></span>\n<span class=\"line\"><span style=\"\"> * of operation, those addresses will move around, an address translation</span></span>\n<span class=\"line\"><span style=\"\"> * mechanism is required.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There are four partitions (three memory and one register partition),</span></span>\n<span class=\"line\"><span style=\"\"> * which are mapped to two different areas of the hardware memory.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                Virtual address</span></span>\n<span class=\"line\"><span style=\"\"> *                                     space</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                    |    |</span></span>\n<span class=\"line\"><span style=\"\"> *                                 ...+----+--> mem.start</span></span>\n<span class=\"line\"><span style=\"\"> *          Physical address    ...   |    |</span></span>\n<span class=\"line\"><span style=\"\"> *               space       ...      |    | [PART_0]</span></span>\n<span class=\"line\"><span style=\"\"> *                        ...         |    |</span></span>\n<span class=\"line\"><span style=\"\"> *  00000000  &#x3C;--+----+...         ...+----+--> mem.start + mem.size</span></span>\n<span class=\"line\"><span style=\"\"> *               |    |         ...   |    |</span></span>\n<span class=\"line\"><span style=\"\"> *               |MEM |      ...      |    |</span></span>\n<span class=\"line\"><span style=\"\"> *               |    |   ...         |    |</span></span>\n<span class=\"line\"><span style=\"\"> *  mem.size  &#x3C;--+----+...            |    | {unused area)</span></span>\n<span class=\"line\"><span style=\"\"> *               |    |   ...         |    |</span></span>\n<span class=\"line\"><span style=\"\"> *               |REG |      ...      |    |</span></span>\n<span class=\"line\"><span style=\"\"> *  mem.size     |    |         ...   |    |</span></span>\n<span class=\"line\"><span style=\"\"> *      +     &#x3C;--+----+...         ...+----+--> reg.start</span></span>\n<span class=\"line\"><span style=\"\"> *  reg.size     |    |   ...         |    |</span></span>\n<span class=\"line\"><span style=\"\"> *               |MEM2|      ...      |    | [PART_1]</span></span>\n<span class=\"line\"><span style=\"\"> *               |    |         ...   |    |</span></span>\n<span class=\"line\"><span style=\"\"> *                                 ...+----+--> reg.start + reg.size</span></span>\n<span class=\"line\"><span style=\"\"> *                                    |    |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wireless/ti/wlcore/io.c#L89-L122",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/wireless/ti/wlcore/io.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Modem Exception Handshake Flow</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Modem HW Exception interrupt received</span></span>\n<span class=\"line\"><span style=\"\"> *           (MD_IRQ_CCIF_EX)</span></span>\n<span class=\"line\"><span style=\"\"> *                   |</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------v--------+</span></span>\n<span class=\"line\"><span style=\"\"> *         |   HIF_EX_INIT    | : Disable and clear TXQ</span></span>\n<span class=\"line\"><span style=\"\"> *         +------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                   |</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------v--------+</span></span>\n<span class=\"line\"><span style=\"\"> *         | HIF_EX_INIT_DONE | : Wait for the init to be done</span></span>\n<span class=\"line\"><span style=\"\"> *         +------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                   |</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------v--------+</span></span>\n<span class=\"line\"><span style=\"\"> *         |HIF_EX_CLEARQ_DONE| : Disable and clear RXQ</span></span>\n<span class=\"line\"><span style=\"\"> *         +------------------+ : Flush TX/RX workqueues</span></span>\n<span class=\"line\"><span style=\"\"> *                   |</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------v--------+</span></span>\n<span class=\"line\"><span style=\"\"> *         |HIF_EX_ALLQ_RESET | : Restart HW and CLDMA</span></span>\n<span class=\"line\"><span style=\"\"> *         +------------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/wwan/t7xx/t7xx_modem_ops.c#L238-L258",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/drivers/net/wwan/t7xx/t7xx_modem_ops.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Handle backend state transitions:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The backend state starts in Initialising and the following transitions are</span></span>\n<span class=\"line\"><span style=\"\"> * allowed.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Initialising -> InitWait -> Connected</span></span>\n<span class=\"line\"><span style=\"\"> *          \\</span></span>\n<span class=\"line\"><span style=\"\"> *           \\        ^    \\         |</span></span>\n<span class=\"line\"><span style=\"\"> *            \\       |     \\        |</span></span>\n<span class=\"line\"><span style=\"\"> *             \\      |      \\       |</span></span>\n<span class=\"line\"><span style=\"\"> *              \\     |       \\      |</span></span>\n<span class=\"line\"><span style=\"\"> *               \\    |        \\     |</span></span>\n<span class=\"line\"><span style=\"\"> *                \\   |         \\    |</span></span>\n<span class=\"line\"><span style=\"\"> *                 V  |          V   V</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                  Closed  &#x3C;-> Closing</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The state argument specifies the eventual state of the backend and the</span></span>\n<span class=\"line\"><span style=\"\"> * function transitions to that state via the shortest path.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/net/xen-netback/xenbus.c#L301-L320",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/net/xen-netback/xenbus.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * A log group represents one log 'lane', and consists of four log entries.</span></span>\n<span class=\"line\"><span style=\"\"> * Two of the four entries are valid entries, and the remaining two are</span></span>\n<span class=\"line\"><span style=\"\"> * padding. Due to an old bug in the padding location, we need to perform a</span></span>\n<span class=\"line\"><span style=\"\"> * test to determine the padding scheme being used, and use that scheme</span></span>\n<span class=\"line\"><span style=\"\"> * thereafter.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In kernels prior to 4.15, 'log group' would have actual log entries at</span></span>\n<span class=\"line\"><span style=\"\"> * indices (0, 2) and padding at indices (1, 3), where as the correct/updated</span></span>\n<span class=\"line\"><span style=\"\"> * format has log entries at indices (0, 1) and padding at indices (2, 3).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Old (pre 4.15) format:</span></span>\n<span class=\"line\"><span style=\"\"> * +-----------------+-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |      ent[0]     |      ent[1]     |</span></span>\n<span class=\"line\"><span style=\"\"> * |       16B       |       16B       |</span></span>\n<span class=\"line\"><span style=\"\"> * | lba/old/new/seq |       pad       |</span></span>\n<span class=\"line\"><span style=\"\"> * +-----------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |      ent[2]     |      ent[3]     |</span></span>\n<span class=\"line\"><span style=\"\"> * |       16B       |       16B       |</span></span>\n<span class=\"line\"><span style=\"\"> * | lba/old/new/seq |       pad       |</span></span>\n<span class=\"line\"><span style=\"\"> * +-----------------+-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * New format:</span></span>\n<span class=\"line\"><span style=\"\"> * +-----------------+-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |      ent[0]     |      ent[1]     |</span></span>\n<span class=\"line\"><span style=\"\"> * |       16B       |       16B       |</span></span>\n<span class=\"line\"><span style=\"\"> * | lba/old/new/seq | lba/old/new/seq |</span></span>\n<span class=\"line\"><span style=\"\"> * +-----------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |      ent[2]     |      ent[3]     |</span></span>\n<span class=\"line\"><span style=\"\"> * |       16B       |       16B       |</span></span>\n<span class=\"line\"><span style=\"\"> * |       pad       |       pad       |</span></span>\n<span class=\"line\"><span style=\"\"> * +-----------------+-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We detect during start-up which format is in use, and set</span></span>\n<span class=\"line\"><span style=\"\"> * arena->log_index[(0, 1)] with the detected format.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/nvdimm/btt.h#L47-L82",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/nvdimm/btt.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The PCI NTB function driver configures the SoC with multiple PCIe Endpoint</span></span>\n<span class=\"line\"><span style=\"\"> * (EP) controller instances (see diagram below) in such a way that</span></span>\n<span class=\"line\"><span style=\"\"> * transactions from one EP controller are routed to the other EP controller.</span></span>\n<span class=\"line\"><span style=\"\"> * Once PCI NTB function driver configures the SoC with multiple EP instances,</span></span>\n<span class=\"line\"><span style=\"\"> * HOST1 and HOST2 can communicate with each other using SoC as a bridge.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    +-------------+                                   +-------------+</span></span>\n<span class=\"line\"><span style=\"\"> *    |             |                                   |             |</span></span>\n<span class=\"line\"><span style=\"\"> *    |    HOST1    |                                   |    HOST2    |</span></span>\n<span class=\"line\"><span style=\"\"> *    |             |                                   |             |</span></span>\n<span class=\"line\"><span style=\"\"> *    +------^------+                                   +------^------+</span></span>\n<span class=\"line\"><span style=\"\"> *           |                                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *           |                                                 |</span></span>\n<span class=\"line\"><span style=\"\"> * +---------|-------------------------------------------------|---------+</span></span>\n<span class=\"line\"><span style=\"\"> * |  +------v------+                                   +------v------+  |</span></span>\n<span class=\"line\"><span style=\"\"> * |  |             |                                   |             |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |  |     EP      |                                   |     EP      |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |  | CONTROLLER1 |                                   | CONTROLLER2 |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |  |             &#x3C;----------------------------------->             |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |  |             |                                   |             |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |  |             |                                   |             |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |  |             |  SoC With Multiple EP Instances   |             |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |  |             |  (Configured using NTB Function)  |             |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |  +-------------+                                   +-------------+  |</span></span>\n<span class=\"line\"><span style=\"\"> * +---------------------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/pci/endpoint/functions/pci-epf-ntb.c#L9-L35",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": true,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/pci/endpoint/functions/pci-epf-ntb.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*****************************************************************************</span></span>\n<span class=\"line\"><span style=\"\"> * Orion GPIO IRQ</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * GPIO_IN_POL register controls whether GPIO_DATA_IN will hold the same</span></span>\n<span class=\"line\"><span style=\"\"> * value of the line or the opposite value.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Level IRQ handlers: DATA_IN is used directly as cause register.</span></span>\n<span class=\"line\"><span style=\"\"> *                     Interrupt are masked by LEVEL_MASK registers.</span></span>\n<span class=\"line\"><span style=\"\"> * Edge IRQ handlers:  Change in DATA_IN are latched in EDGE_CAUSE.</span></span>\n<span class=\"line\"><span style=\"\"> *                     Interrupt are masked by EDGE_MASK registers.</span></span>\n<span class=\"line\"><span style=\"\"> * Both-edge handlers: Similar to regular Edge handlers, but also swaps</span></span>\n<span class=\"line\"><span style=\"\"> *                     the polarity to catch the next line transaction.</span></span>\n<span class=\"line\"><span style=\"\"> *                     This is a race condition that might not perfectly</span></span>\n<span class=\"line\"><span style=\"\"> *                     work on some use cases.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Every eight GPIO lines are grouped (OR'ed) before going up to main</span></span>\n<span class=\"line\"><span style=\"\"> * cause register.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                    EDGE  cause    mask</span></span>\n<span class=\"line\"><span style=\"\"> *        data-in   /--------| |-----| |----\\</span></span>\n<span class=\"line\"><span style=\"\"> *     -----| |-----                         ---- to main cause reg</span></span>\n<span class=\"line\"><span style=\"\"> *           X      \\----------------| |----/</span></span>\n<span class=\"line\"><span style=\"\"> *        polarity    LEVEL          mask</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> ****************************************************************************/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm/plat-orion/gpio.c#L325-L349",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm/plat-orion/gpio.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * NOTES about DMA transfers:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  controller 1: channels 0-3, byte operations, ports 00-1F</span></span>\n<span class=\"line\"><span style=\"\"> *  controller 2: channels 4-7, word operations, ports C0-DF</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - ALL registers are 8 bits only, regardless of transfer size</span></span>\n<span class=\"line\"><span style=\"\"> *  - channel 4 is not used - cascades 1 into 2.</span></span>\n<span class=\"line\"><span style=\"\"> *  - channels 0-3 are byte - addresses/counts are for physical bytes</span></span>\n<span class=\"line\"><span style=\"\"> *  - channels 5-7 are word - addresses/counts are for physical words</span></span>\n<span class=\"line\"><span style=\"\"> *  - transfers must not cross physical 64K (0-3) or 128K (5-7) boundaries</span></span>\n<span class=\"line\"><span style=\"\"> *  - transfer count loaded to registers is 1 less than actual count</span></span>\n<span class=\"line\"><span style=\"\"> *  - controller 2 offsets are all even (2x offsets for controller 1)</span></span>\n<span class=\"line\"><span style=\"\"> *  - page registers for 5-7 don't use data bit 0, represent 128K pages</span></span>\n<span class=\"line\"><span style=\"\"> *  - page registers for 0-3 use bit 0, represent 64K pages</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * DMA transfers are limited to the lower 16MB of _physical_ memory.  </span></span>\n<span class=\"line\"><span style=\"\"> * Note that addresses loaded into registers must be _physical_ addresses,</span></span>\n<span class=\"line\"><span style=\"\"> * not logical addresses (which may differ if paging is active).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Address mapping for channels 0-3:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   A23 ... A16 A15 ... A8  A7 ... A0    (Physical addresses)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   |  ... |   |  ... |</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   |  ... |   |  ... |</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   |  ... |   |  ... |</span></span>\n<span class=\"line\"><span style=\"\"> *   P7  ...  P0  A7 ... A0  A7 ... A0   </span></span>\n<span class=\"line\"><span style=\"\"> * |    Page    | Addr MSB | Addr LSB |   (DMA registers)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Address mapping for channels 5-7:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   A23 ... A17 A16 A15 ... A9 A8 A7 ... A1 A0    (Physical addresses)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |   \\   \\   ... \\  \\  \\  ... \\  \\</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |    \\   \\   ... \\  \\  \\  ... \\  (not used)</span></span>\n<span class=\"line\"><span style=\"\"> *    |  ...  |     \\   \\   ... \\  \\  \\  ... \\</span></span>\n<span class=\"line\"><span style=\"\"> *   P7  ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0   </span></span>\n<span class=\"line\"><span style=\"\"> * |      Page      |  Addr MSB   |  Addr LSB  |   (DMA registers)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Again, channels 5-7 transfer _physical_ words (16 bits), so addresses</span></span>\n<span class=\"line\"><span style=\"\"> * and counts _must_ be word-aligned (the lowest address bit is _ignored_ at</span></span>\n<span class=\"line\"><span style=\"\"> * the hardware level, so odd-byte transfers aren't possible).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Transfer count (_not # bytes_) is limited to 64K, represented as actual</span></span>\n<span class=\"line\"><span style=\"\"> * count - 1 : 64K => 0xFFFF, 1 => 0x0000.  Thus, count is always 1 or more,</span></span>\n<span class=\"line\"><span style=\"\"> * and up to 128K bytes may be transferred on channels 5-7 in one operation. </span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/alpha/include/asm/dma.h#L28-L74",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/alpha/include/asm/dma.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+         +---------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |            |         |                                       |</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+         |                        +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> * | NTB        |         |                        | NTB          |</span></span>\n<span class=\"line\"><span style=\"\"> * | NetDev     |         |                        | NetDev       |</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+         |                        +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> * | NTB        |         |                        | NTB          |</span></span>\n<span class=\"line\"><span style=\"\"> * | Transfer   |         |                        | Transfer     |</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+         |                        +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |            |         |                        |              |</span></span>\n<span class=\"line\"><span style=\"\"> * |  PCI NTB   |         |                        |              |</span></span>\n<span class=\"line\"><span style=\"\"> * |    EPF     |         |                        |              |</span></span>\n<span class=\"line\"><span style=\"\"> * |   Driver   |         |                        | PCI Virtual  |</span></span>\n<span class=\"line\"><span style=\"\"> * |            |         +---------------+        | NTB Driver   |</span></span>\n<span class=\"line\"><span style=\"\"> * |            |         | PCI EP NTB    |&#x3C;------>|              |</span></span>\n<span class=\"line\"><span style=\"\"> * |            |         |  FN Driver    |        |              |</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+         +---------------+        +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |            |         |               |        |              |</span></span>\n<span class=\"line\"><span style=\"\"> * |  PCI Bus   | &#x3C;-----> |  PCI EP Bus   |        |  Virtual PCI |</span></span>\n<span class=\"line\"><span style=\"\"> * |            |  PCI    |               |        |     Bus      |</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+         +---------------+--------+--------------+</span></span>\n<span class=\"line\"><span style=\"\"> * PCIe Root Port                        PCI EP</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/pci/endpoint/functions/pci-epf-vntb.c#L14-L37",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/pci/endpoint/functions/pci-epf-vntb.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Embedded Display Port PLL driver block diagram for branch clocks</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *              +------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *              |        EDP_VCO_CLK           |</span></span>\n<span class=\"line\"><span style=\"\"> *              |                              |</span></span>\n<span class=\"line\"><span style=\"\"> *              |    +-------------------+     |</span></span>\n<span class=\"line\"><span style=\"\"> *              |    |  (EDP PLL/VCO)    |     |</span></span>\n<span class=\"line\"><span style=\"\"> *              |    +---------+---------+     |</span></span>\n<span class=\"line\"><span style=\"\"> *              |              v               |</span></span>\n<span class=\"line\"><span style=\"\"> *              |   +----------+-----------+   |</span></span>\n<span class=\"line\"><span style=\"\"> *              |   | hsclk_divsel_clk_src |   |</span></span>\n<span class=\"line\"><span style=\"\"> *              |   +----------+-----------+   |</span></span>\n<span class=\"line\"><span style=\"\"> *              +------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                              |</span></span>\n<span class=\"line\"><span style=\"\"> *          +---------&#x3C;---------v------------>----------+</span></span>\n<span class=\"line\"><span style=\"\"> *          |                                           |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------v----------------+                          |</span></span>\n<span class=\"line\"><span style=\"\"> * |   edp_phy_pll_link_clk  |                          |</span></span>\n<span class=\"line\"><span style=\"\"> * |     link_clk            |                          |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+----------------+                          |</span></span>\n<span class=\"line\"><span style=\"\"> *          |                                           |</span></span>\n<span class=\"line\"><span style=\"\"> *          |                                           |</span></span>\n<span class=\"line\"><span style=\"\"> *          v                                           v</span></span>\n<span class=\"line\"><span style=\"\"> * Input to DISPCC block                                |</span></span>\n<span class=\"line\"><span style=\"\"> * for link clk, crypto clk                             |</span></span>\n<span class=\"line\"><span style=\"\"> * and interface clock                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                      |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                      |</span></span>\n<span class=\"line\"><span style=\"\"> *      +--------&#x3C;------------+-----------------+---&#x3C;---+</span></span>\n<span class=\"line\"><span style=\"\"> *      |                     |                 |</span></span>\n<span class=\"line\"><span style=\"\"> * +----v---------+  +--------v-----+  +--------v------+</span></span>\n<span class=\"line\"><span style=\"\"> * | vco_divided  |  | vco_divided  |  | vco_divided   |</span></span>\n<span class=\"line\"><span style=\"\"> * |    _clk_src  |  |    _clk_src  |  |    _clk_src   |</span></span>\n<span class=\"line\"><span style=\"\"> * |              |  |              |  |               |</span></span>\n<span class=\"line\"><span style=\"\"> * |divsel_six    |  |  divsel_two  |  |  divsel_four  |</span></span>\n<span class=\"line\"><span style=\"\"> * +-------+------+  +-----+--------+  +--------+------+</span></span>\n<span class=\"line\"><span style=\"\"> *         |                 |                  |</span></span>\n<span class=\"line\"><span style=\"\"> *         v---->----------v-------------&#x3C;------v</span></span>\n<span class=\"line\"><span style=\"\"> *                         |</span></span>\n<span class=\"line\"><span style=\"\"> *              +----------+-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *              |   edp_phy_pll_vco_div_clk  |</span></span>\n<span class=\"line\"><span style=\"\"> *              +---------+------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *                        |</span></span>\n<span class=\"line\"><span style=\"\"> *                        v</span></span>\n<span class=\"line\"><span style=\"\"> *              Input to DISPCC block</span></span>\n<span class=\"line\"><span style=\"\"> *              for EDP pixel clock</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/phy/qualcomm/phy-qcom-edp.c#L613-L661",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/phy/qualcomm/phy-qcom-edp.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Register a fixed rate pipe clock.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The &#x3C;s>_pipe_clksrc generated by PHY goes to the GCC that gate</span></span>\n<span class=\"line\"><span style=\"\"> * controls it. The &#x3C;s>_pipe_clk coming out of the GCC is requested</span></span>\n<span class=\"line\"><span style=\"\"> * by the PHY driver for its operations.</span></span>\n<span class=\"line\"><span style=\"\"> * We register the &#x3C;s>_pipe_clksrc here. The gcc driver takes care</span></span>\n<span class=\"line\"><span style=\"\"> * of assigning this &#x3C;s>_pipe_clksrc as parent to &#x3C;s>_pipe_clk.</span></span>\n<span class=\"line\"><span style=\"\"> * Below picture shows this relationship.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *         |   PHY block   |&#x3C;&#x3C;---------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *         |               |                                         |</span></span>\n<span class=\"line\"><span style=\"\"> *         |   +-------+   |                   +-----+               |</span></span>\n<span class=\"line\"><span style=\"\"> *   I/P---^-->|  PLL  |---^--->pipe_clksrc--->| GCC |--->pipe_clk---+</span></span>\n<span class=\"line\"><span style=\"\"> *    clk  |   +-------+   |                   +-----+</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/phy/qualcomm/phy-qcom-qmp-combo.c#L2254-L2271",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/drivers/phy/qualcomm/phy-qcom-qmp-combo.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Register a fixed rate pipe clock.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The &#x3C;s>_pipe_clksrc generated by PHY goes to the GCC that gate</span></span>\n<span class=\"line\"><span style=\"\"> * controls it. The &#x3C;s>_pipe_clk coming out of the GCC is requested</span></span>\n<span class=\"line\"><span style=\"\"> * by the PHY driver for its operations.</span></span>\n<span class=\"line\"><span style=\"\"> * We register the &#x3C;s>_pipe_clksrc here. The gcc driver takes care</span></span>\n<span class=\"line\"><span style=\"\"> * of assigning this &#x3C;s>_pipe_clksrc as parent to &#x3C;s>_pipe_clk.</span></span>\n<span class=\"line\"><span style=\"\"> * Below picture shows this relationship.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> *         |   PHY block   |&#x3C;&#x3C;---------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *         |               |                                         |</span></span>\n<span class=\"line\"><span style=\"\"> *         |   +-------+   |                   +-----+               |</span></span>\n<span class=\"line\"><span style=\"\"> *   I/P---^-->|  PLL  |---^--->pipe_clksrc--->| GCC |--->pipe_clk---+</span></span>\n<span class=\"line\"><span style=\"\"> *    clk  |   +-------+   |                   +-----+</span></span>\n<span class=\"line\"><span style=\"\"> *         +---------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/phy/qualcomm/phy-qcom-qmp-usb.c#L2342-L2359",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/drivers/phy/qualcomm/phy-qcom-qmp-usb.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * enum - Locking variants of the iocfg bases</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * MT7986 have multiple bases to program pin configuration listed as the below:</span></span>\n<span class=\"line\"><span style=\"\"> * iocfg_rt:0x11c30000, iocfg_rb:0x11c40000, iocfg_lt:0x11e20000,</span></span>\n<span class=\"line\"><span style=\"\"> * iocfg_lb:0x11e30000, iocfg_tr:0x11f00000, iocfg_tl:0x11f10000,</span></span>\n<span class=\"line\"><span style=\"\"> * _i_based could be used to indicate what base the pin should be mapped into.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each iocfg register base control different group of pads on the SoC</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  chip carrier</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      A  B  C  D  E  F  G  H</span></span>\n<span class=\"line\"><span style=\"\"> *    +------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  8 | o  o  o  o  o  o  o  o |</span></span>\n<span class=\"line\"><span style=\"\"> *  7 | o  o  o  o  o  o  o  o |</span></span>\n<span class=\"line\"><span style=\"\"> *  6 | o  o  o  o  o  o  o  o |</span></span>\n<span class=\"line\"><span style=\"\"> *  5 | o  o  o  o  o  o  o  o |</span></span>\n<span class=\"line\"><span style=\"\"> *  4 | o  o  o  o  o  o  o  o |</span></span>\n<span class=\"line\"><span style=\"\"> *  3 | o  o  o  o  o  o  o  o |</span></span>\n<span class=\"line\"><span style=\"\"> *  2 | o  o  o  o  o  o  o  o |</span></span>\n<span class=\"line\"><span style=\"\"> *  1 | o  o  o  o  o  o  o  o |</span></span>\n<span class=\"line\"><span style=\"\"> *    +------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  inside Chip carrier</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      A  B  C  D  E  F  G  H</span></span>\n<span class=\"line\"><span style=\"\"> *    +------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  8 |                        |</span></span>\n<span class=\"line\"><span style=\"\"> *  7 |        TL  TR          |</span></span>\n<span class=\"line\"><span style=\"\"> *  6 |      +---------+       |</span></span>\n<span class=\"line\"><span style=\"\"> *  5 |   LT |         | RT    |</span></span>\n<span class=\"line\"><span style=\"\"> *  4 |      |         |       |</span></span>\n<span class=\"line\"><span style=\"\"> *  3 |   LB |         | RB    |</span></span>\n<span class=\"line\"><span style=\"\"> *  2 |      +---------+       |</span></span>\n<span class=\"line\"><span style=\"\"> *  1 |                        |</span></span>\n<span class=\"line\"><span style=\"\"> *    +------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/pinctrl/mediatek/pinctrl-mt7986.c#L19-L58",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/pinctrl/mediatek/pinctrl-mt7986.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * This section supports converting to/from custom MTK_PIN_CONFIG_DRV_ADV</span></span>\n<span class=\"line\"><span style=\"\"> * and standard PIN_CONFIG_DRIVE_STRENGTH_UA pin configs.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The custom value encodes three hardware bits as follows:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   |           Bits           |</span></span>\n<span class=\"line\"><span style=\"\"> *   | 2 (E1) | 1 (E0) | 0 (EN) | drive strength (uA)</span></span>\n<span class=\"line\"><span style=\"\"> *   ------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   |    x   |    x   |    0   | disabled, use standard drive strength</span></span>\n<span class=\"line\"><span style=\"\"> *   -------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *   |    0   |    0   |    1   |  125 uA</span></span>\n<span class=\"line\"><span style=\"\"> *   |    0   |    1   |    1   |  250 uA</span></span>\n<span class=\"line\"><span style=\"\"> *   |    1   |    0   |    1   |  500 uA</span></span>\n<span class=\"line\"><span style=\"\"> *   |    1   |    1   |    1   | 1000 uA</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/pinctrl/mediatek/pinctrl-paris.c#L56-L71",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/pinctrl/mediatek/pinctrl-paris.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *   The battery charging profile of BD99954.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   Curve (1) represents charging current.</span></span>\n<span class=\"line\"><span style=\"\"> *   Curve (2) represents battery voltage.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   The BD99954 data sheet divides charging to three phases.</span></span>\n<span class=\"line\"><span style=\"\"> *   a) Trickle-charge with constant current (8).</span></span>\n<span class=\"line\"><span style=\"\"> *   b) pre-charge with constant current (6)</span></span>\n<span class=\"line\"><span style=\"\"> *   c) fast-charge, first with constant current (5) phase. After</span></span>\n<span class=\"line\"><span style=\"\"> *      the battery voltage has reached target level (4) we have constant</span></span>\n<span class=\"line\"><span style=\"\"> *      voltage phase until charging current has dropped to termination</span></span>\n<span class=\"line\"><span style=\"\"> *      level (7)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    V ^                                                        ^ I</span></span>\n<span class=\"line\"><span style=\"\"> *      .                                                        .</span></span>\n<span class=\"line\"><span style=\"\"> *      .                                                        .</span></span>\n<span class=\"line\"><span style=\"\"> *(4)` `.` ` ` ` ` ` ` ` ` ` ` ` ` ` ----------------------------.</span></span>\n<span class=\"line\"><span style=\"\"> *      .                           :/                           .</span></span>\n<span class=\"line\"><span style=\"\"> *      .                     o----+/:/ ` ` ` ` ` ` ` ` ` ` ` ` `.` ` (5)</span></span>\n<span class=\"line\"><span style=\"\"> *      .                     +   ::  +                          .</span></span>\n<span class=\"line\"><span style=\"\"> *      .                     +  /-   --                         .</span></span>\n<span class=\"line\"><span style=\"\"> *      .                     +`/-     +                         .</span></span>\n<span class=\"line\"><span style=\"\"> *      .                     o/-      -:                        .</span></span>\n<span class=\"line\"><span style=\"\"> *      .                    .s.        +`                       .</span></span>\n<span class=\"line\"><span style=\"\"> *      .                  .--+         `/                       .</span></span>\n<span class=\"line\"><span style=\"\"> *      .               ..``  +          .:                      .</span></span>\n<span class=\"line\"><span style=\"\"> *      .             -`      +           --                     .</span></span>\n<span class=\"line\"><span style=\"\"> *      .    (2)  ...``       +            :-                    .</span></span>\n<span class=\"line\"><span style=\"\"> *      .    ...``            +             -:                   .</span></span>\n<span class=\"line\"><span style=\"\"> *(3)` `.`.\"\"  ` ` ` `+-------- ` ` ` ` ` ` `.:` ` ` ` ` ` ` ` ` .` ` (6)</span></span>\n<span class=\"line\"><span style=\"\"> *      .             +                       `:.                .</span></span>\n<span class=\"line\"><span style=\"\"> *      .             +                         -:               .</span></span>\n<span class=\"line\"><span style=\"\"> *      .             +                           -:.            .</span></span>\n<span class=\"line\"><span style=\"\"> *      .             +                             .--.         .</span></span>\n<span class=\"line\"><span style=\"\"> *      .   (1)       +                                `.+` ` ` `.` ` (7)</span></span>\n<span class=\"line\"><span style=\"\"> *      -..............` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` + ` ` ` .` ` (8)</span></span>\n<span class=\"line\"><span style=\"\"> *      .                                                +       -</span></span>\n<span class=\"line\"><span style=\"\"> *      -------------------------------------------------+++++++++--></span></span>\n<span class=\"line\"><span style=\"\"> *      |   trickle   |  pre  |          fast            |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Details of DT properties for different limits can be found from BD99954</span></span>\n<span class=\"line\"><span style=\"\"> * device tree binding documentation.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/power/supply/bd99954-charger.c#L13-L56",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/power/supply/bd99954-charger.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Capture using PWM input mode:</span></span>\n<span class=\"line\"><span style=\"\"> *                              ___          ___</span></span>\n<span class=\"line\"><span style=\"\"> * TI[1, 2, 3 or 4]: ........._|   |________|</span></span>\n<span class=\"line\"><span style=\"\"> *                             ^0  ^1       ^2</span></span>\n<span class=\"line\"><span style=\"\"> *                              .   .        .</span></span>\n<span class=\"line\"><span style=\"\"> *                              .   .        XXXXX</span></span>\n<span class=\"line\"><span style=\"\"> *                              .   .   XXXXX     |</span></span>\n<span class=\"line\"><span style=\"\"> *                              .  XXXXX     .    |</span></span>\n<span class=\"line\"><span style=\"\"> *                            XXXXX .        .    |</span></span>\n<span class=\"line\"><span style=\"\"> * COUNTER:        ______XXXXX  .   .        .    |_XXX</span></span>\n<span class=\"line\"><span style=\"\"> *                 start^       .   .        .        ^stop</span></span>\n<span class=\"line\"><span style=\"\"> *                      .       .   .        .</span></span>\n<span class=\"line\"><span style=\"\"> *                      v       v   .        v</span></span>\n<span class=\"line\"><span style=\"\"> *                                  v</span></span>\n<span class=\"line\"><span style=\"\"> * CCR1/CCR3:       tx..........t0...........t2</span></span>\n<span class=\"line\"><span style=\"\"> * CCR2/CCR4:       tx..............t1.........</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * DMA burst transfer:          |            |</span></span>\n<span class=\"line\"><span style=\"\"> *                              v            v</span></span>\n<span class=\"line\"><span style=\"\"> * DMA buffer:                  { t0, tx }   { t2, t1 }</span></span>\n<span class=\"line\"><span style=\"\"> * DMA done:                                 ^</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 0: IC1/3 snapchot on rising edge: counter value -> CCR1/CCR3</span></span>\n<span class=\"line\"><span style=\"\"> *    + DMA transfer CCR[1/3] &#x26; CCR[2/4] values (t0, tx: doesn't care)</span></span>\n<span class=\"line\"><span style=\"\"> * 1: IC2/4 snapchot on falling edge: counter value -> CCR2/CCR4</span></span>\n<span class=\"line\"><span style=\"\"> * 2: IC1/3 snapchot on rising edge: counter value -> CCR1/CCR3</span></span>\n<span class=\"line\"><span style=\"\"> *    + DMA transfer CCR[1/3] &#x26; CCR[2/4] values (t2, t1)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * DMA done, compute:</span></span>\n<span class=\"line\"><span style=\"\"> * - Period     = t2 - t0</span></span>\n<span class=\"line\"><span style=\"\"> * - Duty cycle = t1 - t0</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/pwm/pwm-stm32.c#L75-L107",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/pwm/pwm-stm32.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Add serial number to information bar if signature AAh</span></span>\n<span class=\"line\"><span style=\"\"> * is found in at bit 15-9 (7 bits) of word 1.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Serial Number consists fo 12 alpha-numeric digits.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       1 - Product type (A,B,C,D..)  Word0: 15-13 (3 bits)</span></span>\n<span class=\"line\"><span style=\"\"> *       2 - MFG Location (A,B,C,D..)  Word0: 12-10 (3 bits)</span></span>\n<span class=\"line\"><span style=\"\"> *     3-4 - Product ID (0-99)         Word0: 9-0 (10 bits)</span></span>\n<span class=\"line\"><span style=\"\"> *       5 - Product revision (A-J)    Word0:  \"         \"</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *           Signature                 Word1: 15-9 (7 bits)</span></span>\n<span class=\"line\"><span style=\"\"> *       6 - Year (0-9)                Word1: 8-6 (3 bits) &#x26; Word2: 15 (1 bit)</span></span>\n<span class=\"line\"><span style=\"\"> *     7-8 - Week of the year (1-52)   Word1: 5-0 (6 bits)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    9-12 - Serial Number (A001-Z999) Word2: 14-0 (15 bits)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note 1: Only production cards will have a serial number.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note 2: Signature is most significant 7 bits (0xFE).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Returns ASC_TRUE if serial number found, otherwise returns ASC_FALSE.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/scsi/advansys.c#L2748-L2770",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/scsi/advansys.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * In case if at least one of the requested DMA channels doesn't support the</span></span>\n<span class=\"line\"><span style=\"\"> * hardware accelerated SG list entries traverse, the DMA driver will most</span></span>\n<span class=\"line\"><span style=\"\"> * likely work that around by performing the IRQ-based SG list entries</span></span>\n<span class=\"line\"><span style=\"\"> * resubmission. That might and will cause a problem if the DMA Tx channel is</span></span>\n<span class=\"line\"><span style=\"\"> * recharged and re-executed before the Rx DMA channel. Due to</span></span>\n<span class=\"line\"><span style=\"\"> * non-deterministic IRQ-handler execution latency the DMA Tx channel will</span></span>\n<span class=\"line\"><span style=\"\"> * start pushing data to the SPI bus before the Rx DMA channel is even</span></span>\n<span class=\"line\"><span style=\"\"> * reinitialized with the next inbound SG list entry. By doing so the DMA Tx</span></span>\n<span class=\"line\"><span style=\"\"> * channel will implicitly start filling the DW APB SSI Rx FIFO up, which while</span></span>\n<span class=\"line\"><span style=\"\"> * the DMA Rx channel being recharged and re-executed will eventually be</span></span>\n<span class=\"line\"><span style=\"\"> * overflown.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In order to solve the problem we have to feed the DMA engine with SG list</span></span>\n<span class=\"line\"><span style=\"\"> * entries one-by-one. It shall keep the DW APB SSI Tx and Rx FIFOs</span></span>\n<span class=\"line\"><span style=\"\"> * synchronized and prevent the Rx FIFO overflow. Since in general the tx_sg</span></span>\n<span class=\"line\"><span style=\"\"> * and rx_sg lists may have different number of entries of different lengths</span></span>\n<span class=\"line\"><span style=\"\"> * (though total length should match) let's virtually split the SG-lists to the</span></span>\n<span class=\"line\"><span style=\"\"> * set of DMA transfers, which length is a minimum of the ordered SG-entries</span></span>\n<span class=\"line\"><span style=\"\"> * lengths. An ASCII-sketch of the implemented algo is following:</span></span>\n<span class=\"line\"><span style=\"\"> *                  xfer->len</span></span>\n<span class=\"line\"><span style=\"\"> *                |___________|</span></span>\n<span class=\"line\"><span style=\"\"> * tx_sg list:    |___|____|__|</span></span>\n<span class=\"line\"><span style=\"\"> * rx_sg list:    |_|____|____|</span></span>\n<span class=\"line\"><span style=\"\"> * DMA transfers: |_|_|__|_|__|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note in order to have this workaround solving the denoted problem the DMA</span></span>\n<span class=\"line\"><span style=\"\"> * engine driver should properly initialize the max_sg_burst capability and set</span></span>\n<span class=\"line\"><span style=\"\"> * the DMA device max segment size parameter with maximum data block size the</span></span>\n<span class=\"line\"><span style=\"\"> * DMA engine supports.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/spi/spi-dw-dma.c#L497-L527",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/spi/spi-dw-dma.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The Clock Mux</span></span>\n<span class=\"line\"><span style=\"\"> *            x-----------------x   x------------x    x------\\</span></span>\n<span class=\"line\"><span style=\"\"> *        |---| pow2 fixed div  |---| pow2 div   |----|      |</span></span>\n<span class=\"line\"><span style=\"\"> *        |   x-----------------x   x------------x    |      |</span></span>\n<span class=\"line\"><span style=\"\"> * src ---|                                           | mux  |-- out</span></span>\n<span class=\"line\"><span style=\"\"> *        |   x-----------------x   x------------x    |      |</span></span>\n<span class=\"line\"><span style=\"\"> *        |---| enh fixed div   |---| enh div    |0---|      |</span></span>\n<span class=\"line\"><span style=\"\"> *            x-----------------x   x------------x    x------/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Clk path for GX series:</span></span>\n<span class=\"line\"><span style=\"\"> *    src -> pow2 fixed div -> pow2 div -> out</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Clk path for AXG series:</span></span>\n<span class=\"line\"><span style=\"\"> *    src -> pow2 fixed div -> pow2 div -> mux -> out</span></span>\n<span class=\"line\"><span style=\"\"> *    src -> enh fixed div -> enh div -> mux -> out</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Clk path for G12A series:</span></span>\n<span class=\"line\"><span style=\"\"> *    pclk -> pow2 fixed div -> pow2 div -> mux -> out</span></span>\n<span class=\"line\"><span style=\"\"> *    pclk -> enh fixed div -> enh div -> mux -> out</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The pow2 divider is tied to the controller HW state, and the</span></span>\n<span class=\"line\"><span style=\"\"> * divider is only valid when the controller is initialized.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * A set of clock ops is added to make sure we don't read/set this</span></span>\n<span class=\"line\"><span style=\"\"> * clock rate while the controller is in an unknown state.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/spi/spi-meson-spicc.c#L555-L581",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/spi/spi-meson-spicc.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * In FlexSPI controller, flash access is based on value of FSPI_FLSHXXCR0</span></span>\n<span class=\"line\"><span style=\"\"> * register and start base address of the slave device.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\t\t\t    (Higher address)</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t--------    &#x3C;-- FLSHB2CR0</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t|  B2  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t|      |</span></span>\n<span class=\"line\"><span style=\"\"> *\tB2 start address -->\t--------    &#x3C;-- FLSHB1CR0</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t|  B1  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t|      |</span></span>\n<span class=\"line\"><span style=\"\"> *\tB1 start address -->\t--------    &#x3C;-- FLSHA2CR0</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t|  A2  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t|      |</span></span>\n<span class=\"line\"><span style=\"\"> *\tA2 start address -->\t--------    &#x3C;-- FLSHA1CR0</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t|  A1  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t|      |</span></span>\n<span class=\"line\"><span style=\"\"> *\tA1 start address -->\t--------\t\t    (Lower address)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Start base address defines the starting address range for given CS and</span></span>\n<span class=\"line\"><span style=\"\"> * FSPI_FLSHXXCR0 defines the size of the slave device connected at given CS.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * But, different targets are having different combinations of number of CS,</span></span>\n<span class=\"line\"><span style=\"\"> * some targets only have single CS or two CS covering controller's full</span></span>\n<span class=\"line\"><span style=\"\"> * memory mapped space area.</span></span>\n<span class=\"line\"><span style=\"\"> * Thus, implementation is being done as independent of the size and number</span></span>\n<span class=\"line\"><span style=\"\"> * of the connected slave device.</span></span>\n<span class=\"line\"><span style=\"\"> * Assign controller memory mapped space size as the size to the connected</span></span>\n<span class=\"line\"><span style=\"\"> * slave device.</span></span>\n<span class=\"line\"><span style=\"\"> * Mark FLSHxxCR0 as zero initially and then assign value only to the selected</span></span>\n<span class=\"line\"><span style=\"\"> * chip-select Flash configuration register.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For e.g. to access CS2 (B1), FLSHB1CR0 register would be equal to the</span></span>\n<span class=\"line\"><span style=\"\"> * memory mapped size of the controller.</span></span>\n<span class=\"line\"><span style=\"\"> * Value for rest of the CS FLSHxxCR0 register would be zero.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/spi/spi-nxp-fspi.c#L618-L655",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/spi/spi-nxp-fspi.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Architecture Overview</span></span>\n<span class=\"line\"><span style=\"\"> * =====================</span></span>\n<span class=\"line\"><span style=\"\"> * This driver (running on the CPU/SoC) and the Anybus-S card communicate</span></span>\n<span class=\"line\"><span style=\"\"> * by reading and writing data to/from the Anybus-S Dual-Port RAM (dpram).</span></span>\n<span class=\"line\"><span style=\"\"> * This is memory connected to both the SoC and Anybus-S card, which both sides</span></span>\n<span class=\"line\"><span style=\"\"> * can access freely and concurrently.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Synchronization happens by means of two registers located in the dpram:</span></span>\n<span class=\"line\"><span style=\"\"> * IND_AB: written exclusively by the Anybus card; and</span></span>\n<span class=\"line\"><span style=\"\"> * IND_AP: written exclusively by this driver.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Communication happens using one of the following mechanisms:</span></span>\n<span class=\"line\"><span style=\"\"> * 1. reserve, read/write, release dpram memory areas:</span></span>\n<span class=\"line\"><span style=\"\"> *\tusing an IND_AB/IND_AP protocol, the driver is able to reserve certain</span></span>\n<span class=\"line\"><span style=\"\"> *\tmemory areas. no dpram memory can be read or written except if reserved.</span></span>\n<span class=\"line\"><span style=\"\"> *\t(with a few limited exceptions)</span></span>\n<span class=\"line\"><span style=\"\"> * 2. send and receive data structures via a shared mailbox:</span></span>\n<span class=\"line\"><span style=\"\"> *\tusing an IND_AB/IND_AP protocol, the driver and Anybus card are able to</span></span>\n<span class=\"line\"><span style=\"\"> *\texchange commands and responses using a shared mailbox.</span></span>\n<span class=\"line\"><span style=\"\"> * 3. receive software interrupts:</span></span>\n<span class=\"line\"><span style=\"\"> *\tusing an IND_AB/IND_AP protocol, the Anybus card is able to notify the</span></span>\n<span class=\"line\"><span style=\"\"> *\tdriver of certain events such as: bus online/offline, data available.</span></span>\n<span class=\"line\"><span style=\"\"> *\tnote that software interrupt event bits are located in a memory area</span></span>\n<span class=\"line\"><span style=\"\"> *\twhich must be reserved before it can be accessed.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The manual[1] is silent on whether these mechanisms can happen concurrently,</span></span>\n<span class=\"line\"><span style=\"\"> * or how they should be synchronized. However, section 13 (Driver Example)</span></span>\n<span class=\"line\"><span style=\"\"> * provides the following suggestion for developing a driver:</span></span>\n<span class=\"line\"><span style=\"\"> * a) an interrupt handler which updates global variables;</span></span>\n<span class=\"line\"><span style=\"\"> * b) a continuously-running task handling area requests (1 above)</span></span>\n<span class=\"line\"><span style=\"\"> * c) a continuously-running task handling mailbox requests (2 above)</span></span>\n<span class=\"line\"><span style=\"\"> * The example conspicuously leaves out software interrupts (3 above), which</span></span>\n<span class=\"line\"><span style=\"\"> * is the thorniest issue to get right (see below).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The naive, straightforward way to implement this would be:</span></span>\n<span class=\"line\"><span style=\"\"> * - create an isr which updates shared variables;</span></span>\n<span class=\"line\"><span style=\"\"> * - create a work_struct which handles software interrupts on a queue;</span></span>\n<span class=\"line\"><span style=\"\"> * - create a function which does reserve/update/unlock in a loop;</span></span>\n<span class=\"line\"><span style=\"\"> * - create a function which does mailbox send/receive in a loop;</span></span>\n<span class=\"line\"><span style=\"\"> * - call the above functions from the driver's read/write/ioctl;</span></span>\n<span class=\"line\"><span style=\"\"> * - synchronize using mutexes/spinlocks:</span></span>\n<span class=\"line\"><span style=\"\"> *\t+ only one area request at a time</span></span>\n<span class=\"line\"><span style=\"\"> *\t+ only one mailbox request at a time</span></span>\n<span class=\"line\"><span style=\"\"> *\t+ protect AB_IND, AB_IND against data hazards (e.g. read-after-write)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Unfortunately, the presence of the software interrupt causes subtle yet</span></span>\n<span class=\"line\"><span style=\"\"> * considerable synchronization issues; especially problematic is the</span></span>\n<span class=\"line\"><span style=\"\"> * requirement to reserve/release the area which contains the status bits.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The driver architecture presented here sidesteps these synchronization issues</span></span>\n<span class=\"line\"><span style=\"\"> * by accessing the dpram from a single kernel thread only. User-space throws</span></span>\n<span class=\"line\"><span style=\"\"> * \"tasks\" (i.e. 1, 2 above) into a task queue, waits for their completion,</span></span>\n<span class=\"line\"><span style=\"\"> * and the kernel thread runs them to completion.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each task has a task_function, which is called/run by the queue thread.</span></span>\n<span class=\"line\"><span style=\"\"> * That function communicates with the Anybus card, and returns either</span></span>\n<span class=\"line\"><span style=\"\"> * 0 (OK), a negative error code (error), or -EINPROGRESS (waiting).</span></span>\n<span class=\"line\"><span style=\"\"> * On OK or error, the queue thread completes and dequeues the task,</span></span>\n<span class=\"line\"><span style=\"\"> * which also releases the user space thread which may still be waiting for it.</span></span>\n<span class=\"line\"><span style=\"\"> * On -EINPROGRESS (waiting), the queue thread will leave the task on the queue,</span></span>\n<span class=\"line\"><span style=\"\"> * and revisit (call again) whenever an interrupt event comes in.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each task has a state machine, which is run by calling its task_function.</span></span>\n<span class=\"line\"><span style=\"\"> * It ensures that the task will go through its various stages over time,</span></span>\n<span class=\"line\"><span style=\"\"> * returning -EINPROGRESS if it wants to wait for an event to happen.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that according to the manual's driver example, the following operations</span></span>\n<span class=\"line\"><span style=\"\"> * may run independent of each other:</span></span>\n<span class=\"line\"><span style=\"\"> * - area reserve/read/write/release\t(point 1 above)</span></span>\n<span class=\"line\"><span style=\"\"> * - mailbox operations\t\t\t(point 2 above)</span></span>\n<span class=\"line\"><span style=\"\"> * - switching power on/off</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To allow them to run independently, each operation class gets its own queue.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Userspace processes A, B, C, D post tasks to the appropriate queue,</span></span>\n<span class=\"line\"><span style=\"\"> * and wait for task completion:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tprocess A\tB\tC\tD</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|\t|\t|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tv\tv\tv\tv</span></span>\n<span class=\"line\"><span style=\"\"> *\t|&#x3C;-----\t========================================</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t|\t   |\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\tv\t   v\t\tv-------&#x3C;-------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t+--------------------------------------+\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t| power q     | mbox q    | area q     |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|------------|------------|------------|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t| task       | task       | task       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t| task       | task       | task       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t| task wait  | task wait  | task wait  |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t+--------------------------------------+\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t^\t   ^\t\t^\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t|\t   |\t\t|\t\t^</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t+--------------------------------------+\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|\t     queue thread\t       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|--------------------------------------|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t| single-threaded:\t\t       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t| loop:\t\t\t\t       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\tv\t|   for each queue:\t\t       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|     run task state machine\t       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|     if task waiting:\t\t       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|       leave on queue\t\t       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|     if task done:\t\t       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|       complete task, remove from q   |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|   if software irq event bits set:    |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|     notify userspace\t\t       |\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|     post clear event bits task------>|>-------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|   wait for IND_AB changed event OR   |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|            task added event\t  OR   |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t|\t     timeout\t\t       |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t| end loop\t\t\t       |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t+--------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t+\t\twake up\t\t       +</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t+--------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t^\t\t\t^</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\t\t|\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t+-------->-------\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t+--------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|\tinterrupt service routine      |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|--------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t| wake up queue thread on IND_AB change|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t+--------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that the Anybus interrupt is dual-purpose:</span></span>\n<span class=\"line\"><span style=\"\"> * - after a reset, triggered when the card becomes ready;</span></span>\n<span class=\"line\"><span style=\"\"> * - during normal operation, triggered when AB_IND changes.</span></span>\n<span class=\"line\"><span style=\"\"> * This is why the interrupt service routine doesn't just wake up the</span></span>\n<span class=\"line\"><span style=\"\"> * queue thread, but also completes the card_boot completion.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * [1] https://www.anybus.com/docs/librariesprovider7/default-document-library/</span></span>\n<span class=\"line\"><span style=\"\"> *\tmanuals-design-guides/hms-hmsi-27-275.pdf</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/staging/fieldbus/anybuss/host.c#L8-L140",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/drivers/staging/fieldbus/anybuss/host.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* ****************************************************</span></span>\n<span class=\"line\"><span style=\"\"> * Each coefficient is stored as 7bits to fit 2 of them into one</span></span>\n<span class=\"line\"><span style=\"\"> * ISP vector element, so we will store 4 coefficents on every</span></span>\n<span class=\"line\"><span style=\"\"> * memory word (32bits)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 0: Coefficient 0 used bits</span></span>\n<span class=\"line\"><span style=\"\"> * 1: Coefficient 1 used bits</span></span>\n<span class=\"line\"><span style=\"\"> * 2: Coefficient 2 used bits</span></span>\n<span class=\"line\"><span style=\"\"> * 3: Coefficient 3 used bits</span></span>\n<span class=\"line\"><span style=\"\"> * x: not used</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * xx33333332222222 | xx11111110000000</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ***************************************************</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/staging/media/atomisp/pci/sh_css_params.c#L752-L766",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/staging/media/atomisp/pci/sh_css_params.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Bilinear interpolation on shading tables:</span></span>\n<span class=\"line\"><span style=\"\"> * For each target point T, we calculate the 4 surrounding source points:</span></span>\n<span class=\"line\"><span style=\"\"> * ul (upper left), ur (upper right), ll (lower left) and lr (lower right).</span></span>\n<span class=\"line\"><span style=\"\"> * We then calculate the distances from the T to the source points: x0, x1,</span></span>\n<span class=\"line\"><span style=\"\"> * y0 and y1.</span></span>\n<span class=\"line\"><span style=\"\"> * We then calculate the value of T:</span></span>\n<span class=\"line\"><span style=\"\"> *   dx0*dy0*Slr + dx0*dy1*Sur + dx1*dy0*Sll + dx1*dy1*Sul.</span></span>\n<span class=\"line\"><span style=\"\"> * We choose a grid size of 1x1 which means:</span></span>\n<span class=\"line\"><span style=\"\"> *   dx1 = 1-dx0</span></span>\n<span class=\"line\"><span style=\"\"> *   dy1 = 1-dy0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   Sul dx0         dx1      Sur</span></span>\n<span class=\"line\"><span style=\"\"> *    .&#x3C;----->|&#x3C;------------->.</span></span>\n<span class=\"line\"><span style=\"\"> *    ^</span></span>\n<span class=\"line\"><span style=\"\"> * dy0|</span></span>\n<span class=\"line\"><span style=\"\"> *    v        T</span></span>\n<span class=\"line\"><span style=\"\"> *    -        .</span></span>\n<span class=\"line\"><span style=\"\"> *    ^</span></span>\n<span class=\"line\"><span style=\"\"> *    |</span></span>\n<span class=\"line\"><span style=\"\"> * dy1|</span></span>\n<span class=\"line\"><span style=\"\"> *    v</span></span>\n<span class=\"line\"><span style=\"\"> *    .                        .</span></span>\n<span class=\"line\"><span style=\"\"> *   Sll                      Slr</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Padding:</span></span>\n<span class=\"line\"><span style=\"\"> * The area that the ISP operates on can include padding both on the left</span></span>\n<span class=\"line\"><span style=\"\"> * and the right. We need to padd the shading table such that the shading</span></span>\n<span class=\"line\"><span style=\"\"> * values end up on the correct pixel values. This means we must padd the</span></span>\n<span class=\"line\"><span style=\"\"> * shading table to match the ISP padding.</span></span>\n<span class=\"line\"><span style=\"\"> * We can have 5 cases:</span></span>\n<span class=\"line\"><span style=\"\"> * 1. All 4 points fall in the left padding.</span></span>\n<span class=\"line\"><span style=\"\"> * 2. The left 2 points fall in the left padding.</span></span>\n<span class=\"line\"><span style=\"\"> * 3. All 4 points fall in the cropped (target) region.</span></span>\n<span class=\"line\"><span style=\"\"> * 4. The right 2 points fall in the right padding.</span></span>\n<span class=\"line\"><span style=\"\"> * 5. All 4 points fall in the right padding.</span></span>\n<span class=\"line\"><span style=\"\"> * Cases 1 and 5 are easy to handle: we simply use the</span></span>\n<span class=\"line\"><span style=\"\"> * value 1 in the shading table.</span></span>\n<span class=\"line\"><span style=\"\"> * Cases 2 and 4 require interpolation that takes into</span></span>\n<span class=\"line\"><span style=\"\"> * account how far into the padding area the pixels</span></span>\n<span class=\"line\"><span style=\"\"> * fall. We extrapolate the shading table into the</span></span>\n<span class=\"line\"><span style=\"\"> * padded area and then interpolate.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/staging/media/atomisp/pci/sh_css_param_shading.c#L32-L73",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/staging/media/atomisp/pci/sh_css_param_shading.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 802.11 Data Frame</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 802.11 frame_contorl for data frames - 2 bytes</span></span>\n<span class=\"line\"><span style=\"\"> *      ,-----------------------------------------------------------------------------------------.</span></span>\n<span class=\"line\"><span style=\"\"> * bits | 0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  a  |  b  |  c  |  d  |  e   |</span></span>\n<span class=\"line\"><span style=\"\"> *      |----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|------|</span></span>\n<span class=\"line\"><span style=\"\"> * val  | 0  |  0  |  0  |  1  |  x  |  0  |  0  |  0  |  1  |  0  |  x  |  x  |  x  |  x  |  x   |</span></span>\n<span class=\"line\"><span style=\"\"> *      |----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|------|</span></span>\n<span class=\"line\"><span style=\"\"> * desc | ^-ver-^  |  ^type-^  |  ^-----subtype-----^  | to  |from |more |retry| pwr |more |wep   |</span></span>\n<span class=\"line\"><span style=\"\"> *      |          |           | x=0 data,x=1 data+ack | DS  | DS  |frag |     | mgm |data |      |</span></span>\n<span class=\"line\"><span style=\"\"> *      '-----------------------------------------------------------------------------------------'</span></span>\n<span class=\"line\"><span style=\"\"> *                                                    /\\</span></span>\n<span class=\"line\"><span style=\"\"> *                                                    |</span></span>\n<span class=\"line\"><span style=\"\"> * 802.11 Data Frame                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *           ,--------- 'ctrl' expands to >-----------'</span></span>\n<span class=\"line\"><span style=\"\"> *           |</span></span>\n<span class=\"line\"><span style=\"\"> *        ,--'---,-------------------------------------------------------------.</span></span>\n<span class=\"line\"><span style=\"\"> *  Bytes |  2   |  2   |    6    |    6    |    6    |  2   | 0..2312 |   4  |</span></span>\n<span class=\"line\"><span style=\"\"> *        |------|------|---------|---------|---------|------|---------|------|</span></span>\n<span class=\"line\"><span style=\"\"> *  Desc. | ctrl | dura |  DA/RA  |   TA    |    SA   | Sequ |  Frame  |  fcs |</span></span>\n<span class=\"line\"><span style=\"\"> *        |      | tion | (BSSID) |         |         | ence |  data   |      |</span></span>\n<span class=\"line\"><span style=\"\"> *        `--------------------------------------------------|         |------'</span></span>\n<span class=\"line\"><span style=\"\"> *  Total: 28 non-data bytes                                 `----.----'</span></span>\n<span class=\"line\"><span style=\"\"> *                                                                |</span></span>\n<span class=\"line\"><span style=\"\"> *         .- 'Frame data' expands to &#x3C;---------------------------'</span></span>\n<span class=\"line\"><span style=\"\"> *         |</span></span>\n<span class=\"line\"><span style=\"\"> *         V</span></span>\n<span class=\"line\"><span style=\"\"> *        ,---------------------------------------------------.</span></span>\n<span class=\"line\"><span style=\"\"> *  Bytes |  1   |  1   |    1    |    3     |  2   |  0-2304 |</span></span>\n<span class=\"line\"><span style=\"\"> *        |------|------|---------|----------|------|---------|</span></span>\n<span class=\"line\"><span style=\"\"> *  Desc. | SNAP | SNAP | Control |Eth Tunnel| Type | IP      |</span></span>\n<span class=\"line\"><span style=\"\"> *        | DSAP | SSAP |         |          |      | Packet  |</span></span>\n<span class=\"line\"><span style=\"\"> *        | 0xAA | 0xAA |0x03 (UI)|0x00-00-F8|      |         |</span></span>\n<span class=\"line\"><span style=\"\"> *        `-----------------------------------------|         |</span></span>\n<span class=\"line\"><span style=\"\"> *  Total: 8 non-data bytes                         `----.----'</span></span>\n<span class=\"line\"><span style=\"\"> *                                                       |</span></span>\n<span class=\"line\"><span style=\"\"> *         .- 'IP Packet' expands, if WEP enabled, to &#x3C;--'</span></span>\n<span class=\"line\"><span style=\"\"> *         |</span></span>\n<span class=\"line\"><span style=\"\"> *         V</span></span>\n<span class=\"line\"><span style=\"\"> *        ,-----------------------.</span></span>\n<span class=\"line\"><span style=\"\"> *  Bytes |  4  |   0-2296  |  4  |</span></span>\n<span class=\"line\"><span style=\"\"> *        |-----|-----------|-----|</span></span>\n<span class=\"line\"><span style=\"\"> *  Desc. | IV  | Encrypted | ICV |</span></span>\n<span class=\"line\"><span style=\"\"> *        |     | IP Packet |     |</span></span>\n<span class=\"line\"><span style=\"\"> *        `-----------------------'</span></span>\n<span class=\"line\"><span style=\"\"> *  Total: 8 non-data bytes</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  802.3 Ethernet Data Frame</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *        ,-----------------------------------------.</span></span>\n<span class=\"line\"><span style=\"\"> *  Bytes |   6   |   6   |  2   |  Variable |   4  |</span></span>\n<span class=\"line\"><span style=\"\"> *        |-------|-------|------|-----------|------|</span></span>\n<span class=\"line\"><span style=\"\"> *  Desc. | Dest. | Source| Type | IP Packet |  fcs |</span></span>\n<span class=\"line\"><span style=\"\"> *        |  MAC  |  MAC  |      |           |      |</span></span>\n<span class=\"line\"><span style=\"\"> *        `-----------------------------------------'</span></span>\n<span class=\"line\"><span style=\"\"> *  Total: 18 non-data bytes</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  In the event that fragmentation is required, the incoming payload is split into</span></span>\n<span class=\"line\"><span style=\"\"> *  N parts of size ieee->fts.  The first fragment contains the SNAP header and the</span></span>\n<span class=\"line\"><span style=\"\"> *  remaining packets are just data.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  If encryption is enabled, each fragment payload size is reduced by enough space</span></span>\n<span class=\"line\"><span style=\"\"> *  to add the prefix and postfix (IV and ICV totalling 8 bytes in the case of WEP)</span></span>\n<span class=\"line\"><span style=\"\"> *  So if you have 1500 bytes of payload with ieee->fts set to 500 without</span></span>\n<span class=\"line\"><span style=\"\"> *  encryption it will take 3 frames.  With WEP it will take 4 frames as the</span></span>\n<span class=\"line\"><span style=\"\"> *  payload of each frame is reduced to 492 bytes.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * SKB visualization</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  ,- skb->data</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * |    ETHERNET HEADER        ,-&#x3C;-- PAYLOAD</span></span>\n<span class=\"line\"><span style=\"\"> * |                           |     14 bytes from skb->data</span></span>\n<span class=\"line\"><span style=\"\"> * |  2 bytes for Type --> ,T. |     (sizeof ethhdr)</span></span>\n<span class=\"line\"><span style=\"\"> * |                       | | |</span></span>\n<span class=\"line\"><span style=\"\"> * |,-Dest.--. ,--Src.---. | | |</span></span>\n<span class=\"line\"><span style=\"\"> * |  6 bytes| | 6 bytes | | | |</span></span>\n<span class=\"line\"><span style=\"\"> * v         | |         | | | |</span></span>\n<span class=\"line\"><span style=\"\"> * 0         | v       1 | v | v           2</span></span>\n<span class=\"line\"><span style=\"\"> * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5</span></span>\n<span class=\"line\"><span style=\"\"> *     ^     | ^         | ^ |</span></span>\n<span class=\"line\"><span style=\"\"> *     |     | |         | | |</span></span>\n<span class=\"line\"><span style=\"\"> *     |     | |         | `T' &#x3C;---- 2 bytes for Type</span></span>\n<span class=\"line\"><span style=\"\"> *     |     | |         |</span></span>\n<span class=\"line\"><span style=\"\"> *     |     | '---SNAP--' &#x3C;-------- 6 bytes for SNAP</span></span>\n<span class=\"line\"><span style=\"\"> *     |     |</span></span>\n<span class=\"line\"><span style=\"\"> *     `-IV--' &#x3C;-------------------- 4 bytes for IV (WEP)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      SNAP HEADER</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/staging/rtl8192u/ieee80211/ieee80211_tx.c#L41-L136",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": true,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/staging/rtl8192u/ieee80211/ieee80211_tx.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * I2C Software Master Driver:</span></span>\n<span class=\"line\"><span style=\"\"> * ===========================</span></span>\n<span class=\"line\"><span style=\"\"> * Each i2c cycle is split into 4 sections. Each of these section marks</span></span>\n<span class=\"line\"><span style=\"\"> * a point in time where the SCL or SDA may be changed.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 1 Cycle == |  Section I. |  Section 2. |  Section 3. |  Section 4. |</span></span>\n<span class=\"line\"><span style=\"\"> *            +-------------+-------------+-------------+-------------+</span></span>\n<span class=\"line\"><span style=\"\"> *            | SCL set LOW |SCL no change| SCL set HIGH|SCL no change|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                          ____________ _____________</span></span>\n<span class=\"line\"><span style=\"\"> * SCL == XXXX _____________ ____________ /</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * I.e. the SCL may only be changed in section 1. and section 3. while</span></span>\n<span class=\"line\"><span style=\"\"> * the SDA may only be changed in section 2. and section 4. The table</span></span>\n<span class=\"line\"><span style=\"\"> * below gives the changes for these 2 lines in the varios sections.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Section changes Table:</span></span>\n<span class=\"line\"><span style=\"\"> * ======================</span></span>\n<span class=\"line\"><span style=\"\"> * blank = no change, L = set bit LOW, H = set bit HIGH</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                | 1.| 2.| 3.| 4.|</span></span>\n<span class=\"line\"><span style=\"\"> *                 ---------------+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *                 Tx Start   SDA |   | H |   | L |</span></span>\n<span class=\"line\"><span style=\"\"> *                            SCL | L |   | H |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                 ---------------+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *                 Tx Stop    SDA |   | L |   | H |</span></span>\n<span class=\"line\"><span style=\"\"> *                            SCL | L |   | H |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                 ---------------+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *                 Tx bit H   SDA |   | H |   |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                            SCL | L |   | H |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                 ---------------+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *                 Tx bit L   SDA |   | L |   |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                            SCL | L |   | H |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                 ---------------+---+---+---+---+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/staging/sm750fb/ddk750_swi2c.c#L15-L51",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/staging/sm750fb/ddk750_swi2c.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * bang_bang_control - controls devices associated with the given zone</span></span>\n<span class=\"line\"><span style=\"\"> * @tz: thermal_zone_device</span></span>\n<span class=\"line\"><span style=\"\"> * @trip: the trip point</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Regulation Logic: a two point regulation, deliver cooling state depending</span></span>\n<span class=\"line\"><span style=\"\"> * on the previous state shown in this diagram:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                Fan:   OFF    ON</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                              |</span></span>\n<span class=\"line\"><span style=\"\"> *                              |</span></span>\n<span class=\"line\"><span style=\"\"> *          trip_temp:    +---->+</span></span>\n<span class=\"line\"><span style=\"\"> *                        |     |        ^</span></span>\n<span class=\"line\"><span style=\"\"> *                        |     |        |</span></span>\n<span class=\"line\"><span style=\"\"> *                        |     |   Temperature</span></span>\n<span class=\"line\"><span style=\"\"> * (trip_temp - hyst):    +&#x3C;----+</span></span>\n<span class=\"line\"><span style=\"\"> *                        |</span></span>\n<span class=\"line\"><span style=\"\"> *                        |</span></span>\n<span class=\"line\"><span style=\"\"> *                        |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   * If the fan is not running and temperature exceeds trip_temp, the fan</span></span>\n<span class=\"line\"><span style=\"\"> *     gets turned on.</span></span>\n<span class=\"line\"><span style=\"\"> *   * In case the fan is running, temperature must fall below</span></span>\n<span class=\"line\"><span style=\"\"> *     (trip_temp - hyst) so that the fan gets turned off again.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/thermal/gov_bang_bang.c#L68-L94",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/thermal/gov_bang_bang.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * DOC: bandgap driver data structure</span></span>\n<span class=\"line\"><span style=\"\"> * ==================================</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   +----------+----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *   | struct temp_sensor_regval |</span></span>\n<span class=\"line\"><span style=\"\"> *   +---------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *              * (Array of)</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *   +-------------------+   +-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *   | struct ti_bandgap |-->| struct device * |</span></span>\n<span class=\"line\"><span style=\"\"> *   +----------+--------+   +-----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              V</span></span>\n<span class=\"line\"><span style=\"\"> *   +------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *   | struct ti_bandgap_data |</span></span>\n<span class=\"line\"><span style=\"\"> *   +------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              * (Array of)</span></span>\n<span class=\"line\"><span style=\"\"> * +------------+------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * | +----------+------------+   +-------------------------+           |</span></span>\n<span class=\"line\"><span style=\"\"> * | | struct ti_temp_sensor |-->| struct temp_sensor_data |           |</span></span>\n<span class=\"line\"><span style=\"\"> * | +-----------------------+   +------------+------------+           |</span></span>\n<span class=\"line\"><span style=\"\"> * |            |                                                      |</span></span>\n<span class=\"line\"><span style=\"\"> * |            +                                                      |</span></span>\n<span class=\"line\"><span style=\"\"> * |            V                                                      |</span></span>\n<span class=\"line\"><span style=\"\"> * | +----------+-------------------+                                  |</span></span>\n<span class=\"line\"><span style=\"\"> * | | struct temp_sensor_registers |                                  |</span></span>\n<span class=\"line\"><span style=\"\"> * | +------------------------------+                                  |</span></span>\n<span class=\"line\"><span style=\"\"> * |                                                                   |</span></span>\n<span class=\"line\"><span style=\"\"> * +-------------------------------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Above is a simple diagram describing how the data structure below</span></span>\n<span class=\"line\"><span style=\"\"> * are organized. For each bandgap device there should be a ti_bandgap_data</span></span>\n<span class=\"line\"><span style=\"\"> * containing the device instance configuration, as well as, an array of</span></span>\n<span class=\"line\"><span style=\"\"> * sensors, representing every sensor instance present in this bandgap.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/thermal/ti-soc-thermal/ti-bandgap.h#L22-L61",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/thermal/ti-soc-thermal/ti-bandgap.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * We use atomic64_read() here because the ASID for an 'mm_struct' can</span></span>\n<span class=\"line\"><span style=\"\"> * be reallocated when scheduling one of its threads following a</span></span>\n<span class=\"line\"><span style=\"\"> * rollover event (see new_context() and flush_context()). In this case,</span></span>\n<span class=\"line\"><span style=\"\"> * a concurrent TLBI (e.g. via try_to_unmap_one() and ptep_clear_flush())</span></span>\n<span class=\"line\"><span style=\"\"> * may use a stale ASID. This is fine in principle as the new ASID is</span></span>\n<span class=\"line\"><span style=\"\"> * guaranteed to be clean in the TLB, but the TLBI routines have to take</span></span>\n<span class=\"line\"><span style=\"\"> * care to handle the following race:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    CPU 0                    CPU 1                          CPU 2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    // ptep_clear_flush(mm)</span></span>\n<span class=\"line\"><span style=\"\"> *    xchg_relaxed(pte, 0)</span></span>\n<span class=\"line\"><span style=\"\"> *    DSB ISHST</span></span>\n<span class=\"line\"><span style=\"\"> *    old = ASID(mm)</span></span>\n<span class=\"line\"><span style=\"\"> *         |                                                  &#x3C;rollover></span></span>\n<span class=\"line\"><span style=\"\"> *         |                   new = new_context(mm)</span></span>\n<span class=\"line\"><span style=\"\"> *         \\-----------------> atomic_set(mm->context.id, new)</span></span>\n<span class=\"line\"><span style=\"\"> *                             cpu_switch_mm(mm)</span></span>\n<span class=\"line\"><span style=\"\"> *                             // Hardware walk of pte using new ASID</span></span>\n<span class=\"line\"><span style=\"\"> *    TLBI(old)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In this scenario, the barrier on CPU 0 and the dependency on CPU 1</span></span>\n<span class=\"line\"><span style=\"\"> * ensure that the page-table walker on CPU 1 *must* see the invalid PTE</span></span>\n<span class=\"line\"><span style=\"\"> * written by CPU 0.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm64/include/asm/mmu.h#L30-L55",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm64/include/asm/mmu.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * pmap_schedule() - Schedule time in a periodic bitmap (pmap).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @map:             The bitmap representing the schedule; will be updated</span></span>\n<span class=\"line\"><span style=\"\"> *                   upon success.</span></span>\n<span class=\"line\"><span style=\"\"> * @bits_per_period: The schedule represents several periods.  This is how many</span></span>\n<span class=\"line\"><span style=\"\"> *                   bits are in each period.  It's assumed that the beginning</span></span>\n<span class=\"line\"><span style=\"\"> *                   of the schedule will repeat after its end.</span></span>\n<span class=\"line\"><span style=\"\"> * @periods_in_map:  The number of periods in the schedule.</span></span>\n<span class=\"line\"><span style=\"\"> * @num_bits:        The number of bits we need per period we want to reserve</span></span>\n<span class=\"line\"><span style=\"\"> *                   in this function call.</span></span>\n<span class=\"line\"><span style=\"\"> * @interval:        How often we need to be scheduled for the reservation this</span></span>\n<span class=\"line\"><span style=\"\"> *                   time.  1 means every period.  2 means every other period.</span></span>\n<span class=\"line\"><span style=\"\"> *                   ...you get the picture?</span></span>\n<span class=\"line\"><span style=\"\"> * @start:           The bit number to start at.  Normally 0.  Must be within</span></span>\n<span class=\"line\"><span style=\"\"> *                   the interval or we return failure right away.</span></span>\n<span class=\"line\"><span style=\"\"> * @only_one_period: Normally we'll allow picking a start anywhere within the</span></span>\n<span class=\"line\"><span style=\"\"> *                   first interval, since we can still make all repetition</span></span>\n<span class=\"line\"><span style=\"\"> *                   requirements by doing that.  However, if you pass true</span></span>\n<span class=\"line\"><span style=\"\"> *                   here then we'll return failure if we can't fit within</span></span>\n<span class=\"line\"><span style=\"\"> *                   the period that \"start\" is in.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The idea here is that we want to schedule time for repeating events that all</span></span>\n<span class=\"line\"><span style=\"\"> * want the same resource.  The resource is divided into fixed-sized periods</span></span>\n<span class=\"line\"><span style=\"\"> * and the events want to repeat every \"interval\" periods.  The schedule</span></span>\n<span class=\"line\"><span style=\"\"> * granularity is one bit.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To keep things \"simple\", we'll represent our schedule with a bitmap that</span></span>\n<span class=\"line\"><span style=\"\"> * contains a fixed number of periods.  This gets rid of a lot of complexity</span></span>\n<span class=\"line\"><span style=\"\"> * but does mean that we need to handle things specially (and non-ideally) if</span></span>\n<span class=\"line\"><span style=\"\"> * the number of the periods in the schedule doesn't match well with the</span></span>\n<span class=\"line\"><span style=\"\"> * intervals that we're trying to schedule.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Here's an explanation of the scheme we'll implement, assuming 8 periods.</span></span>\n<span class=\"line\"><span style=\"\"> * - If interval is 1, we need to take up space in each of the 8</span></span>\n<span class=\"line\"><span style=\"\"> *   periods we're scheduling.  Easy.</span></span>\n<span class=\"line\"><span style=\"\"> * - If interval is 2, we need to take up space in half of the</span></span>\n<span class=\"line\"><span style=\"\"> *   periods.  Again, easy.</span></span>\n<span class=\"line\"><span style=\"\"> * - If interval is 3, we actually need to fall back to interval 1.</span></span>\n<span class=\"line\"><span style=\"\"> *   Why?  Because we might need time in any period.  AKA for the</span></span>\n<span class=\"line\"><span style=\"\"> *   first 8 periods, we'll be in slot 0, 3, 6.  Then we'll be</span></span>\n<span class=\"line\"><span style=\"\"> *   in slot 1, 4, 7.  Then we'll be in 2, 5.  Then we'll be back to</span></span>\n<span class=\"line\"><span style=\"\"> *   0, 3, and 6.  Since we could be in any frame we need to reserve</span></span>\n<span class=\"line\"><span style=\"\"> *   for all of them.  Sucks, but that's what you gotta do.  Note that</span></span>\n<span class=\"line\"><span style=\"\"> *   if we were instead scheduling 8 * 3 = 24 we'd do much better, but</span></span>\n<span class=\"line\"><span style=\"\"> *   then we need more memory and time to do scheduling.</span></span>\n<span class=\"line\"><span style=\"\"> * - If interval is 4, easy.</span></span>\n<span class=\"line\"><span style=\"\"> * - If interval is 5, we again need interval 1.  The schedule will be</span></span>\n<span class=\"line\"><span style=\"\"> *   0, 5, 2, 7, 4, 1, 6, 3, 0</span></span>\n<span class=\"line\"><span style=\"\"> * - If interval is 6, we need interval 2.  0, 6, 4, 2.</span></span>\n<span class=\"line\"><span style=\"\"> * - If interval is 7, we need interval 1.</span></span>\n<span class=\"line\"><span style=\"\"> * - If interval is 8, we need interval 8.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If you do the math, you'll see that we need to pretend that interval is</span></span>\n<span class=\"line\"><span style=\"\"> * equal to the greatest_common_divisor(interval, periods_in_map).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that at the moment this function tends to front-pack the schedule.</span></span>\n<span class=\"line\"><span style=\"\"> * In some cases that's really non-ideal (it's hard to schedule things that</span></span>\n<span class=\"line\"><span style=\"\"> * need to repeat every period).  In other cases it's perfect (you can easily</span></span>\n<span class=\"line\"><span style=\"\"> * schedule bigger, less often repeating things).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Here's the algorithm in action (8 periods, 5 bits per period):</span></span>\n<span class=\"line\"><span style=\"\"> *  |**   |     |**   |     |**   |     |**   |     |   OK 2 bits, intv 2 at 0</span></span>\n<span class=\"line\"><span style=\"\"> *  |*****|  ***|*****|  ***|*****|  ***|*****|  ***|   OK 3 bits, intv 3 at 2</span></span>\n<span class=\"line\"><span style=\"\"> *  |*****|* ***|*****|  ***|*****|* ***|*****|  ***|   OK 1 bits, intv 4 at 5</span></span>\n<span class=\"line\"><span style=\"\"> *  |**   |*    |**   |     |**   |*    |**   |     | Remv 3 bits, intv 3 at 2</span></span>\n<span class=\"line\"><span style=\"\"> *  |***  |*    |***  |     |***  |*    |***  |     |   OK 1 bits, intv 6 at 2</span></span>\n<span class=\"line\"><span style=\"\"> *  |**** |*  * |**** |   * |**** |*  * |**** |   * |   OK 1 bits, intv 1 at 3</span></span>\n<span class=\"line\"><span style=\"\"> *  |**** |**** |**** | *** |**** |**** |**** | *** |   OK 2 bits, intv 2 at 6</span></span>\n<span class=\"line\"><span style=\"\"> *  |*****|*****|*****| ****|*****|*****|*****| ****|   OK 1 bits, intv 1 at 4</span></span>\n<span class=\"line\"><span style=\"\"> *  |*****|*****|*****| ****|*****|*****|*****| ****| FAIL 1 bits, intv 1</span></span>\n<span class=\"line\"><span style=\"\"> *  |  ***|*****|  ***| ****|  ***|*****|  ***| ****| Remv 2 bits, intv 2 at 0</span></span>\n<span class=\"line\"><span style=\"\"> *  |  ***| ****|  ***| ****|  ***| ****|  ***| ****| Remv 1 bits, intv 4 at 5</span></span>\n<span class=\"line\"><span style=\"\"> *  |   **| ****|   **| ****|   **| ****|   **| ****| Remv 1 bits, intv 6 at 2</span></span>\n<span class=\"line\"><span style=\"\"> *  |    *| ** *|    *| ** *|    *| ** *|    *| ** *| Remv 1 bits, intv 1 at 3</span></span>\n<span class=\"line\"><span style=\"\"> *  |    *|    *|    *|    *|    *|    *|    *|    *| Remv 2 bits, intv 2 at 6</span></span>\n<span class=\"line\"><span style=\"\"> *  |     |     |     |     |     |     |     |     | Remv 1 bits, intv 1 at 4</span></span>\n<span class=\"line\"><span style=\"\"> *  |**   |     |**   |     |**   |     |**   |     |   OK 2 bits, intv 2 at 0</span></span>\n<span class=\"line\"><span style=\"\"> *  |***  |     |**   |     |***  |     |**   |     |   OK 1 bits, intv 4 at 2</span></span>\n<span class=\"line\"><span style=\"\"> *  |*****|     |** **|     |*****|     |** **|     |   OK 2 bits, intv 2 at 3</span></span>\n<span class=\"line\"><span style=\"\"> *  |*****|*    |** **|     |*****|*    |** **|     |   OK 1 bits, intv 4 at 5</span></span>\n<span class=\"line\"><span style=\"\"> *  |*****|***  |** **| **  |*****|***  |** **| **  |   OK 2 bits, intv 2 at 6</span></span>\n<span class=\"line\"><span style=\"\"> *  |*****|*****|** **| ****|*****|*****|** **| ****|   OK 2 bits, intv 2 at 8</span></span>\n<span class=\"line\"><span style=\"\"> *  |*****|*****|*****| ****|*****|*****|*****| ****|   OK 1 bits, intv 4 at 12</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This function is pretty generic and could be easily abstracted if anything</span></span>\n<span class=\"line\"><span style=\"\"> * needed similar scheduling.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Returns either -ENOSPC or a >= 0 start bit which should be passed to the</span></span>\n<span class=\"line\"><span style=\"\"> * unschedule routine.  The map bitmap will be updated on a non-error result.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/usb/dwc2/hcd_queue.c#L111-L201",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/usb/dwc2/hcd_queue.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Host side RX (IN) using Mentor DMA works as follows:</span></span>\n<span class=\"line\"><span style=\"\">\tsubmit_urb -></span></span>\n<span class=\"line\"><span style=\"\">\t\t- if queue was empty, ProgramEndpoint</span></span>\n<span class=\"line\"><span style=\"\">\t\t- first IN token is sent out (by setting ReqPkt)</span></span>\n<span class=\"line\"><span style=\"\">\tLinuxIsr -> RxReady()</span></span>\n<span class=\"line\"><span style=\"\">\t/\\\t=> first packet is received</span></span>\n<span class=\"line\"><span style=\"\">\t|\t- Set in mode 0 (DmaEnab, ~ReqPkt)</span></span>\n<span class=\"line\"><span style=\"\">\t|\t\t-> DMA Isr (transfer complete) -> RxReady()</span></span>\n<span class=\"line\"><span style=\"\">\t|\t\t    - Ack receive (~RxPktRdy), turn off DMA (~DmaEnab)</span></span>\n<span class=\"line\"><span style=\"\">\t|\t\t    - if urb not complete, send next IN token (ReqPkt)</span></span>\n<span class=\"line\"><span style=\"\">\t|\t\t\t   |\t\telse complete urb.</span></span>\n<span class=\"line\"><span style=\"\">\t|\t\t\t   |</span></span>\n<span class=\"line\"><span style=\"\">\t---------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Nuances of mode 1:</span></span>\n<span class=\"line\"><span style=\"\"> *\tFor short packets, no ack (+RxPktRdy) is sent automatically</span></span>\n<span class=\"line\"><span style=\"\"> *\t(even if AutoClear is ON)</span></span>\n<span class=\"line\"><span style=\"\"> *\tFor full packets, ack (~RxPktRdy) and next IN token (+ReqPkt) is sent</span></span>\n<span class=\"line\"><span style=\"\"> *\tautomatically => major problem, as collecting the next packet becomes</span></span>\n<span class=\"line\"><span style=\"\"> *\tdifficult. Hence mode 1 is not used.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * REVISIT</span></span>\n<span class=\"line\"><span style=\"\"> *\tAll we care about at this driver level is that</span></span>\n<span class=\"line\"><span style=\"\"> *       (a) all URBs terminate with REQPKT cleared and fifo(s) empty;</span></span>\n<span class=\"line\"><span style=\"\"> *       (b) termination conditions are: short RX, or buffer full;</span></span>\n<span class=\"line\"><span style=\"\"> *       (c) fault modes include</span></span>\n<span class=\"line\"><span style=\"\"> *           - iff URB_SHORT_NOT_OK, short RX status is -EREMOTEIO.</span></span>\n<span class=\"line\"><span style=\"\"> *             (and that endpoint's dma queue stops immediately)</span></span>\n<span class=\"line\"><span style=\"\"> *           - overflow (full, PLUS more bytes in the terminal packet)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tSo for example, usb-storage sets URB_SHORT_NOT_OK, and would</span></span>\n<span class=\"line\"><span style=\"\"> *\tthus be a great candidate for using mode 1 ... for all but the</span></span>\n<span class=\"line\"><span style=\"\"> *\tlast packet of one URB's transfer.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/usb/musb/musb_host.c#L1495-L1528",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/usb/musb/musb_host.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *\t\timage of mod_host</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+</span></span>\n<span class=\"line\"><span style=\"\"> * | udev 0 | --> it is used when set address</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+\t\t\t\t\tpipes are reused for each uep.</span></span>\n<span class=\"line\"><span style=\"\"> * | udev 1 |-+- [uep 0 (dcp) ] --+\t\tpipe will be switched when</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+ |\t\t\t  |\t\tother device requested</span></span>\n<span class=\"line\"><span style=\"\"> *\t      +- [uep 1 (bulk)]\t--|---+\t\t   +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t      |\t\t\t  +--------------> | pipe0 (dcp)  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t      +- [uep 2 (bulk)]\t-@    |\t\t   +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t      |\t\t   | pipe1 (isoc) |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+\t\t\t      |\t\t   +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> * | udev 2 |-+- [uep 0 (dcp) ]\t-@    +----------> | pipe2 (bulk) |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+ |\t\t\t\t\t   +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> *\t      +- [uep 1 (int) ]\t----+\t  +------> | pipe3 (bulk) |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t    |\t  |\t   +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+\t\t\t    +-----|------> | pipe4 (int)  |</span></span>\n<span class=\"line\"><span style=\"\"> * | udev 3 |-+- [uep 0 (dcp) ]\t-@\t  |\t   +--------------+</span></span>\n<span class=\"line\"><span style=\"\"> * +--------+ |\t\t\t\t  |\t   | ....\t  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t      +- [uep 1 (bulk)]\t-@\t  |\t   | ....\t  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t      |\t\t\t\t  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t      +- [uep 2 (bulk)]-----------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @ :\tuep requested free pipe, but all have been used.</span></span>\n<span class=\"line\"><span style=\"\"> *\tnow it is waiting for free pipe</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/usb/renesas_usbhs/mod_host.c#L30-L58",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/usb/renesas_usbhs/mod_host.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * We have to take note of the VIDC20's 16-bit palette here.</span></span>\n<span class=\"line\"><span style=\"\"> * The VIDC20 looks up a 16 bit pixel as follows:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   bits   111111</span></span>\n<span class=\"line\"><span style=\"\"> *          5432109876543210</span></span>\n<span class=\"line\"><span style=\"\"> *   red            ++++++++  (8 bits,  7 to 0)</span></span>\n<span class=\"line\"><span style=\"\"> *  green       ++++++++      (8 bits, 11 to 4)</span></span>\n<span class=\"line\"><span style=\"\"> *   blue   ++++++++          (8 bits, 15 to 8)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We use a pixel which looks like:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   bits   111111</span></span>\n<span class=\"line\"><span style=\"\"> *          5432109876543210</span></span>\n<span class=\"line\"><span style=\"\"> *   red               +++++  (5 bits,  4 to  0)</span></span>\n<span class=\"line\"><span style=\"\"> *  green         +++++       (5 bits,  9 to  5)</span></span>\n<span class=\"line\"><span style=\"\"> *   blue    +++++            (5 bits, 14 to 10)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/acornfb.c#L246-L263",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/video/fbdev/acornfb.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*******************************************************************************</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Generic video timings</span></span>\n<span class=\"line\"><span style=\"\">   ---------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Timings used by the frame buffer interface:</span></span>\n<span class=\"line\"><span style=\"\">   +----------+---------------------------------------------+----------+-------+</span></span>\n<span class=\"line\"><span style=\"\">   |          |                ^                            |          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          |                |upper_margin                |          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          |                v                            |          |       |</span></span>\n<span class=\"line\"><span style=\"\">   +----------###############################################----------+-------+</span></span>\n<span class=\"line\"><span style=\"\">   |          #                ^                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |   left   #                |                            #  right   | hsync |</span></span>\n<span class=\"line\"><span style=\"\">   |  margin  #                |       xres                 #  margin  |  len  |</span></span>\n<span class=\"line\"><span style=\"\">   |&#x3C;-------->#&#x3C;---------------+--------------------------->#&#x3C;-------->|&#x3C;----->|</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |yres                        #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                |                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          #                v                            #          |       |</span></span>\n<span class=\"line\"><span style=\"\">   +----------###############################################----------+-------+</span></span>\n<span class=\"line\"><span style=\"\">   |          |                ^                            |          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          |                |lower_margin                |          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          |                v                            |          |       |</span></span>\n<span class=\"line\"><span style=\"\">   +----------+---------------------------------------------+----------+-------+</span></span>\n<span class=\"line\"><span style=\"\">   |          |                ^                            |          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          |                |vsync_len                   |          |       |</span></span>\n<span class=\"line\"><span style=\"\">   |          |                v                            |          |       |</span></span>\n<span class=\"line\"><span style=\"\">   +----------+---------------------------------------------+----------+-------+</span></span>\n<span class=\"line\"><span style=\"\">   Amiga video timings</span></span>\n<span class=\"line\"><span style=\"\">   -------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   The Amiga native chipsets uses another timing scheme:</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      - hsstrt:   Start of horizontal synchronization pulse</span></span>\n<span class=\"line\"><span style=\"\">      - hsstop:   End of horizontal synchronization pulse</span></span>\n<span class=\"line\"><span style=\"\">      - htotal:   Last value on the line (i.e. line length = htotal + 1)</span></span>\n<span class=\"line\"><span style=\"\">      - vsstrt:   Start of vertical synchronization pulse</span></span>\n<span class=\"line\"><span style=\"\">      - vsstop:   End of vertical synchronization pulse</span></span>\n<span class=\"line\"><span style=\"\">      - vtotal:   Last line value (i.e. number of lines = vtotal + 1)</span></span>\n<span class=\"line\"><span style=\"\">      - hcenter:  Start of vertical retrace for interlace</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   You can specify the blanking timings independently. Currently I just set</span></span>\n<span class=\"line\"><span style=\"\">   them equal to the respective synchronization values:</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      - hbstrt:   Start of horizontal blank</span></span>\n<span class=\"line\"><span style=\"\">      - hbstop:   End of horizontal blank</span></span>\n<span class=\"line\"><span style=\"\">      - vbstrt:   Start of vertical blank</span></span>\n<span class=\"line\"><span style=\"\">      - vbstop:   End of vertical blank</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Horizontal values are in color clock cycles (280 ns), vertical values are in</span></span>\n<span class=\"line\"><span style=\"\">   scanlines.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   (0, 0) is somewhere in the upper-left corner :-)</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Amiga visible window definitions</span></span>\n<span class=\"line\"><span style=\"\">   --------------------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Currently I only have values for AGA, SHRES (28 MHz dotclock). Feel free to</span></span>\n<span class=\"line\"><span style=\"\">   make corrections and/or additions.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Within the above synchronization specifications, the visible window is</span></span>\n<span class=\"line\"><span style=\"\">   defined by the following parameters (actual register resolutions may be</span></span>\n<span class=\"line\"><span style=\"\">   different; all horizontal values are normalized with respect to the pixel</span></span>\n<span class=\"line\"><span style=\"\">   clock):</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      - diwstrt_h:   Horizontal start of the visible window</span></span>\n<span class=\"line\"><span style=\"\">      - diwstop_h:   Horizontal stop + 1(*) of the visible window</span></span>\n<span class=\"line\"><span style=\"\">      - diwstrt_v:   Vertical start of the visible window</span></span>\n<span class=\"line\"><span style=\"\">      - diwstop_v:   Vertical stop of the visible window</span></span>\n<span class=\"line\"><span style=\"\">      - ddfstrt:     Horizontal start of display DMA</span></span>\n<span class=\"line\"><span style=\"\">      - ddfstop:     Horizontal stop of display DMA</span></span>\n<span class=\"line\"><span style=\"\">      - hscroll:     Horizontal display output delay</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Sprite positioning:</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      - sprstrt_h:   Horizontal start - 4 of sprite</span></span>\n<span class=\"line\"><span style=\"\">      - sprstrt_v:   Vertical start of sprite</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   (*) Even Commodore did it wrong in the AGA monitor drivers by not adding 1.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Horizontal values are in dotclock cycles (35 ns), vertical values are in</span></span>\n<span class=\"line\"><span style=\"\">   scanlines.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   (0, 0) is somewhere in the upper-left corner :-)</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Dependencies (AGA, SHRES (35 ns dotclock))</span></span>\n<span class=\"line\"><span style=\"\">   -------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Since there are much more parameters for the Amiga display than for the</span></span>\n<span class=\"line\"><span style=\"\">   frame buffer interface, there must be some dependencies among the Amiga</span></span>\n<span class=\"line\"><span style=\"\">   display parameters. Here's what I found out:</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      - ddfstrt and ddfstop are best aligned to 64 pixels.</span></span>\n<span class=\"line\"><span style=\"\">      - the chipset needs 64 + 4 horizontal pixels after the DMA start before</span></span>\n<span class=\"line\"><span style=\"\">\tthe first pixel is output, so diwstrt_h = ddfstrt + 64 + 4 if you want</span></span>\n<span class=\"line\"><span style=\"\">\tto display the first pixel on the line too. Increase diwstrt_h for</span></span>\n<span class=\"line\"><span style=\"\">\tvirtual screen panning.</span></span>\n<span class=\"line\"><span style=\"\">      - the display DMA always fetches 64 pixels at a time (fmode = 3).</span></span>\n<span class=\"line\"><span style=\"\">      - ddfstop is ddfstrt+#pixels - 64.</span></span>\n<span class=\"line\"><span style=\"\">      - diwstop_h = diwstrt_h + xres + 1. Because of the additional 1 this can</span></span>\n<span class=\"line\"><span style=\"\">\tbe 1 more than htotal.</span></span>\n<span class=\"line\"><span style=\"\">      - hscroll simply adds a delay to the display output. Smooth horizontal</span></span>\n<span class=\"line\"><span style=\"\">\tpanning needs an extra 64 pixels on the left to prefetch the pixels that</span></span>\n<span class=\"line\"><span style=\"\">\t`fall off' on the left.</span></span>\n<span class=\"line\"><span style=\"\">      - if ddfstrt &#x3C; 192, the sprite DMA cycles are all stolen by the bitplane</span></span>\n<span class=\"line\"><span style=\"\">\tDMA, so it's best to make the DMA start as late as possible.</span></span>\n<span class=\"line\"><span style=\"\">      - you really don't want to make ddfstrt &#x3C; 128, since this will steal DMA</span></span>\n<span class=\"line\"><span style=\"\">\tcycles from the other DMA channels (audio, floppy and Chip RAM refresh).</span></span>\n<span class=\"line\"><span style=\"\">      - I make diwstop_h and diwstop_v as large as possible.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   General dependencies</span></span>\n<span class=\"line\"><span style=\"\">   --------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      - all values are SHRES pixel (35ns)</span></span>\n<span class=\"line\"><span style=\"\">\t\t  table 1:fetchstart  table 2:prefetch    table 3:fetchsize</span></span>\n<span class=\"line\"><span style=\"\">\t\t  ------------------  ----------------    -----------------</span></span>\n<span class=\"line\"><span style=\"\">   Pixclock     # SHRES|HIRES|LORES # SHRES|HIRES|LORES # SHRES|HIRES|LORES</span></span>\n<span class=\"line\"><span style=\"\">   -------------#------+-----+------#------+-----+------#------+-----+------</span></span>\n<span class=\"line\"><span style=\"\">   Bus width 1x #   16 |  32 |  64  #   16 |  32 |  64  #   64 |  64 |  64</span></span>\n<span class=\"line\"><span style=\"\">   Bus width 2x #   32 |  64 | 128  #   32 |  64 |  64  #   64 |  64 | 128</span></span>\n<span class=\"line\"><span style=\"\">   Bus width 4x #   64 | 128 | 256  #   64 |  64 |  64  #   64 | 128 | 256</span></span>\n<span class=\"line\"><span style=\"\">      - chipset needs 4 pixels before the first pixel is output</span></span>\n<span class=\"line\"><span style=\"\">      - ddfstrt must be aligned to fetchstart (table 1)</span></span>\n<span class=\"line\"><span style=\"\">      - chipset needs also prefetch (table 2) to get first pixel data, so</span></span>\n<span class=\"line\"><span style=\"\">\tddfstrt = ((diwstrt_h - 4) &#x26; -fetchstart) - prefetch</span></span>\n<span class=\"line\"><span style=\"\">      - for horizontal panning decrease diwstrt_h</span></span>\n<span class=\"line\"><span style=\"\">      - the length of a fetchline must be aligned to fetchsize (table 3)</span></span>\n<span class=\"line\"><span style=\"\">      - if fetchstart is smaller than fetchsize, then ddfstrt can a little bit</span></span>\n<span class=\"line\"><span style=\"\">\tmoved to optimize use of dma (useful for OCS/ECS overscan displays)</span></span>\n<span class=\"line\"><span style=\"\">      - ddfstop is ddfstrt + ddfsize - fetchsize</span></span>\n<span class=\"line\"><span style=\"\">      - If C= didn't change anything for AGA, then at following positions the</span></span>\n<span class=\"line\"><span style=\"\">\tdma bus is already used:</span></span>\n<span class=\"line\"><span style=\"\">\tddfstrt &#x3C;  48 -> memory refresh</span></span>\n<span class=\"line\"><span style=\"\">\t\t&#x3C;  96 -> disk dma</span></span>\n<span class=\"line\"><span style=\"\">\t\t&#x3C; 160 -> audio dma</span></span>\n<span class=\"line\"><span style=\"\">\t\t&#x3C; 192 -> sprite 0 dma</span></span>\n<span class=\"line\"><span style=\"\">\t\t&#x3C; 416 -> sprite dma (32 per sprite)</span></span>\n<span class=\"line\"><span style=\"\">      - in accordance with the hardware reference manual a hardware stop is at</span></span>\n<span class=\"line\"><span style=\"\">\t192, but AGA (ECS?) can go below this.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   DMA priorities</span></span>\n<span class=\"line\"><span style=\"\">   --------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Since there are limits on the earliest start value for display DMA and the</span></span>\n<span class=\"line\"><span style=\"\">   display of sprites, I use the following policy on horizontal panning and</span></span>\n<span class=\"line\"><span style=\"\">   the hardware cursor:</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      - if you want to start display DMA too early, you lose the ability to</span></span>\n<span class=\"line\"><span style=\"\">\tdo smooth horizontal panning (xpanstep 1 -> 64).</span></span>\n<span class=\"line\"><span style=\"\">      - if you want to go even further, you lose the hardware cursor too.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   IMHO a hardware cursor is more important for X than horizontal scrolling,</span></span>\n<span class=\"line\"><span style=\"\">   so that's my motivation.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Implementation</span></span>\n<span class=\"line\"><span style=\"\">   --------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   ami_decode_var() converts the frame buffer values to the Amiga values. It's</span></span>\n<span class=\"line\"><span style=\"\">   just a `straightforward' implementation of the above rules.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Standard VGA timings</span></span>\n<span class=\"line\"><span style=\"\">   --------------------</span></span>\n<span class=\"line\"><span style=\"\">\t       xres  yres    left  right  upper  lower    hsync    vsync</span></span>\n<span class=\"line\"><span style=\"\">\t       ----  ----    ----  -----  -----  -----    -----    -----</span></span>\n<span class=\"line\"><span style=\"\">      80x25     720   400      27     45     35     12      108        2</span></span>\n<span class=\"line\"><span style=\"\">      80x30     720   480      27     45     30      9      108        2</span></span>\n<span class=\"line\"><span style=\"\">   These were taken from a XFree86 configuration file, recalculated for a 28 MHz</span></span>\n<span class=\"line\"><span style=\"\">   dotclock (Amigas don't have a 25 MHz dotclock) and converted to frame buffer</span></span>\n<span class=\"line\"><span style=\"\">   generic timings.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   As a comparison, graphics/monitor.h suggests the following:</span></span>\n<span class=\"line\"><span style=\"\">\t       xres  yres    left  right  upper  lower    hsync    vsync</span></span>\n<span class=\"line\"><span style=\"\">\t       ----  ----    ----  -----  -----  -----    -----    -----</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      VGA       640   480      52    112     24     19    112 -      2 +</span></span>\n<span class=\"line\"><span style=\"\">      VGA70     640   400      52    112     27     21    112 -      2 -</span></span>\n<span class=\"line\"><span style=\"\">   Sync polarities</span></span>\n<span class=\"line\"><span style=\"\">   ---------------</span></span>\n<span class=\"line\"><span style=\"\">      VSYNC    HSYNC    Vertical size    Vertical total</span></span>\n<span class=\"line\"><span style=\"\">      -----    -----    -------------    --------------</span></span>\n<span class=\"line\"><span style=\"\">\t+        +           Reserved          Reserved</span></span>\n<span class=\"line\"><span style=\"\">\t+        -                400               414</span></span>\n<span class=\"line\"><span style=\"\">\t-        +                350               362</span></span>\n<span class=\"line\"><span style=\"\">\t-        -                480               496</span></span>\n<span class=\"line\"><span style=\"\">   Source: CL-GD542X Technical Reference Manual, Cirrus Logic, Oct 1992</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Broadcast video timings</span></span>\n<span class=\"line\"><span style=\"\">   -----------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   According to the CCIR and RETMA specifications, we have the following values:</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   CCIR -> PAL</span></span>\n<span class=\"line\"><span style=\"\">   -----------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      - a scanline is 64 µs long, of which 52.48 µs are visible. This is about</span></span>\n<span class=\"line\"><span style=\"\">\t736 visible 70 ns pixels per line.</span></span>\n<span class=\"line\"><span style=\"\">      - we have 625 scanlines, of which 575 are visible (interlaced); after</span></span>\n<span class=\"line\"><span style=\"\">\trounding this becomes 576.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   RETMA -> NTSC</span></span>\n<span class=\"line\"><span style=\"\">   -------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      - a scanline is 63.5 µs long, of which 53.5 µs are visible.  This is about</span></span>\n<span class=\"line\"><span style=\"\">\t736 visible 70 ns pixels per line.</span></span>\n<span class=\"line\"><span style=\"\">      - we have 525 scanlines, of which 485 are visible (interlaced); after</span></span>\n<span class=\"line\"><span style=\"\">\trounding this becomes 484.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Thus if you want a PAL compatible display, you have to do the following:</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">      - set the FB_SYNC_BROADCAST flag to indicate that standard broadcast</span></span>\n<span class=\"line\"><span style=\"\">\ttimings are to be used.</span></span>\n<span class=\"line\"><span style=\"\">      - make sure upper_margin + yres + lower_margin + vsync_len = 625 for an</span></span>\n<span class=\"line\"><span style=\"\">\tinterlaced, 312 for a non-interlaced and 156 for a doublescanned</span></span>\n<span class=\"line\"><span style=\"\">\tdisplay.</span></span>\n<span class=\"line\"><span style=\"\">      - make sure left_margin + xres + right_margin + hsync_len = 1816 for a</span></span>\n<span class=\"line\"><span style=\"\">\tSHRES, 908 for a HIRES and 454 for a LORES display.</span></span>\n<span class=\"line\"><span style=\"\">      - the left visible part begins at 360 (SHRES; HIRES:180, LORES:90),</span></span>\n<span class=\"line\"><span style=\"\">\tleft_margin + 2 * hsync_len must be greater or equal.</span></span>\n<span class=\"line\"><span style=\"\">      - the upper visible part begins at 48 (interlaced; non-interlaced:24,</span></span>\n<span class=\"line\"><span style=\"\">\tdoublescanned:12), upper_margin + 2 * vsync_len must be greater or</span></span>\n<span class=\"line\"><span style=\"\">\tequal.</span></span>\n<span class=\"line\"><span style=\"\">      - ami_encode_var() calculates margins with a hsync of 5320 ns and a vsync</span></span>\n<span class=\"line\"><span style=\"\">\tof 4 scanlines</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   The settings for a NTSC compatible display are straightforward.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Note that in a strict sense the PAL and NTSC standards only define the</span></span>\n<span class=\"line\"><span style=\"\">   encoding of the color part (chrominance) of the video signal and don't say</span></span>\n<span class=\"line\"><span style=\"\">   anything about horizontal/vertical synchronization nor refresh rates.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">\t\t\t\t\t\t\t    -- Geert --</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">*******************************************************************************/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/amifb.c#L103-L366",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/video/fbdev/amifb.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Calculate the PCD value from the clock rate (in picoseconds).</span></span>\n<span class=\"line\"><span style=\"\"> * We take account of the PPCR clock setting.</span></span>\n<span class=\"line\"><span style=\"\"> * From PXA Developer's Manual:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   PixelClock =      LCLK</span></span>\n<span class=\"line\"><span style=\"\"> *                -------------</span></span>\n<span class=\"line\"><span style=\"\"> *                2 ( PCD + 1 )</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   PCD =      LCLK</span></span>\n<span class=\"line\"><span style=\"\"> *         ------------- - 1</span></span>\n<span class=\"line\"><span style=\"\"> *         2(PixelClock)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Where:</span></span>\n<span class=\"line\"><span style=\"\"> *   LCLK = LCD/Memory Clock</span></span>\n<span class=\"line\"><span style=\"\"> *   PCD = LCCR3[7:0]</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * PixelClock here is in Hz while the pixclock argument given is the</span></span>\n<span class=\"line\"><span style=\"\"> * period in picoseconds. Hence PixelClock = 1 / ( pixclock * 10^-12 )</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The function get_lclk_frequency_10khz returns LCLK in units of</span></span>\n<span class=\"line\"><span style=\"\"> * 10khz. Calling the result of this function lclk gives us the</span></span>\n<span class=\"line\"><span style=\"\"> * following</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    PCD = (lclk * 10^4 ) * ( pixclock * 10^-12 )</span></span>\n<span class=\"line\"><span style=\"\"> *          -------------------------------------- - 1</span></span>\n<span class=\"line\"><span style=\"\"> *                          2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Factoring the 10^4 and 10^-12 out gives 10^-8 == 1 / 100000000 as used below.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/pxafb.c#L988-L1017",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/video/fbdev/pxafb.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * The hardware cursor definition requires 2 bits per pixel. The</span></span>\n<span class=\"line\"><span style=\"\"> * Cursor size reguardless of the visible cursor size is 64 pixels</span></span>\n<span class=\"line\"><span style=\"\"> * by 64 lines. The total memory required to define the cursor is</span></span>\n<span class=\"line\"><span style=\"\"> * 16 bytes / line for 64 lines or 1024 bytes of data. The data</span></span>\n<span class=\"line\"><span style=\"\"> * must be in a contigiuos format. The 2 bit cursor code values are</span></span>\n<span class=\"line\"><span style=\"\"> * as follows:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t00 - pixel colour = CURSOR_CLR_0</span></span>\n<span class=\"line\"><span style=\"\"> *\t01 - pixel colour = CURSOR_CLR_1</span></span>\n<span class=\"line\"><span style=\"\"> *\t10 - pixel colour = transparent (current display pixel)</span></span>\n<span class=\"line\"><span style=\"\"> *\t11 - pixel colour = 1's complement of current display pixel</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tCursor Offset        64 pixels\t\t Actual Displayed Area</span></span>\n<span class=\"line\"><span style=\"\"> *            \\_________________________/</span></span>\n<span class=\"line\"><span style=\"\"> *\t      |\t\t\t|\t|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t      |&#x3C;--------------->|\t|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t      | CURS_HORZ_OFFSET|\t|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t      |\t\t\t|_______|\t|  64 Lines</span></span>\n<span class=\"line\"><span style=\"\"> *\t      |\t\t\t   ^\t|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t      |\t\t\t   |\t|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t      |\t\tCURS_VERT_OFFSET|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t      |\t\t\t   |\t|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t      |____________________|____|\t|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The Screen position of the top left corner of the displayed</span></span>\n<span class=\"line\"><span style=\"\"> * cursor is specificed by CURS_HORZ_VERT_POSN. Care must be taken</span></span>\n<span class=\"line\"><span style=\"\"> * when the cursor hot spot is not the top left corner and the</span></span>\n<span class=\"line\"><span style=\"\"> * physical cursor position becomes negative. It will be displayed</span></span>\n<span class=\"line\"><span style=\"\"> * if either the horizontal or vertical cursor position is negative</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If x becomes negative the cursor manager must adjust the CURS_HORZ_OFFSET</span></span>\n<span class=\"line\"><span style=\"\"> * to a larger number and saturate CUR_HORZ_POSN to zero.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * if Y becomes negative, CUR_VERT_OFFSET must be adjusted to a larger number,</span></span>\n<span class=\"line\"><span style=\"\"> * CUR_OFFSET must be adjusted to a point to the appropriate line in the cursor</span></span>\n<span class=\"line\"><span style=\"\"> * definitation and CUR_VERT_POSN must be saturated to zero.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/aty/mach64_cursor.c#L20-L58",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/video/fbdev/aty/mach64_cursor.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * fb_get_hblank_by_dclk - get horizontal blank time given pixelclock</span></span>\n<span class=\"line\"><span style=\"\"> * @dclk: pixelclock in Hz</span></span>\n<span class=\"line\"><span style=\"\"> * @xres: horizontal resolution in pixels</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * DESCRIPTION:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *           xres * duty_cycle</span></span>\n<span class=\"line\"><span style=\"\"> * hblank = ------------------</span></span>\n<span class=\"line\"><span style=\"\"> *           100 - duty_cycle</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * duty cycle = percent of htotal assigned to inactive display</span></span>\n<span class=\"line\"><span style=\"\"> * duty cycle = C - (M * h_period)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * where: h_period = SQRT(100 - C + (0.4 * xres * M)/dclk) + C - 100</span></span>\n<span class=\"line\"><span style=\"\"> *                   -----------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *                                    2 * M</span></span>\n<span class=\"line\"><span style=\"\"> *        M = 300;</span></span>\n<span class=\"line\"><span style=\"\"> *        C = 30;</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/core/fbmon.c#L1085-L1104",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": true
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/drivers/video/fbdev/core/fbmon.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * We have 4 levels of cache for the dispc settings. First two are in SW and</span></span>\n<span class=\"line\"><span style=\"\"> * the latter two in HW.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *       set_info()</span></span>\n<span class=\"line\"><span style=\"\"> *          v</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |     user_info      |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *          v</span></span>\n<span class=\"line\"><span style=\"\"> *        apply()</span></span>\n<span class=\"line\"><span style=\"\"> *          v</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |       info         |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *          v</span></span>\n<span class=\"line\"><span style=\"\"> *      write_regs()</span></span>\n<span class=\"line\"><span style=\"\"> *          v</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |  shadow registers  |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *          v</span></span>\n<span class=\"line\"><span style=\"\"> * VFP or lcd/digit_enable</span></span>\n<span class=\"line\"><span style=\"\"> *          v</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * |      registers     |</span></span>\n<span class=\"line\"><span style=\"\"> * +--------------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/drivers/video/fbdev/omap2/omapfb/dss/apply.c#L21-L48",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/drivers/video/fbdev/omap2/omapfb/dss/apply.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Queue all expired dirty inodes for io, eldest first.</span></span>\n<span class=\"line\"><span style=\"\"> * Before</span></span>\n<span class=\"line\"><span style=\"\"> *         newly dirtied     b_dirty    b_io    b_more_io</span></span>\n<span class=\"line\"><span style=\"\"> *         =============>    gf         edc     BA</span></span>\n<span class=\"line\"><span style=\"\"> * After</span></span>\n<span class=\"line\"><span style=\"\"> *         newly dirtied     b_dirty    b_io    b_more_io</span></span>\n<span class=\"line\"><span style=\"\"> *         =============>    g          fBAedc</span></span>\n<span class=\"line\"><span style=\"\"> *                                           |</span></span>\n<span class=\"line\"><span style=\"\"> *                                           +--> dequeue for IO</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/fs-writeback.c#L1416-L1426",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/fs-writeback.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Check key order of two sibling extent buffers.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Return true if something is wrong.</span></span>\n<span class=\"line\"><span style=\"\"> * Return false if everything is fine.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Tree-checker only works inside one tree block, thus the following</span></span>\n<span class=\"line\"><span style=\"\"> * corruption can not be detected by tree-checker:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Leaf @left\t\t\t| Leaf @right</span></span>\n<span class=\"line\"><span style=\"\"> * --------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> * | 1 | 2 | 3 | 4 | 5 | f6 |   | 7 | 8 |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Key f6 in leaf @left itself is valid, but not valid when the next</span></span>\n<span class=\"line\"><span style=\"\"> * key in leaf @right is 7.</span></span>\n<span class=\"line\"><span style=\"\"> * This can only be checked at tree block merge time.</span></span>\n<span class=\"line\"><span style=\"\"> * And since tree checker has ensured all key order in each tree block</span></span>\n<span class=\"line\"><span style=\"\"> * is correct, we only need to bother the last key of @left and the first</span></span>\n<span class=\"line\"><span style=\"\"> * key of @right.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/btrfs/ctree.c#L2596-L2615",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/btrfs/ctree.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Helper function to trace a subtree tree block swap.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The swap will happen in highest tree block, but there may be a lot of</span></span>\n<span class=\"line\"><span style=\"\"> * tree blocks involved.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For example:</span></span>\n<span class=\"line\"><span style=\"\"> *  OO = Old tree blocks</span></span>\n<span class=\"line\"><span style=\"\"> *  NN = New tree blocks allocated during balance</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *           File tree (257)                  Reloc tree for 257</span></span>\n<span class=\"line\"><span style=\"\"> * L2              OO                                NN</span></span>\n<span class=\"line\"><span style=\"\"> *               /    \\                            /    \\</span></span>\n<span class=\"line\"><span style=\"\"> * L1          OO      OO (a)                    OO      NN (a)</span></span>\n<span class=\"line\"><span style=\"\"> *            / \\     / \\                       / \\     / \\</span></span>\n<span class=\"line\"><span style=\"\"> * L0       OO   OO OO   OO                   OO   OO NN   NN</span></span>\n<span class=\"line\"><span style=\"\"> *                  (b)  (c)                          (b)  (c)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When calling qgroup_trace_extent_swap(), we will pass:</span></span>\n<span class=\"line\"><span style=\"\"> * @src_eb = OO(a)</span></span>\n<span class=\"line\"><span style=\"\"> * @dst_path = [ nodes[1] = NN(a), nodes[0] = NN(c) ]</span></span>\n<span class=\"line\"><span style=\"\"> * @dst_level = 0</span></span>\n<span class=\"line\"><span style=\"\"> * @root_level = 1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In that case, qgroup_trace_extent_swap() will search from OO(a) to</span></span>\n<span class=\"line\"><span style=\"\"> * reach OO(c), then mark both OO(c) and NN(c) as qgroup dirty.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The main work of qgroup_trace_extent_swap() can be split into 3 parts:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 1) Tree search from @src_eb</span></span>\n<span class=\"line\"><span style=\"\"> *    It should acts as a simplified btrfs_search_slot().</span></span>\n<span class=\"line\"><span style=\"\"> *    The key for search can be extracted from @dst_path->nodes[dst_level]</span></span>\n<span class=\"line\"><span style=\"\"> *    (first key).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 2) Mark the final tree blocks in @src_path and @dst_path qgroup dirty</span></span>\n<span class=\"line\"><span style=\"\"> *    NOTE: In above case, OO(a) and NN(a) won't be marked qgroup dirty.</span></span>\n<span class=\"line\"><span style=\"\"> *    They should be marked during previous (@dst_level = 1) iteration.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 3) Mark file extents in leaves dirty</span></span>\n<span class=\"line\"><span style=\"\"> *    We don't have good way to pick out new file extents only.</span></span>\n<span class=\"line\"><span style=\"\"> *    So we still follow the old method by scanning all file extents in</span></span>\n<span class=\"line\"><span style=\"\"> *    the leave.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This function can free us from keeping two paths, thus later we only need</span></span>\n<span class=\"line\"><span style=\"\"> * to care about how to iterate all new tree blocks in reloc tree.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/btrfs/qgroup.c#L1980-L2025",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/btrfs/qgroup.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * (flags &#x26; SVE_PT_REGS_MASK) == SVE_PT_REGS_SVE case:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The payload starts at offset SVE_PT_SVE_OFFSET, and is of size</span></span>\n<span class=\"line\"><span style=\"\"> * SVE_PT_SVE_SIZE(vq, flags).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Additional macros describe the contents and layout of the payload.</span></span>\n<span class=\"line\"><span style=\"\"> * For each, SVE_PT_SVE_x_OFFSET(args) is the start offset relative to</span></span>\n<span class=\"line\"><span style=\"\"> * the start of struct user_sve_header, and SVE_PT_SVE_x_SIZE(args) is</span></span>\n<span class=\"line\"><span style=\"\"> * the size in bytes:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tx\ttype\t\t\t\tdescription</span></span>\n<span class=\"line\"><span style=\"\"> *\t-\t----\t\t\t\t-----------</span></span>\n<span class=\"line\"><span style=\"\"> *\tZREGS\t\t\\</span></span>\n<span class=\"line\"><span style=\"\"> *\tZREG\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\tPREGS\t\t| refer to &#x3C;asm/sigcontext.h></span></span>\n<span class=\"line\"><span style=\"\"> *\tPREG\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\tFFR\t\t/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tFPSR\tuint32_t\t\t\tFPSR</span></span>\n<span class=\"line\"><span style=\"\"> *\tFPCR\tuint32_t\t\t\tFPCR</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Additional data might be appended in the future.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The Z-, P- and FFR registers are represented in memory in an endianness-</span></span>\n<span class=\"line\"><span style=\"\"> * invariant layout which differs from the layout used for the FPSIMD</span></span>\n<span class=\"line\"><span style=\"\"> * V-registers on big-endian systems: see sigcontext.h for more explanation.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm64/include/uapi/asm/ptrace.h#L171-L198",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm64/include/uapi/asm/ptrace.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Transaction states and transitions</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * No running transaction (fs tree blocks are not modified)</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | To next stage:</span></span>\n<span class=\"line\"><span style=\"\"> * |  Call start_transaction() variants. Except btrfs_join_transaction_nostart().</span></span>\n<span class=\"line\"><span style=\"\"> * V</span></span>\n<span class=\"line\"><span style=\"\"> * Transaction N [[TRANS_STATE_RUNNING]]</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | New trans handles can be attached to transaction N by calling all</span></span>\n<span class=\"line\"><span style=\"\"> * | start_transaction() variants.</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | To next stage:</span></span>\n<span class=\"line\"><span style=\"\"> * |  Call btrfs_commit_transaction() on any trans handle attached to</span></span>\n<span class=\"line\"><span style=\"\"> * |  transaction N</span></span>\n<span class=\"line\"><span style=\"\"> * V</span></span>\n<span class=\"line\"><span style=\"\"> * Transaction N [[TRANS_STATE_COMMIT_START]]</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | Will wait for previous running transaction to completely finish if there</span></span>\n<span class=\"line\"><span style=\"\"> * | is one</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | Then one of the following happes:</span></span>\n<span class=\"line\"><span style=\"\"> * | - Wait for all other trans handle holders to release.</span></span>\n<span class=\"line\"><span style=\"\"> * |   The btrfs_commit_transaction() caller will do the commit work.</span></span>\n<span class=\"line\"><span style=\"\"> * | - Wait for current transaction to be committed by others.</span></span>\n<span class=\"line\"><span style=\"\"> * |   Other btrfs_commit_transaction() caller will do the commit work.</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | At this stage, only btrfs_join_transaction*() variants can attach</span></span>\n<span class=\"line\"><span style=\"\"> * | to this running transaction.</span></span>\n<span class=\"line\"><span style=\"\"> * | All other variants will wait for current one to finish and attach to</span></span>\n<span class=\"line\"><span style=\"\"> * | transaction N+1.</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | To next stage:</span></span>\n<span class=\"line\"><span style=\"\"> * |  Caller is chosen to commit transaction N, and all other trans handle</span></span>\n<span class=\"line\"><span style=\"\"> * |  haven been released.</span></span>\n<span class=\"line\"><span style=\"\"> * V</span></span>\n<span class=\"line\"><span style=\"\"> * Transaction N [[TRANS_STATE_COMMIT_DOING]]</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | The heavy lifting transaction work is started.</span></span>\n<span class=\"line\"><span style=\"\"> * | From running delayed refs (modifying extent tree) to creating pending</span></span>\n<span class=\"line\"><span style=\"\"> * | snapshots, running qgroups.</span></span>\n<span class=\"line\"><span style=\"\"> * | In short, modify supporting trees to reflect modifications of subvolume</span></span>\n<span class=\"line\"><span style=\"\"> * | trees.</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | At this stage, all start_transaction() calls will wait for this</span></span>\n<span class=\"line\"><span style=\"\"> * | transaction to finish and attach to transaction N+1.</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | To next stage:</span></span>\n<span class=\"line\"><span style=\"\"> * |  Until all supporting trees are updated.</span></span>\n<span class=\"line\"><span style=\"\"> * V</span></span>\n<span class=\"line\"><span style=\"\"> * Transaction N [[TRANS_STATE_UNBLOCKED]]</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t\t\t\t\t    Transaction N+1</span></span>\n<span class=\"line\"><span style=\"\"> * | All needed trees are modified, thus we only    [[TRANS_STATE_RUNNING]]</span></span>\n<span class=\"line\"><span style=\"\"> * | need to write them back to disk and update\t    |</span></span>\n<span class=\"line\"><span style=\"\"> * | super blocks.\t\t\t\t    |</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t\t\t\t\t    |</span></span>\n<span class=\"line\"><span style=\"\"> * | At this stage, new transaction is allowed to   |</span></span>\n<span class=\"line\"><span style=\"\"> * | start.\t\t\t\t\t    |</span></span>\n<span class=\"line\"><span style=\"\"> * | All new start_transaction() calls will be\t    |</span></span>\n<span class=\"line\"><span style=\"\"> * | attached to transid N+1.\t\t\t    |</span></span>\n<span class=\"line\"><span style=\"\"> * |\t\t\t\t\t\t    |</span></span>\n<span class=\"line\"><span style=\"\"> * | To next stage:\t\t\t\t    |</span></span>\n<span class=\"line\"><span style=\"\"> * |  Until all tree blocks are super blocks are    |</span></span>\n<span class=\"line\"><span style=\"\"> * |  written to block devices\t\t\t    |</span></span>\n<span class=\"line\"><span style=\"\"> * V\t\t\t\t\t\t    |</span></span>\n<span class=\"line\"><span style=\"\"> * Transaction N [[TRANS_STATE_COMPLETED]]\t    V</span></span>\n<span class=\"line\"><span style=\"\"> *   All tree blocks and super blocks are written.  Transaction N+1</span></span>\n<span class=\"line\"><span style=\"\"> *   This transaction is finished and all its\t    [[TRANS_STATE_COMMIT_START]]</span></span>\n<span class=\"line\"><span style=\"\"> *   data structures will be cleaned up.\t    | Life goes on</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/btrfs/transaction.c#L42-L112",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/btrfs/transaction.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Test scenario:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Suppose that no extent map has been loaded into memory yet, there is a file</span></span>\n<span class=\"line\"><span style=\"\"> * extent [0, 16K), followed by another file extent [16K, 20K), two dio reads</span></span>\n<span class=\"line\"><span style=\"\"> * are entering btrfs_get_extent() concurrently, t1 is reading [8K, 16K), t2 is</span></span>\n<span class=\"line\"><span style=\"\"> * reading [0, 8K)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     t1                            t2</span></span>\n<span class=\"line\"><span style=\"\"> *  btrfs_get_extent()              btrfs_get_extent()</span></span>\n<span class=\"line\"><span style=\"\"> *    -> lookup_extent_mapping()      ->lookup_extent_mapping()</span></span>\n<span class=\"line\"><span style=\"\"> *    -> add_extent_mapping(0, 16K)</span></span>\n<span class=\"line\"><span style=\"\"> *    -> return em</span></span>\n<span class=\"line\"><span style=\"\"> *                                    ->add_extent_mapping(0, 16K)</span></span>\n<span class=\"line\"><span style=\"\"> *                                    -> #handle -EEXIST</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/btrfs/tests/extent-map-tests.c#L39-L54",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/fs/btrfs/tests/extent-map-tests.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * midcomms.c</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This is the appallingly named \"mid-level\" comms layer. It takes care about</span></span>\n<span class=\"line\"><span style=\"\"> * deliver an on application layer \"reliable\" communication above the used</span></span>\n<span class=\"line\"><span style=\"\"> * lowcomms transport layer.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * How it works:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each nodes keeps track of all send DLM messages in send_queue with a sequence</span></span>\n<span class=\"line\"><span style=\"\"> * number. The receive will send an DLM_ACK message back for every DLM message</span></span>\n<span class=\"line\"><span style=\"\"> * received at the other side. If a reconnect happens in lowcomms we will send</span></span>\n<span class=\"line\"><span style=\"\"> * all unacknowledged dlm messages again. The receiving side might drop any already</span></span>\n<span class=\"line\"><span style=\"\"> * received message by comparing sequence numbers.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * How version detection works:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Due the fact that dlm has pre-configured node addresses on every side</span></span>\n<span class=\"line\"><span style=\"\"> * it is in it's nature that every side connects at starts to transmit</span></span>\n<span class=\"line\"><span style=\"\"> * dlm messages which ends in a race. However DLM_RCOM_NAMES, DLM_RCOM_STATUS</span></span>\n<span class=\"line\"><span style=\"\"> * and their replies are the first messages which are exchanges. Due backwards</span></span>\n<span class=\"line\"><span style=\"\"> * compatibility these messages are not covered by the midcomms re-transmission</span></span>\n<span class=\"line\"><span style=\"\"> * layer. These messages have their own re-transmission handling in the dlm</span></span>\n<span class=\"line\"><span style=\"\"> * application layer. The version field of every node will be set on these RCOM</span></span>\n<span class=\"line\"><span style=\"\"> * messages as soon as they arrived and the node isn't yet part of the nodes</span></span>\n<span class=\"line\"><span style=\"\"> * hash. There exists also logic to detect version mismatched if something weird</span></span>\n<span class=\"line\"><span style=\"\"> * going on or the first messages isn't an expected one.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Termination:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The midcomms layer does a 4 way handshake for termination on DLM protocol</span></span>\n<span class=\"line\"><span style=\"\"> * like TCP supports it with half-closed socket support. SCTP doesn't support</span></span>\n<span class=\"line\"><span style=\"\"> * half-closed socket, so we do it on DLM layer. Also socket shutdown() can be</span></span>\n<span class=\"line\"><span style=\"\"> * interrupted by .e.g. tcp reset itself. Additional there exists the othercon</span></span>\n<span class=\"line\"><span style=\"\"> * paradigm in lowcomms which cannot be easily without breaking backwards</span></span>\n<span class=\"line\"><span style=\"\"> * compatibility. A node cannot send anything to another node when a DLM_FIN</span></span>\n<span class=\"line\"><span style=\"\"> * message was send. There exists additional logic to print a warning if</span></span>\n<span class=\"line\"><span style=\"\"> * DLM wants to do it. There exists a state handling like RFC 793 but reduced</span></span>\n<span class=\"line\"><span style=\"\"> * to termination only. The event \"member removal event\" describes the cluster</span></span>\n<span class=\"line\"><span style=\"\"> * manager removed the node from internal lists, at this point DLM does not</span></span>\n<span class=\"line\"><span style=\"\"> * send any message to the other node. There exists two cases:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 1. The cluster member was removed and we received a FIN</span></span>\n<span class=\"line\"><span style=\"\"> * OR</span></span>\n<span class=\"line\"><span style=\"\"> * 2. We received a FIN but the member was not removed yet</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * One of these cases will do the CLOSE_WAIT to LAST_ACK change.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                              +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *                              | CLOSED  |</span></span>\n<span class=\"line\"><span style=\"\"> *                              +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *                                   | add member/receive RCOM version</span></span>\n<span class=\"line\"><span style=\"\"> *                                   |            detection msg</span></span>\n<span class=\"line\"><span style=\"\"> *                                   V</span></span>\n<span class=\"line\"><span style=\"\"> *                              +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *                              |  ESTAB  |</span></span>\n<span class=\"line\"><span style=\"\"> *                              +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *                       CLOSE    |     |    rcv FIN</span></span>\n<span class=\"line\"><span style=\"\"> *                      -------   |     |    -------</span></span>\n<span class=\"line\"><span style=\"\"> * +---------+          snd FIN  /       \\   snd ACK          +---------+</span></span>\n<span class=\"line\"><span style=\"\"> * |  FIN    |&#x3C;-----------------           ------------------>|  CLOSE  |</span></span>\n<span class=\"line\"><span style=\"\"> * | WAIT-1  |------------------                              |   WAIT  |</span></span>\n<span class=\"line\"><span style=\"\"> * +---------+          rcv FIN  \\                            +---------+</span></span>\n<span class=\"line\"><span style=\"\"> * | rcv ACK of FIN   -------   |                            CLOSE  | member</span></span>\n<span class=\"line\"><span style=\"\"> * | --------------   snd ACK   |                           ------- | removal</span></span>\n<span class=\"line\"><span style=\"\"> * V        x                   V                           snd FIN V event</span></span>\n<span class=\"line\"><span style=\"\"> * +---------+                  +---------+                   +---------+</span></span>\n<span class=\"line\"><span style=\"\"> * |FINWAIT-2|                  | CLOSING |                   | LAST-ACK|</span></span>\n<span class=\"line\"><span style=\"\"> * +---------+                  +---------+                   +---------+</span></span>\n<span class=\"line\"><span style=\"\"> * |                rcv ACK of FIN |                 rcv ACK of FIN |</span></span>\n<span class=\"line\"><span style=\"\"> * |  rcv FIN       -------------- |                 -------------- |</span></span>\n<span class=\"line\"><span style=\"\"> * |  -------              x       V                        x       V</span></span>\n<span class=\"line\"><span style=\"\"> *  \\ snd ACK                 +---------+                   +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *   ------------------------>| CLOSED  |                   | CLOSED  |</span></span>\n<span class=\"line\"><span style=\"\"> *                            +---------+                   +---------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * NOTE: any state can interrupted by midcomms_close() and state will be</span></span>\n<span class=\"line\"><span style=\"\"> * switched to CLOSED in case of fencing. There exists also some timeout</span></span>\n<span class=\"line\"><span style=\"\"> * handling when we receive the version detection RCOM messages which is</span></span>\n<span class=\"line\"><span style=\"\"> * made by observation.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Future improvements:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There exists some known issues/improvements of the dlm handling. Some</span></span>\n<span class=\"line\"><span style=\"\"> * of them should be done in a next major dlm version bump which makes</span></span>\n<span class=\"line\"><span style=\"\"> * it incompatible with previous versions.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Unaligned memory access:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There exists cases when the dlm message buffer length is not aligned</span></span>\n<span class=\"line\"><span style=\"\"> * to 8 byte. However seems nobody detected any problem with it. This</span></span>\n<span class=\"line\"><span style=\"\"> * can be fixed in the next major version bump of dlm.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Version detection:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The version detection and how it's done is related to backwards</span></span>\n<span class=\"line\"><span style=\"\"> * compatibility. There exists better ways to make a better handling.</span></span>\n<span class=\"line\"><span style=\"\"> * However this should be changed in the next major version bump of dlm.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Tail Size checking:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There exists a message tail payload in e.g. DLM_MSG however we don't</span></span>\n<span class=\"line\"><span style=\"\"> * check it against the message length yet regarding to the receive buffer</span></span>\n<span class=\"line\"><span style=\"\"> * length. That need to be validated.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Fencing bad nodes:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At timeout places or weird sequence number behaviours we should send</span></span>\n<span class=\"line\"><span style=\"\"> * a fencing request to the cluster manager.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/dlm/midcomms.c#L12-L122",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/dlm/midcomms.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * inline xattrs (n == i_xattr_icount):</span></span>\n<span class=\"line\"><span style=\"\"> * erofs_xattr_ibody_header(1) + (n - 1) * 4 bytes</span></span>\n<span class=\"line\"><span style=\"\"> *          12 bytes           /                   \\</span></span>\n<span class=\"line\"><span style=\"\"> *                            /                     \\</span></span>\n<span class=\"line\"><span style=\"\"> *                           /-----------------------\\</span></span>\n<span class=\"line\"><span style=\"\"> *                           |  erofs_xattr_entries+ |</span></span>\n<span class=\"line\"><span style=\"\"> *                           +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> * inline xattrs must starts in erofs_xattr_ibody_header,</span></span>\n<span class=\"line\"><span style=\"\"> * for read-only fs, no need to introduce h_refcount</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/erofs/erofs_fs.h#L205-L215",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/erofs/erofs_fs.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Ext4 Fast Commits</span></span>\n<span class=\"line\"><span style=\"\"> * -----------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Ext4 fast commits implement fine grained journalling for Ext4.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Fast commits are organized as a log of tag-length-value (TLV) structs. (See</span></span>\n<span class=\"line\"><span style=\"\"> * struct ext4_fc_tl). Each TLV contains some delta that is replayed TLV by</span></span>\n<span class=\"line\"><span style=\"\"> * TLV during the recovery phase. For the scenarios for which we currently</span></span>\n<span class=\"line\"><span style=\"\"> * don't have replay code, fast commit falls back to full commits.</span></span>\n<span class=\"line\"><span style=\"\"> * Fast commits record delta in one of the following three categories.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (A) Directory entry updates:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - EXT4_FC_TAG_UNLINK\t\t- records directory entry unlink</span></span>\n<span class=\"line\"><span style=\"\"> * - EXT4_FC_TAG_LINK\t\t- records directory entry link</span></span>\n<span class=\"line\"><span style=\"\"> * - EXT4_FC_TAG_CREAT\t\t- records inode and directory entry creation</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (B) File specific data range updates:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - EXT4_FC_TAG_ADD_RANGE\t- records addition of new blocks to an inode</span></span>\n<span class=\"line\"><span style=\"\"> * - EXT4_FC_TAG_DEL_RANGE\t- records deletion of blocks from an inode</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (C) Inode metadata (mtime / ctime etc):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - EXT4_FC_TAG_INODE\t\t- record the inode that should be replayed</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t  during recovery. Note that iblocks field is</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t  not replayed and instead derived during</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t  replay.</span></span>\n<span class=\"line\"><span style=\"\"> * Commit Operation</span></span>\n<span class=\"line\"><span style=\"\"> * ----------------</span></span>\n<span class=\"line\"><span style=\"\"> * With fast commits, we maintain all the directory entry operations in the</span></span>\n<span class=\"line\"><span style=\"\"> * order in which they are issued in an in-memory queue. This queue is flushed</span></span>\n<span class=\"line\"><span style=\"\"> * to disk during the commit operation. We also maintain a list of inodes</span></span>\n<span class=\"line\"><span style=\"\"> * that need to be committed during a fast commit in another in memory queue of</span></span>\n<span class=\"line\"><span style=\"\"> * inodes. During the commit operation, we commit in the following order:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * [1] Lock inodes for any further data updates by setting COMMITTING state</span></span>\n<span class=\"line\"><span style=\"\"> * [2] Submit data buffers of all the inodes</span></span>\n<span class=\"line\"><span style=\"\"> * [3] Wait for [2] to complete</span></span>\n<span class=\"line\"><span style=\"\"> * [4] Commit all the directory entry updates in the fast commit space</span></span>\n<span class=\"line\"><span style=\"\"> * [5] Commit all the changed inode structures</span></span>\n<span class=\"line\"><span style=\"\"> * [6] Write tail tag (this tag ensures the atomicity, please read the following</span></span>\n<span class=\"line\"><span style=\"\"> *     section for more details).</span></span>\n<span class=\"line\"><span style=\"\"> * [7] Wait for [4], [5] and [6] to complete.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * All the inode updates must call ext4_fc_start_update() before starting an</span></span>\n<span class=\"line\"><span style=\"\"> * update. If such an ongoing update is present, fast commit waits for it to</span></span>\n<span class=\"line\"><span style=\"\"> * complete. The completion of such an update is marked by</span></span>\n<span class=\"line\"><span style=\"\"> * ext4_fc_stop_update().</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Fast Commit Ineligibility</span></span>\n<span class=\"line\"><span style=\"\"> * -------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Not all operations are supported by fast commits today (e.g extended</span></span>\n<span class=\"line\"><span style=\"\"> * attributes). Fast commit ineligibility is marked by calling</span></span>\n<span class=\"line\"><span style=\"\"> * ext4_fc_mark_ineligible(): This makes next fast commit operation to fall back</span></span>\n<span class=\"line\"><span style=\"\"> * to full commit.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Atomicity of commits</span></span>\n<span class=\"line\"><span style=\"\"> * --------------------</span></span>\n<span class=\"line\"><span style=\"\"> * In order to guarantee atomicity during the commit operation, fast commit</span></span>\n<span class=\"line\"><span style=\"\"> * uses \"EXT4_FC_TAG_TAIL\" tag that marks a fast commit as complete. Tail</span></span>\n<span class=\"line\"><span style=\"\"> * tag contains CRC of the contents and TID of the transaction after which</span></span>\n<span class=\"line\"><span style=\"\"> * this fast commit should be applied. Recovery code replays fast commit</span></span>\n<span class=\"line\"><span style=\"\"> * logs only if there's at least 1 valid tail present. For every fast commit</span></span>\n<span class=\"line\"><span style=\"\"> * operation, there is 1 tail. This means, we may end up with multiple tails</span></span>\n<span class=\"line\"><span style=\"\"> * in the fast commit space. Here's an example:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - Create a new file A and remove existing file B</span></span>\n<span class=\"line\"><span style=\"\"> * - fsync()</span></span>\n<span class=\"line\"><span style=\"\"> * - Append contents to file A</span></span>\n<span class=\"line\"><span style=\"\"> * - Truncate file A</span></span>\n<span class=\"line\"><span style=\"\"> * - fsync()</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The fast commit space at the end of above operations would look like this:</span></span>\n<span class=\"line\"><span style=\"\"> *      [HEAD] [CREAT A] [UNLINK B] [TAIL] [ADD_RANGE A] [DEL_RANGE A] [TAIL]</span></span>\n<span class=\"line\"><span style=\"\"> *             |&#x3C;---  Fast Commit 1   --->|&#x3C;---      Fast Commit 2     ---->|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Replay code should thus check for all the valid tails in the FC area.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Fast Commit Replay Idempotence</span></span>\n<span class=\"line\"><span style=\"\"> * ------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Fast commits tags are idempotent in nature provided the recovery code follows</span></span>\n<span class=\"line\"><span style=\"\"> * certain rules. The guiding principle that the commit path follows while</span></span>\n<span class=\"line\"><span style=\"\"> * committing is that it stores the result of a particular operation instead of</span></span>\n<span class=\"line\"><span style=\"\"> * storing the procedure.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Let's consider this rename operation: 'mv /a /b'. Let's assume dirent '/a'</span></span>\n<span class=\"line\"><span style=\"\"> * was associated with inode 10. During fast commit, instead of storing this</span></span>\n<span class=\"line\"><span style=\"\"> * operation as a procedure \"rename a to b\", we store the resulting file system</span></span>\n<span class=\"line\"><span style=\"\"> * state as a \"series\" of outcomes:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * - Link dirent b to inode 10</span></span>\n<span class=\"line\"><span style=\"\"> * - Unlink dirent a</span></span>\n<span class=\"line\"><span style=\"\"> * - Inode &#x3C;10> with valid refcount</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Now when recovery code runs, it needs \"enforce\" this state on the file</span></span>\n<span class=\"line\"><span style=\"\"> * system. This is what guarantees idempotence of fast commit replay.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Let's take an example of a procedure that is not idempotent and see how fast</span></span>\n<span class=\"line\"><span style=\"\"> * commits make it idempotent. Consider following sequence of operations:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     rm A;    mv B A;    read A</span></span>\n<span class=\"line\"><span style=\"\"> *  (x)     (y)        (z)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (x), (y) and (z) are the points at which we can crash. If we store this</span></span>\n<span class=\"line\"><span style=\"\"> * sequence of operations as is then the replay is not idempotent. Let's say</span></span>\n<span class=\"line\"><span style=\"\"> * while in replay, we crash at (z). During the second replay, file A (which was</span></span>\n<span class=\"line\"><span style=\"\"> * actually created as a result of \"mv B A\" operation) would get deleted. Thus,</span></span>\n<span class=\"line\"><span style=\"\"> * file named A would be absent when we try to read A. So, this sequence of</span></span>\n<span class=\"line\"><span style=\"\"> * operations is not idempotent. However, as mentioned above, instead of storing</span></span>\n<span class=\"line\"><span style=\"\"> * the procedure fast commits store the outcome of each procedure. Thus the fast</span></span>\n<span class=\"line\"><span style=\"\"> * commit log for above procedure would be as follows:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (Let's assume dirent A was linked to inode 10 and dirent B was linked to</span></span>\n<span class=\"line\"><span style=\"\"> * inode 11 before the replay)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    [Unlink A]   [Link A to inode 11]   [Unlink B]   [Inode 11]</span></span>\n<span class=\"line\"><span style=\"\"> * (w)          (x)                    (y)          (z)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If we crash at (z), we will have file A linked to inode 11. During the second</span></span>\n<span class=\"line\"><span style=\"\"> * replay, we will remove file A (inode 11). But we will create it back and make</span></span>\n<span class=\"line\"><span style=\"\"> * it point to inode 11. We won't find B, so we'll just skip that step. At this</span></span>\n<span class=\"line\"><span style=\"\"> * point, the refcount for inode 11 is not reliable, but that gets fixed by the</span></span>\n<span class=\"line\"><span style=\"\"> * replay of last inode 11 tag. Crashes at points (w), (x) and (y) get handled</span></span>\n<span class=\"line\"><span style=\"\"> * similarly. Thus, by converting a non-idempotent procedure into a series of</span></span>\n<span class=\"line\"><span style=\"\"> * idempotent outcomes, fast commits ensured idempotence during the replay.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * TODOs</span></span>\n<span class=\"line\"><span style=\"\"> * -----</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 0) Fast commit replay path hardening: Fast commit replay code should use</span></span>\n<span class=\"line\"><span style=\"\"> *    journal handles to make sure all the updates it does during the replay</span></span>\n<span class=\"line\"><span style=\"\"> *    path are atomic. With that if we crash during fast commit replay, after</span></span>\n<span class=\"line\"><span style=\"\"> *    trying to do recovery again, we will find a file system where fast commit</span></span>\n<span class=\"line\"><span style=\"\"> *    area is invalid (because new full commit would be found). In order to deal</span></span>\n<span class=\"line\"><span style=\"\"> *    with that, fast commit replay code should ensure that the \"FC_REPLAY\"</span></span>\n<span class=\"line\"><span style=\"\"> *    superblock state is persisted before starting the replay, so that after</span></span>\n<span class=\"line\"><span style=\"\"> *    the crash, fast commit recovery code can look at that flag and perform</span></span>\n<span class=\"line\"><span style=\"\"> *    fast commit recovery even if that area is invalidated by later full</span></span>\n<span class=\"line\"><span style=\"\"> *    commits.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 1) Fast commit's commit path locks the entire file system during fast</span></span>\n<span class=\"line\"><span style=\"\"> *    commit. This has significant performance penalty. Instead of that, we</span></span>\n<span class=\"line\"><span style=\"\"> *    should use ext4_fc_start/stop_update functions to start inode level</span></span>\n<span class=\"line\"><span style=\"\"> *    updates from ext4_journal_start/stop. Once we do that we can drop file</span></span>\n<span class=\"line\"><span style=\"\"> *    system locking during commit path.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 2) Handle more ineligible cases.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/ext4/fast_commit.c#L15-L166",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "linux/fs/ext4/fast_commit.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * f2fs assigns the following node offsets described as (num).</span></span>\n<span class=\"line\"><span style=\"\"> * N = NIDS_PER_BLOCK</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  Inode block (0)</span></span>\n<span class=\"line\"><span style=\"\"> *    |- direct node (1)</span></span>\n<span class=\"line\"><span style=\"\"> *    |- direct node (2)</span></span>\n<span class=\"line\"><span style=\"\"> *    |- indirect node (3)</span></span>\n<span class=\"line\"><span style=\"\"> *    |            `- direct node (4 => 4 + N - 1)</span></span>\n<span class=\"line\"><span style=\"\"> *    |- indirect node (4 + N)</span></span>\n<span class=\"line\"><span style=\"\"> *    |            `- direct node (5 + N => 5 + 2N - 1)</span></span>\n<span class=\"line\"><span style=\"\"> *    `- double indirect node (5 + 2N)</span></span>\n<span class=\"line\"><span style=\"\"> *                 `- indirect node (6 + 2N)</span></span>\n<span class=\"line\"><span style=\"\"> *                       `- direct node</span></span>\n<span class=\"line\"><span style=\"\"> *                 ......</span></span>\n<span class=\"line\"><span style=\"\"> *                 `- indirect node ((6 + 2N) + x(N + 1))</span></span>\n<span class=\"line\"><span style=\"\"> *                       `- direct node</span></span>\n<span class=\"line\"><span style=\"\"> *                 ......</span></span>\n<span class=\"line\"><span style=\"\"> *                 `- indirect node ((6 + 2N) + (N - 1)(N + 1))</span></span>\n<span class=\"line\"><span style=\"\"> *                       `- direct node</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/f2fs/node.h#L327-L347",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": true
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/f2fs/node.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Module: jfs_mount.c</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * note: file system in transition to aggregate/fileset:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * file system mount is interpreted as the mount of aggregate,</span></span>\n<span class=\"line\"><span style=\"\"> * if not already mounted, and mount of the single/only fileset in</span></span>\n<span class=\"line\"><span style=\"\"> * the aggregate;</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * a file system/aggregate is represented by an internal inode</span></span>\n<span class=\"line\"><span style=\"\"> * (aka mount inode) initialized with aggregate superblock;</span></span>\n<span class=\"line\"><span style=\"\"> * each vfs represents a fileset, and points to its \"fileset inode</span></span>\n<span class=\"line\"><span style=\"\"> * allocation map inode\" (aka fileset inode):</span></span>\n<span class=\"line\"><span style=\"\"> * (an aggregate itself is structured recursively as a filset:</span></span>\n<span class=\"line\"><span style=\"\"> * an internal vfs is constructed and points to its \"fileset inode</span></span>\n<span class=\"line\"><span style=\"\"> * allocation map inode\" (aka aggregate inode) where each inode</span></span>\n<span class=\"line\"><span style=\"\"> * represents a fileset inode) so that inode number is mapped to</span></span>\n<span class=\"line\"><span style=\"\"> * on-disk inode in uniform way at both aggregate and fileset level;</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * each vnode/inode of a fileset is linked to its vfs (to facilitate</span></span>\n<span class=\"line\"><span style=\"\"> * per fileset inode operations, e.g., unmount of a fileset, etc.);</span></span>\n<span class=\"line\"><span style=\"\"> * each inode points to the mount inode (to facilitate access to</span></span>\n<span class=\"line\"><span style=\"\"> * per aggregate information, e.g., block size, etc.) as well as</span></span>\n<span class=\"line\"><span style=\"\"> * its file set inode.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   aggregate</span></span>\n<span class=\"line\"><span style=\"\"> *   ipmnt</span></span>\n<span class=\"line\"><span style=\"\"> *   mntvfs -> fileset ipimap+ -> aggregate ipbmap -> aggregate ipaimap;</span></span>\n<span class=\"line\"><span style=\"\"> *             fileset vfs     -> vp(1) &#x3C;-> ... &#x3C;-> vp(n) &#x3C;->vproot;</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/jfs/jfs_mount.c#L6-L35",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/jfs/jfs_mount.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * is l2 fully contained in l1?</span></span>\n<span class=\"line\"><span style=\"\"> *   start1                             end1</span></span>\n<span class=\"line\"><span style=\"\"> *   [----------------------------------)</span></span>\n<span class=\"line\"><span style=\"\"> *           start2           end2</span></span>\n<span class=\"line\"><span style=\"\"> *           [----------------)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/nfs/pnfs.c#L622-L628",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/nfs/pnfs.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Are 2 ranges intersecting?</span></span>\n<span class=\"line\"><span style=\"\"> *   start1                             end1</span></span>\n<span class=\"line\"><span style=\"\"> *   [----------------------------------)</span></span>\n<span class=\"line\"><span style=\"\"> *                                start2           end2</span></span>\n<span class=\"line\"><span style=\"\"> *                                [----------------)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/nfs/pnfs.h#L656-L662",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/nfs/pnfs.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Index the hyp_vmemmap to find a potential buddy page, but make no assumption</span></span>\n<span class=\"line\"><span style=\"\"> * about its current state.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Example buddy-tree for a 4-pages physically contiguous pool:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                 o : Page 3</span></span>\n<span class=\"line\"><span style=\"\"> *                /</span></span>\n<span class=\"line\"><span style=\"\"> *               o-o : Page 2</span></span>\n<span class=\"line\"><span style=\"\"> *              /</span></span>\n<span class=\"line\"><span style=\"\"> *             /   o : Page 1</span></span>\n<span class=\"line\"><span style=\"\"> *            /   /</span></span>\n<span class=\"line\"><span style=\"\"> *           o---o-o : Page 0</span></span>\n<span class=\"line\"><span style=\"\"> *    Order  2   1 0</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Example of requests on this pool:</span></span>\n<span class=\"line\"><span style=\"\"> *   __find_buddy_nocheck(pool, page 0, order 0) => page 1</span></span>\n<span class=\"line\"><span style=\"\"> *   __find_buddy_nocheck(pool, page 0, order 1) => page 2</span></span>\n<span class=\"line\"><span style=\"\"> *   __find_buddy_nocheck(pool, page 1, order 0) => page 0</span></span>\n<span class=\"line\"><span style=\"\"> *   __find_buddy_nocheck(pool, page 2, order 0) => page 3</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/arm64/kvm/hyp/nvhe/page_alloc.c#L12-L32",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/arm64/kvm/hyp/nvhe/page_alloc.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * UTF8 valid ranges.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The UTF-8 encoding spreads the bits of a 32bit word over several</span></span>\n<span class=\"line\"><span style=\"\"> * bytes. This table gives the ranges that can be held and how they'd</span></span>\n<span class=\"line\"><span style=\"\"> * be represented.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00000000 0x0000007F: 0xxxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00000000 0x000007FF: 110xxxxx 10xxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00000000 0x0000FFFF: 1110xxxx 10xxxxxx 10xxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00000000 0x001FFFFF: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00000000 0x03FFFFFF: 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00000000 0x7FFFFFFF: 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There is an additional requirement on UTF-8, in that only the</span></span>\n<span class=\"line\"><span style=\"\"> * shortest representation of a 32bit value is to be used.  A decoder</span></span>\n<span class=\"line\"><span style=\"\"> * must not decode sequences that do not satisfy this requirement.</span></span>\n<span class=\"line\"><span style=\"\"> * Thus the allowed ranges have a lower bound.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00000000 0x0000007F: 0xxxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00000080 0x000007FF: 110xxxxx 10xxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00000800 0x0000FFFF: 1110xxxx 10xxxxxx 10xxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00010000 0x001FFFFF: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> * 0x00200000 0x03FFFFFF: 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> * 0x04000000 0x7FFFFFFF: 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Actual unicode characters are limited to the range 0x0 - 0x10FFFF,</span></span>\n<span class=\"line\"><span style=\"\"> * 17 planes of 65536 values.  This limits the sequences actually seen</span></span>\n<span class=\"line\"><span style=\"\"> * even more, to just the following.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *          0 -     0x7f: 0                     0x7f</span></span>\n<span class=\"line\"><span style=\"\"> *       0x80 -    0x7ff: 0xc2 0x80             0xdf 0xbf</span></span>\n<span class=\"line\"><span style=\"\"> *      0x800 -   0xffff: 0xe0 0xa0 0x80        0xef 0xbf 0xbf</span></span>\n<span class=\"line\"><span style=\"\"> *    0x10000 - 0x10ffff: 0xf0 0x90 0x80 0x80   0xf4 0x8f 0xbf 0xbf</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Even within those ranges not all values are allowed: the surrogates</span></span>\n<span class=\"line\"><span style=\"\"> * 0xd800 - 0xdfff should never be seen.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that the longest sequence seen with valid usage is 4 bytes,</span></span>\n<span class=\"line\"><span style=\"\"> * the same a single UTF-32 character.  This makes the UTF-8</span></span>\n<span class=\"line\"><span style=\"\"> * representation of Unicode strictly smaller than UTF-32.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The shortest sequence requirement was introduced by:</span></span>\n<span class=\"line\"><span style=\"\"> *    Corrigendum #1: UTF-8 Shortest Form</span></span>\n<span class=\"line\"><span style=\"\"> * It can be found here:</span></span>\n<span class=\"line\"><span style=\"\"> *    http://www.unicode.org/versions/corrigendum1.html</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/unicode/mkutf8data.c#L202-L249",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/unicode/mkutf8data.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Below is a state machine diagram for attr remove operations. The  XFS_DAS_*</span></span>\n<span class=\"line\"><span style=\"\"> * states indicate places where the function would return -EAGAIN, and then</span></span>\n<span class=\"line\"><span style=\"\"> * immediately resume from after being called by the calling function. States</span></span>\n<span class=\"line\"><span style=\"\"> * marked as a \"subroutine state\" indicate that they belong to a subroutine, and</span></span>\n<span class=\"line\"><span style=\"\"> * so the calling function needs to pass them back to that subroutine to allow</span></span>\n<span class=\"line\"><span style=\"\"> * it to finish where it left off. But they otherwise do not have a role in the</span></span>\n<span class=\"line\"><span style=\"\"> * calling function other than just passing through.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * xfs_attr_remove_iter()</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              v</span></span>\n<span class=\"line\"><span style=\"\"> *        have attr to remove? ──n──> done</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              y</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              v</span></span>\n<span class=\"line\"><span style=\"\"> *        are we short form? ──y──> xfs_attr_shortform_remove ──> done</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              n</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              V</span></span>\n<span class=\"line\"><span style=\"\"> *        are we leaf form? ──y──> xfs_attr_leaf_removename ──> done</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              n</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              V</span></span>\n<span class=\"line\"><span style=\"\"> *   ┌── need to setup state?</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   n          y</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          v</span></span>\n<span class=\"line\"><span style=\"\"> *   │ find attr and get state</span></span>\n<span class=\"line\"><span style=\"\"> *   │ attr has remote blks? ──n─┐</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │                v</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │         find and invalidate</span></span>\n<span class=\"line\"><span style=\"\"> *   │          y         the remote blocks.</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │         mark attr incomplete</span></span>\n<span class=\"line\"><span style=\"\"> *   │          ├────────────────┘</span></span>\n<span class=\"line\"><span style=\"\"> *   └──────────┤</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              v</span></span>\n<span class=\"line\"><span style=\"\"> *   Have remote blks to remove? ───y─────┐</span></span>\n<span class=\"line\"><span style=\"\"> *              │        ^          remove the blks</span></span>\n<span class=\"line\"><span style=\"\"> *              │        │                │</span></span>\n<span class=\"line\"><span style=\"\"> *              │        │                v</span></span>\n<span class=\"line\"><span style=\"\"> *              │  XFS_DAS_RMTBLK &#x3C;─n── done?</span></span>\n<span class=\"line\"><span style=\"\"> *              │  re-enter with          │</span></span>\n<span class=\"line\"><span style=\"\"> *              │  one less blk to        y</span></span>\n<span class=\"line\"><span style=\"\"> *              │      remove             │</span></span>\n<span class=\"line\"><span style=\"\"> *              │                         V</span></span>\n<span class=\"line\"><span style=\"\"> *              │                  refill the state</span></span>\n<span class=\"line\"><span style=\"\"> *              n                         │</span></span>\n<span class=\"line\"><span style=\"\"> *              │                         v</span></span>\n<span class=\"line\"><span style=\"\"> *              │                   XFS_DAS_RM_NAME</span></span>\n<span class=\"line\"><span style=\"\"> *              │                         │</span></span>\n<span class=\"line\"><span style=\"\"> *              ├─────────────────────────┘</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              v</span></span>\n<span class=\"line\"><span style=\"\"> *       remove leaf and</span></span>\n<span class=\"line\"><span style=\"\"> *       update hash with</span></span>\n<span class=\"line\"><span style=\"\"> *   xfs_attr_node_remove_cleanup</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              v</span></span>\n<span class=\"line\"><span style=\"\"> *           need to</span></span>\n<span class=\"line\"><span style=\"\"> *        shrink tree? ─n─┐</span></span>\n<span class=\"line\"><span style=\"\"> *              │         │</span></span>\n<span class=\"line\"><span style=\"\"> *              y         │</span></span>\n<span class=\"line\"><span style=\"\"> *              │         │</span></span>\n<span class=\"line\"><span style=\"\"> *              v         │</span></span>\n<span class=\"line\"><span style=\"\"> *          join leaf     │</span></span>\n<span class=\"line\"><span style=\"\"> *              │         │</span></span>\n<span class=\"line\"><span style=\"\"> *              v         │</span></span>\n<span class=\"line\"><span style=\"\"> *      XFS_DAS_RM_SHRINK │</span></span>\n<span class=\"line\"><span style=\"\"> *              │         │</span></span>\n<span class=\"line\"><span style=\"\"> *              v         │</span></span>\n<span class=\"line\"><span style=\"\"> *       do the shrink    │</span></span>\n<span class=\"line\"><span style=\"\"> *              │         │</span></span>\n<span class=\"line\"><span style=\"\"> *              v         │</span></span>\n<span class=\"line\"><span style=\"\"> *          free state &#x3C;──┘</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              v</span></span>\n<span class=\"line\"><span style=\"\"> *            done</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Below is a state machine diagram for attr set operations.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * It seems the challenge with understanding this system comes from trying to</span></span>\n<span class=\"line\"><span style=\"\"> * absorb the state machine all at once, when really one should only be looking</span></span>\n<span class=\"line\"><span style=\"\"> * at it with in the context of a single function. Once a state sensitive</span></span>\n<span class=\"line\"><span style=\"\"> * function is called, the idea is that it \"takes ownership\" of the</span></span>\n<span class=\"line\"><span style=\"\"> * state machine. It isn't concerned with the states that may have belonged to</span></span>\n<span class=\"line\"><span style=\"\"> * it's calling parent. Only the states relevant to itself or any other</span></span>\n<span class=\"line\"><span style=\"\"> * subroutines there in. Once a calling function hands off the state machine to</span></span>\n<span class=\"line\"><span style=\"\"> * a subroutine, it needs to respect the simple rule that it doesn't \"own\" the</span></span>\n<span class=\"line\"><span style=\"\"> * state machine anymore, and it's the responsibility of that calling function</span></span>\n<span class=\"line\"><span style=\"\"> * to propagate the -EAGAIN back up the call stack. Upon reentry, it is</span></span>\n<span class=\"line\"><span style=\"\"> * committed to re-calling that subroutine until it returns something other than</span></span>\n<span class=\"line\"><span style=\"\"> * -EAGAIN. Once that subroutine signals completion (by returning anything other</span></span>\n<span class=\"line\"><span style=\"\"> * than -EAGAIN), the calling function can resume using the state machine.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  xfs_attr_set_iter()</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              v</span></span>\n<span class=\"line\"><span style=\"\"> *   ┌─y─ has an attr fork?</span></span>\n<span class=\"line\"><span style=\"\"> *   │          |</span></span>\n<span class=\"line\"><span style=\"\"> *   │          n</span></span>\n<span class=\"line\"><span style=\"\"> *   │          |</span></span>\n<span class=\"line\"><span style=\"\"> *   │          V</span></span>\n<span class=\"line\"><span style=\"\"> *   │       add a fork</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   └──────────┤</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              V</span></span>\n<span class=\"line\"><span style=\"\"> *   ┌─── is shortform?</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          y</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          V</span></span>\n<span class=\"line\"><span style=\"\"> *   │   xfs_attr_set_fmt</span></span>\n<span class=\"line\"><span style=\"\"> *   │          |</span></span>\n<span class=\"line\"><span style=\"\"> *   │          V</span></span>\n<span class=\"line\"><span style=\"\"> *   │ xfs_attr_try_sf_addname</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          V</span></span>\n<span class=\"line\"><span style=\"\"> *   │      had enough ──y──> done</span></span>\n<span class=\"line\"><span style=\"\"> *   │        space?</span></span>\n<span class=\"line\"><span style=\"\"> *   n          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          n</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          V</span></span>\n<span class=\"line\"><span style=\"\"> *   │   transform to leaf</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          V</span></span>\n<span class=\"line\"><span style=\"\"> *   │   hold the leaf buffer</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          V</span></span>\n<span class=\"line\"><span style=\"\"> *   │     return -EAGAIN</span></span>\n<span class=\"line\"><span style=\"\"> *   │      Re-enter in</span></span>\n<span class=\"line\"><span style=\"\"> *   │       leaf form</span></span>\n<span class=\"line\"><span style=\"\"> *   │</span></span>\n<span class=\"line\"><span style=\"\"> *   └─> release leaf buffer</span></span>\n<span class=\"line\"><span style=\"\"> *          if needed</span></span>\n<span class=\"line\"><span style=\"\"> *              │</span></span>\n<span class=\"line\"><span style=\"\"> *              V</span></span>\n<span class=\"line\"><span style=\"\"> *   ┌───n── fork has</span></span>\n<span class=\"line\"><span style=\"\"> *   │      only 1 blk?</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          y</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          v</span></span>\n<span class=\"line\"><span style=\"\"> *   │ xfs_attr_leaf_try_add()</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          v</span></span>\n<span class=\"line\"><span style=\"\"> *   │      had enough ──────────────y─────────────┐</span></span>\n<span class=\"line\"><span style=\"\"> *   │        space?                               │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          n                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          v                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │    return -EAGAIN                           │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      re-enter in                            │</span></span>\n<span class=\"line\"><span style=\"\"> *   │        node form                            │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   └──────────┤                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *              │                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *              V                                  │</span></span>\n<span class=\"line\"><span style=\"\"> * xfs_attr_node_addname_find_attr                 │</span></span>\n<span class=\"line\"><span style=\"\"> *        determines if this                       │</span></span>\n<span class=\"line\"><span style=\"\"> *       is create or rename                       │</span></span>\n<span class=\"line\"><span style=\"\"> *     find space to store attr                    │</span></span>\n<span class=\"line\"><span style=\"\"> *              │                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *              v                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *     xfs_attr_node_addname                       │</span></span>\n<span class=\"line\"><span style=\"\"> *              │                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *              v                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   fits in a node leaf? ────n─────┐              │</span></span>\n<span class=\"line\"><span style=\"\"> *              │     ^             v              │</span></span>\n<span class=\"line\"><span style=\"\"> *              │     │       single leaf node?    │</span></span>\n<span class=\"line\"><span style=\"\"> *              │     │         │            │     │</span></span>\n<span class=\"line\"><span style=\"\"> *              y     │         y            n     │</span></span>\n<span class=\"line\"><span style=\"\"> *              │     │         │            │     │</span></span>\n<span class=\"line\"><span style=\"\"> *              v     │         v            v     │</span></span>\n<span class=\"line\"><span style=\"\"> *            update  │    grow the leaf  split if │</span></span>\n<span class=\"line\"><span style=\"\"> *           hashvals └── return -EAGAIN   needed  │</span></span>\n<span class=\"line\"><span style=\"\"> *              │         retry leaf add     │     │</span></span>\n<span class=\"line\"><span style=\"\"> *              │           on reentry       │     │</span></span>\n<span class=\"line\"><span style=\"\"> *              ├────────────────────────────┘     │</span></span>\n<span class=\"line\"><span style=\"\"> *              │                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *              v                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *         need to alloc                           │</span></span>\n<span class=\"line\"><span style=\"\"> *   ┌─y── or flip flag?                           │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          n                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          │                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          v                                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │         done                                │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                                             │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                                             │</span></span>\n<span class=\"line\"><span style=\"\"> *   │         XFS_DAS_FOUND_LBLK &#x3C;────────────────┘</span></span>\n<span class=\"line\"><span style=\"\"> *   │                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                  V</span></span>\n<span class=\"line\"><span style=\"\"> *   │        xfs_attr_leaf_addname()</span></span>\n<span class=\"line\"><span style=\"\"> *   │                  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                  v</span></span>\n<span class=\"line\"><span style=\"\"> *   │      ┌──first time through?</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │          y</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      n          v</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │    if we have rmt blks</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │    find space for them</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      └──────────┤</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 v</span></span>\n<span class=\"line\"><span style=\"\"> *   │            still have</span></span>\n<span class=\"line\"><span style=\"\"> *   │      ┌─n─ blks to alloc? &#x3C;──┐</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │          │           │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │          y           │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │          │           │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │          v           │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │     alloc one blk    │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │     return -EAGAIN ──┘</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │    re-enter with one</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │    less blk to alloc</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      │</span></span>\n<span class=\"line\"><span style=\"\"> *   │      └───> set the rmt</span></span>\n<span class=\"line\"><span style=\"\"> *   │               value</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 v</span></span>\n<span class=\"line\"><span style=\"\"> *   │               was this</span></span>\n<span class=\"line\"><span style=\"\"> *   │              a rename? ──n─┐</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 y          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 v          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │           flip incomplete  │</span></span>\n<span class=\"line\"><span style=\"\"> *   │               flag         │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 v          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │         XFS_DAS_FLIP_LFLAG │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 v          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          need to remove    │</span></span>\n<span class=\"line\"><span style=\"\"> *   │              old bks? ──n──┤</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 y          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 V          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │               remove       │</span></span>\n<span class=\"line\"><span style=\"\"> *   │        ┌───> old blks      │</span></span>\n<span class=\"line\"><span style=\"\"> *   │        │        │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │ XFS_DAS_RM_LBLK │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │        ^        │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │        │        v          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │        └──y── more to      │</span></span>\n<span class=\"line\"><span style=\"\"> *   │              remove?       │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 n          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 v          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │          XFS_DAS_RD_LEAF   │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 v          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │            remove leaf     │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 v          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │            shrink to sf    │</span></span>\n<span class=\"line\"><span style=\"\"> *   │             if needed      │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 │          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                 v          │</span></span>\n<span class=\"line\"><span style=\"\"> *   │                done &#x3C;──────┘</span></span>\n<span class=\"line\"><span style=\"\"> *   │</span></span>\n<span class=\"line\"><span style=\"\"> *   └──────> XFS_DAS_FOUND_NBLK</span></span>\n<span class=\"line\"><span style=\"\"> *                     │</span></span>\n<span class=\"line\"><span style=\"\"> *                     v</span></span>\n<span class=\"line\"><span style=\"\"> *       ┌─────n──  need to</span></span>\n<span class=\"line\"><span style=\"\"> *       │        alloc blks?</span></span>\n<span class=\"line\"><span style=\"\"> *       │             │</span></span>\n<span class=\"line\"><span style=\"\"> *       │             y</span></span>\n<span class=\"line\"><span style=\"\"> *       │             │</span></span>\n<span class=\"line\"><span style=\"\"> *       │             v</span></span>\n<span class=\"line\"><span style=\"\"> *       │        find space</span></span>\n<span class=\"line\"><span style=\"\"> *       │             │</span></span>\n<span class=\"line\"><span style=\"\"> *       │             v</span></span>\n<span class=\"line\"><span style=\"\"> *       │  ┌─>XFS_DAS_ALLOC_NODE</span></span>\n<span class=\"line\"><span style=\"\"> *       │  │          │</span></span>\n<span class=\"line\"><span style=\"\"> *       │  │          v</span></span>\n<span class=\"line\"><span style=\"\"> *       │  │      alloc blk</span></span>\n<span class=\"line\"><span style=\"\"> *       │  │          │</span></span>\n<span class=\"line\"><span style=\"\"> *       │  │          v</span></span>\n<span class=\"line\"><span style=\"\"> *       │  └──y── need to alloc</span></span>\n<span class=\"line\"><span style=\"\"> *       │         more blocks?</span></span>\n<span class=\"line\"><span style=\"\"> *       │             │</span></span>\n<span class=\"line\"><span style=\"\"> *       │             n</span></span>\n<span class=\"line\"><span style=\"\"> *       │             │</span></span>\n<span class=\"line\"><span style=\"\"> *       │             v</span></span>\n<span class=\"line\"><span style=\"\"> *       │      set the rmt value</span></span>\n<span class=\"line\"><span style=\"\"> *       │             │</span></span>\n<span class=\"line\"><span style=\"\"> *       │             v</span></span>\n<span class=\"line\"><span style=\"\"> *       │          was this</span></span>\n<span class=\"line\"><span style=\"\"> *       └────────> a rename? ──n─┐</span></span>\n<span class=\"line\"><span style=\"\"> *                     │          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     y          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     │          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     v          │</span></span>\n<span class=\"line\"><span style=\"\"> *               flip incomplete  │</span></span>\n<span class=\"line\"><span style=\"\"> *                   flag         │</span></span>\n<span class=\"line\"><span style=\"\"> *                     │          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     v          │</span></span>\n<span class=\"line\"><span style=\"\"> *             XFS_DAS_FLIP_NFLAG │</span></span>\n<span class=\"line\"><span style=\"\"> *                     │          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     v          │</span></span>\n<span class=\"line\"><span style=\"\"> *                 need to        │</span></span>\n<span class=\"line\"><span style=\"\"> *               remove blks? ─n──┤</span></span>\n<span class=\"line\"><span style=\"\"> *                     │          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     y          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     │          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     v          │</span></span>\n<span class=\"line\"><span style=\"\"> *                   remove       │</span></span>\n<span class=\"line\"><span style=\"\"> *        ┌────────> old blks     │</span></span>\n<span class=\"line\"><span style=\"\"> *        │            │          │</span></span>\n<span class=\"line\"><span style=\"\"> *  XFS_DAS_RM_NBLK    │          │</span></span>\n<span class=\"line\"><span style=\"\"> *        ^            │          │</span></span>\n<span class=\"line\"><span style=\"\"> *        │            v          │</span></span>\n<span class=\"line\"><span style=\"\"> *        └──────y── more to      │</span></span>\n<span class=\"line\"><span style=\"\"> *                   remove       │</span></span>\n<span class=\"line\"><span style=\"\"> *                     │          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     n          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     │          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     v          │</span></span>\n<span class=\"line\"><span style=\"\"> *              XFS_DAS_CLR_FLAG  │</span></span>\n<span class=\"line\"><span style=\"\"> *                     │          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     v          │</span></span>\n<span class=\"line\"><span style=\"\"> *                clear flags     │</span></span>\n<span class=\"line\"><span style=\"\"> *                     │          │</span></span>\n<span class=\"line\"><span style=\"\"> *                     ├──────────┘</span></span>\n<span class=\"line\"><span style=\"\"> *                     │</span></span>\n<span class=\"line\"><span style=\"\"> *                     v</span></span>\n<span class=\"line\"><span style=\"\"> *                   done</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/xfs/libxfs/xfs_attr.h#L83-L425",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/xfs/libxfs/xfs_attr.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * XFS btree block layout and addressing:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There are two types of blocks in the btree: leaf and non-leaf blocks.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The leaf record start with a header then followed by records containing</span></span>\n<span class=\"line\"><span style=\"\"> * the values.  A non-leaf block also starts with the same header, and</span></span>\n<span class=\"line\"><span style=\"\"> * then first contains lookup keys followed by an equal number of pointers</span></span>\n<span class=\"line\"><span style=\"\"> * to the btree blocks at the previous level.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t+--------+-------+-------+-------+-------+-------+-------+</span></span>\n<span class=\"line\"><span style=\"\"> * Leaf:\t| header | rec 1 | rec 2 | rec 3 | rec 4 | rec 5 | rec N |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t+--------+-------+-------+-------+-------+-------+-------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t+--------+-------+-------+-------+-------+-------+-------+</span></span>\n<span class=\"line\"><span style=\"\"> * Non-Leaf:\t| header | key 1 | key 2 | key N | ptr 1 | ptr 2 | ptr N |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t+--------+-------+-------+-------+-------+-------+-------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The header is called struct xfs_btree_block for reasons better left unknown</span></span>\n<span class=\"line\"><span style=\"\"> * and comes in different versions for short (32bit) and long (64bit) block</span></span>\n<span class=\"line\"><span style=\"\"> * pointers.  The record and key structures are defined by the btree instances</span></span>\n<span class=\"line\"><span style=\"\"> * and opaque to the btree core.  The block pointers are simple disk endian</span></span>\n<span class=\"line\"><span style=\"\"> * integers, available in a short (32bit) and long (64bit) variant.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The helpers below calculate the offset of a given record, key or pointer</span></span>\n<span class=\"line\"><span style=\"\"> * into a btree block (xfs_btree_*_offset) or return a pointer to the given</span></span>\n<span class=\"line\"><span style=\"\"> * record, key or pointer (xfs_btree_*_addr).  Note that all addressing</span></span>\n<span class=\"line\"><span style=\"\"> * inside the btree block is done using indices starting at one, not zero!</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If XFS_BTREE_OVERLAPPING is set, then this btree supports keys containing</span></span>\n<span class=\"line\"><span style=\"\"> * overlapping intervals.  In such a tree, records are still sorted lowest to</span></span>\n<span class=\"line\"><span style=\"\"> * highest and indexed by the smallest key value that refers to the record.</span></span>\n<span class=\"line\"><span style=\"\"> * However, nodes are different: each pointer has two associated keys -- one</span></span>\n<span class=\"line\"><span style=\"\"> * indexing the lowest key available in the block(s) below (the same behavior</span></span>\n<span class=\"line\"><span style=\"\"> * as the key in a regular btree) and another indexing the highest key</span></span>\n<span class=\"line\"><span style=\"\"> * available in the block(s) below.  Because records are /not/ sorted by the</span></span>\n<span class=\"line\"><span style=\"\"> * highest key, all leaf block updates require us to compute the highest key</span></span>\n<span class=\"line\"><span style=\"\"> * that matches any record in the leaf and to recursively update the high keys</span></span>\n<span class=\"line\"><span style=\"\"> * in the nodes going further up in the tree, if necessary.  Nodes look like</span></span>\n<span class=\"line\"><span style=\"\"> * this:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t+--------+-----+-----+-----+-----+-----+-------+-------+-----+</span></span>\n<span class=\"line\"><span style=\"\"> * Non-Leaf:\t| header | lo1 | hi1 | lo2 | hi2 | ... | ptr 1 | ptr 2 | ... |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t+--------+-----+-----+-----+-----+-----+-------+-------+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To perform an interval query on an overlapped tree, perform the usual</span></span>\n<span class=\"line\"><span style=\"\"> * depth-first search and use the low and high keys to decide if we can skip</span></span>\n<span class=\"line\"><span style=\"\"> * that particular node.  If a leaf node is reached, return the records that</span></span>\n<span class=\"line\"><span style=\"\"> * intersect the interval.  Note that an interval query may return numerous</span></span>\n<span class=\"line\"><span style=\"\"> * entries.  For a non-overlapped tree, simply search for the record associated</span></span>\n<span class=\"line\"><span style=\"\"> * with the lowest key and iterate forward until a non-matching record is</span></span>\n<span class=\"line\"><span style=\"\"> * found.  Section 14.3 (\"Interval Trees\") of _Introduction to Algorithms_ by</span></span>\n<span class=\"line\"><span style=\"\"> * Cormen, Leiserson, Rivest, and Stein (2nd or 3rd ed. only) discuss this in</span></span>\n<span class=\"line\"><span style=\"\"> * more detail.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Why do we care about overlapping intervals?  Let's say you have a bunch of</span></span>\n<span class=\"line\"><span style=\"\"> * reverse mapping records on a reflink filesystem:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 1: +- file A startblock B offset C length D -----------+</span></span>\n<span class=\"line\"><span style=\"\"> * 2:      +- file E startblock F offset G length H --------------+</span></span>\n<span class=\"line\"><span style=\"\"> * 3:      +- file I startblock F offset J length K --+</span></span>\n<span class=\"line\"><span style=\"\"> * 4:                                                        +- file L... --+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Now say we want to map block (B+D) into file A at offset (C+D).  Ideally,</span></span>\n<span class=\"line\"><span style=\"\"> * we'd simply increment the length of record 1.  But how do we find the record</span></span>\n<span class=\"line\"><span style=\"\"> * that ends at (B+D-1) (i.e. record 1)?  A LE lookup of (B+D-1) would return</span></span>\n<span class=\"line\"><span style=\"\"> * record 3 because the keys are ordered first by startblock.  An interval</span></span>\n<span class=\"line\"><span style=\"\"> * query would return records 1 and 2 because they both overlap (B+D-1), and</span></span>\n<span class=\"line\"><span style=\"\"> * from that we can pick out record 1 as the appropriate left neighbor.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In the non-overlapped case you can do a LE lookup and decrement the cursor</span></span>\n<span class=\"line\"><span style=\"\"> * because a record's interval must end before the next record.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/xfs/libxfs/xfs_btree.c#L513-L585",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/xfs/libxfs/xfs_btree.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Adjusting the Reference Count</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * As stated elsewhere, the reference count btree (refcbt) stores</span></span>\n<span class=\"line\"><span style=\"\"> * >1 reference counts for extents of physical blocks.  In this</span></span>\n<span class=\"line\"><span style=\"\"> * operation, we're either raising or lowering the reference count of</span></span>\n<span class=\"line\"><span style=\"\"> * some subrange stored in the tree:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      &#x3C;------ adjustment range ------></span></span>\n<span class=\"line\"><span style=\"\"> * ----+   +---+-----+ +--+--------+---------</span></span>\n<span class=\"line\"><span style=\"\"> *  2  |   | 3 |  4  | |17|   55   |   10</span></span>\n<span class=\"line\"><span style=\"\"> * ----+   +---+-----+ +--+--------+---------</span></span>\n<span class=\"line\"><span style=\"\"> * X axis is physical blocks number;</span></span>\n<span class=\"line\"><span style=\"\"> * reference counts are the numbers inside the rectangles</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The first thing we need to do is to ensure that there are no</span></span>\n<span class=\"line\"><span style=\"\"> * refcount extents crossing either boundary of the range to be</span></span>\n<span class=\"line\"><span style=\"\"> * adjusted.  For any extent that does cross a boundary, split it into</span></span>\n<span class=\"line\"><span style=\"\"> * two extents so that we can increment the refcount of one of the</span></span>\n<span class=\"line\"><span style=\"\"> * pieces later:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      &#x3C;------ adjustment range ------></span></span>\n<span class=\"line\"><span style=\"\"> * ----+   +---+-----+ +--+--------+----+----</span></span>\n<span class=\"line\"><span style=\"\"> *  2  |   | 3 |  2  | |17|   55   | 10 | 10</span></span>\n<span class=\"line\"><span style=\"\"> * ----+   +---+-----+ +--+--------+----+----</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For this next step, let's assume that all the physical blocks in</span></span>\n<span class=\"line\"><span style=\"\"> * the adjustment range are mapped to a file and are therefore in use</span></span>\n<span class=\"line\"><span style=\"\"> * at least once.  Therefore, we can infer that any gap in the</span></span>\n<span class=\"line\"><span style=\"\"> * refcount tree within the adjustment range represents a physical</span></span>\n<span class=\"line\"><span style=\"\"> * extent with refcount == 1:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      &#x3C;------ adjustment range ------></span></span>\n<span class=\"line\"><span style=\"\"> * ----+---+---+-----+-+--+--------+----+----</span></span>\n<span class=\"line\"><span style=\"\"> *  2  |\"1\"| 3 |  2  |1|17|   55   | 10 | 10</span></span>\n<span class=\"line\"><span style=\"\"> * ----+---+---+-----+-+--+--------+----+----</span></span>\n<span class=\"line\"><span style=\"\"> *      ^</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For each extent that falls within the interval range, figure out</span></span>\n<span class=\"line\"><span style=\"\"> * which extent is to the left or the right of that extent.  Now we</span></span>\n<span class=\"line\"><span style=\"\"> * have a left, current, and right extent.  If the new reference count</span></span>\n<span class=\"line\"><span style=\"\"> * of the center extent enables us to merge left, center, and right</span></span>\n<span class=\"line\"><span style=\"\"> * into one record covering all three, do so.  If the center extent is</span></span>\n<span class=\"line\"><span style=\"\"> * at the left end of the range, abuts the left extent, and its new</span></span>\n<span class=\"line\"><span style=\"\"> * reference count matches the left extent's record, then merge them.</span></span>\n<span class=\"line\"><span style=\"\"> * If the center extent is at the right end of the range, abuts the</span></span>\n<span class=\"line\"><span style=\"\"> * right extent, and the reference counts match, merge those.  In the</span></span>\n<span class=\"line\"><span style=\"\"> * example, we can left merge (assuming an increment operation):</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      &#x3C;------ adjustment range ------></span></span>\n<span class=\"line\"><span style=\"\"> * --------+---+-----+-+--+--------+----+----</span></span>\n<span class=\"line\"><span style=\"\"> *    2    | 3 |  2  |1|17|   55   | 10 | 10</span></span>\n<span class=\"line\"><span style=\"\"> * --------+---+-----+-+--+--------+----+----</span></span>\n<span class=\"line\"><span style=\"\"> *          ^</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For all other extents within the range, adjust the reference count</span></span>\n<span class=\"line\"><span style=\"\"> * or delete it if the refcount falls below 2.  If we were</span></span>\n<span class=\"line\"><span style=\"\"> * incrementing, the end result looks like this:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      &#x3C;------ adjustment range ------></span></span>\n<span class=\"line\"><span style=\"\"> * --------+---+-----+-+--+--------+----+----</span></span>\n<span class=\"line\"><span style=\"\"> *    2    | 4 |  3  |2|18|   56   | 11 | 10</span></span>\n<span class=\"line\"><span style=\"\"> * --------+---+-----+-+--+--------+----+----</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The result of a decrement operation looks as such:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      &#x3C;------ adjustment range ------></span></span>\n<span class=\"line\"><span style=\"\"> * ----+   +---+       +--+--------+----+----</span></span>\n<span class=\"line\"><span style=\"\"> *  2  |   | 2 |       |16|   54   |  9 | 10</span></span>\n<span class=\"line\"><span style=\"\"> * ----+   +---+       +--+--------+----+----</span></span>\n<span class=\"line\"><span style=\"\"> *      DDDD    111111DD</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The blocks marked \"D\" are freed; the blocks marked \"1\" are only</span></span>\n<span class=\"line\"><span style=\"\"> * referenced once and therefore the record is removed from the</span></span>\n<span class=\"line\"><span style=\"\"> * refcount btree.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/fs/xfs/libxfs/xfs_refcount.c#L271-L346",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/fs/xfs/libxfs/xfs_refcount.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * struct drm_crtc_commit - track modeset commits on a CRTC</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This structure is used to track pending modeset changes and atomic commit on</span></span>\n<span class=\"line\"><span style=\"\"> * a per-CRTC basis. Since updating the list should never block, this structure</span></span>\n<span class=\"line\"><span style=\"\"> * is reference counted to allow waiters to safely wait on an event to complete,</span></span>\n<span class=\"line\"><span style=\"\"> * without holding any locks.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * It has 3 different events in total to allow a fine-grained synchronization</span></span>\n<span class=\"line\"><span style=\"\"> * between outstanding updates::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tatomic commit thread\t\t\thardware</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * \twrite new state into hardware\t---->\t...</span></span>\n<span class=\"line\"><span style=\"\"> * \tsignal hw_done</span></span>\n<span class=\"line\"><span style=\"\"> * \t\t\t\t\t\tswitch to new state on next</span></span>\n<span class=\"line\"><span style=\"\"> * \t...\t\t\t\t\tv/hblank</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\twait for buffers to show up\t\t...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t...\t\t\t\t\tsend completion irq</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\t\tirq handler signals flip_done</span></span>\n<span class=\"line\"><span style=\"\"> *\tcleanup old buffers</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * \tsignal cleanup_done</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * \twait for flip_done\t\t&#x3C;----</span></span>\n<span class=\"line\"><span style=\"\"> * \tclean up atomic state</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The important bit to know is that &#x26;cleanup_done is the terminal event, but the</span></span>\n<span class=\"line\"><span style=\"\"> * ordering between &#x26;flip_done and &#x26;hw_done is entirely up to the specific driver</span></span>\n<span class=\"line\"><span style=\"\"> * and modeset state change.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For an implementation of how to use this look at</span></span>\n<span class=\"line\"><span style=\"\"> * drm_atomic_helper_setup_commit() from the atomic helper library.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * See also drm_crtc_commit_wait().</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/drm/drm_atomic.h#L34-L71",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": true,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/drm/drm_atomic.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * struct drm_display_mode - DRM kernel-internal display mode structure</span></span>\n<span class=\"line\"><span style=\"\"> * @hdisplay: horizontal display size</span></span>\n<span class=\"line\"><span style=\"\"> * @hsync_start: horizontal sync start</span></span>\n<span class=\"line\"><span style=\"\"> * @hsync_end: horizontal sync end</span></span>\n<span class=\"line\"><span style=\"\"> * @htotal: horizontal total size</span></span>\n<span class=\"line\"><span style=\"\"> * @hskew: horizontal skew?!</span></span>\n<span class=\"line\"><span style=\"\"> * @vdisplay: vertical display size</span></span>\n<span class=\"line\"><span style=\"\"> * @vsync_start: vertical sync start</span></span>\n<span class=\"line\"><span style=\"\"> * @vsync_end: vertical sync end</span></span>\n<span class=\"line\"><span style=\"\"> * @vtotal: vertical total size</span></span>\n<span class=\"line\"><span style=\"\"> * @vscan: vertical scan?!</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_hdisplay: hardware mode horizontal display size</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_hblank_start: hardware mode horizontal blank start</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_hblank_end: hardware mode horizontal blank end</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_hsync_start: hardware mode horizontal sync start</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_hsync_end: hardware mode horizontal sync end</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_htotal: hardware mode horizontal total size</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_hskew: hardware mode horizontal skew?!</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_vdisplay: hardware mode vertical display size</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_vblank_start: hardware mode vertical blank start</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_vblank_end: hardware mode vertical blank end</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_vsync_start: hardware mode vertical sync start</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_vsync_end: hardware mode vertical sync end</span></span>\n<span class=\"line\"><span style=\"\"> * @crtc_vtotal: hardware mode vertical total size</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This is the kernel API display mode information structure. For the</span></span>\n<span class=\"line\"><span style=\"\"> * user-space version see struct drm_mode_modeinfo.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The horizontal and vertical timings are defined per the following diagram.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * ::</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *               Active                 Front           Sync           Back</span></span>\n<span class=\"line\"><span style=\"\"> *              Region                 Porch                          Porch</span></span>\n<span class=\"line\"><span style=\"\"> *     &#x3C;----------------------->&#x3C;---------------->&#x3C;------------->&#x3C;--------------></span></span>\n<span class=\"line\"><span style=\"\"> *       //////////////////////|</span></span>\n<span class=\"line\"><span style=\"\"> *      ////////////////////// |</span></span>\n<span class=\"line\"><span style=\"\"> *     //////////////////////  |..................               ................</span></span>\n<span class=\"line\"><span style=\"\"> *                                                _______________</span></span>\n<span class=\"line\"><span style=\"\"> *     &#x3C;----- [hv]display -----></span></span>\n<span class=\"line\"><span style=\"\"> *     &#x3C;------------- [hv]sync_start ------------></span></span>\n<span class=\"line\"><span style=\"\"> *     &#x3C;--------------------- [hv]sync_end ---------------------></span></span>\n<span class=\"line\"><span style=\"\"> *     &#x3C;-------------------------------- [hv]total ----------------------------->*</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This structure contains two copies of timings. First are the plain timings,</span></span>\n<span class=\"line\"><span style=\"\"> * which specify the logical mode, as it would be for a progressive 1:1 scanout</span></span>\n<span class=\"line\"><span style=\"\"> * at the refresh rate userspace can observe through vblank timestamps. Then</span></span>\n<span class=\"line\"><span style=\"\"> * there's the hardware timings, which are corrected for interlacing,</span></span>\n<span class=\"line\"><span style=\"\"> * double-clocking and similar things. They are provided as a convenience, and</span></span>\n<span class=\"line\"><span style=\"\"> * can be appropriately computed using drm_mode_set_crtcinfo().</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For printing you can use %DRM_MODE_FMT and DRM_MODE_ARG().</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/drm/drm_modes.h#L197-L251",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/drm/drm_modes.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * GPIOMUX bits:</span></span>\n<span class=\"line\"><span style=\"\"> *  | 31 - 24 | 23 - 16 | 15 - 8 |     7    |     6    |  5 - 0  |</span></span>\n<span class=\"line\"><span style=\"\"> *  |  dout   |  doen   |  din   | dout rev | doen rev | gpio nr |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * dout:     output signal</span></span>\n<span class=\"line\"><span style=\"\"> * doen:     output enable signal</span></span>\n<span class=\"line\"><span style=\"\"> * din:      optional input signal, 0xff = none</span></span>\n<span class=\"line\"><span style=\"\"> * dout rev: output signal reverse bit</span></span>\n<span class=\"line\"><span style=\"\"> * doen rev: output enable signal reverse bit</span></span>\n<span class=\"line\"><span style=\"\"> * gpio nr:  gpio number, 0 - 63</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/dt-bindings/pinctrl/pinctrl-starfive-jh7100.h#L14-L25",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/dt-bindings/pinctrl/pinctrl-starfive-jh7100.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Example: vc_data of a console that was scrolled 3 lines down.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                              Console buffer</span></span>\n<span class=\"line\"><span style=\"\"> * vc_screenbuf ---------> +----------------------+-.</span></span>\n<span class=\"line\"><span style=\"\"> *                         | initializing W       |  \\</span></span>\n<span class=\"line\"><span style=\"\"> *                         | initializing X       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                         | initializing Y       |    > scroll-back area</span></span>\n<span class=\"line\"><span style=\"\"> *                         | initializing Z       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                         |                      |  /</span></span>\n<span class=\"line\"><span style=\"\"> * vc_visible_origin ---> ^+----------------------+-:</span></span>\n<span class=\"line\"><span style=\"\"> * (changes by scroll)    || Welcome to linux     |  \\</span></span>\n<span class=\"line\"><span style=\"\"> *                        ||                      |   |</span></span>\n<span class=\"line\"><span style=\"\"> *           vc_rows --->&#x3C; | login: root          |   |  visible on console</span></span>\n<span class=\"line\"><span style=\"\"> *                        || password:            |    > (vc_screenbuf_size is</span></span>\n<span class=\"line\"><span style=\"\"> * vc_origin -----------> ||                      |   |   vc_size_row * vc_rows)</span></span>\n<span class=\"line\"><span style=\"\"> * (start when no scroll) || Last login: 12:28    |  /</span></span>\n<span class=\"line\"><span style=\"\"> *                        v+----------------------+-:</span></span>\n<span class=\"line\"><span style=\"\"> *                         | Have a lot of fun... |  \\</span></span>\n<span class=\"line\"><span style=\"\"> * vc_pos -----------------|--------v             |   > scroll-front area</span></span>\n<span class=\"line\"><span style=\"\"> *                         | ~ # cat_             |  /</span></span>\n<span class=\"line\"><span style=\"\"> * vc_scr_end -----------> +----------------------+-:</span></span>\n<span class=\"line\"><span style=\"\"> * (vc_origin +            |                      |  \\ EMPTY, to be filled by</span></span>\n<span class=\"line\"><span style=\"\"> *  vc_screenbuf_size)     |                      |  / vc_video_erase_char</span></span>\n<span class=\"line\"><span style=\"\"> *                         +----------------------+-'</span></span>\n<span class=\"line\"><span style=\"\"> *                         &#x3C;---- 2 * vc_cols -----></span></span>\n<span class=\"line\"><span style=\"\"> *                         &#x3C;---- vc_size_row -----></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that every character in the console buffer is accompanied with an</span></span>\n<span class=\"line\"><span style=\"\"> * attribute in the buffer right after the character. This is not depicted</span></span>\n<span class=\"line\"><span style=\"\"> * in the figure.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/console_struct.h#L62-L93",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/console_struct.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Types for GPADL, decides is how GPADL header is created.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * It doesn't make much difference between BUFFER and RING if PAGE_SIZE is the</span></span>\n<span class=\"line\"><span style=\"\"> * same as HV_HYP_PAGE_SIZE.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If PAGE_SIZE is bigger than HV_HYP_PAGE_SIZE, the headers of ring buffers</span></span>\n<span class=\"line\"><span style=\"\"> * will be of PAGE_SIZE, however, only the first HV_HYP_PAGE will be put</span></span>\n<span class=\"line\"><span style=\"\"> * into gpadl, therefore the number for HV_HYP_PAGE and the indexes of each</span></span>\n<span class=\"line\"><span style=\"\"> * HV_HYP_PAGE will be different between different types of GPADL, for example</span></span>\n<span class=\"line\"><span style=\"\"> * if PAGE_SIZE is 64K:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * BUFFER:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * gva:    |--       64k      --|--       64k      --| ... |</span></span>\n<span class=\"line\"><span style=\"\"> * gpa:    | 4k | 4k | ... | 4k | 4k | 4k | ... | 4k |</span></span>\n<span class=\"line\"><span style=\"\"> * index:  0    1    2     15   16   17   18 .. 31   32 ...</span></span>\n<span class=\"line\"><span style=\"\"> *         |    |    ...   |    |    |   ...    |   ...</span></span>\n<span class=\"line\"><span style=\"\"> *         v    V          V    V    V          V</span></span>\n<span class=\"line\"><span style=\"\"> * gpadl:  | 4k | 4k | ... | 4k | 4k | 4k | ... | 4k | ... |</span></span>\n<span class=\"line\"><span style=\"\"> * index:  0    1    2 ... 15   16   17   18 .. 31   32 ...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * RING:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *         | header  |           data           | header  |     data      |</span></span>\n<span class=\"line\"><span style=\"\"> * gva:    |-- 64k --|--       64k      --| ... |-- 64k --|-- 64k --| ... |</span></span>\n<span class=\"line\"><span style=\"\"> * gpa:    | 4k | .. | 4k | 4k | ... | 4k | ... | 4k | .. | 4k | .. | ... |</span></span>\n<span class=\"line\"><span style=\"\"> * index:  0    1    16   17   18    31   ...   n   n+1  n+16 ...         2n</span></span>\n<span class=\"line\"><span style=\"\"> *         |         /    /          /          |         /               /</span></span>\n<span class=\"line\"><span style=\"\"> *         |        /    /          /           |        /               /</span></span>\n<span class=\"line\"><span style=\"\"> *         |       /    /   ...    /    ...     |       /      ...      /</span></span>\n<span class=\"line\"><span style=\"\"> *         |      /    /          /             |      /               /</span></span>\n<span class=\"line\"><span style=\"\"> *         |     /    /          /              |     /               /</span></span>\n<span class=\"line\"><span style=\"\"> *         V    V    V          V               V    V               v</span></span>\n<span class=\"line\"><span style=\"\"> * gpadl:  | 4k | 4k |   ...    |    ...        | 4k | 4k |  ...     |</span></span>\n<span class=\"line\"><span style=\"\"> * index:  0    1    2   ...    16   ...       n-15 n-14 n-13  ...  2n-30</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/hyperv.h#L34-L70",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": true,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/hyperv.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Combine the right initial value (type) with the right branch order</span></span>\n<span class=\"line\"><span style=\"\"> * to generate the desired result.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * type\\branch|\tlikely (1)\t      |\tunlikely (0)</span></span>\n<span class=\"line\"><span style=\"\"> * -----------+-----------------------+------------------</span></span>\n<span class=\"line\"><span style=\"\"> *            |                       |</span></span>\n<span class=\"line\"><span style=\"\"> *  true (1)  |\t   ...\t\t      |\t   ...</span></span>\n<span class=\"line\"><span style=\"\"> *            |    NOP\t\t      |\t   JMP L</span></span>\n<span class=\"line\"><span style=\"\"> *            |    &#x3C;br-stmts>\t      |\t1: ...</span></span>\n<span class=\"line\"><span style=\"\"> *            |\tL: ...\t\t      |</span></span>\n<span class=\"line\"><span style=\"\"> *            |\t\t\t      |</span></span>\n<span class=\"line\"><span style=\"\"> *            |\t\t\t      |\tL: &#x3C;br-stmts></span></span>\n<span class=\"line\"><span style=\"\"> *            |\t\t\t      |\t   jmp 1b</span></span>\n<span class=\"line\"><span style=\"\"> *            |                       |</span></span>\n<span class=\"line\"><span style=\"\"> * -----------+-----------------------+------------------</span></span>\n<span class=\"line\"><span style=\"\"> *            |                       |</span></span>\n<span class=\"line\"><span style=\"\"> *  false (0) |\t   ...\t\t      |\t   ...</span></span>\n<span class=\"line\"><span style=\"\"> *            |    JMP L\t      |\t   NOP</span></span>\n<span class=\"line\"><span style=\"\"> *            |    &#x3C;br-stmts>\t      |\t1: ...</span></span>\n<span class=\"line\"><span style=\"\"> *            |\tL: ...\t\t      |</span></span>\n<span class=\"line\"><span style=\"\"> *            |\t\t\t      |</span></span>\n<span class=\"line\"><span style=\"\"> *            |\t\t\t      |\tL: &#x3C;br-stmts></span></span>\n<span class=\"line\"><span style=\"\"> *            |\t\t\t      |\t   jmp 1b</span></span>\n<span class=\"line\"><span style=\"\"> *            |                       |</span></span>\n<span class=\"line\"><span style=\"\"> * -----------+-----------------------+------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The initial value is encoded in the LSB of static_key::entries,</span></span>\n<span class=\"line\"><span style=\"\"> * type: 0 = false, 1 = true.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The branch type is encoded in the LSB of jump_entry::key,</span></span>\n<span class=\"line\"><span style=\"\"> * branch: 0 = unlikely, 1 = likely.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This gives the following logic table:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tenabled\ttype\tbranch\t  instuction</span></span>\n<span class=\"line\"><span style=\"\"> * -----------------------------+-----------</span></span>\n<span class=\"line\"><span style=\"\"> *\t0\t0\t0\t| NOP</span></span>\n<span class=\"line\"><span style=\"\"> *\t0\t0\t1\t| JMP</span></span>\n<span class=\"line\"><span style=\"\"> *\t0\t1\t0\t| NOP</span></span>\n<span class=\"line\"><span style=\"\"> *\t0\t1\t1\t| JMP</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t1\t0\t0\t| JMP</span></span>\n<span class=\"line\"><span style=\"\"> *\t1\t0\t1\t| NOP</span></span>\n<span class=\"line\"><span style=\"\"> *\t1\t1\t0\t| JMP</span></span>\n<span class=\"line\"><span style=\"\"> *\t1\t1\t1\t| NOP</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Which gives the following functions:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   dynamic: instruction = enabled ^ branch</span></span>\n<span class=\"line\"><span style=\"\"> *   static:  instruction = type ^ branch</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * See jump_label_type() / jump_label_init_type().</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/jump_label.h#L426-L480",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/jump_label.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Descending-priority-sorted double-linked list</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (C) 2002-2003 Intel Corp</span></span>\n<span class=\"line\"><span style=\"\"> * Inaky Perez-Gonzalez &#x3C;inaky.perez-gonzalez@intel.com>.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * 2001-2005 (c) MontaVista Software, Inc.</span></span>\n<span class=\"line\"><span style=\"\"> * Daniel Walker &#x3C;dwalker@mvista.com></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * (C) 2005 Thomas Gleixner &#x3C;tglx@linutronix.de></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Simplifications of the original code by</span></span>\n<span class=\"line\"><span style=\"\"> * Oleg Nesterov &#x3C;oleg@tv-sign.ru></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Based on simple lists (include/linux/list.h).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This is a priority-sorted list of nodes; each node has a</span></span>\n<span class=\"line\"><span style=\"\"> * priority from INT_MIN (highest) to INT_MAX (lowest).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Addition is O(K), removal is O(1), change of priority of a node is</span></span>\n<span class=\"line\"><span style=\"\"> * O(K) and K is the number of RT priority levels used in the system.</span></span>\n<span class=\"line\"><span style=\"\"> * (1 &#x3C;= K &#x3C;= 99)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This list is really a list of lists:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - The tier 1 list is the prio_list, different priority nodes.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  - The tier 2 list is the node_list, serialized nodes.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Simple ASCII art explanation:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * pl:prio_list (only for plist_node)</span></span>\n<span class=\"line\"><span style=\"\"> * nl:node_list</span></span>\n<span class=\"line\"><span style=\"\"> *   HEAD|             NODE(S)</span></span>\n<span class=\"line\"><span style=\"\"> *       |</span></span>\n<span class=\"line\"><span style=\"\"> *       ||------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *       ||->|pl|&#x3C;->|pl|&#x3C;--------------->|pl|&#x3C;-|</span></span>\n<span class=\"line\"><span style=\"\"> *       |   |10|   |21|   |21|   |21|   |40|   (prio)</span></span>\n<span class=\"line\"><span style=\"\"> *       |   |  |   |  |   |  |   |  |   |  |</span></span>\n<span class=\"line\"><span style=\"\"> *       |   |  |   |  |   |  |   |  |   |  |</span></span>\n<span class=\"line\"><span style=\"\"> * |->|nl|&#x3C;->|nl|&#x3C;->|nl|&#x3C;->|nl|&#x3C;->|nl|&#x3C;->|nl|&#x3C;-|</span></span>\n<span class=\"line\"><span style=\"\"> * |-------------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The nodes on the prio_list list are sorted by priority to simplify</span></span>\n<span class=\"line\"><span style=\"\"> * the insertion of new nodes. There are no nodes with duplicate</span></span>\n<span class=\"line\"><span style=\"\"> * priorites on the list.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The nodes on the node_list are ordered by priority and can contain</span></span>\n<span class=\"line\"><span style=\"\"> * entries which have the same priority. Those entries are ordered</span></span>\n<span class=\"line\"><span style=\"\"> * FIFO</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Addition means: look for the prio_list node in the prio_list</span></span>\n<span class=\"line\"><span style=\"\"> * for the priority of the node and insert it before the node_list</span></span>\n<span class=\"line\"><span style=\"\"> * entry of the next prio_list node. If it is the first node of</span></span>\n<span class=\"line\"><span style=\"\"> * that priority, add it to the prio_list in the right position and</span></span>\n<span class=\"line\"><span style=\"\"> * insert it into the serialized node_list list</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Removal means remove it from the node_list and remove it from</span></span>\n<span class=\"line\"><span style=\"\"> * the prio_list if the node_list list_head is non empty. In case</span></span>\n<span class=\"line\"><span style=\"\"> * of removal from the prio_list it must be checked whether other</span></span>\n<span class=\"line\"><span style=\"\"> * entries of the same priority are on the list or not. If there</span></span>\n<span class=\"line\"><span style=\"\"> * is another entry of the same priority then this entry has to</span></span>\n<span class=\"line\"><span style=\"\"> * replace the removed entry on the prio_list. If the entry which</span></span>\n<span class=\"line\"><span style=\"\"> * is removed is the only entry of this priority then a simple</span></span>\n<span class=\"line\"><span style=\"\"> * remove from both list is sufficient.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * INT_MIN is the highest priority, 0 is the medium highest, INT_MAX</span></span>\n<span class=\"line\"><span style=\"\"> * is lowest priority.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * No locking is done, up to the caller.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/plist.h#L2-L72",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/plist.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * struct power_supply_maintenance_charge_table - setting for maintenace charging</span></span>\n<span class=\"line\"><span style=\"\"> * @charge_current_max_ua: maintenance charging current that is used to keep</span></span>\n<span class=\"line\"><span style=\"\"> *   the charge of the battery full as current is consumed after full charging.</span></span>\n<span class=\"line\"><span style=\"\"> *   The corresponding charge_voltage_max_uv is used as a safeguard: when we</span></span>\n<span class=\"line\"><span style=\"\"> *   reach this voltage the maintenance charging current is turned off. It is</span></span>\n<span class=\"line\"><span style=\"\"> *   turned back on if we fall below this voltage.</span></span>\n<span class=\"line\"><span style=\"\"> * @charge_voltage_max_uv: maintenance charging voltage that is usually a bit</span></span>\n<span class=\"line\"><span style=\"\"> *   lower than the constant_charge_voltage_max_uv. We can apply this settings</span></span>\n<span class=\"line\"><span style=\"\"> *   charge_current_max_ua until we get back up to this voltage.</span></span>\n<span class=\"line\"><span style=\"\"> * @safety_timer_minutes: maintenance charging safety timer, with an expiry</span></span>\n<span class=\"line\"><span style=\"\"> *   time in minutes. We will only use maintenance charging in this setting</span></span>\n<span class=\"line\"><span style=\"\"> *   for a certain amount of time, then we will first move to the next</span></span>\n<span class=\"line\"><span style=\"\"> *   maintenance charge current and voltage pair in respective array and wait</span></span>\n<span class=\"line\"><span style=\"\"> *   for the next safety timer timeout, or, if we reached the last maintencance</span></span>\n<span class=\"line\"><span style=\"\"> *   charging setting, disable charging until we reach</span></span>\n<span class=\"line\"><span style=\"\"> *   charge_restart_voltage_uv and restart ordinary CC/CV charging from there.</span></span>\n<span class=\"line\"><span style=\"\"> *   These timers should be chosen to align with the typical discharge curve</span></span>\n<span class=\"line\"><span style=\"\"> *   for the battery.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Ordinary CC/CV charging will stop charging when the charge current goes</span></span>\n<span class=\"line\"><span style=\"\"> * below charge_term_current_ua, and then restart it (if the device is still</span></span>\n<span class=\"line\"><span style=\"\"> * plugged into the charger) at charge_restart_voltage_uv. This happens in most</span></span>\n<span class=\"line\"><span style=\"\"> * consumer products because the power usage while connected to a charger is</span></span>\n<span class=\"line\"><span style=\"\"> * not zero, and devices are not manufactured to draw power directly from the</span></span>\n<span class=\"line\"><span style=\"\"> * charger: instead they will at all times dissipate the battery a little, like</span></span>\n<span class=\"line\"><span style=\"\"> * the power used in standby mode. This will over time give a charge graph</span></span>\n<span class=\"line\"><span style=\"\"> * such as this:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Energy</span></span>\n<span class=\"line\"><span style=\"\"> *  ^      ...        ...      ...      ...      ...      ...      ...</span></span>\n<span class=\"line\"><span style=\"\"> *  |    .   .       .  .     .  .     .  .     .  .     .  .     .</span></span>\n<span class=\"line\"><span style=\"\"> *  |  ..     .   ..     .  ..    .  ..    .  ..    .  ..    .  ..</span></span>\n<span class=\"line\"><span style=\"\"> *  |.          ..        ..       ..       ..       ..       ..</span></span>\n<span class=\"line\"><span style=\"\"> *  +-------------------------------------------------------------------> t</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Practically this means that the Li-ions are wandering back and forth in the</span></span>\n<span class=\"line\"><span style=\"\"> * battery and this causes degeneration of the battery anode and cathode.</span></span>\n<span class=\"line\"><span style=\"\"> * To prolong the life of the battery, maintenance charging is applied after</span></span>\n<span class=\"line\"><span style=\"\"> * reaching charge_term_current_ua to hold up the charge in the battery while</span></span>\n<span class=\"line\"><span style=\"\"> * consuming power, thus lowering the wear on the battery:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Energy</span></span>\n<span class=\"line\"><span style=\"\"> *  ^      .......................................</span></span>\n<span class=\"line\"><span style=\"\"> *  |    .                                        ......................</span></span>\n<span class=\"line\"><span style=\"\"> *  |  ..</span></span>\n<span class=\"line\"><span style=\"\"> *  |.</span></span>\n<span class=\"line\"><span style=\"\"> *  +-------------------------------------------------------------------> t</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Maintenance charging uses the voltages from this table: a table of settings</span></span>\n<span class=\"line\"><span style=\"\"> * is traversed using a slightly lower current and voltage than what is used for</span></span>\n<span class=\"line\"><span style=\"\"> * CC/CV charging. The maintenance charging will for safety reasons not go on</span></span>\n<span class=\"line\"><span style=\"\"> * indefinately: we lower the current and voltage with successive maintenance</span></span>\n<span class=\"line\"><span style=\"\"> * settings, then disable charging completely after we reach the last one,</span></span>\n<span class=\"line\"><span style=\"\"> * and after that we do not restart charging until we reach</span></span>\n<span class=\"line\"><span style=\"\"> * charge_restart_voltage_uv (see struct power_supply_battery_info) and restart</span></span>\n<span class=\"line\"><span style=\"\"> * ordinary CC/CV charging from there.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * As an example, a Samsung EB425161LA Lithium-Ion battery is CC/CV charged</span></span>\n<span class=\"line\"><span style=\"\"> * at 900mA to 4340mV, then maintenance charged at 600mA and 4150mV for up to</span></span>\n<span class=\"line\"><span style=\"\"> * 60 hours, then maintenance charged at 600mA and 4100mV for up to 200 hours.</span></span>\n<span class=\"line\"><span style=\"\"> * After this the charge cycle is restarted waiting for</span></span>\n<span class=\"line\"><span style=\"\"> * charge_restart_voltage_uv.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For most mobile electronics this type of maintenance charging is enough for</span></span>\n<span class=\"line\"><span style=\"\"> * the user to disconnect the device and make use of it before both maintenance</span></span>\n<span class=\"line\"><span style=\"\"> * charging cycles are complete, if the current and voltage has been chosen</span></span>\n<span class=\"line\"><span style=\"\"> * appropriately. These need to be determined from battery discharge curves</span></span>\n<span class=\"line\"><span style=\"\"> * and expected standby current.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If the voltage anyway drops to charge_restart_voltage_uv during maintenance</span></span>\n<span class=\"line\"><span style=\"\"> * charging, ordinary CC/CV charging is restarted. This can happen if the</span></span>\n<span class=\"line\"><span style=\"\"> * device is e.g. actively used during charging, so more current is drawn than</span></span>\n<span class=\"line\"><span style=\"\"> * the expected stand-by current. Also overvoltage protection will be applied</span></span>\n<span class=\"line\"><span style=\"\"> * as usual.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/power_supply.h#L357-L432",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/power_supply.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * hlists_swap_heads_rcu - swap the lists the hlist heads point to</span></span>\n<span class=\"line\"><span style=\"\"> * @left:  The hlist head on the left</span></span>\n<span class=\"line\"><span style=\"\"> * @right: The hlist head on the right</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The lists start out as [@left  ][node1 ... ] and</span></span>\n<span class=\"line\"><span style=\"\"> *                        [@right ][node2 ... ]</span></span>\n<span class=\"line\"><span style=\"\"> * The lists end up as    [@left  ][node2 ... ]</span></span>\n<span class=\"line\"><span style=\"\"> *                        [@right ][node1 ... ]</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/rculist.h#L537-L546",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/rculist.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *                     ==NOCB Offloading state machine==</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  ----------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  |                              SEGCBLIST_RCU_CORE                          |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                                                          |</span></span>\n<span class=\"line\"><span style=\"\"> *  |  Callbacks processed by rcu_core() from softirqs or local                |</span></span>\n<span class=\"line\"><span style=\"\"> *  |  rcuc kthread, without holding nocb_lock.                                |</span></span>\n<span class=\"line\"><span style=\"\"> *  ----------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *                                         |</span></span>\n<span class=\"line\"><span style=\"\"> *                                         v</span></span>\n<span class=\"line\"><span style=\"\"> *  ----------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  |       SEGCBLIST_RCU_CORE | SEGCBLIST_LOCKING | SEGCBLIST_OFFLOADED       |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                                                          |</span></span>\n<span class=\"line\"><span style=\"\"> *  | Callbacks processed by rcu_core() from softirqs or local                 |</span></span>\n<span class=\"line\"><span style=\"\"> *  | rcuc kthread, while holding nocb_lock. Waking up CB and GP kthreads,     |</span></span>\n<span class=\"line\"><span style=\"\"> *  | allowing nocb_timer to be armed.                                         |</span></span>\n<span class=\"line\"><span style=\"\"> *  ----------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *                                         |</span></span>\n<span class=\"line\"><span style=\"\"> *                                         v</span></span>\n<span class=\"line\"><span style=\"\"> *                        -----------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *                        |                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *                        v                                 v</span></span>\n<span class=\"line\"><span style=\"\"> *  ---------------------------------------  ----------------------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *  |        SEGCBLIST_RCU_CORE   |       |  |     SEGCBLIST_RCU_CORE   |      |</span></span>\n<span class=\"line\"><span style=\"\"> *  |        SEGCBLIST_LOCKING    |       |  |     SEGCBLIST_LOCKING    |      |</span></span>\n<span class=\"line\"><span style=\"\"> *  |        SEGCBLIST_OFFLOADED  |       |  |     SEGCBLIST_OFFLOADED  |      |</span></span>\n<span class=\"line\"><span style=\"\"> *  |        SEGCBLIST_KTHREAD_CB         |  |     SEGCBLIST_KTHREAD_GP        |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                     |  |                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                     |  |                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *  | CB kthread woke up and              |  | GP kthread woke up and          |</span></span>\n<span class=\"line\"><span style=\"\"> *  | acknowledged SEGCBLIST_OFFLOADED.   |  | acknowledged SEGCBLIST_OFFLOADED|</span></span>\n<span class=\"line\"><span style=\"\"> *  | Processes callbacks concurrently    |  |                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *  | with rcu_core(), holding            |  |                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *  | nocb_lock.                          |  |                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *  ---------------------------------------  -----------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *                        |                                 |</span></span>\n<span class=\"line\"><span style=\"\"> *                        -----------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *                                         |</span></span>\n<span class=\"line\"><span style=\"\"> *                                         v</span></span>\n<span class=\"line\"><span style=\"\"> *  |--------------------------------------------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *  |                           SEGCBLIST_LOCKING    |                         |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                           SEGCBLIST_OFFLOADED  |                         |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                           SEGCBLIST_KTHREAD_GP |                         |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                           SEGCBLIST_KTHREAD_CB                           |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                                                          |</span></span>\n<span class=\"line\"><span style=\"\"> *  |   Kthreads handle callbacks holding nocb_lock, local rcu_core() stops    |</span></span>\n<span class=\"line\"><span style=\"\"> *  |   handling callbacks. Enable bypass queueing.                            |</span></span>\n<span class=\"line\"><span style=\"\"> *  ----------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/rcu_segcblist.h#L67-L117",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/rcu_segcblist.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * struct can_tdc - CAN FD Transmission Delay Compensation parameters</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * At high bit rates, the propagation delay from the TX pin to the RX</span></span>\n<span class=\"line\"><span style=\"\"> * pin of the transceiver causes measurement errors: the sample point</span></span>\n<span class=\"line\"><span style=\"\"> * on the RX pin might occur on the previous bit.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To solve this issue, ISO 11898-1 introduces in section 11.3.3</span></span>\n<span class=\"line\"><span style=\"\"> * \"Transmitter delay compensation\" a SSP (Secondary Sample Point)</span></span>\n<span class=\"line\"><span style=\"\"> * equal to the distance from the start of the bit time on the TX pin</span></span>\n<span class=\"line\"><span style=\"\"> * to the actual measurement on the RX pin.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This structure contains the parameters to calculate that SSP.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * -+----------- one bit ----------+-- TX pin</span></span>\n<span class=\"line\"><span style=\"\"> *  |&#x3C;--- Sample Point --->|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                         --+----------- one bit ----------+-- RX pin</span></span>\n<span class=\"line\"><span style=\"\"> *  |&#x3C;-------- TDCV -------->|</span></span>\n<span class=\"line\"><span style=\"\"> *                           |&#x3C;------- TDCO ------->|</span></span>\n<span class=\"line\"><span style=\"\"> *  |&#x3C;----------- Secondary Sample Point ---------->|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To increase precision, contrary to the other bittiming parameters</span></span>\n<span class=\"line\"><span style=\"\"> * which are measured in time quanta, the TDC parameters are measured</span></span>\n<span class=\"line\"><span style=\"\"> * in clock periods (also referred as \"minimum time quantum\" in ISO</span></span>\n<span class=\"line\"><span style=\"\"> * 11898-1).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @tdcv: Transmitter Delay Compensation Value. The time needed for</span></span>\n<span class=\"line\"><span style=\"\"> *\tthe signal to propagate, i.e. the distance, in clock periods,</span></span>\n<span class=\"line\"><span style=\"\"> *\tfrom the start of the bit on the TX pin to when it is received</span></span>\n<span class=\"line\"><span style=\"\"> *\ton the RX pin. @tdcv depends on the controller modes:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t  CAN_CTRLMODE_TDC_AUTO is set: The transceiver dynamically</span></span>\n<span class=\"line\"><span style=\"\"> *\t  measures @tdcv for each transmitted CAN FD frame and the</span></span>\n<span class=\"line\"><span style=\"\"> *\t  value provided here should be ignored.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t  CAN_CTRLMODE_TDC_MANUAL is set: use the fixed provided @tdcv</span></span>\n<span class=\"line\"><span style=\"\"> *\t  value.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tN.B. CAN_CTRLMODE_TDC_AUTO and CAN_CTRLMODE_TDC_MANUAL are</span></span>\n<span class=\"line\"><span style=\"\"> *\tmutually exclusive. Only one can be set at a time. If both</span></span>\n<span class=\"line\"><span style=\"\"> *\tCAN_TDC_CTRLMODE_AUTO and CAN_TDC_CTRLMODE_MANUAL are unset,</span></span>\n<span class=\"line\"><span style=\"\"> *\tTDC is disabled and all the values of this structure should be</span></span>\n<span class=\"line\"><span style=\"\"> *\tignored.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @tdco: Transmitter Delay Compensation Offset. Offset value, in</span></span>\n<span class=\"line\"><span style=\"\"> *\tclock periods, defining the distance between the start of the</span></span>\n<span class=\"line\"><span style=\"\"> *\tbit reception on the RX pin of the transceiver and the SSP</span></span>\n<span class=\"line\"><span style=\"\"> *\tposition such that SSP = @tdcv + @tdco.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * @tdcf: Transmitter Delay Compensation Filter window. Defines the</span></span>\n<span class=\"line\"><span style=\"\"> *\tminimum value for the SSP position in clock periods. If the</span></span>\n<span class=\"line\"><span style=\"\"> *\tSSP position is less than @tdcf, then no delay compensations</span></span>\n<span class=\"line\"><span style=\"\"> *\toccur and the normal sampling point is used instead. The</span></span>\n<span class=\"line\"><span style=\"\"> *\tfeature is enabled if and only if @tdcv is set to zero</span></span>\n<span class=\"line\"><span style=\"\"> *\t(automatic mode) and @tdcf is configured to a value greater</span></span>\n<span class=\"line\"><span style=\"\"> *\tthan @tdco.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/can/bittiming.h#L20-L77",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/can/bittiming.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * can_get_relative_tdco() - TDCO relative to the sample point</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * struct can_tdc::tdco represents the absolute offset from TDCV. Some</span></span>\n<span class=\"line\"><span style=\"\"> * controllers use instead an offset relative to the Sample Point (SP)</span></span>\n<span class=\"line\"><span style=\"\"> * such that:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * SSP = TDCV + absolute TDCO</span></span>\n<span class=\"line\"><span style=\"\"> *     = TDCV + SP + relative TDCO</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * -+----------- one bit ----------+-- TX pin</span></span>\n<span class=\"line\"><span style=\"\"> *  |&#x3C;--- Sample Point --->|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                         --+----------- one bit ----------+-- RX pin</span></span>\n<span class=\"line\"><span style=\"\"> *  |&#x3C;-------- TDCV -------->|</span></span>\n<span class=\"line\"><span style=\"\"> *                           |&#x3C;------------------------>| absolute TDCO</span></span>\n<span class=\"line\"><span style=\"\"> *                           |&#x3C;--- Sample Point --->|</span></span>\n<span class=\"line\"><span style=\"\"> *                           |                      |&#x3C;->| relative TDCO</span></span>\n<span class=\"line\"><span style=\"\"> *  |&#x3C;------------- Secondary Sample Point ------------>|</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/can/dev.h#L95-L114",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/can/dev.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * mds states</span></span>\n<span class=\"line\"><span style=\"\"> *   > 0 -> in</span></span>\n<span class=\"line\"><span style=\"\"> *  &#x3C;= 0 -> out</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/ceph/ceph_fs.h#L241-L245",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/ceph/ceph_fs.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * struct sprd_dma_linklist - DMA link-list address structure</span></span>\n<span class=\"line\"><span style=\"\"> * @virt_addr: link-list virtual address to configure link-list node</span></span>\n<span class=\"line\"><span style=\"\"> * @phy_addr: link-list physical address to link DMA transfer</span></span>\n<span class=\"line\"><span style=\"\"> * @wrap_addr: the wrap address for link-list mode, which means once the</span></span>\n<span class=\"line\"><span style=\"\"> * transfer address reaches the wrap address, the next transfer address</span></span>\n<span class=\"line\"><span style=\"\"> * will jump to the address specified by wrap_to register.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The Spreadtrum DMA controller supports the link-list mode, that means slaves</span></span>\n<span class=\"line\"><span style=\"\"> * can supply several groups configurations (each configuration represents one</span></span>\n<span class=\"line\"><span style=\"\"> * DMA transfer) saved in memory, and DMA controller will link these groups</span></span>\n<span class=\"line\"><span style=\"\"> * configurations by writing the physical address of each configuration into the</span></span>\n<span class=\"line\"><span style=\"\"> * link-list register.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Just as shown below, the link-list pointer register will be pointed to the</span></span>\n<span class=\"line\"><span style=\"\"> * physical address of 'configuration 1', and the 'configuration 1' link-list</span></span>\n<span class=\"line\"><span style=\"\"> * pointer will be pointed to 'configuration 2', and so on.</span></span>\n<span class=\"line\"><span style=\"\"> * Once trigger the DMA transfer, the DMA controller will load 'configuration</span></span>\n<span class=\"line\"><span style=\"\"> * 1' to its registers automatically, after 'configuration 1' transaction is</span></span>\n<span class=\"line\"><span style=\"\"> * done, DMA controller will load 'configuration 2' automatically, until all</span></span>\n<span class=\"line\"><span style=\"\"> * DMA transactions are done.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note: The last link-list pointer should point to the physical address</span></span>\n<span class=\"line\"><span style=\"\"> * of 'configuration 1', which can avoid DMA controller loads incorrect</span></span>\n<span class=\"line\"><span style=\"\"> * configuration when the last configuration transaction is done.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *     DMA controller                    linklist memory</span></span>\n<span class=\"line\"><span style=\"\"> * ======================             -----------------------</span></span>\n<span class=\"line\"><span style=\"\"> *|                      |           |    configuration 1    |&#x3C;---</span></span>\n<span class=\"line\"><span style=\"\"> *|   DMA controller     |   ------->|                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *|                      |   |       |                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *|                      |   |       |                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *|                      |   |       |                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *| linklist pointer reg |----   ----|    linklist pointer   |   |</span></span>\n<span class=\"line\"><span style=\"\"> * ======================        |    -----------------------    |</span></span>\n<span class=\"line\"><span style=\"\"> *                               |                               |</span></span>\n<span class=\"line\"><span style=\"\"> *                               |    -----------------------    |</span></span>\n<span class=\"line\"><span style=\"\"> *                               |   |    configuration 2    |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                               --->|                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                   |                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                   |                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                   |                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                               ----|    linklist pointer   |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                               |    -----------------------    |</span></span>\n<span class=\"line\"><span style=\"\"> *                               |                               |</span></span>\n<span class=\"line\"><span style=\"\"> *                               |    -----------------------    |</span></span>\n<span class=\"line\"><span style=\"\"> *                               |   |    configuration 3    |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                               --->|                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                   |                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                   |           .           |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                               .               |</span></span>\n<span class=\"line\"><span style=\"\"> *                                               .               |</span></span>\n<span class=\"line\"><span style=\"\"> *                                               .               |</span></span>\n<span class=\"line\"><span style=\"\"> *                               |               .               |</span></span>\n<span class=\"line\"><span style=\"\"> *                               |    -----------------------    |</span></span>\n<span class=\"line\"><span style=\"\"> *                               |   |    configuration n    |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                               --->|                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                   |                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                   |                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                   |                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *                                   |    linklist pointer   |----</span></span>\n<span class=\"line\"><span style=\"\"> *                                    -----------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To support the link-list mode, DMA slaves should allocate one segment memory</span></span>\n<span class=\"line\"><span style=\"\"> * from always-on IRAM or dma coherent memory to store these groups of DMA</span></span>\n<span class=\"line\"><span style=\"\"> * configuration, and pass the virtual and physical address to DMA controller.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/dma/sprd-dma.h#L117-L183",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/dma/sprd-dma.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * arch_scale_cpu_capacity - get the capacity scale factor of a given CPU.</span></span>\n<span class=\"line\"><span style=\"\"> * @cpu: the CPU in question.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Return: the CPU scale factor normalized against SCHED_CAPACITY_SCALE, i.e.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *             max_perf(cpu)</span></span>\n<span class=\"line\"><span style=\"\"> *      ----------------------------- * SCHED_CAPACITY_SCALE</span></span>\n<span class=\"line\"><span style=\"\"> *      max(max_perf(c) : c \\in CPUs)</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/linux/sched/topology.h#L246-L255",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/linux/sched/topology.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Processor error section:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  +-sal_log_processor_info_t *info-------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  | sal_log_section_hdr_t header;              |</span></span>\n<span class=\"line\"><span style=\"\"> *  | ...                                        |</span></span>\n<span class=\"line\"><span style=\"\"> *  | sal_log_mod_error_info_t info[0];          |</span></span>\n<span class=\"line\"><span style=\"\"> *  +-+----------------+-------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *    | CACHE_CHECK    |  ^ num_cache_check v</span></span>\n<span class=\"line\"><span style=\"\"> *    +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *    | TLB_CHECK      |  ^ num_tlb_check v</span></span>\n<span class=\"line\"><span style=\"\"> *    +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *    | BUS_CHECK      |  ^ num_bus_check v</span></span>\n<span class=\"line\"><span style=\"\"> *    +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *    | REG_FILE_CHECK |  ^ num_reg_file_check v</span></span>\n<span class=\"line\"><span style=\"\"> *    +----------------+</span></span>\n<span class=\"line\"><span style=\"\"> *    | MS_CHECK       |  ^ num_ms_check v</span></span>\n<span class=\"line\"><span style=\"\"> *  +-struct cpuid_info *id----------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *  | regs[5];                                   |</span></span>\n<span class=\"line\"><span style=\"\"> *  | reserved;                                  |</span></span>\n<span class=\"line\"><span style=\"\"> *  +-sal_processor_static_info_t *regs----------+</span></span>\n<span class=\"line\"><span style=\"\"> *  | valid;                                     |</span></span>\n<span class=\"line\"><span style=\"\"> *  | ...                                        |</span></span>\n<span class=\"line\"><span style=\"\"> *  | fr[128];                                   |</span></span>\n<span class=\"line\"><span style=\"\"> *  +--------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/ia64/kernel/mca_drv.h#L9-L34",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": true,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/ia64/kernel/mca_drv.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> *    In the 4 OP mode there is four possible configurations how the</span></span>\n<span class=\"line\"><span style=\"\"> *      operators can be connected together (in 2 OP modes there is just</span></span>\n<span class=\"line\"><span style=\"\"> *      AM or FM). The 4 OP connection mode is defined by the rightmost</span></span>\n<span class=\"line\"><span style=\"\"> *      bit of the FEEDBACK_CONNECTION (0xC0-0xC8) on the both halves.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      First half      Second half     Mode</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                       +---+</span></span>\n<span class=\"line\"><span style=\"\"> *                                       v   |</span></span>\n<span class=\"line\"><span style=\"\"> *      0               0               >+-1-+--2--3--4--></span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                      </span></span>\n<span class=\"line\"><span style=\"\"> *                                       +---+</span></span>\n<span class=\"line\"><span style=\"\"> *                                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *      0               1               >+-1-+--2-+</span></span>\n<span class=\"line\"><span style=\"\"> *                                                |-></span></span>\n<span class=\"line\"><span style=\"\"> *                                      >--3----4-+</span></span>\n<span class=\"line\"><span style=\"\"> *                                      </span></span>\n<span class=\"line\"><span style=\"\"> *                                       +---+</span></span>\n<span class=\"line\"><span style=\"\"> *                                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *      1               0               >+-1-+-----+</span></span>\n<span class=\"line\"><span style=\"\"> *                                                 |-></span></span>\n<span class=\"line\"><span style=\"\"> *                                      >--2--3--4-+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                       +---+</span></span>\n<span class=\"line\"><span style=\"\"> *                                       |   |</span></span>\n<span class=\"line\"><span style=\"\"> *      1               1               >+-1-+--+</span></span>\n<span class=\"line\"><span style=\"\"> *                                              |</span></span>\n<span class=\"line\"><span style=\"\"> *                                      >--2--3-+-></span></span>\n<span class=\"line\"><span style=\"\"> *                                              |</span></span>\n<span class=\"line\"><span style=\"\"> *                                      >--4----+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/sound/opl3.h#L160-L193",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/sound/opl3.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * struct acrn_io_request - 256-byte ACRN I/O request</span></span>\n<span class=\"line\"><span style=\"\"> * @type:\t\tType of this request (ACRN_IOREQ_TYPE_*).</span></span>\n<span class=\"line\"><span style=\"\"> * @completion_polling:\tPolling flag. Hypervisor will poll completion of the</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\tI/O request if this flag set.</span></span>\n<span class=\"line\"><span style=\"\"> * @reserved0:\t\tReserved fields.</span></span>\n<span class=\"line\"><span style=\"\"> * @reqs:\t\tUnion of different types of request. Byte offset: 64.</span></span>\n<span class=\"line\"><span style=\"\"> * @reqs.pio_request:\tPIO request data of the I/O request.</span></span>\n<span class=\"line\"><span style=\"\"> * @reqs.pci_request:\tPCI configuration space request data of the I/O request.</span></span>\n<span class=\"line\"><span style=\"\"> * @reqs.mmio_request:\tMMIO request data of the I/O request.</span></span>\n<span class=\"line\"><span style=\"\"> * @reqs.data:\t\tRaw data of the I/O request.</span></span>\n<span class=\"line\"><span style=\"\"> * @reserved1:\t\tReserved fields.</span></span>\n<span class=\"line\"><span style=\"\"> * @kernel_handled:\tFlag indicates this request need be handled in kernel.</span></span>\n<span class=\"line\"><span style=\"\"> * @processed:\t\tThe status of this request (ACRN_IOREQ_STATE_*).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The state transitions of ACRN I/O request:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *    FREE -> PENDING -> PROCESSING -> COMPLETE -> FREE -> ...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * An I/O request in COMPLETE or FREE state is owned by the hypervisor. HSM and</span></span>\n<span class=\"line\"><span style=\"\"> * ACRN userspace are in charge of processing the others.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * On basis of the states illustrated above, a typical lifecycle of ACRN IO</span></span>\n<span class=\"line\"><span style=\"\"> * request would look like:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Flow                 (assume the initial state is FREE)</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * |   Service VM vCPU 0     Service VM vCPU x      User vCPU y</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * |                                             hypervisor:</span></span>\n<span class=\"line\"><span style=\"\"> * |                                               fills in type, addr, etc.</span></span>\n<span class=\"line\"><span style=\"\"> * |                                               pauses the User VM vCPU y</span></span>\n<span class=\"line\"><span style=\"\"> * |                                               sets the state to PENDING (a)</span></span>\n<span class=\"line\"><span style=\"\"> * |                                               fires an upcall to Service VM</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * | HSM:</span></span>\n<span class=\"line\"><span style=\"\"> * |  scans for PENDING requests</span></span>\n<span class=\"line\"><span style=\"\"> * |  sets the states to PROCESSING (b)</span></span>\n<span class=\"line\"><span style=\"\"> * |  assigns the requests to clients (c)</span></span>\n<span class=\"line\"><span style=\"\"> * V</span></span>\n<span class=\"line\"><span style=\"\"> * |                     client:</span></span>\n<span class=\"line\"><span style=\"\"> * |                       scans for the assigned requests</span></span>\n<span class=\"line\"><span style=\"\"> * |                       handles the requests (d)</span></span>\n<span class=\"line\"><span style=\"\"> * |                     HSM:</span></span>\n<span class=\"line\"><span style=\"\"> * |                       sets states to COMPLETE</span></span>\n<span class=\"line\"><span style=\"\"> * |                       notifies the hypervisor</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * |                     hypervisor:</span></span>\n<span class=\"line\"><span style=\"\"> * |                       resumes User VM vCPU y (e)</span></span>\n<span class=\"line\"><span style=\"\"> * |</span></span>\n<span class=\"line\"><span style=\"\"> * |                                             hypervisor:</span></span>\n<span class=\"line\"><span style=\"\"> * |                                               post handling (f)</span></span>\n<span class=\"line\"><span style=\"\"> * V                                               sets states to FREE</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that the procedures (a) to (f) in the illustration above require to be</span></span>\n<span class=\"line\"><span style=\"\"> * strictly processed in the order.  One vCPU cannot trigger another request of</span></span>\n<span class=\"line\"><span style=\"\"> * I/O emulation before completing the previous one.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Atomic and barriers are required when HSM and hypervisor accessing the state</span></span>\n<span class=\"line\"><span style=\"\"> * of &#x26;struct acrn_io_request.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/uapi/linux/acrn.h#L86-L147",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/uapi/linux/acrn.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * KVM dirty GFN flags, defined as:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * |---------------+---------------+--------------|</span></span>\n<span class=\"line\"><span style=\"\"> * | bit 1 (reset) | bit 0 (dirty) | Status       |</span></span>\n<span class=\"line\"><span style=\"\"> * |---------------+---------------+--------------|</span></span>\n<span class=\"line\"><span style=\"\"> * |             0 |             0 | Invalid GFN  |</span></span>\n<span class=\"line\"><span style=\"\"> * |             0 |             1 | Dirty GFN    |</span></span>\n<span class=\"line\"><span style=\"\"> * |             1 |             X | GFN to reset |</span></span>\n<span class=\"line\"><span style=\"\"> * |---------------+---------------+--------------|</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Lifecycle of a dirty GFN goes like:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *      dirtied         harvested        reset</span></span>\n<span class=\"line\"><span style=\"\"> * 00 -----------> 01 -------------> 1X -------+</span></span>\n<span class=\"line\"><span style=\"\"> *  ^                                          |</span></span>\n<span class=\"line\"><span style=\"\"> *  |                                          |</span></span>\n<span class=\"line\"><span style=\"\"> *  +------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The userspace program is only responsible for the 01->1X state</span></span>\n<span class=\"line\"><span style=\"\"> * conversion after harvesting an entry.  Also, it must not skip any</span></span>\n<span class=\"line\"><span style=\"\"> * dirty bits, so that dirty bits are always harvested in sequence.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/uapi/linux/kvm.h#L2071-L2093",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": true
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/uapi/linux/kvm.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* This file provides translation primitives and tables for the conversion</span></span>\n<span class=\"line\"><span style=\"\"> * of (ASCII) characters to a 14-segments notation.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The 14 segment's wikipedia notation below is used as standard.</span></span>\n<span class=\"line\"><span style=\"\"> * See: https://en.wikipedia.org/wiki/Fourteen-segment_display</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Notation:\t+---a---+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|\\  |  /|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tf h i j b</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|  \\|/  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t+-g1+-g2+</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|  /|\\  |</span></span>\n<span class=\"line\"><span style=\"\"> *\t\te k l m c</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|/  |  \\|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t+---d---+</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Usage:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   Register a map variable, and fill it with a character set:</span></span>\n<span class=\"line\"><span style=\"\"> *\tstatic SEG14_DEFAULT_MAP(map_seg14);</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *   Then use for conversion:</span></span>\n<span class=\"line\"><span style=\"\"> *\tseg14 = map_to_seg14(&#x26;map_seg14, some_char);</span></span>\n<span class=\"line\"><span style=\"\"> *\t...</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In device drivers it is recommended, if required, to make the char map</span></span>\n<span class=\"line\"><span style=\"\"> * accessible via the sysfs interface using the following scheme:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * static ssize_t map_seg14_show(struct device *dev,</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t struct device_attribute *attr, char *buf)</span></span>\n<span class=\"line\"><span style=\"\"> * {</span></span>\n<span class=\"line\"><span style=\"\"> *\tmemcpy(buf, &#x26;map_seg14, sizeof(map_seg14));</span></span>\n<span class=\"line\"><span style=\"\"> *\treturn sizeof(map_seg14);</span></span>\n<span class=\"line\"><span style=\"\"> * }</span></span>\n<span class=\"line\"><span style=\"\"> * static ssize_t map_seg14_store(struct device *dev,</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t  struct device_attribute *attr,</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t  const char *buf, size_t cnt)</span></span>\n<span class=\"line\"><span style=\"\"> * {</span></span>\n<span class=\"line\"><span style=\"\"> *\tif (cnt != sizeof(map_seg14))</span></span>\n<span class=\"line\"><span style=\"\"> *\t\treturn -EINVAL;</span></span>\n<span class=\"line\"><span style=\"\"> *\tmemcpy(&#x26;map_seg14, buf, cnt);</span></span>\n<span class=\"line\"><span style=\"\"> *\treturn cnt;</span></span>\n<span class=\"line\"><span style=\"\"> * }</span></span>\n<span class=\"line\"><span style=\"\"> * static DEVICE_ATTR_RW(map_seg14);</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/uapi/linux/map_to_14segment.h#L13-L58",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/uapi/linux/map_to_14segment.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/**</span></span>\n<span class=\"line\"><span style=\"\"> * struct omap3isp_prev_rgbtorgb - RGB to RGB Blending</span></span>\n<span class=\"line\"><span style=\"\"> * @matrix: Blending values(S12Q8 format)</span></span>\n<span class=\"line\"><span style=\"\"> *              [RR] [GR] [BR]</span></span>\n<span class=\"line\"><span style=\"\"> *              [RG] [GG] [BG]</span></span>\n<span class=\"line\"><span style=\"\"> *              [RB] [GB] [BB]</span></span>\n<span class=\"line\"><span style=\"\"> * @offset: Blending offset value for R,G,B in 2's complement integer format.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/uapi/linux/omap3isp.h#L556-L563",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/uapi/linux/omap3isp.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Synchronize ar.itc of the current (slave) CPU with the ar.itc of the MASTER CPU</span></span>\n<span class=\"line\"><span style=\"\"> * (normally the time-keeper CPU).  We use a closed loop to eliminate the possibility of</span></span>\n<span class=\"line\"><span style=\"\"> * unaccounted-for errors (such as getting a machine check in the middle of a calibration</span></span>\n<span class=\"line\"><span style=\"\"> * step).  The basic idea is for the slave to ask the master what itc value it has and to</span></span>\n<span class=\"line\"><span style=\"\"> * read its own itc before and after the master responds.  Each iteration gives us three</span></span>\n<span class=\"line\"><span style=\"\"> * timestamps:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tslave\t\tmaster</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tt0 ---\\</span></span>\n<span class=\"line\"><span style=\"\"> *             ---\\</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t   ---></span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\ttm</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t   /---</span></span>\n<span class=\"line\"><span style=\"\"> *\t       /---</span></span>\n<span class=\"line\"><span style=\"\"> *\tt1 &#x3C;---</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The goal is to adjust the slave's ar.itc such that tm falls exactly half-way between t0</span></span>\n<span class=\"line\"><span style=\"\"> * and t1.  If we achieve this, the clocks are synchronized provided the interconnect</span></span>\n<span class=\"line\"><span style=\"\"> * between the slave and the master is symmetric.  Even if the interconnect were</span></span>\n<span class=\"line\"><span style=\"\"> * asymmetric, we would still know that the synchronization error is smaller than the</span></span>\n<span class=\"line\"><span style=\"\"> * roundtrip latency (t0 - t1).</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * When the interconnect is quiet and symmetric, this lets us synchronize the itc to</span></span>\n<span class=\"line\"><span style=\"\"> * within one or two cycles.  However, we can only *guarantee* that the synchronization is</span></span>\n<span class=\"line\"><span style=\"\"> * accurate to within a round-trip time, which is typically in the range of several</span></span>\n<span class=\"line\"><span style=\"\"> * hundred cycles (e.g., ~500 cycles).  In practice, this means that the itc's are usually</span></span>\n<span class=\"line\"><span style=\"\"> * almost perfectly synchronized, but we shouldn't assume that the accuracy is much better</span></span>\n<span class=\"line\"><span style=\"\"> * than half a micro second or so.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/arch/ia64/kernel/smpboot.c#L242-L273",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/arch/ia64/kernel/smpboot.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> * Single \"mode\" entry. This describes one set of signal timings a display can</span></span>\n<span class=\"line\"><span style=\"\"> * have in one setting. This struct can later be converted to struct videomode</span></span>\n<span class=\"line\"><span style=\"\"> * (see include/video/videomode.h). As each timing_entry can be defined as a</span></span>\n<span class=\"line\"><span style=\"\"> * range, one struct display_timing may become multiple struct videomodes.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Example: hsync active high, vsync active low</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t    Active Video</span></span>\n<span class=\"line\"><span style=\"\"> * Video  ______________________XXXXXXXXXXXXXXXXXXXXXX_____________________</span></span>\n<span class=\"line\"><span style=\"\"> *\t  |&#x3C;- sync ->|&#x3C;- back ->|&#x3C;----- active ----->|&#x3C;- front ->|&#x3C;- sync..</span></span>\n<span class=\"line\"><span style=\"\"> *\t  |\t     |\t porch  |\t\t     |\t porch\t |</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * HSync _|¯¯¯¯¯¯¯¯¯¯|___________________________________________|¯¯¯¯¯¯¯¯¯</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * VSync ¯|__________|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|_________</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/video/display_timing.h#L46-L62",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": true,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/video/display_timing.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Notes on per-window bpp settings</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Value\tWin0\t Win1\t  Win2\t   Win3\t    Win 4</span></span>\n<span class=\"line\"><span style=\"\"> * 0000\t\t1(P)\t 1(P)\t  1(P)\t   1(P)\t    1(P)</span></span>\n<span class=\"line\"><span style=\"\"> * 0001\t\t2(P)\t 2(P)     2(P)\t   2(P)\t    2(P)</span></span>\n<span class=\"line\"><span style=\"\"> * 0010\t\t4(P)\t 4(P)     4(P)\t   4(P)     -none-</span></span>\n<span class=\"line\"><span style=\"\"> * 0011\t\t8(P)\t 8(P)     -none-   -none-   -none-</span></span>\n<span class=\"line\"><span style=\"\"> * 0100\t\t-none-\t 8(A232)  8(A232)  -none-   -none-</span></span>\n<span class=\"line\"><span style=\"\"> * 0101\t\t16(565)\t 16(565)  16(565)  16(565)   16(565)</span></span>\n<span class=\"line\"><span style=\"\"> * 0110\t\t-none-\t 16(A555) 16(A555) 16(A555)  16(A555)</span></span>\n<span class=\"line\"><span style=\"\"> * 0111\t\t16(I555) 16(I565) 16(I555) 16(I555)  16(I555)</span></span>\n<span class=\"line\"><span style=\"\"> * 1000\t\t18(666)\t 18(666)  18(666)  18(666)   18(666)</span></span>\n<span class=\"line\"><span style=\"\"> * 1001\t\t-none-\t 18(A665) 18(A665) 18(A665)  16(A665)</span></span>\n<span class=\"line\"><span style=\"\"> * 1010\t\t-none-\t 19(A666) 19(A666) 19(A666)  19(A666)</span></span>\n<span class=\"line\"><span style=\"\"> * 1011\t\t24(888)\t 24(888)  24(888)  24(888)   24(888)</span></span>\n<span class=\"line\"><span style=\"\"> * 1100\t\t-none-\t 24(A887) 24(A887) 24(A887)  24(A887)</span></span>\n<span class=\"line\"><span style=\"\"> * 1101\t\t-none-\t 25(A888) 25(A888) 25(A888)  25(A888)</span></span>\n<span class=\"line\"><span style=\"\"> * 1110\t\t-none-\t -none-\t  -none-   -none-    -none-</span></span>\n<span class=\"line\"><span style=\"\"> * 1111\t\t-none-\t -none-   -none-   -none-    -none-</span></span>\n<span class=\"line\"><span style=\"\">*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/video/samsung_fimd.h#L458-L477",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/video/samsung_fimd.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\"> ******************************************************************************</span></span>\n<span class=\"line\"><span style=\"\"> *                               STATE DIAGRAMS</span></span>\n<span class=\"line\"><span style=\"\"> ******************************************************************************</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Tool stack creates front and back state nodes with initial state</span></span>\n<span class=\"line\"><span style=\"\"> * XenbusStateInitialising.</span></span>\n<span class=\"line\"><span style=\"\"> * Tool stack creates and sets up frontend display configuration</span></span>\n<span class=\"line\"><span style=\"\"> * nodes per domain.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *-------------------------------- Normal flow --------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Front                                Back</span></span>\n<span class=\"line\"><span style=\"\"> * =================================    =====================================</span></span>\n<span class=\"line\"><span style=\"\"> * XenbusStateInitialising              XenbusStateInitialising</span></span>\n<span class=\"line\"><span style=\"\"> *                                       o Query backend device identification</span></span>\n<span class=\"line\"><span style=\"\"> *                                         data.</span></span>\n<span class=\"line\"><span style=\"\"> *                                       o Open and validate backend device.</span></span>\n<span class=\"line\"><span style=\"\"> *                                                |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                V</span></span>\n<span class=\"line\"><span style=\"\"> *                                      XenbusStateInitWait</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * o Query frontend configuration</span></span>\n<span class=\"line\"><span style=\"\"> * o Allocate and initialize</span></span>\n<span class=\"line\"><span style=\"\"> *   event channels per configured</span></span>\n<span class=\"line\"><span style=\"\"> *   connector.</span></span>\n<span class=\"line\"><span style=\"\"> * o Publish transport parameters</span></span>\n<span class=\"line\"><span style=\"\"> *   that will be in effect during</span></span>\n<span class=\"line\"><span style=\"\"> *   this connection.</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              V</span></span>\n<span class=\"line\"><span style=\"\"> * XenbusStateInitialised</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                       o Query frontend transport parameters.</span></span>\n<span class=\"line\"><span style=\"\"> *                                       o Connect to the event channels.</span></span>\n<span class=\"line\"><span style=\"\"> *                                                |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                |</span></span>\n<span class=\"line\"><span style=\"\"> *                                                V</span></span>\n<span class=\"line\"><span style=\"\"> *                                      XenbusStateConnected</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *  o Create and initialize OS</span></span>\n<span class=\"line\"><span style=\"\"> *    virtual display connectors</span></span>\n<span class=\"line\"><span style=\"\"> *    as per configuration.</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              V</span></span>\n<span class=\"line\"><span style=\"\"> * XenbusStateConnected</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *                                      XenbusStateUnknown</span></span>\n<span class=\"line\"><span style=\"\"> *                                      XenbusStateClosed</span></span>\n<span class=\"line\"><span style=\"\"> *                                      XenbusStateClosing</span></span>\n<span class=\"line\"><span style=\"\"> * o Remove virtual display device</span></span>\n<span class=\"line\"><span style=\"\"> * o Remove event channels</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              |</span></span>\n<span class=\"line\"><span style=\"\"> *              V</span></span>\n<span class=\"line\"><span style=\"\"> * XenbusStateClosed</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *------------------------------- Recovery flow -------------------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In case of frontend unrecoverable errors backend handles that as</span></span>\n<span class=\"line\"><span style=\"\"> * if frontend goes into the XenbusStateClosed state.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In case of backend unrecoverable errors frontend tries removing</span></span>\n<span class=\"line\"><span style=\"\"> * the virtualized device. If this is possible at the moment of error,</span></span>\n<span class=\"line\"><span style=\"\"> * then frontend goes into the XenbusStateInitialising state and is ready for</span></span>\n<span class=\"line\"><span style=\"\"> * new connection with backend. If the virtualized device is still in use and</span></span>\n<span class=\"line\"><span style=\"\"> * cannot be removed, then frontend goes into the XenbusStateReconfiguring state</span></span>\n<span class=\"line\"><span style=\"\"> * until either the virtualized device is removed or backend initiates a new</span></span>\n<span class=\"line\"><span style=\"\"> * connection. On the virtualized device removal frontend goes into the</span></span>\n<span class=\"line\"><span style=\"\"> * XenbusStateInitialising state.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note on XenbusStateReconfiguring state of the frontend: if backend has</span></span>\n<span class=\"line\"><span style=\"\"> * unrecoverable errors then frontend cannot send requests to the backend</span></span>\n<span class=\"line\"><span style=\"\"> * and thus cannot provide functionality of the virtualized device anymore.</span></span>\n<span class=\"line\"><span style=\"\"> * After backend is back to normal the virtualized device may still hold some</span></span>\n<span class=\"line\"><span style=\"\"> * state: configuration in use, allocated buffers, client application state etc.</span></span>\n<span class=\"line\"><span style=\"\"> * In most cases, this will require frontend to implement complex recovery</span></span>\n<span class=\"line\"><span style=\"\"> * reconnect logic. Instead, by going into XenbusStateReconfiguring state,</span></span>\n<span class=\"line\"><span style=\"\"> * frontend will make sure no new clients of the virtualized device are</span></span>\n<span class=\"line\"><span style=\"\"> * accepted, allow existing client(s) to exit gracefully by signaling error</span></span>\n<span class=\"line\"><span style=\"\"> * state etc.</span></span>\n<span class=\"line\"><span style=\"\"> * Once all the clients are gone frontend can reinitialize the virtualized</span></span>\n<span class=\"line\"><span style=\"\"> * device and get into XenbusStateInitialising state again signaling the</span></span>\n<span class=\"line\"><span style=\"\"> * backend that a new connection can be made.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There are multiple conditions possible under which frontend will go from</span></span>\n<span class=\"line\"><span style=\"\"> * XenbusStateReconfiguring into XenbusStateInitialising, some of them are OS</span></span>\n<span class=\"line\"><span style=\"\"> * specific. For example:</span></span>\n<span class=\"line\"><span style=\"\"> * 1. The underlying OS framework may provide callbacks to signal that the last</span></span>\n<span class=\"line\"><span style=\"\"> *    client of the virtualized device has gone and the device can be removed</span></span>\n<span class=\"line\"><span style=\"\"> * 2. Frontend can schedule a deferred work (timer/tasklet/workqueue)</span></span>\n<span class=\"line\"><span style=\"\"> *    to periodically check if this is the right time to re-try removal of</span></span>\n<span class=\"line\"><span style=\"\"> *    the virtualized device.</span></span>\n<span class=\"line\"><span style=\"\"> * 3. By any other means.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> ******************************************************************************</span></span>\n<span class=\"line\"><span style=\"\"> *                             REQUEST CODES</span></span>\n<span class=\"line\"><span style=\"\"> ******************************************************************************</span></span>\n<span class=\"line\"><span style=\"\"> * Request codes [0; 15] are reserved and must not be used</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/torvalds/linux/blob/67d7c3023a672c2b73d19d6d23684df670fce648/include/xen/interface/io/displif.h#L229-L331",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "linux/include/xen/interface/io/displif.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// WebAssembly instructions for exception handling are structured as follows:</span></span>\n<span class=\"line\"><span style=\"\">//   try</span></span>\n<span class=\"line\"><span style=\"\">//     instructions*</span></span>\n<span class=\"line\"><span style=\"\">//   catch             ----|</span></span>\n<span class=\"line\"><span style=\"\">//     instructions*       | -> A WebAssemblyException consists of this region</span></span>\n<span class=\"line\"><span style=\"\">//   end               ----|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// A WebAssemblyException object contains BBs that belong to a 'catch' part of</span></span>\n<span class=\"line\"><span style=\"\">// the try-catch-end structure to be created later. 'try' and 'end' markers</span></span>\n<span class=\"line\"><span style=\"\">// are not present at this stage and will be generated in CFGStackify pass.</span></span>\n<span class=\"line\"><span style=\"\">// Because CFGSort requires all the BBs within a catch part to be sorted</span></span>\n<span class=\"line\"><span style=\"\">// together as it does for loops, this pass calculates the nesting structure of</span></span>\n<span class=\"line\"><span style=\"\">// catch part of exceptions in a function.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// An exception catch part is defined as a BB with catch instruction and all</span></span>\n<span class=\"line\"><span style=\"\">// other BBs dominated by this BB.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/WebAssembly/WebAssemblyExceptionInfo.h#L25-L40",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyExceptionInfo.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This function creates additional block for storing varargs guarded</span></span>\n<span class=\"line\"><span style=\"\">// registers. It adds check for %al into entry block, to skip</span></span>\n<span class=\"line\"><span style=\"\">// GuardedRegsBlk if xmm registers should not be stored.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     EntryBlk[VAStartPseudoInstr]     EntryBlk</span></span>\n<span class=\"line\"><span style=\"\">//        |                              |     .</span></span>\n<span class=\"line\"><span style=\"\">//        |                              |        .</span></span>\n<span class=\"line\"><span style=\"\">//        |                              |   GuardedRegsBlk</span></span>\n<span class=\"line\"><span style=\"\">//        |                      =>      |        .</span></span>\n<span class=\"line\"><span style=\"\">//        |                              |     .</span></span>\n<span class=\"line\"><span style=\"\">//        |                             TailBlk</span></span>\n<span class=\"line\"><span style=\"\">//        |                              |</span></span>\n<span class=\"line\"><span style=\"\">//        |                              |</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/X86/X86ExpandPseudo.cpp#L609-L622",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/X86/X86ExpandPseudo.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//===- Target/X86/X86LowerAMXType.cpp - -------------------------*- C++ -*-===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span></span>\n<span class=\"line\"><span style=\"\">// See https://llvm.org/LICENSE.txt for license information.</span></span>\n<span class=\"line\"><span style=\"\">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">/// \\file Pass to transform &#x3C;256 x i32> load/store</span></span>\n<span class=\"line\"><span style=\"\">/// &#x3C;256 x i32> is bitcasted to x86_amx on X86, and AMX instruction set only</span></span>\n<span class=\"line\"><span style=\"\">/// provides simple operation on x86_amx. The basic elementwise operation</span></span>\n<span class=\"line\"><span style=\"\">/// is not supported by AMX. Since x86_amx is bitcasted from vector &#x3C;256 x i32></span></span>\n<span class=\"line\"><span style=\"\">/// and only AMX intrinsics can operate on the type, we need transform</span></span>\n<span class=\"line\"><span style=\"\">/// load/store &#x3C;256 x i32> instruction to AMX load/store. If the bitcast can</span></span>\n<span class=\"line\"><span style=\"\">/// not be combined with load/store, we transform the bitcast to amx load/store</span></span>\n<span class=\"line\"><span style=\"\">/// and &#x3C;256 x i32> store/load.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// If Front End not use O0 but the Mid/Back end use O0, (e.g. \"Clang -O2 -S</span></span>\n<span class=\"line\"><span style=\"\">/// -emit-llvm t.c\" + \"llc t.ll\") we should make sure the amx data is volatile,</span></span>\n<span class=\"line\"><span style=\"\">/// because that is necessary for AMX fast register allocation. (In Fast</span></span>\n<span class=\"line\"><span style=\"\">/// registera allocation, register will be allocated before spill/reload, so</span></span>\n<span class=\"line\"><span style=\"\">/// there is no additional register for amx to identify the step in spill.)</span></span>\n<span class=\"line\"><span style=\"\">/// The volatileTileData() will handle this case.</span></span>\n<span class=\"line\"><span style=\"\">/// e.g.</span></span>\n<span class=\"line\"><span style=\"\">/// ----------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">/// | def %td = ...                                          |</span></span>\n<span class=\"line\"><span style=\"\">/// | ...                                                    |</span></span>\n<span class=\"line\"><span style=\"\">/// | \"use %td\"                                              |</span></span>\n<span class=\"line\"><span style=\"\">/// ----------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">/// will transfer to --></span></span>\n<span class=\"line\"><span style=\"\">/// ----------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">/// | def %td = ...                                          |</span></span>\n<span class=\"line\"><span style=\"\">/// | call void @llvm.x86.tilestored64.internal(mem, %td)    |</span></span>\n<span class=\"line\"><span style=\"\">/// | ...                                                    |</span></span>\n<span class=\"line\"><span style=\"\">/// | %td2 = call x86_amx @llvm.x86.tileloadd64.internal(mem)|</span></span>\n<span class=\"line\"><span style=\"\">/// | \"use %td2\"                                             |</span></span>\n<span class=\"line\"><span style=\"\">/// ----------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/X86/X86LowerAMXType.cpp#L1-L40",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/X86/X86LowerAMXType.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Test values</span></span>\n<span class=\"line\"><span style=\"\">// duration     hours   minutes seconds fractional</span></span>\n<span class=\"line\"><span style=\"\">// 5000s            1       23      20      0</span></span>\n<span class=\"line\"><span style=\"\">// 5000 minutes     83      20      0       0</span></span>\n<span class=\"line\"><span style=\"\">// 123456789ms      34      17      36      789ms</span></span>\n<span class=\"line\"><span style=\"\">// 123456789us      0       2       3       456789us</span></span>\n<span class=\"line\"><span style=\"\">// 123456789ns      0       0       0       123456789ns</span></span>\n<span class=\"line\"><span style=\"\">// 1000mfn          0       20      9       0.6 (6000/10000)</span></span>\n<span class=\"line\"><span style=\"\">// 10000mfn         3       21      36      0</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/libcxx/test/std/time/time.hms/time.hms.members/hours.pass.cpp#L16-L24",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/libcxx/test/std/time/time.hms/time.hms.members/hours.pass.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//===- DFAJumpThreading.cpp - Threads a switch statement inside a loop ----===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span></span>\n<span class=\"line\"><span style=\"\">// See https://llvm.org/LICENSE.txt for license information.</span></span>\n<span class=\"line\"><span style=\"\">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Transform each threading path to effectively jump thread the DFA. For</span></span>\n<span class=\"line\"><span style=\"\">// example, the CFG below could be transformed as follows, where the cloned</span></span>\n<span class=\"line\"><span style=\"\">// blocks unconditionally branch to the next correct case based on what is</span></span>\n<span class=\"line\"><span style=\"\">// identified in the analysis.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//          sw.bb                        sw.bb</span></span>\n<span class=\"line\"><span style=\"\">//        /   |   \\                    /   |   \\</span></span>\n<span class=\"line\"><span style=\"\">//   case1  case2  case3          case1  case2  case3</span></span>\n<span class=\"line\"><span style=\"\">//        \\   |   /                 |      |      |</span></span>\n<span class=\"line\"><span style=\"\">//       determinator            det.2   det.3  det.1</span></span>\n<span class=\"line\"><span style=\"\">//        br sw.bb                /        |        \\</span></span>\n<span class=\"line\"><span style=\"\">//                          sw.bb.2     sw.bb.3     sw.bb.1</span></span>\n<span class=\"line\"><span style=\"\">//                           br case2    br case3    br case1§</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Definitions and Terminology:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// * Threading path:</span></span>\n<span class=\"line\"><span style=\"\">//   a list of basic blocks, the exit state, and the block that determines</span></span>\n<span class=\"line\"><span style=\"\">//   the next state, for which the following notation will be used:</span></span>\n<span class=\"line\"><span style=\"\">//   &#x3C; path of BBs that form a cycle > [ state, determinator ]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// * Predictable switch:</span></span>\n<span class=\"line\"><span style=\"\">//   The switch variable is always a known constant so that all conditional</span></span>\n<span class=\"line\"><span style=\"\">//   jumps based on switch variable can be converted to unconditional jump.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// * Determinator:</span></span>\n<span class=\"line\"><span style=\"\">//   The basic block that determines the next state of the DFA.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Representing the optimization in C-like pseudocode: the code pattern on the</span></span>\n<span class=\"line\"><span style=\"\">// left could functionally be transformed to the right pattern if the switch</span></span>\n<span class=\"line\"><span style=\"\">// condition is predictable.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  X = A                       goto A</span></span>\n<span class=\"line\"><span style=\"\">//  for (...)                   A:</span></span>\n<span class=\"line\"><span style=\"\">//    switch (X)                  ...</span></span>\n<span class=\"line\"><span style=\"\">//      case A                    goto B</span></span>\n<span class=\"line\"><span style=\"\">//        X = B                 B:</span></span>\n<span class=\"line\"><span style=\"\">//      case B                    ...</span></span>\n<span class=\"line\"><span style=\"\">//        X = C                   goto C</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The pass first checks that switch variable X is decided by the control flow</span></span>\n<span class=\"line\"><span style=\"\">// path taken in the loop; for example, in case B, the next value of X is</span></span>\n<span class=\"line\"><span style=\"\">// decided to be C. It then enumerates through all paths in the loop and labels</span></span>\n<span class=\"line\"><span style=\"\">// the basic blocks where the next state is decided.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Using this information it creates new paths that unconditionally branch to</span></span>\n<span class=\"line\"><span style=\"\">// the next case. This involves cloning code, so it only gets triggered if the</span></span>\n<span class=\"line\"><span style=\"\">// amount of code duplicated is below a threshold.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp#L1-L58",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// CHI keeps information about values flowing out of a basic block.  It is</span></span>\n<span class=\"line\"><span style=\"\">// similar to PHI but in the inverse graph, and used for outgoing values on each</span></span>\n<span class=\"line\"><span style=\"\">// edge. For conciseness, it is computed only for instructions with multiple</span></span>\n<span class=\"line\"><span style=\"\">// occurrences in the CFG because they are the only hoistable candidates.</span></span>\n<span class=\"line\"><span style=\"\">//     A (CHI[{V, B, I1}, {V, C, I2}]</span></span>\n<span class=\"line\"><span style=\"\">//  /     \\</span></span>\n<span class=\"line\"><span style=\"\">// /       \\</span></span>\n<span class=\"line\"><span style=\"\">// B(I1)  C (I2)</span></span>\n<span class=\"line\"><span style=\"\">// The Value number for both I1 and I2 is V, the CHI node will save the</span></span>\n<span class=\"line\"><span style=\"\">// instruction as well as the edge where the value is flowing to.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Scalar/GVNHoist.cpp#L131-L140",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Scalar/GVNHoist.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Given an element pointer \\p BasePtr to the start of a (sub) matrix, compute</span></span>\n<span class=\"line\"><span style=\"\">// the start address of vector \\p VecIdx with type (\\p EltType x \\p NumElements)</span></span>\n<span class=\"line\"><span style=\"\">// assuming \\p Stride elements between start two consecutive vectors.</span></span>\n<span class=\"line\"><span style=\"\">// \\p Stride must be >= \\p NumElements.</span></span>\n<span class=\"line\"><span style=\"\">// For column-major matrixes, the function computes the address of a column</span></span>\n<span class=\"line\"><span style=\"\">// vectors and \\p NumElements must be set to the number of elements in a column</span></span>\n<span class=\"line\"><span style=\"\">// (= number of rows of the matrix). For row-major matrixes, the function</span></span>\n<span class=\"line\"><span style=\"\">// computes the address of a row vector and \\p NumElements must be set to the</span></span>\n<span class=\"line\"><span style=\"\">// number of elements in a column (= number of columns of the matrix).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Consider a 4x4 matrix in column-mjaor layout like below</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      0       1      2      3</span></span>\n<span class=\"line\"><span style=\"\">// 0   v_0_0  v_0_1  v_0_2  v_0_3</span></span>\n<span class=\"line\"><span style=\"\">// 1   v_1_0  v_1_1  v_1_2  v_1_3</span></span>\n<span class=\"line\"><span style=\"\">// 2   v_2_0  v_2_1  v_2_2  v_2_3</span></span>\n<span class=\"line\"><span style=\"\">// 3   v_3_0  v_3_1  v_3_2  v_3_3</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp#L131-L147",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Scalar/LowerMatrixIntrinsics.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//===- MergedLoadStoreMotion.cpp - merge and hoist/sink load/stores -------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span></span>\n<span class=\"line\"><span style=\"\">// See https://llvm.org/LICENSE.txt for license information.</span></span>\n<span class=\"line\"><span style=\"\">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//! \\file</span></span>\n<span class=\"line\"><span style=\"\">//! This pass performs merges of loads and stores on both sides of a</span></span>\n<span class=\"line\"><span style=\"\">//  diamond (hammock). It hoists the loads and sinks the stores.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The algorithm iteratively hoists two loads to the same address out of a</span></span>\n<span class=\"line\"><span style=\"\">// diamond (hammock) and merges them into a single load in the header. Similar</span></span>\n<span class=\"line\"><span style=\"\">// it sinks and merges two stores to the tail block (footer). The algorithm</span></span>\n<span class=\"line\"><span style=\"\">// iterates over the instructions of one side of the diamond and attempts to</span></span>\n<span class=\"line\"><span style=\"\">// find a matching load/store on the other side. New tail/footer block may be</span></span>\n<span class=\"line\"><span style=\"\">// insterted if the tail/footer block has more predecessors (not only the two</span></span>\n<span class=\"line\"><span style=\"\">// predecessors that are forming the diamond). It hoists / sinks when it thinks</span></span>\n<span class=\"line\"><span style=\"\">// it safe to do so.  This optimization helps with eg. hiding load latencies,</span></span>\n<span class=\"line\"><span style=\"\">// triggering if-conversion, and reducing static code size.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// NOTE: This code no longer performs load hoisting, it is subsumed by GVNHoist.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Example:</span></span>\n<span class=\"line\"><span style=\"\">// Diamond shaped code before merge:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//            header:</span></span>\n<span class=\"line\"><span style=\"\">//                     br %cond, label %if.then, label %if.else</span></span>\n<span class=\"line\"><span style=\"\">//                        +                    +</span></span>\n<span class=\"line\"><span style=\"\">//                       +                      +</span></span>\n<span class=\"line\"><span style=\"\">//                      +                        +</span></span>\n<span class=\"line\"><span style=\"\">//            if.then:                         if.else:</span></span>\n<span class=\"line\"><span style=\"\">//               %lt = load %addr_l               %le = load %addr_l</span></span>\n<span class=\"line\"><span style=\"\">//               &#x3C;use %lt>                        &#x3C;use %le></span></span>\n<span class=\"line\"><span style=\"\">//               &#x3C;...>                            &#x3C;...></span></span>\n<span class=\"line\"><span style=\"\">//               store %st, %addr_s               store %se, %addr_s</span></span>\n<span class=\"line\"><span style=\"\">//               br label %if.end                 br label %if.end</span></span>\n<span class=\"line\"><span style=\"\">//                     +                         +</span></span>\n<span class=\"line\"><span style=\"\">//                      +                       +</span></span>\n<span class=\"line\"><span style=\"\">//                       +                     +</span></span>\n<span class=\"line\"><span style=\"\">//            if.end (\"footer\"):</span></span>\n<span class=\"line\"><span style=\"\">//                     &#x3C;...></span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Diamond shaped code after merge:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//            header:</span></span>\n<span class=\"line\"><span style=\"\">//                     %l = load %addr_l</span></span>\n<span class=\"line\"><span style=\"\">//                     br %cond, label %if.then, label %if.else</span></span>\n<span class=\"line\"><span style=\"\">//                        +                    +</span></span>\n<span class=\"line\"><span style=\"\">//                       +                      +</span></span>\n<span class=\"line\"><span style=\"\">//                      +                        +</span></span>\n<span class=\"line\"><span style=\"\">//            if.then:                         if.else:</span></span>\n<span class=\"line\"><span style=\"\">//               &#x3C;use %l>                         &#x3C;use %l></span></span>\n<span class=\"line\"><span style=\"\">//               &#x3C;...>                            &#x3C;...></span></span>\n<span class=\"line\"><span style=\"\">//               br label %if.end                 br label %if.end</span></span>\n<span class=\"line\"><span style=\"\">//                      +                        +</span></span>\n<span class=\"line\"><span style=\"\">//                       +                      +</span></span>\n<span class=\"line\"><span style=\"\">//                        +                    +</span></span>\n<span class=\"line\"><span style=\"\">//            if.end (\"footer\"):</span></span>\n<span class=\"line\"><span style=\"\">//                     %s.sink = phi [%st, if.then], [%se, if.else]</span></span>\n<span class=\"line\"><span style=\"\">//                     &#x3C;...></span></span>\n<span class=\"line\"><span style=\"\">//                     store %s.sink, %addr_s</span></span>\n<span class=\"line\"><span style=\"\">//                     &#x3C;...></span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------- TODO -----------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 1) Generalize to regions other than diamonds</span></span>\n<span class=\"line\"><span style=\"\">// 2) Be more aggressive merging memory operations</span></span>\n<span class=\"line\"><span style=\"\">// Note that both changes require register pressure control</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp#L1-L76",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Scalar/MergedLoadStoreMotion.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/// Given an associative binary expression, return the leaf</span></span>\n<span class=\"line\"><span style=\"\">/// nodes in Ops along with their weights (how many times the leaf occurs).  The</span></span>\n<span class=\"line\"><span style=\"\">/// original expression is the same as</span></span>\n<span class=\"line\"><span style=\"\">///   (Ops[0].first op Ops[0].first op ... Ops[0].first)  &#x3C;- Ops[0].second times</span></span>\n<span class=\"line\"><span style=\"\">/// op</span></span>\n<span class=\"line\"><span style=\"\">///   (Ops[1].first op Ops[1].first op ... Ops[1].first)  &#x3C;- Ops[1].second times</span></span>\n<span class=\"line\"><span style=\"\">/// op</span></span>\n<span class=\"line\"><span style=\"\">///   ...</span></span>\n<span class=\"line\"><span style=\"\">/// op</span></span>\n<span class=\"line\"><span style=\"\">///   (Ops[N].first op Ops[N].first op ... Ops[N].first)  &#x3C;- Ops[N].second times</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// Note that the values Ops[0].first, ..., Ops[N].first are all distinct.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// This routine may modify the function, in which case it returns 'true'.  The</span></span>\n<span class=\"line\"><span style=\"\">/// changes it makes may well be destructive, changing the value computed by 'I'</span></span>\n<span class=\"line\"><span style=\"\">/// to something completely different.  Thus if the routine returns 'true' then</span></span>\n<span class=\"line\"><span style=\"\">/// you MUST either replace I with a new expression computed from the Ops array,</span></span>\n<span class=\"line\"><span style=\"\">/// or use RewriteExprTree to put the values back in.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// A leaf node is either not a binary operation of the same kind as the root</span></span>\n<span class=\"line\"><span style=\"\">/// node 'I' (i.e. is not a binary operator at all, or is, but with a different</span></span>\n<span class=\"line\"><span style=\"\">/// opcode), or is the same kind of binary operator but has a use which either</span></span>\n<span class=\"line\"><span style=\"\">/// does not belong to the expression, or does belong to the expression but is</span></span>\n<span class=\"line\"><span style=\"\">/// a leaf node.  Every leaf node has at least one use that is a non-leaf node</span></span>\n<span class=\"line\"><span style=\"\">/// of the expression, while for non-leaf nodes (except for the root 'I') every</span></span>\n<span class=\"line\"><span style=\"\">/// use is a non-leaf node of the expression.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// For example:</span></span>\n<span class=\"line\"><span style=\"\">///           expression graph        node names</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">///                     +        |        I</span></span>\n<span class=\"line\"><span style=\"\">///                    / \\       |</span></span>\n<span class=\"line\"><span style=\"\">///                   +   +      |      A,  B</span></span>\n<span class=\"line\"><span style=\"\">///                  / \\ / \\     |</span></span>\n<span class=\"line\"><span style=\"\">///                 *   +   *    |    C,  D,  E</span></span>\n<span class=\"line\"><span style=\"\">///                / \\ / \\ / \\   |</span></span>\n<span class=\"line\"><span style=\"\">///                   +   *      |      F,  G</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// The leaf nodes are C, E, F and G.  The Ops array will contain (maybe not in</span></span>\n<span class=\"line\"><span style=\"\">/// that order) (C, 1), (E, 1), (F, 2), (G, 2).</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// The expression is maximal: if some instruction is a binary operator of the</span></span>\n<span class=\"line\"><span style=\"\">/// same kind as 'I', and all of its uses are non-leaf nodes of the expression,</span></span>\n<span class=\"line\"><span style=\"\">/// then the instruction also belongs to the expression, is not a leaf node of</span></span>\n<span class=\"line\"><span style=\"\">/// it, and its operands also belong to the expression (but may be leaf nodes).</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// NOTE: This routine will set operands of non-leaf non-root nodes to undef in</span></span>\n<span class=\"line\"><span style=\"\">/// order to ensure that every non-root node in the expression has *exactly one*</span></span>\n<span class=\"line\"><span style=\"\">/// use by a non-leaf node of the expression.  This destruction means that the</span></span>\n<span class=\"line\"><span style=\"\">/// caller MUST either replace 'I' with a new expression or use something like</span></span>\n<span class=\"line\"><span style=\"\">/// RewriteExprTree to put the values back in if the routine indicates that it</span></span>\n<span class=\"line\"><span style=\"\">/// made a change by returning 'true'.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// In the above example either the right operand of A or the left operand of B</span></span>\n<span class=\"line\"><span style=\"\">/// will be replaced by undef.  If it is B's operand then this gives:</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">///                     +        |        I</span></span>\n<span class=\"line\"><span style=\"\">///                    / \\       |</span></span>\n<span class=\"line\"><span style=\"\">///                   +   +      |      A,  B - operand of B replaced with undef</span></span>\n<span class=\"line\"><span style=\"\">///                  / \\   \\     |</span></span>\n<span class=\"line\"><span style=\"\">///                 *   +   *    |    C,  D,  E</span></span>\n<span class=\"line\"><span style=\"\">///                / \\ / \\ / \\   |</span></span>\n<span class=\"line\"><span style=\"\">///                   +   *      |      F,  G</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// Note that such undef operands can only be reached by passing through 'I'.</span></span>\n<span class=\"line\"><span style=\"\">/// For example, if you visit operands recursively starting from a leaf node</span></span>\n<span class=\"line\"><span style=\"\">/// then you will never see such an undef operand unless you get back to 'I',</span></span>\n<span class=\"line\"><span style=\"\">/// which requires passing through a phi node.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// Note that this routine may also mutate binary operators of the wrong type</span></span>\n<span class=\"line\"><span style=\"\">/// that have all uses inside the expression (i.e. only used by non-leaf nodes</span></span>\n<span class=\"line\"><span style=\"\">/// of the expression) if it can turn them into binary operators of the right</span></span>\n<span class=\"line\"><span style=\"\">/// type and thus make the expression bigger.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Scalar/Reassociate.cpp#L387-L459",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//===- FixIrreducible.cpp - Convert irreducible control-flow into loops ---===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span></span>\n<span class=\"line\"><span style=\"\">// See https://llvm.org/LICENSE.txt for license information.</span></span>\n<span class=\"line\"><span style=\"\">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// An irreducible SCC is one which has multiple \"header\" blocks, i.e., blocks</span></span>\n<span class=\"line\"><span style=\"\">// with control-flow edges incident from outside the SCC.  This pass converts a</span></span>\n<span class=\"line\"><span style=\"\">// irreducible SCC into a natural loop by applying the following transformation:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 1. Collect the set of headers H of the SCC.</span></span>\n<span class=\"line\"><span style=\"\">// 2. Collect the set of predecessors P of these headers. These may be inside as</span></span>\n<span class=\"line\"><span style=\"\">//    well as outside the SCC.</span></span>\n<span class=\"line\"><span style=\"\">// 3. Create block N and redirect every edge from set P to set H through N.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This converts the SCC into a natural loop with N as the header: N is the only</span></span>\n<span class=\"line\"><span style=\"\">// block with edges incident from outside the SCC, and all backedges in the SCC</span></span>\n<span class=\"line\"><span style=\"\">// are incident on N, i.e., for every backedge, the head now dominates the tail.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// INPUT CFG: The blocks A and B form an irreducible loop with two headers.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                        Entry</span></span>\n<span class=\"line\"><span style=\"\">//                       /     \\</span></span>\n<span class=\"line\"><span style=\"\">//                      v       v</span></span>\n<span class=\"line\"><span style=\"\">//                      A ----> B</span></span>\n<span class=\"line\"><span style=\"\">//                      ^      /|</span></span>\n<span class=\"line\"><span style=\"\">//                       `----' |</span></span>\n<span class=\"line\"><span style=\"\">//                              v</span></span>\n<span class=\"line\"><span style=\"\">//                             Exit</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// OUTPUT CFG: Edges incident on A and B are now redirected through a</span></span>\n<span class=\"line\"><span style=\"\">// new block N, forming a natural loop consisting of N, A and B.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                        Entry</span></span>\n<span class=\"line\"><span style=\"\">//                          |</span></span>\n<span class=\"line\"><span style=\"\">//                          v</span></span>\n<span class=\"line\"><span style=\"\">//                    .---> N &#x3C;---.</span></span>\n<span class=\"line\"><span style=\"\">//                   /     / \\     \\</span></span>\n<span class=\"line\"><span style=\"\">//                  |     /   \\     |</span></span>\n<span class=\"line\"><span style=\"\">//                  \\    v     v    /</span></span>\n<span class=\"line\"><span style=\"\">//                   `-- A     B --'</span></span>\n<span class=\"line\"><span style=\"\">//                             |</span></span>\n<span class=\"line\"><span style=\"\">//                             v</span></span>\n<span class=\"line\"><span style=\"\">//                            Exit</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The transformation is applied to every maximal SCC that is not already</span></span>\n<span class=\"line\"><span style=\"\">// recognized as a loop. The pass operates on all maximal SCCs found in the</span></span>\n<span class=\"line\"><span style=\"\">// function body outside of any loop, as well as those found inside each loop,</span></span>\n<span class=\"line\"><span style=\"\">// including inside any newly created loops. This ensures that any SCC hidden</span></span>\n<span class=\"line\"><span style=\"\">// inside a maximal SCC is also transformed.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The actual transformation is handled by function CreateControlFlowHub, which</span></span>\n<span class=\"line\"><span style=\"\">// takes a set of incoming blocks (the predecessors) and outgoing blocks (the</span></span>\n<span class=\"line\"><span style=\"\">// headers). The function also moves every PHINode in an outgoing block to the</span></span>\n<span class=\"line\"><span style=\"\">// hub. Since the hub dominates all the outgoing blocks, each such PHINode</span></span>\n<span class=\"line\"><span style=\"\">// continues to dominate its uses. Since every header in an SCC has at least two</span></span>\n<span class=\"line\"><span style=\"\">// predecessors, every value used in the header (or later) but defined in a</span></span>\n<span class=\"line\"><span style=\"\">// predecessor (or earlier) is represented by a PHINode in a header. Hence the</span></span>\n<span class=\"line\"><span style=\"\">// above handling of PHINodes is sufficient and no further processing is</span></span>\n<span class=\"line\"><span style=\"\">// required to restore SSA.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Limitation: The pass cannot handle switch statements and indirect</span></span>\n<span class=\"line\"><span style=\"\">//             branches. Both must be lowered to plain branches first.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Transforms/Utils/FixIrreducible.cpp#L1-L67",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Transforms/Utils/FixIrreducible.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\">   Format of unsymbolized profile:</span></span>\n<span class=\"line\"><span style=\"\">    [frame1 @ frame2 @ ...]  # If it's a CS profile</span></span>\n<span class=\"line\"><span style=\"\">      number of entries in RangeCounter</span></span>\n<span class=\"line\"><span style=\"\">      from_1-to_1:count_1</span></span>\n<span class=\"line\"><span style=\"\">      from_2-to_2:count_2</span></span>\n<span class=\"line\"><span style=\"\">      ......</span></span>\n<span class=\"line\"><span style=\"\">      from_n-to_n:count_n</span></span>\n<span class=\"line\"><span style=\"\">      number of entries in BranchCounter</span></span>\n<span class=\"line\"><span style=\"\">      src_1->dst_1:count_1</span></span>\n<span class=\"line\"><span style=\"\">      src_2->dst_2:count_2</span></span>\n<span class=\"line\"><span style=\"\">      ......</span></span>\n<span class=\"line\"><span style=\"\">      src_n->dst_n:count_n</span></span>\n<span class=\"line\"><span style=\"\">    [frame1 @ frame2 @ ...]  # Next context</span></span>\n<span class=\"line\"><span style=\"\">      ......</span></span>\n<span class=\"line\"><span style=\"\">Note that non-CS profile doesn't have the empty `[]` context.</span></span>\n<span class=\"line\"><span style=\"\">*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/tools/llvm-profgen/PerfReader.h#L707-L725",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": true
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/tools/llvm-profgen/PerfReader.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*!</span></span>\n<span class=\"line\"><span style=\"\"> * /brief processes a node from the export trie, and its children.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * To my knowledge there is no documentation of the encoded format of this data</span></span>\n<span class=\"line\"><span style=\"\"> * other than in the heads of the Apple linker engineers. To that end hopefully</span></span>\n<span class=\"line\"><span style=\"\"> * this comment and the implementation below can serve to light the way for</span></span>\n<span class=\"line\"><span style=\"\"> * anyone crazy enough to come down this path in the future.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This function reads and preserves the trie structure of the export trie. To</span></span>\n<span class=\"line\"><span style=\"\"> * my knowledge there is no code anywhere else that reads the data and preserves</span></span>\n<span class=\"line\"><span style=\"\"> * the Trie. LD64 (sources available at opensource.apple.com) has a similar</span></span>\n<span class=\"line\"><span style=\"\"> * implementation that parses the export trie into a vector. That code as well</span></span>\n<span class=\"line\"><span style=\"\"> * as LLVM's libObject MachO implementation were the basis for this.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The export trie is an encoded trie. The node serialization is a bit awkward.</span></span>\n<span class=\"line\"><span style=\"\"> * The below pseudo-code is the best description I've come up with for it.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * struct SerializedNode {</span></span>\n<span class=\"line\"><span style=\"\"> *   ULEB128 TerminalSize;</span></span>\n<span class=\"line\"><span style=\"\"> *   struct TerminalData { &#x3C;-- This is only present if TerminalSize > 0</span></span>\n<span class=\"line\"><span style=\"\"> *     ULEB128 Flags;</span></span>\n<span class=\"line\"><span style=\"\"> *     ULEB128 Address; &#x3C;-- Present if (! Flags &#x26; REEXPORT )</span></span>\n<span class=\"line\"><span style=\"\"> *     ULEB128 Other; &#x3C;-- Present if ( Flags &#x26; REEXPORT ||</span></span>\n<span class=\"line\"><span style=\"\"> *                                     Flags &#x26; STUB_AND_RESOLVER )</span></span>\n<span class=\"line\"><span style=\"\"> *     char[] ImportName; &#x3C;-- Present if ( Flags &#x26; REEXPORT )</span></span>\n<span class=\"line\"><span style=\"\"> *   }</span></span>\n<span class=\"line\"><span style=\"\"> *   uint8_t ChildrenCount;</span></span>\n<span class=\"line\"><span style=\"\"> *   Pair&#x3C;char[], ULEB128> ChildNameOffsetPair[ChildrenCount];</span></span>\n<span class=\"line\"><span style=\"\"> *   SerializedNode Children[ChildrenCount]</span></span>\n<span class=\"line\"><span style=\"\"> * }</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Terminal nodes are nodes that represent actual exports. They can appear</span></span>\n<span class=\"line\"><span style=\"\"> * anywhere in the tree other than at the root; they do not need to be leaf</span></span>\n<span class=\"line\"><span style=\"\"> * nodes. When reading the data out of the trie this routine reads it in-order,</span></span>\n<span class=\"line\"><span style=\"\"> * but it puts the child names and offsets directly into the child nodes. This</span></span>\n<span class=\"line\"><span style=\"\"> * results in looping over the children twice during serialization and</span></span>\n<span class=\"line\"><span style=\"\"> * de-serialization, but it makes the YAML representation more human readable.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Below is an example of the graph from a \"Hello World\" executable:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * -------</span></span>\n<span class=\"line\"><span style=\"\"> * | ''  |</span></span>\n<span class=\"line\"><span style=\"\"> * -------</span></span>\n<span class=\"line\"><span style=\"\"> *    |</span></span>\n<span class=\"line\"><span style=\"\"> * -------</span></span>\n<span class=\"line\"><span style=\"\"> * | '_' |</span></span>\n<span class=\"line\"><span style=\"\"> * -------</span></span>\n<span class=\"line\"><span style=\"\"> *    |</span></span>\n<span class=\"line\"><span style=\"\"> *    |----------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\"> *    |                                        |</span></span>\n<span class=\"line\"><span style=\"\"> *  ------------------------      ---------------------</span></span>\n<span class=\"line\"><span style=\"\"> *  | '_mh_execute_header' |      | 'main'            |</span></span>\n<span class=\"line\"><span style=\"\"> *  | Flags: 0x00000000    |      | Flags: 0x00000000 |</span></span>\n<span class=\"line\"><span style=\"\"> *  | Addr:  0x00000000    |      | Addr:  0x00001160 |</span></span>\n<span class=\"line\"><span style=\"\"> *  ------------------------      ---------------------</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * This graph represents the trie for the exports \"__mh_execute_header\" and</span></span>\n<span class=\"line\"><span style=\"\"> * \"_main\". In the graph only the \"_main\" and \"__mh_execute_header\" nodes are</span></span>\n<span class=\"line\"><span style=\"\"> * terminal.</span></span>\n<span class=\"line\"><span style=\"\">*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/tools/obj2yaml/macho2yaml.cpp#L475-L534",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\">   IR forming a call graph with a diamond of triangle-shaped SCCs:</span></span>\n<span class=\"line\"><span style=\"\">           d1</span></span>\n<span class=\"line\"><span style=\"\">          /  \\</span></span>\n<span class=\"line\"><span style=\"\">         d3--d2</span></span>\n<span class=\"line\"><span style=\"\">        /     \\</span></span>\n<span class=\"line\"><span style=\"\">       b1     c1</span></span>\n<span class=\"line\"><span style=\"\">     /  \\    /  \\</span></span>\n<span class=\"line\"><span style=\"\">    b3--b2  c3--c2</span></span>\n<span class=\"line\"><span style=\"\">         \\  /</span></span>\n<span class=\"line\"><span style=\"\">          a1</span></span>\n<span class=\"line\"><span style=\"\">         /  \\</span></span>\n<span class=\"line\"><span style=\"\">        a3--a2</span></span>\n<span class=\"line\"><span style=\"\">   All call edges go up between SCCs, and clockwise around the SCC.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/unittests/Analysis/LazyCallGraphTest.cpp#L42-L58",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/unittests/Analysis/LazyCallGraphTest.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Bug: During phi optimization, the walker wouldn't cache to the proper result</span></span>\n<span class=\"line\"><span style=\"\">// in the farthest-walked BB.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Specifically, it would assume that whatever we walked to was a clobber.</span></span>\n<span class=\"line\"><span style=\"\">// \"Whatever we walked to\" isn't a clobber if we hit a cache entry.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// ...So, we need a test case that looks like:</span></span>\n<span class=\"line\"><span style=\"\">//    A</span></span>\n<span class=\"line\"><span style=\"\">//   / \\</span></span>\n<span class=\"line\"><span style=\"\">//  B   |</span></span>\n<span class=\"line\"><span style=\"\">//   \\ /</span></span>\n<span class=\"line\"><span style=\"\">//    C</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Where, when we try to optimize a thing in 'C', a blocker is found in 'B'.</span></span>\n<span class=\"line\"><span style=\"\">// The walk must determine that the blocker exists by using cache entries *while</span></span>\n<span class=\"line\"><span style=\"\">// walking* 'B'.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/unittests/Analysis/MemorySSATest.cpp#L689-L704",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/unittests/Analysis/MemorySSATest.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Verify that the PDT is correctly updated in case an edge removal results</span></span>\n<span class=\"line\"><span style=\"\">// in an infinite loop. Also make sure that the updated PDT is the</span></span>\n<span class=\"line\"><span style=\"\">// same as a freshly recalculated one.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Test case:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//          CFG                   PDT</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//           A                    Exit</span></span>\n<span class=\"line\"><span style=\"\">//           |                     |</span></span>\n<span class=\"line\"><span style=\"\">//          _B                     D</span></span>\n<span class=\"line\"><span style=\"\">//         / | \\                   |</span></span>\n<span class=\"line\"><span style=\"\">//        ^  v  \\                  B</span></span>\n<span class=\"line\"><span style=\"\">//        \\ /    D                / \\</span></span>\n<span class=\"line\"><span style=\"\">//         C      \\              C   A</span></span>\n<span class=\"line\"><span style=\"\">//        / \\      v</span></span>\n<span class=\"line\"><span style=\"\">//       ^  v      Exit</span></span>\n<span class=\"line\"><span style=\"\">//        \\_/</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// After deleting the edge C->B, C is part of an infinite reverse-unreachable</span></span>\n<span class=\"line\"><span style=\"\">// loop:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//          CFG'                  PDT'</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//           A                    Exit</span></span>\n<span class=\"line\"><span style=\"\">//           |                   / | \\</span></span>\n<span class=\"line\"><span style=\"\">//           B                  C  B  D</span></span>\n<span class=\"line\"><span style=\"\">//           | \\                   |</span></span>\n<span class=\"line\"><span style=\"\">//           v  \\                  A</span></span>\n<span class=\"line\"><span style=\"\">//          /    D</span></span>\n<span class=\"line\"><span style=\"\">//         C      \\</span></span>\n<span class=\"line\"><span style=\"\">//        / \\      v</span></span>\n<span class=\"line\"><span style=\"\">//       ^  v      Exit</span></span>\n<span class=\"line\"><span style=\"\">//        \\_/</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// As C now becomes reverse-unreachable, it forms a new non-trivial root and</span></span>\n<span class=\"line\"><span style=\"\">// gets connected to the virtual exit.</span></span>\n<span class=\"line\"><span style=\"\">// D does not postdominate B anymore, because there are two forward paths from</span></span>\n<span class=\"line\"><span style=\"\">// B to the virtual exit:</span></span>\n<span class=\"line\"><span style=\"\">//  - B -> C -> VirtualExit</span></span>\n<span class=\"line\"><span style=\"\">//  - B -> D -> VirtualExit.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/unittests/IR/DominatorTreeTest.cpp#L443-L484",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/unittests/IR/DominatorTreeTest.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//====- LowerToLLVM.cpp - Lowering from Toy+Affine+Std to LLVM ------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span></span>\n<span class=\"line\"><span style=\"\">// See https://llvm.org/LICENSE.txt for license information.</span></span>\n<span class=\"line\"><span style=\"\">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This file implements full lowering of Toy operations to LLVM MLIR dialect.</span></span>\n<span class=\"line\"><span style=\"\">// 'toy.print' is lowered to a loop nest that calls `printf` on each element of</span></span>\n<span class=\"line\"><span style=\"\">// the input array. The file also sets up the ToyToLLVMLoweringPass. This pass</span></span>\n<span class=\"line\"><span style=\"\">// lowers the combination of Arithmetic + Affine + SCF + Func dialects to the</span></span>\n<span class=\"line\"><span style=\"\">// LLVM one:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                         Affine --</span></span>\n<span class=\"line\"><span style=\"\">//                                  |</span></span>\n<span class=\"line\"><span style=\"\">//                                  v</span></span>\n<span class=\"line\"><span style=\"\">//                       Arithmetic + Func --> LLVM (Dialect)</span></span>\n<span class=\"line\"><span style=\"\">//                                  ^</span></span>\n<span class=\"line\"><span style=\"\">//                                  |</span></span>\n<span class=\"line\"><span style=\"\">//     'toy.print' --> Loop (SCF) --</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/examples/toy/Ch6/mlir/LowerToLLVM.cpp#L1-L23",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "llvm-project/mlir/examples/toy/Ch6/mlir/LowerToLLVM.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//====- LowerToLLVM.cpp - Lowering from Toy+Affine+Std to LLVM ------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span></span>\n<span class=\"line\"><span style=\"\">// See https://llvm.org/LICENSE.txt for license information.</span></span>\n<span class=\"line\"><span style=\"\">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This file implements full lowering of Toy operations to LLVM MLIR dialect.</span></span>\n<span class=\"line\"><span style=\"\">// 'toy.print' is lowered to a loop nest that calls `printf` on each element of</span></span>\n<span class=\"line\"><span style=\"\">// the input array. The file also sets up the ToyToLLVMLoweringPass. This pass</span></span>\n<span class=\"line\"><span style=\"\">// lowers the combination of Arithmetic + Affine + SCF + Func dialects to the</span></span>\n<span class=\"line\"><span style=\"\">// LLVM one:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                         Affine --</span></span>\n<span class=\"line\"><span style=\"\">//                                  |</span></span>\n<span class=\"line\"><span style=\"\">//                                  v</span></span>\n<span class=\"line\"><span style=\"\">//                       Arithmetic + Func --> LLVM (Dialect)</span></span>\n<span class=\"line\"><span style=\"\">//                                  ^</span></span>\n<span class=\"line\"><span style=\"\">//                                  |</span></span>\n<span class=\"line\"><span style=\"\">//     'toy.print' --> Loop (SCF) --</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/examples/toy/Ch7/mlir/LowerToLLVM.cpp#L1-L23",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": true
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "llvm-project/mlir/examples/toy/Ch7/mlir/LowerToLLVM.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/// Fills `forwardSlice` with the computed forward slice (i.e. all</span></span>\n<span class=\"line\"><span style=\"\">/// the transitive uses of op), **without** including that operation.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// This additionally takes a TransitiveFilter which acts as a frontier:</span></span>\n<span class=\"line\"><span style=\"\">/// when looking at uses transitively, an operation that does not pass the</span></span>\n<span class=\"line\"><span style=\"\">/// filter is never propagated through. This allows in particular to carve out</span></span>\n<span class=\"line\"><span style=\"\">/// the scope within a ForOp or the scope within an IfOp.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// The implementation traverses the use chains in postorder traversal for</span></span>\n<span class=\"line\"><span style=\"\">/// efficiency reasons: if an operation is already in `forwardSlice`, no</span></span>\n<span class=\"line\"><span style=\"\">/// need to traverse its uses again. Since use-def chains form a DAG, this</span></span>\n<span class=\"line\"><span style=\"\">/// terminates.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// Upon return to the root call, `forwardSlice` is filled with a</span></span>\n<span class=\"line\"><span style=\"\">/// postorder list of uses (i.e. a reverse topological order). To get a proper</span></span>\n<span class=\"line\"><span style=\"\">/// topological order, we just just reverse the order in `forwardSlice` before</span></span>\n<span class=\"line\"><span style=\"\">/// returning.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// Example starting from node 0</span></span>\n<span class=\"line\"><span style=\"\">/// ============================</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">///               0</span></span>\n<span class=\"line\"><span style=\"\">///    ___________|___________</span></span>\n<span class=\"line\"><span style=\"\">///    1       2      3      4</span></span>\n<span class=\"line\"><span style=\"\">///    |_______|      |______|</span></span>\n<span class=\"line\"><span style=\"\">///    |   |             |</span></span>\n<span class=\"line\"><span style=\"\">///    |   5             6</span></span>\n<span class=\"line\"><span style=\"\">///    |___|_____________|</span></span>\n<span class=\"line\"><span style=\"\">///      |               |</span></span>\n<span class=\"line\"><span style=\"\">///      7               8</span></span>\n<span class=\"line\"><span style=\"\">///      |_______________|</span></span>\n<span class=\"line\"><span style=\"\">///              |</span></span>\n<span class=\"line\"><span style=\"\">///              9</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// Assuming all local orders match the numbering order:</span></span>\n<span class=\"line\"><span style=\"\">/// 1. after getting back to the root getForwardSlice, `forwardSlice` may</span></span>\n<span class=\"line\"><span style=\"\">///    contain:</span></span>\n<span class=\"line\"><span style=\"\">///      {9, 7, 8, 5, 1, 2, 6, 3, 4}</span></span>\n<span class=\"line\"><span style=\"\">/// 2. reversing the result of 1. gives:</span></span>\n<span class=\"line\"><span style=\"\">///      {4, 3, 6, 2, 1, 5, 8, 7, 9}</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/include/mlir/Analysis/SliceAnalysis.h#L30-L70",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/include/mlir/Analysis/SliceAnalysis.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/// Given two polyhedra `a` and `b` at positions `i` and `j` in</span></span>\n<span class=\"line\"><span style=\"\">/// `disjuncts` and `redundantIneqsA` being the inequalities of `a` that</span></span>\n<span class=\"line\"><span style=\"\">/// are redundant for `b` (similarly for `cuttingIneqsA`, `redundantIneqsB`,</span></span>\n<span class=\"line\"><span style=\"\">/// and `cuttingIneqsB`), Checks whether the facets of all cutting</span></span>\n<span class=\"line\"><span style=\"\">/// inequalites of `a` are contained in `b`. If so, a new polyhedron</span></span>\n<span class=\"line\"><span style=\"\">/// consisting of all redundant inequalites of `a` and `b` and all</span></span>\n<span class=\"line\"><span style=\"\">/// equalities of both is created.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// An example of this case:</span></span>\n<span class=\"line\"><span style=\"\">///    ___________        ___________</span></span>\n<span class=\"line\"><span style=\"\">///   /   /  |   /       /          /</span></span>\n<span class=\"line\"><span style=\"\">///   \\   \\  |  /   ==>  \\         /</span></span>\n<span class=\"line\"><span style=\"\">///    \\   \\ | /          \\       /</span></span>\n<span class=\"line\"><span style=\"\">///     \\___\\|/            \\_____/</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/lib/Analysis/Presburger/PresburgerRelation.cpp#L680-L695",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/lib/Analysis/Presburger/PresburgerRelation.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Blocks from the given `spirv.mlir.selection` operation must satisfy the</span></span>\n<span class=\"line\"><span style=\"\">// following layout:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//       +-----------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//       | header block                                  |</span></span>\n<span class=\"line\"><span style=\"\">//       | spirv.BranchConditionalOp %cond, ^case0, ^case1 |</span></span>\n<span class=\"line\"><span style=\"\">//       +-----------------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                            /   \\</span></span>\n<span class=\"line\"><span style=\"\">//                             ...</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   +------------------------+    +------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//   | case #0                |    | case #1                |</span></span>\n<span class=\"line\"><span style=\"\">//   | spirv.Store %ptr %value0 |    | spirv.Store %ptr %value1 |</span></span>\n<span class=\"line\"><span style=\"\">//   | spirv.Branch ^merge      |    | spirv.Branch ^merge      |</span></span>\n<span class=\"line\"><span style=\"\">//   +------------------------+    +------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                             ...</span></span>\n<span class=\"line\"><span style=\"\">//                            \\   /</span></span>\n<span class=\"line\"><span style=\"\">//                              v</span></span>\n<span class=\"line\"><span style=\"\">//                       +-------------+</span></span>\n<span class=\"line\"><span style=\"\">//                       | merge block |</span></span>\n<span class=\"line\"><span style=\"\">//                       +-------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/lib/Dialect/SPIRV/IR/SPIRVCanonicalization.cpp#L304-L328",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/lib/Dialect/SPIRV/IR/SPIRVCanonicalization.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Test Case:</span></span>\n<span class=\"line\"><span style=\"\">//    bb0</span></span>\n<span class=\"line\"><span style=\"\">//   /   \\</span></span>\n<span class=\"line\"><span style=\"\">//  bb1  bb2 &#x3C;- Initial position of AllocOp</span></span>\n<span class=\"line\"><span style=\"\">//   \\   /</span></span>\n<span class=\"line\"><span style=\"\">//    bb3</span></span>\n<span class=\"line\"><span style=\"\">// BufferDeallocation expected behavior: bb2 contains an AllocOp which is</span></span>\n<span class=\"line\"><span style=\"\">// passed to bb3. In the latter block, there should be an deallocation.</span></span>\n<span class=\"line\"><span style=\"\">// Since bb1 does not contain an adequate alloc and the alloc in bb2 is not</span></span>\n<span class=\"line\"><span style=\"\">// moved to bb0, we need to insert allocs and copies.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/test/Dialect/Bufferization/Transforms/buffer-deallocation.mlir#L7-L16",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": true,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/test/Dialect/Bufferization/Transforms/buffer-deallocation.mlir"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/*</span></span>\n<span class=\"line\"><span style=\"\">A1   A2</span></span>\n<span class=\"line\"><span style=\"\"> \\  /</span></span>\n<span class=\"line\"><span style=\"\">  A3</span></span>\n<span class=\"line\"><span style=\"\">*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/libcxxabi/test/dynamic_cast3.pass.cpp#L283-L289",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/libcxxabi/test/dynamic_cast3.pass.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Illustrates an 8x8 Sparse Matrix x Vector implemented with only operations</span></span>\n<span class=\"line\"><span style=\"\">// of the vector dialect (and some std/scf). Essentially, this example performs</span></span>\n<span class=\"line\"><span style=\"\">// the following multiplication:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     0  1  2  3  4  5  6  7</span></span>\n<span class=\"line\"><span style=\"\">//   +------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// 0 | 1  0  2  0  0  1  0  1 |   | 1 |   | 21 |</span></span>\n<span class=\"line\"><span style=\"\">// 1 | 1  8  0  0  3  0  1  0 |   | 2 |   | 39 |</span></span>\n<span class=\"line\"><span style=\"\">// 2 | 0  0  1  0  0  2  6  2 |   | 3 |   | 73 |</span></span>\n<span class=\"line\"><span style=\"\">// 3 | 0  3  0  1  0  1  0  1 | x | 4 | = | 24 |</span></span>\n<span class=\"line\"><span style=\"\">// 4 | 5  0  0  1  1  1  0  0 |   | 5 |   | 20 |</span></span>\n<span class=\"line\"><span style=\"\">// 5 | 0  3  0  0  2  1  2  0 |   | 6 |   | 36 |</span></span>\n<span class=\"line\"><span style=\"\">// 6 | 4  0  7  0  1  0  1  0 |   | 7 |   | 37 |</span></span>\n<span class=\"line\"><span style=\"\">// 7 | 0  3  0  2  0  0  1  1 |   | 8 |   | 29 |</span></span>\n<span class=\"line\"><span style=\"\">//   +------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The sparse storage scheme used is an extended column scheme (also referred</span></span>\n<span class=\"line\"><span style=\"\">// to as jagged diagonal, which is essentially a vector friendly variant of</span></span>\n<span class=\"line\"><span style=\"\">// the general sparse row-wise scheme (also called compressed row storage),</span></span>\n<span class=\"line\"><span style=\"\">// using fixed length vectors and no explicit pointer indexing into the</span></span>\n<span class=\"line\"><span style=\"\">// value array to find the rows.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The extended column storage for the matrix shown above is as follows.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      VALUE           INDEX</span></span>\n<span class=\"line\"><span style=\"\">//   +---------+     +---------+</span></span>\n<span class=\"line\"><span style=\"\">// 0 | 1 2 1 1 |     | 0 2 5 7 |</span></span>\n<span class=\"line\"><span style=\"\">// 1 | 1 8 3 1 |     | 0 1 4 6 |</span></span>\n<span class=\"line\"><span style=\"\">// 2 | 1 2 6 2 |     | 2 5 6 7 |</span></span>\n<span class=\"line\"><span style=\"\">// 3 | 3 1 1 1 |     | 1 3 5 7 |</span></span>\n<span class=\"line\"><span style=\"\">// 4 | 5 1 1 1 |     | 0 3 4 5 |</span></span>\n<span class=\"line\"><span style=\"\">// 5 | 3 2 1 2 |     | 1 4 5 6 |</span></span>\n<span class=\"line\"><span style=\"\">// 6 | 4 7 1 1 |     | 0 2 4 6 |</span></span>\n<span class=\"line\"><span style=\"\">// 7 | 3 2 1 1 |     | 1 3 6 7 |</span></span>\n<span class=\"line\"><span style=\"\">//   +---------+     +---------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This example illustrates a DOT version for the operation. Another example</span></span>\n<span class=\"line\"><span style=\"\">// in this directory illustrates an effective SAXPY version that operates on the</span></span>\n<span class=\"line\"><span style=\"\">// transposed jagged diagonal storage to obtain higher vector lengths.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/test/Integration/Dialect/Vector/CPU/test-sparse-dot-matvec.mlir#L6-L44",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/test/Integration/Dialect/Vector/CPU/test-sparse-dot-matvec.mlir"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Illustrates an 8x8 Sparse Matrix x Vector implemented with only operations</span></span>\n<span class=\"line\"><span style=\"\">// of the vector dialect (and some std/scf). Essentially, this example performs</span></span>\n<span class=\"line\"><span style=\"\">// the following multiplication:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     0  1  2  3  4  5  6  7</span></span>\n<span class=\"line\"><span style=\"\">//   +------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// 0 | 1  0  2  0  0  1  0  1 |   | 1 |   | 21 |</span></span>\n<span class=\"line\"><span style=\"\">// 1 | 1  8  0  0  3  0  1  0 |   | 2 |   | 39 |</span></span>\n<span class=\"line\"><span style=\"\">// 2 | 0  0  1  0  0  2  6  2 |   | 3 |   | 73 |</span></span>\n<span class=\"line\"><span style=\"\">// 3 | 0  3  0  1  0  1  0  1 | x | 4 | = | 24 |</span></span>\n<span class=\"line\"><span style=\"\">// 4 | 5  0  0  1  1  1  0  0 |   | 5 |   | 20 |</span></span>\n<span class=\"line\"><span style=\"\">// 5 | 0  3  0  0  2  1  2  0 |   | 6 |   | 36 |</span></span>\n<span class=\"line\"><span style=\"\">// 6 | 4  0  7  0  1  0  1  0 |   | 7 |   | 37 |</span></span>\n<span class=\"line\"><span style=\"\">// 7 | 0  3  0  2  0  0  1  1 |   | 8 |   | 29 |</span></span>\n<span class=\"line\"><span style=\"\">//   +------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The sparse storage scheme used is an extended column scheme (also referred</span></span>\n<span class=\"line\"><span style=\"\">// to as jagged diagonal, which is essentially a vector friendly variant of</span></span>\n<span class=\"line\"><span style=\"\">// the general sparse row-wise scheme (also called compressed row storage),</span></span>\n<span class=\"line\"><span style=\"\">// using fixed length vectors and no explicit pointer indexing into the</span></span>\n<span class=\"line\"><span style=\"\">// value array to find the rows.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The extended column storage for the matrix shown above is as follows.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      VALUE           INDEX</span></span>\n<span class=\"line\"><span style=\"\">//   +---------+     +---------+</span></span>\n<span class=\"line\"><span style=\"\">// 0 | 1 2 1 1 |     | 0 2 5 7 |</span></span>\n<span class=\"line\"><span style=\"\">// 1 | 1 8 3 1 |     | 0 1 4 6 |</span></span>\n<span class=\"line\"><span style=\"\">// 2 | 1 2 6 2 |     | 2 5 6 7 |</span></span>\n<span class=\"line\"><span style=\"\">// 3 | 3 1 1 1 |     | 1 3 5 7 |</span></span>\n<span class=\"line\"><span style=\"\">// 4 | 5 1 1 1 |     | 0 3 4 5 |</span></span>\n<span class=\"line\"><span style=\"\">// 5 | 3 2 1 2 |     | 1 4 5 6 |</span></span>\n<span class=\"line\"><span style=\"\">// 6 | 4 7 1 1 |     | 0 2 4 6 |</span></span>\n<span class=\"line\"><span style=\"\">// 7 | 3 2 1 1 |     | 1 3 6 7 |</span></span>\n<span class=\"line\"><span style=\"\">//   +---------+     +---------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This example illustrates an effective SAXPY version that operates</span></span>\n<span class=\"line\"><span style=\"\">// on the transposed jagged diagonal storage to obtain higher vector</span></span>\n<span class=\"line\"><span style=\"\">// lengths. Another example in this directory illustrates a DOT</span></span>\n<span class=\"line\"><span style=\"\">// version of the operation.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/test/Integration/Dialect/Vector/CPU/test-sparse-saxpy-jagged-matvec.mlir#L6-L45",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/test/Integration/Dialect/Vector/CPU/test-sparse-saxpy-jagged-matvec.mlir"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Test Case:</span></span>\n<span class=\"line\"><span style=\"\">//    bb0</span></span>\n<span class=\"line\"><span style=\"\">//   /   \\</span></span>\n<span class=\"line\"><span style=\"\">//  bb1  bb2 &#x3C;- Initial position of AllocOp</span></span>\n<span class=\"line\"><span style=\"\">//   \\   /</span></span>\n<span class=\"line\"><span style=\"\">//    bb3</span></span>\n<span class=\"line\"><span style=\"\">// PromoteBuffersToStack expected behavior: It should convert %0 into an</span></span>\n<span class=\"line\"><span style=\"\">// AllocaOp.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/mlir/test/Transforms/promote-buffers-to-stack.mlir#L8-L15",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/mlir/test/Transforms/promote-buffers-to-stack.mlir"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* First the states</span></span>\n<span class=\"line\"><span style=\"\">   (head,tail) =              0, 0  means lock is unheld, nobody on queue</span></span>\n<span class=\"line\"><span style=\"\">                 UINT_MAX or -1, 0  means lock is held, nobody on queue</span></span>\n<span class=\"line\"><span style=\"\">                              h, h  means lock held or about to transition,</span></span>\n<span class=\"line\"><span style=\"\">                                    1 element on queue</span></span>\n<span class=\"line\"><span style=\"\">                              h, t  h &#x3C;> t, means lock is held or about to</span></span>\n<span class=\"line\"><span style=\"\">                                    transition, >1 elements on queue</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   Now the transitions</span></span>\n<span class=\"line\"><span style=\"\">      Acquire(0,0)  = -1 ,0</span></span>\n<span class=\"line\"><span style=\"\">      Release(0,0)  = Error</span></span>\n<span class=\"line\"><span style=\"\">      Acquire(-1,0) =  h ,h    h > 0</span></span>\n<span class=\"line\"><span style=\"\">      Release(-1,0) =  0 ,0</span></span>\n<span class=\"line\"><span style=\"\">      Acquire(h,h)  =  h ,t    h > 0, t > 0, h &#x3C;> t</span></span>\n<span class=\"line\"><span style=\"\">      Release(h,h)  = -1 ,0    h > 0</span></span>\n<span class=\"line\"><span style=\"\">      Acquire(h,t)  =  h ,t'   h > 0, t > 0, t' > 0, h &#x3C;> t, h &#x3C;> t', t &#x3C;> t'</span></span>\n<span class=\"line\"><span style=\"\">      Release(h,t)  =  h',t    h > 0, t > 0, h &#x3C;> t, h &#x3C;> h', h' maybe = t</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">   And pictorially</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">           +-----+</span></span>\n<span class=\"line\"><span style=\"\">           | 0, 0|------- release -------> Error</span></span>\n<span class=\"line\"><span style=\"\">           +-----+</span></span>\n<span class=\"line\"><span style=\"\">             |  ^</span></span>\n<span class=\"line\"><span style=\"\">      acquire|  |release</span></span>\n<span class=\"line\"><span style=\"\">             |  |</span></span>\n<span class=\"line\"><span style=\"\">             |  |</span></span>\n<span class=\"line\"><span style=\"\">             v  |</span></span>\n<span class=\"line\"><span style=\"\">           +-----+</span></span>\n<span class=\"line\"><span style=\"\">           |-1, 0|</span></span>\n<span class=\"line\"><span style=\"\">           +-----+</span></span>\n<span class=\"line\"><span style=\"\">             |  ^</span></span>\n<span class=\"line\"><span style=\"\">      acquire|  |release</span></span>\n<span class=\"line\"><span style=\"\">             |  |</span></span>\n<span class=\"line\"><span style=\"\">             |  |</span></span>\n<span class=\"line\"><span style=\"\">             v  |</span></span>\n<span class=\"line\"><span style=\"\">           +-----+</span></span>\n<span class=\"line\"><span style=\"\">           | h, h|</span></span>\n<span class=\"line\"><span style=\"\">           +-----+</span></span>\n<span class=\"line\"><span style=\"\">             |  ^</span></span>\n<span class=\"line\"><span style=\"\">      acquire|  |release</span></span>\n<span class=\"line\"><span style=\"\">             |  |</span></span>\n<span class=\"line\"><span style=\"\">             |  |</span></span>\n<span class=\"line\"><span style=\"\">             v  |</span></span>\n<span class=\"line\"><span style=\"\">           +-----+</span></span>\n<span class=\"line\"><span style=\"\">           | h, t|----- acquire, release loopback ---+</span></span>\n<span class=\"line\"><span style=\"\">           +-----+                                   |</span></span>\n<span class=\"line\"><span style=\"\">                ^                                    |</span></span>\n<span class=\"line\"><span style=\"\">                |                                    |</span></span>\n<span class=\"line\"><span style=\"\">                +------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/openmp/runtime/src/kmp_lock.cpp#L969-L1019",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": true,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/openmp/runtime/src/kmp_lock.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* ****************************************************************</span></span>\n<span class=\"line\"><span style=\"\">    Class to implement an event</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">    There are four components to an event: start time, stop time</span></span>\n<span class=\"line\"><span style=\"\">    nest_level, and timer_name.</span></span>\n<span class=\"line\"><span style=\"\">    The start and stop time should be obvious (recorded in clock ticks).</span></span>\n<span class=\"line\"><span style=\"\">    The nest_level relates to the bar width in the timeline graph.</span></span>\n<span class=\"line\"><span style=\"\">    The timer_name is used to determine which timer event triggered this event.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">    the interface to this class is through four read-only operations:</span></span>\n<span class=\"line\"><span style=\"\">    1) getStart()     -- returns the start time as 64 bit integer</span></span>\n<span class=\"line\"><span style=\"\">    2) getStop()      -- returns the stop time as 64 bit integer</span></span>\n<span class=\"line\"><span style=\"\">    3) getNestLevel() -- returns the nest level of the event</span></span>\n<span class=\"line\"><span style=\"\">    4) getTimerName() -- returns the timer name that triggered event</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">    *MORE ON NEST_LEVEL*</span></span>\n<span class=\"line\"><span style=\"\">    The nest level is used in the bar graph that represents the timeline.</span></span>\n<span class=\"line\"><span style=\"\">    Its main purpose is for showing how events are nested inside eachother.</span></span>\n<span class=\"line\"><span style=\"\">    For example, say events, A, B, and C are recorded.  If the timeline</span></span>\n<span class=\"line\"><span style=\"\">    looks like this:</span></span>\n<span class=\"line\"><span style=\"\">Begin -------------------------------------------------------------> Time</span></span>\n<span class=\"line\"><span style=\"\">         |    |          |        |          |              |</span></span>\n<span class=\"line\"><span style=\"\">         A    B          C        C          B              A</span></span>\n<span class=\"line\"><span style=\"\">       start start     start     end        end            end</span></span>\n<span class=\"line\"><span style=\"\">       Then A, B, C will have a nest level of 1, 2, 3 respectively.</span></span>\n<span class=\"line\"><span style=\"\">       These values are then used to calculate the barwidth so you can</span></span>\n<span class=\"line\"><span style=\"\">       see that inside A, B has occurred, and inside B, C has occurred.</span></span>\n<span class=\"line\"><span style=\"\">       Currently, this is shown with A's bar width being larger than B's</span></span>\n<span class=\"line\"><span style=\"\">       bar width, and B's bar width being larger than C's bar width.</span></span>\n<span class=\"line\"><span style=\"\"></span></span>\n<span class=\"line\"><span style=\"\">**************************************************************** */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/openmp/runtime/src/kmp_stats.h#L582-L614",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": true,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/openmp/runtime/src/kmp_stats.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Tests OMP 5.x task dependence \"omp_all_memory\",</span></span>\n<span class=\"line\"><span style=\"\">// emulates compiler codegen versions for new dep kind</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Task tree created:</span></span>\n<span class=\"line\"><span style=\"\">//      task0 - task1 (in: i1, i2)</span></span>\n<span class=\"line\"><span style=\"\">//             \\</span></span>\n<span class=\"line\"><span style=\"\">//        task2 (inoutset: i2), (in: i1)</span></span>\n<span class=\"line\"><span style=\"\">//             /</span></span>\n<span class=\"line\"><span style=\"\">//        task3 (omp_all_memory) via flag=0x80</span></span>\n<span class=\"line\"><span style=\"\">//             /</span></span>\n<span class=\"line\"><span style=\"\">//      task4 - task5 (in: i1, i2)</span></span>\n<span class=\"line\"><span style=\"\">//           /</span></span>\n<span class=\"line\"><span style=\"\">//       task6 (omp_all_memory) via addr=-1</span></span>\n<span class=\"line\"><span style=\"\">//           /</span></span>\n<span class=\"line\"><span style=\"\">//       task7 (omp_all_memory) via flag=0x80</span></span>\n<span class=\"line\"><span style=\"\">//           /</span></span>\n<span class=\"line\"><span style=\"\">//       task8 (in: i3)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/openmp/runtime/test/tasking/kmp_task_depend_all.c#L5-L22",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/openmp/runtime/test/tasking/kmp_task_depend_all.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Test for guided scheduling</span></span>\n<span class=\"line\"><span style=\"\"> * Ensure threads get chunks interleavely first</span></span>\n<span class=\"line\"><span style=\"\"> * Then judge the chunk sizes are decreasing to a stable value</span></span>\n<span class=\"line\"><span style=\"\"> * Modified by Chunhua Liao</span></span>\n<span class=\"line\"><span style=\"\"> * For example, 100 iteration on 2 threads, chunksize 7</span></span>\n<span class=\"line\"><span style=\"\"> * one line for each dispatch, 0/1 means thread id</span></span>\n<span class=\"line\"><span style=\"\"> * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  24</span></span>\n<span class=\"line\"><span style=\"\"> * 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1        18</span></span>\n<span class=\"line\"><span style=\"\"> * 0 0 0 0 0 0 0 0 0 0 0 0 0 0            14</span></span>\n<span class=\"line\"><span style=\"\"> * 1 1 1 1 1 1 1 1 1 1                10</span></span>\n<span class=\"line\"><span style=\"\"> * 0 0 0 0 0 0 0 0                   8</span></span>\n<span class=\"line\"><span style=\"\"> * 1 1 1 1 1 1 1                   7</span></span>\n<span class=\"line\"><span style=\"\"> * 0 0 0 0 0 0 0                   7</span></span>\n<span class=\"line\"><span style=\"\"> * 1 1 1 1 1 1 1                   7</span></span>\n<span class=\"line\"><span style=\"\"> * 0 0 0 0 0                     5</span></span>\n<span class=\"line\"><span style=\"\">*/</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/openmp/runtime/test/worksharing/for/omp_for_schedule_guided.c#L3-L18",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/openmp/runtime/test/worksharing/for/omp_for_schedule_guided.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Create a subfunction of the following (preliminary) structure:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//        PrevBB</span></span>\n<span class=\"line\"><span style=\"\">//           |</span></span>\n<span class=\"line\"><span style=\"\">//           v</span></span>\n<span class=\"line\"><span style=\"\">//        HeaderBB</span></span>\n<span class=\"line\"><span style=\"\">//       /   |    _____</span></span>\n<span class=\"line\"><span style=\"\">//      /    v   v     |</span></span>\n<span class=\"line\"><span style=\"\">//     / PreHeaderBB   |</span></span>\n<span class=\"line\"><span style=\"\">//    |      |         |</span></span>\n<span class=\"line\"><span style=\"\">//    |      v         |</span></span>\n<span class=\"line\"><span style=\"\">//    |  CheckNextBB   |</span></span>\n<span class=\"line\"><span style=\"\">//     \\     |   \\_____/</span></span>\n<span class=\"line\"><span style=\"\">//      \\    |</span></span>\n<span class=\"line\"><span style=\"\">//       v   v</span></span>\n<span class=\"line\"><span style=\"\">//       ExitBB</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// HeaderBB will hold allocations, loading of variables and kmp-init calls.</span></span>\n<span class=\"line\"><span style=\"\">// CheckNextBB will check for more work (dynamic / static chunked) or will be</span></span>\n<span class=\"line\"><span style=\"\">// empty (static non chunked).</span></span>\n<span class=\"line\"><span style=\"\">// If there is more work to do: go to PreHeaderBB, otherwise go to ExitBB.</span></span>\n<span class=\"line\"><span style=\"\">// PreHeaderBB loads the new boundaries (&#x26; will lead to the loop body later on).</span></span>\n<span class=\"line\"><span style=\"\">// Just like CheckNextBB: PreHeaderBB is (preliminary) empty in the static non</span></span>\n<span class=\"line\"><span style=\"\">// chunked scheduling case. ExitBB marks the end of the parallel execution.</span></span>\n<span class=\"line\"><span style=\"\">// The possibly empty BasicBlocks will automatically be removed.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/polly/lib/CodeGen/LoopGeneratorsKMP.cpp#L106-L130",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/CodeGen/LoopGeneratorsKMP.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// When a DataRef contains pointers, gets the rightmost one (unless it is</span></span>\n<span class=\"line\"><span style=\"\">// the entity being defined, in which case the last pointer above it);</span></span>\n<span class=\"line\"><span style=\"\">// otherwise, returns the leftmost symbol.  The resulting symbol is the</span></span>\n<span class=\"line\"><span style=\"\">// relevant base object for definabiliy checking.  Examples:</span></span>\n<span class=\"line\"><span style=\"\">//   ptr1%ptr2        => ...     -> ptr1</span></span>\n<span class=\"line\"><span style=\"\">//   nonptr%ptr       => ...     -> nonptr</span></span>\n<span class=\"line\"><span style=\"\">//   nonptr%ptr       =  ...     -> ptr</span></span>\n<span class=\"line\"><span style=\"\">//   ptr1%ptr2        =  ...     -> ptr2</span></span>\n<span class=\"line\"><span style=\"\">//   ptr1%ptr2%nonptr =  ...     -> ptr2</span></span>\n<span class=\"line\"><span style=\"\">//   nonptr1%nonptr2  =  ...     -> nonptr1</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/flang/lib/Semantics/definable.cpp#L63-L72",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/flang/lib/Semantics/definable.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Expand a constant expression `Cur`, which is used at instruction `Parent`</span></span>\n<span class=\"line\"><span style=\"\">// at index `index`.</span></span>\n<span class=\"line\"><span style=\"\">// Since a constant expression can expand to multiple instructions, store all</span></span>\n<span class=\"line\"><span style=\"\">// the expands into a set called `Expands`.</span></span>\n<span class=\"line\"><span style=\"\">// Note that this goes inorder on the constant expression tree.</span></span>\n<span class=\"line\"><span style=\"\">// A * ((B * D) + C)</span></span>\n<span class=\"line\"><span style=\"\">// will be processed with first A, then B * D, then B, then D, and then C.</span></span>\n<span class=\"line\"><span style=\"\">// Though ConstantExprs are not treated as \"trees\" but as DAGs, since you can</span></span>\n<span class=\"line\"><span style=\"\">// have something like this:</span></span>\n<span class=\"line\"><span style=\"\">//    *</span></span>\n<span class=\"line\"><span style=\"\">//   /  \\</span></span>\n<span class=\"line\"><span style=\"\">//   \\  /</span></span>\n<span class=\"line\"><span style=\"\">//    (D)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For the purposes of this expansion, we expand the two occurences of D</span></span>\n<span class=\"line\"><span style=\"\">// separately. Therefore, we expand the DAG into the tree:</span></span>\n<span class=\"line\"><span style=\"\">//  *</span></span>\n<span class=\"line\"><span style=\"\">// / \\</span></span>\n<span class=\"line\"><span style=\"\">// D  D</span></span>\n<span class=\"line\"><span style=\"\">// TODO: We don't _have_to do this, but this is the simplest solution.</span></span>\n<span class=\"line\"><span style=\"\">// We can write a solution that keeps track of which constants have been</span></span>\n<span class=\"line\"><span style=\"\">// already expanded.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/115c7beda74f3cfaf83b91d14bc97a39bff4cf19/polly/lib/CodeGen/ManagedMemoryRewrite.cpp#L82-L103",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/CodeGen/ManagedMemoryRewrite.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Basic map \"i\" has an inequality \"k\" that is adjacent</span></span>\n<span class=\"line\"><span style=\"\"> * to some inequality of basic map \"j\".  All the other inequalities</span></span>\n<span class=\"line\"><span style=\"\"> * are valid for \"j\".</span></span>\n<span class=\"line\"><span style=\"\"> * If not NULL, then \"extra\" contains extra wrapping constraints that are valid</span></span>\n<span class=\"line\"><span style=\"\"> * for both \"i\" and \"j\".</span></span>\n<span class=\"line\"><span style=\"\"> * Check if basic map \"j\" forms an extension of basic map \"i\",</span></span>\n<span class=\"line\"><span style=\"\"> * taking into account the extra constraints, if any.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Note that this function is only called if some of the equalities or</span></span>\n<span class=\"line\"><span style=\"\"> * inequalities of basic map \"j\" do cut basic map \"i\".  The function is</span></span>\n<span class=\"line\"><span style=\"\"> * correct even if there are no such cut constraints, but in that case</span></span>\n<span class=\"line\"><span style=\"\"> * the additional checks performed by this function are overkill.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * In particular, we replace constraint k, say f >= 0, by constraint</span></span>\n<span class=\"line\"><span style=\"\"> * f &#x3C;= -1, add the inequalities of \"j\" that are valid for \"i\",</span></span>\n<span class=\"line\"><span style=\"\"> * as well as the \"extra\" constraints, if any,</span></span>\n<span class=\"line\"><span style=\"\"> * and check if the result is a subset of basic map \"j\".</span></span>\n<span class=\"line\"><span style=\"\"> * To improve the chances of the subset relation being detected,</span></span>\n<span class=\"line\"><span style=\"\"> * any variable that only attains a single integer value</span></span>\n<span class=\"line\"><span style=\"\"> * in the tableau of \"i\" is first fixed to that value.</span></span>\n<span class=\"line\"><span style=\"\"> * If the result is a subset, then we know that this result is exactly equal</span></span>\n<span class=\"line\"><span style=\"\"> * to basic map \"j\" since all its constraints are valid for basic map \"j\".</span></span>\n<span class=\"line\"><span style=\"\"> * By combining the valid constraints of \"i\" (all equalities and all</span></span>\n<span class=\"line\"><span style=\"\"> * inequalities except \"k\"), the valid constraints of \"j\" and</span></span>\n<span class=\"line\"><span style=\"\"> * the \"extra\" constraints, if any, we therefore</span></span>\n<span class=\"line\"><span style=\"\"> * obtain a basic map that is equal to their union.</span></span>\n<span class=\"line\"><span style=\"\"> * In this case, there is no need to perform a rollback of the tableau</span></span>\n<span class=\"line\"><span style=\"\"> * since it is going to be destroyed in fuse().</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\\__\t\t\t|\\__</span></span>\n<span class=\"line\"><span style=\"\"> *\t|   \\__\t\t\t|   \\__</span></span>\n<span class=\"line\"><span style=\"\"> *\t|      \\_\t=>\t|      \\__</span></span>\n<span class=\"line\"><span style=\"\"> *\t|_______| _\t\t|_________\\</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t|\\\t\t\t|\\</span></span>\n<span class=\"line\"><span style=\"\"> *\t| \\\t\t\t| \\</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  \\\t\t\t|  \\</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  |\t\t\t|   \\</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  ||\\\t\t=>      |    \\</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  || \\\t\t\t|     \\</span></span>\n<span class=\"line\"><span style=\"\"> *\t|  ||  |\t\t|      |</span></span>\n<span class=\"line\"><span style=\"\"> *\t|__||_/\t\t\t|_____/</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t_______\t\t\t _______</span></span>\n<span class=\"line\"><span style=\"\"> *     |       | __\t\t|       \\__</span></span>\n<span class=\"line\"><span style=\"\"> *     |       ||__|\t=>\t|        __|</span></span>\n<span class=\"line\"><span style=\"\"> *     |_______|\t\t|_______/</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/polly/lib/External/isl/isl_coalesce.c#L709-L759",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": true
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/External/isl/isl_coalesce.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Return rows that extend a basis of \"mat1\" to one</span></span>\n<span class=\"line\"><span style=\"\"> * that covers both \"mat1\" and \"mat2\".</span></span>\n<span class=\"line\"><span style=\"\"> * The Hermite normal form of the concatenation of the two matrices is</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t                     [ Q1 ]</span></span>\n<span class=\"line\"><span style=\"\"> *\t[ M1 ] = [ H1 0  0 ] [ Q2 ]</span></span>\n<span class=\"line\"><span style=\"\"> *\t[ M2 ] = [ H2 H3 0 ] [ Q3 ]</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The number of columns in H1 and H3 determine the number of rows</span></span>\n<span class=\"line\"><span style=\"\"> * in Q1 and Q2.  Q1 is a basis for M1, while Q2 extends this basis</span></span>\n<span class=\"line\"><span style=\"\"> * to also cover M2.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/polly/lib/External/isl/isl_mat.c#L2039-L2050",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/External/isl/isl_mat.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Determine the sign of the given row of the main tableau.</span></span>\n<span class=\"line\"><span style=\"\"> * The result is one of</span></span>\n<span class=\"line\"><span style=\"\"> *\tisl_tab_row_pos: always non-negative; no pivot needed</span></span>\n<span class=\"line\"><span style=\"\"> *\tisl_tab_row_neg: always non-positive; pivot</span></span>\n<span class=\"line\"><span style=\"\"> *\tisl_tab_row_any: can be both positive and negative; split</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We first handle some simple cases</span></span>\n<span class=\"line\"><span style=\"\"> *\t- the row sign may be known already</span></span>\n<span class=\"line\"><span style=\"\"> *\t- the row may be obviously non-negative</span></span>\n<span class=\"line\"><span style=\"\"> *\t- the parametric constant may be equal to that of another row</span></span>\n<span class=\"line\"><span style=\"\"> *\t  for which we know the sign.  This sign will be either \"pos\" or</span></span>\n<span class=\"line\"><span style=\"\"> *\t  \"any\".  If it had been \"neg\" then we would have pivoted before.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If none of these cases hold, we check the value of the row for each</span></span>\n<span class=\"line\"><span style=\"\"> * of the currently active samples.  Based on the signs of these values</span></span>\n<span class=\"line\"><span style=\"\"> * we make an initial determination of the sign of the row.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tall zero\t\t\t->\tunk(nown)</span></span>\n<span class=\"line\"><span style=\"\"> *\tall non-negative\t\t->\tpos</span></span>\n<span class=\"line\"><span style=\"\"> *\tall non-positive\t\t->\tneg</span></span>\n<span class=\"line\"><span style=\"\"> *\tboth negative and positive\t->\tall</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If we end up with \"all\", we are done.</span></span>\n<span class=\"line\"><span style=\"\"> * Otherwise, we perform a check for positive and/or negative</span></span>\n<span class=\"line\"><span style=\"\"> * values as follows.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tsamples\t       neg\t       unk\t       pos</span></span>\n<span class=\"line\"><span style=\"\"> *\t&#x3C;0 ?\t\t\t    Y        N\t    Y        N</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\t    pos    any      pos</span></span>\n<span class=\"line\"><span style=\"\"> *\t>0 ?\t     Y      N\t Y     N</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t    any    neg  any   neg</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * There is no special sign for \"zero\", because we can usually treat zero</span></span>\n<span class=\"line\"><span style=\"\"> * as either non-negative or non-positive, whatever works out best.</span></span>\n<span class=\"line\"><span style=\"\"> * However, if the row is \"critical\", meaning that pivoting is impossible</span></span>\n<span class=\"line\"><span style=\"\"> * then we don't want to limp zero with the non-positive case, because</span></span>\n<span class=\"line\"><span style=\"\"> * then we we would lose the solution for those values of the parameters</span></span>\n<span class=\"line\"><span style=\"\"> * where the value of the row is zero.  Instead, we treat 0 as non-negative</span></span>\n<span class=\"line\"><span style=\"\"> * ensuring a split if the row can attain both zero and negative values.</span></span>\n<span class=\"line\"><span style=\"\"> * The same happens when the original constraint was one that could not</span></span>\n<span class=\"line\"><span style=\"\"> * be satisfied with equality by any integer values of the parameters.</span></span>\n<span class=\"line\"><span style=\"\"> * In this case, we normalize the constraint, but then a value of zero</span></span>\n<span class=\"line\"><span style=\"\"> * for the normalized constraint is actually a positive value for the</span></span>\n<span class=\"line\"><span style=\"\"> * original constraint, so again we need to treat zero as non-negative.</span></span>\n<span class=\"line\"><span style=\"\"> * In both these cases, we have the following decision tree instead:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tall non-negative\t\t->\tpos</span></span>\n<span class=\"line\"><span style=\"\"> *\tall negative\t\t\t->\tneg</span></span>\n<span class=\"line\"><span style=\"\"> *\tboth negative and non-negative\t->\tall</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\tsamples\t       neg\t          \t       pos</span></span>\n<span class=\"line\"><span style=\"\"> *\t&#x3C;0 ?\t\t\t             \t    Y        N</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t\t\t\t           any      pos</span></span>\n<span class=\"line\"><span style=\"\"> *\t>=0 ?\t     Y      N</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t    any    neg</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/polly/lib/External/isl/isl_tab_pip.c#L3783-L3838",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": true
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/External/isl/isl_tab_pip.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Generate CUDA code for \"scop\" and print it to \"p\".</span></span>\n<span class=\"line\"><span style=\"\"> * After generating an AST for the transformed scop as explained below,</span></span>\n<span class=\"line\"><span style=\"\"> * we call \"gen->print\" to print the AST in the desired output format</span></span>\n<span class=\"line\"><span style=\"\"> * to \"p\".</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * If it turns out that it does not make sense to generate GPU code,</span></span>\n<span class=\"line\"><span style=\"\"> * then we generate CPU code instead.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The declarations of the arrays that are visible outside of the scop</span></span>\n<span class=\"line\"><span style=\"\"> * are printed outside of the code generated from the schedule,</span></span>\n<span class=\"line\"><span style=\"\"> * because the generated code may involve a guard around the entire code.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We first compute a schedule that respects the dependences</span></span>\n<span class=\"line\"><span style=\"\"> * of the original program and select the outermost bands</span></span>\n<span class=\"line\"><span style=\"\"> * of tilable dimensions that have at least one parallel loop.</span></span>\n<span class=\"line\"><span style=\"\"> * If the --load-schedule is specified, then the loaded schedule</span></span>\n<span class=\"line\"><span style=\"\"> * is used instead of a computed schedule.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Each of these bands B is then tiled according to \"tile\" sizes, resulting</span></span>\n<span class=\"line\"><span style=\"\"> * in two nested bands, with a kernel marker on top</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tK</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tT</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tP</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * We then split off at most 2 parallel dimensions from the T band and</span></span>\n<span class=\"line\"><span style=\"\"> * at most 3 parallel dimension from the P band</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tK</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tT</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tT1</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tT2</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tP1</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t|</span></span>\n<span class=\"line\"><span style=\"\"> *\t\tP2</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * A filter is introduced in front of T1 that maps the domain instances</span></span>\n<span class=\"line\"><span style=\"\"> * to block identifiers.  Similarly, a filter is introduced in front of P1</span></span>\n<span class=\"line\"><span style=\"\"> * that maps the domain instances to thread identifiers.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * For each iteration of the T2 band and for each array, we compute</span></span>\n<span class=\"line\"><span style=\"\"> * the array elements accessed by that iteration, construct a rectangular</span></span>\n<span class=\"line\"><span style=\"\"> * box around it and shift it to the origin.  The result is used</span></span>\n<span class=\"line\"><span style=\"\"> * as shared memory for the array.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * Copying and synchronization statements are added to this schedule tree.</span></span>\n<span class=\"line\"><span style=\"\"> * In principle, these are added in front of the P1 band, but some of</span></span>\n<span class=\"line\"><span style=\"\"> * them may get hoisted up to higher levels.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The entire AST is then generated from the single resulting schedule tree.</span></span>\n<span class=\"line\"><span style=\"\"> * During the generation the subtrees at kernel nodes (K) are saved</span></span>\n<span class=\"line\"><span style=\"\"> * aside and replaced by kernel calls.  The result is printed as host code</span></span>\n<span class=\"line\"><span style=\"\"> * while the saved subtrees are printed as device code.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/115c7beda74f3cfaf83b91d14bc97a39bff4cf19/polly/lib/External/ppcg/gpu.c#L5599-L5657",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/External/ppcg/gpu.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/* Construct the basic hexagonal tile shape.</span></span>\n<span class=\"line\"><span style=\"\"> * \"space\" is the 2D space in which the hexagon should be constructed.</span></span>\n<span class=\"line\"><span style=\"\"> * h is st-1, with st the tile size in the time dimension</span></span>\n<span class=\"line\"><span style=\"\"> * s0 is the tile size in the space dimension</span></span>\n<span class=\"line\"><span style=\"\"> * dl is a bound on the negative relative dependence distances, i.e.,</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\td_s >= -dl d_t</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * du is a bound on the positive relative dependence distances, i.e.,</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\td_s &#x3C;= du d_t</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * with (d_t,d_s) any dependence distance vector.</span></span>\n<span class=\"line\"><span style=\"\"> * dlh = floor(dl * h)</span></span>\n<span class=\"line\"><span style=\"\"> * duh = floor(du * h)</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The shape of the hexagon is as follows:</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t0 dlh   dlh+s0-1</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t   ______                __</span></span>\n<span class=\"line\"><span style=\"\"> * 0\t\t  /      \\_             /</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t /         \\_          /</span></span>\n<span class=\"line\"><span style=\"\"> * h\t\t/            \\ ______ /</span></span>\n<span class=\"line\"><span style=\"\"> * h+1\t\t\\_           //      \\\\_</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t  \\_        //         \\\\_</span></span>\n<span class=\"line\"><span style=\"\"> * 2h+1\t\t    \\______//            \\\\</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t0   duh   duh+s0-1</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t             duh+s0-1+dlh</span></span>\n<span class=\"line\"><span style=\"\"> *\t\t                  duh+s0-1+dlh+1+s0+1</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The next hexagon is shifted by duh + dlh + 2 * s0.</span></span>\n<span class=\"line\"><span style=\"\"> *</span></span>\n<span class=\"line\"><span style=\"\"> * The slope of the \"/\" constraints is dl.</span></span>\n<span class=\"line\"><span style=\"\"> * The slope of the \"\\_\" constraints is du.</span></span>\n<span class=\"line\"><span style=\"\"> */</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/115c7beda74f3cfaf83b91d14bc97a39bff4cf19/polly/lib/External/ppcg/hybrid.c#L565-L599",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/polly/lib/External/ppcg/hybrid.c"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// FindMaxBipartiteMatching and its helper class.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Uses the well-known Ford-Fulkerson max flow method to find a maximum</span></span>\n<span class=\"line\"><span style=\"\">// bipartite matching. Flow is considered to be from left to right.</span></span>\n<span class=\"line\"><span style=\"\">// There is an implicit source node that is connected to all of the left</span></span>\n<span class=\"line\"><span style=\"\">// nodes, and an implicit sink node that is connected to all of the</span></span>\n<span class=\"line\"><span style=\"\">// right nodes. All edges have unit capacity.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Neither the flow graph nor the residual flow graph are represented</span></span>\n<span class=\"line\"><span style=\"\">// explicitly. Instead, they are implied by the information in 'graph' and</span></span>\n<span class=\"line\"><span style=\"\">// a vector&#x3C;int> called 'left_' whose elements are initialized to the</span></span>\n<span class=\"line\"><span style=\"\">// value kUnused. This represents the initial state of the algorithm,</span></span>\n<span class=\"line\"><span style=\"\">// where the flow graph is empty, and the residual flow graph has the</span></span>\n<span class=\"line\"><span style=\"\">// following edges:</span></span>\n<span class=\"line\"><span style=\"\">//   - An edge from source to each left_ node</span></span>\n<span class=\"line\"><span style=\"\">//   - An edge from each right_ node to sink</span></span>\n<span class=\"line\"><span style=\"\">//   - An edge from each left_ node to each right_ node, if the</span></span>\n<span class=\"line\"><span style=\"\">//     corresponding edge exists in 'graph'.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// When the TryAugment() method adds a flow, it sets left_[l] = r for some</span></span>\n<span class=\"line\"><span style=\"\">// nodes l and r. This induces the following changes:</span></span>\n<span class=\"line\"><span style=\"\">//   - The edges (source, l), (l, r), and (r, sink) are added to the</span></span>\n<span class=\"line\"><span style=\"\">//     flow graph.</span></span>\n<span class=\"line\"><span style=\"\">//   - The same three edges are removed from the residual flow graph.</span></span>\n<span class=\"line\"><span style=\"\">//   - The reverse edges (l, source), (r, l), and (sink, r) are added</span></span>\n<span class=\"line\"><span style=\"\">//     to the residual flow graph, which is a directional graph</span></span>\n<span class=\"line\"><span style=\"\">//     representing unused flow capacity.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// When the method augments a flow (moving left_[l] from some r1 to some</span></span>\n<span class=\"line\"><span style=\"\">// other r2), this can be thought of as \"undoing\" the above steps with</span></span>\n<span class=\"line\"><span style=\"\">// respect to r1 and \"redoing\" them with respect to r2.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// It bears repeating that the flow graph and residual flow graph are</span></span>\n<span class=\"line\"><span style=\"\">// never represented explicitly, but can be derived by looking at the</span></span>\n<span class=\"line\"><span style=\"\">// information in 'graph' and in left_.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// As an optimization, there is a second vector&#x3C;int> called right_ which</span></span>\n<span class=\"line\"><span style=\"\">// does not provide any new information. Instead, it enables more</span></span>\n<span class=\"line\"><span style=\"\">// efficient queries about edges entering or leaving the right-side nodes</span></span>\n<span class=\"line\"><span style=\"\">// of the flow or residual flow graphs. The following invariants are</span></span>\n<span class=\"line\"><span style=\"\">// maintained:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// left[l] == kUnused or right[left[l]] == l</span></span>\n<span class=\"line\"><span style=\"\">// right[r] == kUnused or left[right[r]] == r</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// . [ source ]                                        .</span></span>\n<span class=\"line\"><span style=\"\">// .   |||                                             .</span></span>\n<span class=\"line\"><span style=\"\">// .   |||                                             .</span></span>\n<span class=\"line\"><span style=\"\">// .   ||\\--> left[0]=1  ---\\    right[0]=-1 ----\\     .</span></span>\n<span class=\"line\"><span style=\"\">// .   ||                   |                    |     .</span></span>\n<span class=\"line\"><span style=\"\">// .   |\\---> left[1]=-1    \\--> right[1]=0  ---\\|     .</span></span>\n<span class=\"line\"><span style=\"\">// .   |                                        ||     .</span></span>\n<span class=\"line\"><span style=\"\">// .   \\----> left[2]=2  ------> right[2]=2  --\\||     .</span></span>\n<span class=\"line\"><span style=\"\">// .                                           |||     .</span></span>\n<span class=\"line\"><span style=\"\">// .         elements           matchers       vvv     .</span></span>\n<span class=\"line\"><span style=\"\">// .                                         [ sink ]  .</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// See Also:</span></span>\n<span class=\"line\"><span style=\"\">//   [1] Cormen, et al (2001). \"Section 26.2: The Ford-Fulkerson method\".</span></span>\n<span class=\"line\"><span style=\"\">//       \"Introduction to Algorithms (Second ed.)\", pp. 651-664.</span></span>\n<span class=\"line\"><span style=\"\">//   [2] \"Ford-Fulkerson algorithm\", Wikipedia,</span></span>\n<span class=\"line\"><span style=\"\">//       'http://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm'</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/third-party/unittest/googlemock/src/gmock-matchers.cc#L60-L121",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "llvm-project/third-party/unittest/googlemock/src/gmock-matchers.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Inheritance graph for the parse tree visitation classes that follow:</span></span>\n<span class=\"line\"><span style=\"\">//   BaseVisitor</span></span>\n<span class=\"line\"><span style=\"\">//   + AttrsVisitor</span></span>\n<span class=\"line\"><span style=\"\">//   | + DeclTypeSpecVisitor</span></span>\n<span class=\"line\"><span style=\"\">//   |   + ImplicitRulesVisitor</span></span>\n<span class=\"line\"><span style=\"\">//   |     + ScopeHandler -----------+--+</span></span>\n<span class=\"line\"><span style=\"\">//   |       + ModuleVisitor ========|==+</span></span>\n<span class=\"line\"><span style=\"\">//   |       + InterfaceVisitor      |  |</span></span>\n<span class=\"line\"><span style=\"\">//   |       +-+ SubprogramVisitor ==|==+</span></span>\n<span class=\"line\"><span style=\"\">//   + ArraySpecVisitor              |  |</span></span>\n<span class=\"line\"><span style=\"\">//     + DeclarationVisitor &#x3C;--------+  |</span></span>\n<span class=\"line\"><span style=\"\">//       + ConstructVisitor             |</span></span>\n<span class=\"line\"><span style=\"\">//         + ResolveNamesVisitor &#x3C;------+</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/flang/lib/Semantics/resolve-names.cpp#L133-L145",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": true,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/flang/lib/Semantics/resolve-names.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//===- ExportTrie.cpp -----------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span></span>\n<span class=\"line\"><span style=\"\">// See https://llvm.org/LICENSE.txt for license information.</span></span>\n<span class=\"line\"><span style=\"\">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This is a partial implementation of the Mach-O export trie format. It's</span></span>\n<span class=\"line\"><span style=\"\">// essentially a symbol table encoded as a compressed prefix trie, meaning that</span></span>\n<span class=\"line\"><span style=\"\">// the common prefixes of each symbol name are shared for a more compact</span></span>\n<span class=\"line\"><span style=\"\">// representation. The prefixes are stored on the edges of the trie, and one</span></span>\n<span class=\"line\"><span style=\"\">// edge can represent multiple characters. For example, given two exported</span></span>\n<span class=\"line\"><span style=\"\">// symbols _bar and _baz, we will have a trie like this (terminal nodes are</span></span>\n<span class=\"line\"><span style=\"\">// marked with an asterisk):</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//              +-+-+</span></span>\n<span class=\"line\"><span style=\"\">//              |   | // root node</span></span>\n<span class=\"line\"><span style=\"\">//              +-+-+</span></span>\n<span class=\"line\"><span style=\"\">//                |</span></span>\n<span class=\"line\"><span style=\"\">//                | _ba</span></span>\n<span class=\"line\"><span style=\"\">//                |</span></span>\n<span class=\"line\"><span style=\"\">//              +-+-+</span></span>\n<span class=\"line\"><span style=\"\">//              |   |</span></span>\n<span class=\"line\"><span style=\"\">//              +-+-+</span></span>\n<span class=\"line\"><span style=\"\">//           r /     \\ z</span></span>\n<span class=\"line\"><span style=\"\">//            /       \\</span></span>\n<span class=\"line\"><span style=\"\">//        +-+-+       +-+-+</span></span>\n<span class=\"line\"><span style=\"\">//        | * |       | * |</span></span>\n<span class=\"line\"><span style=\"\">//        +-+-+       +-+-+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// More documentation of the format can be found in</span></span>\n<span class=\"line\"><span style=\"\">// llvm/tools/obj2yaml/macho2yaml.cpp.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/lld/MachO/ExportTrie.cpp#L1-L35",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/lld/MachO/ExportTrie.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// IntervalTree is a light tree data structure to hold intervals. It allows</span></span>\n<span class=\"line\"><span style=\"\">// finding all intervals that overlap with any given point. At this time,</span></span>\n<span class=\"line\"><span style=\"\">// it does not support any deletion or rebalancing operations.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The IntervalTree is designed to be set up once, and then queried without</span></span>\n<span class=\"line\"><span style=\"\">// any further additions.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Synopsis:</span></span>\n<span class=\"line\"><span style=\"\">//   Closed intervals delimited by PointT objects are mapped to ValueT objects.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Restrictions:</span></span>\n<span class=\"line\"><span style=\"\">//   PointT must be a fundamental type.</span></span>\n<span class=\"line\"><span style=\"\">//   ValueT must be a fundamental or pointer type.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// template &#x3C;typename PointT, typename ValueT, typename DataT></span></span>\n<span class=\"line\"><span style=\"\">// class IntervalTree {</span></span>\n<span class=\"line\"><span style=\"\">// public:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   IntervalTree();</span></span>\n<span class=\"line\"><span style=\"\">//   ~IntervalTree():</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   using IntervalReferences = SmallVector&#x3C;IntervalData *>;</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   void create();</span></span>\n<span class=\"line\"><span style=\"\">//   void insert(PointT Left, PointT Right, ValueT Value);</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   IntervalReferences getContaining(PointT Point);</span></span>\n<span class=\"line\"><span style=\"\">//   static void sortIntervals(IntervalReferences &#x26;Intervals, Sorting Sort);</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   find_iterator begin(PointType Point) const;</span></span>\n<span class=\"line\"><span style=\"\">//   find_iterator end() const;</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   bool empty() const;</span></span>\n<span class=\"line\"><span style=\"\">//   void clear();</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   void print(raw_ostream &#x26;OS, bool HexFormat = true);</span></span>\n<span class=\"line\"><span style=\"\">// };</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In the below given dataset</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   [a, b] &#x3C;- (x)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 'a' and 'b' describe a range and 'x' the value for that interval.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The following data are purely for illustrative purposes:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// [30, 35] &#x3C;- (3035),    [39, 50] &#x3C;- (3950),    [55, 61] &#x3C;- (5561),</span></span>\n<span class=\"line\"><span style=\"\">// [31, 56] &#x3C;- (3156),    [12, 21] &#x3C;- (1221),    [25, 41] &#x3C;- (2541),</span></span>\n<span class=\"line\"><span style=\"\">// [49, 65] &#x3C;- (4965),    [71, 79] &#x3C;- (7179),    [11, 16] &#x3C;- (1116),</span></span>\n<span class=\"line\"><span style=\"\">// [20, 30] &#x3C;- (2030),    [36, 54] &#x3C;- (3654),    [60, 70] &#x3C;- (6070),</span></span>\n<span class=\"line\"><span style=\"\">// [74, 80] &#x3C;- (7480),    [15, 40] &#x3C;- (1540),    [43, 43] &#x3C;- (4343),</span></span>\n<span class=\"line\"><span style=\"\">// [50, 75] &#x3C;- (5075),    [10, 85] &#x3C;- (1085)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The data represents a set of overlapping intervals:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                    30--35  39------------50  55----61</span></span>\n<span class=\"line\"><span style=\"\">//                      31------------------------56</span></span>\n<span class=\"line\"><span style=\"\">//     12--------21 25------------41      49-------------65   71-----79</span></span>\n<span class=\"line\"><span style=\"\">//   11----16  20-----30    36----------------54    60------70  74---- 80</span></span>\n<span class=\"line\"><span style=\"\">//       15---------------------40  43--43  50--------------------75</span></span>\n<span class=\"line\"><span style=\"\">// 10----------------------------------------------------------------------85</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The items are stored in a binary tree with each node storing:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// MP: A middle point.</span></span>\n<span class=\"line\"><span style=\"\">// IL: All intervals whose left value are completely to the left of the middle</span></span>\n<span class=\"line\"><span style=\"\">//     point. They are sorted in ascending order by their beginning point.</span></span>\n<span class=\"line\"><span style=\"\">// IR: All intervals whose right value are completely to the right of the</span></span>\n<span class=\"line\"><span style=\"\">//     middle point. They are sorted in descending order by their ending point.</span></span>\n<span class=\"line\"><span style=\"\">// LS: Left subtree.</span></span>\n<span class=\"line\"><span style=\"\">// RS: Right subtree.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// As IL and IR will contain the same intervals, in order to optimize space,</span></span>\n<span class=\"line\"><span style=\"\">// instead of storing intervals on each node, we use two vectors that will</span></span>\n<span class=\"line\"><span style=\"\">// contain the intervals described by IL and IR. Each node will contain an</span></span>\n<span class=\"line\"><span style=\"\">// index into that vector (global bucket), to indicate the beginning of the</span></span>\n<span class=\"line\"><span style=\"\">// intervals assigned to the node.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The following is the output from print():</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 0: MP:43 IR [10,85] [31,56] [36,54] [39,50] [43,43]</span></span>\n<span class=\"line\"><span style=\"\">// 0: MP:43 IL [10,85] [31,56] [36,54] [39,50] [43,43]</span></span>\n<span class=\"line\"><span style=\"\">// 1:   MP:25 IR [25,41] [15,40] [20,30]</span></span>\n<span class=\"line\"><span style=\"\">// 1:   MP:25 IL [15,40] [20,30] [25,41]</span></span>\n<span class=\"line\"><span style=\"\">// 2:     MP:15 IR [12,21] [11,16]</span></span>\n<span class=\"line\"><span style=\"\">// 2:     MP:15 IL [11,16] [12,21]</span></span>\n<span class=\"line\"><span style=\"\">// 2:     MP:36 IR []</span></span>\n<span class=\"line\"><span style=\"\">// 2:     MP:36 IL []</span></span>\n<span class=\"line\"><span style=\"\">// 3:       MP:31 IR [30,35]</span></span>\n<span class=\"line\"><span style=\"\">// 3:       MP:31 IL [30,35]</span></span>\n<span class=\"line\"><span style=\"\">// 1:   MP:61 IR [50,75] [60,70] [49,65] [55,61]</span></span>\n<span class=\"line\"><span style=\"\">// 1:   MP:61 IL [49,65] [50,75] [55,61] [60,70]</span></span>\n<span class=\"line\"><span style=\"\">// 2:     MP:74 IR [74,80] [71,79]</span></span>\n<span class=\"line\"><span style=\"\">// 2:     MP:74 IL [71,79] [74,80]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// with:</span></span>\n<span class=\"line\"><span style=\"\">//    0: Root Node.</span></span>\n<span class=\"line\"><span style=\"\">//   MP: Middle point.</span></span>\n<span class=\"line\"><span style=\"\">//   IL: Intervals to the left (in ascending order by beginning point).</span></span>\n<span class=\"line\"><span style=\"\">//   IR: Intervals to the right (in descending order by ending point).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                                    Root</span></span>\n<span class=\"line\"><span style=\"\">//                                      |</span></span>\n<span class=\"line\"><span style=\"\">//                                      V</span></span>\n<span class=\"line\"><span style=\"\">//                       +------------MP:43------------+</span></span>\n<span class=\"line\"><span style=\"\">//                       |            IL IR            |</span></span>\n<span class=\"line\"><span style=\"\">//                       |       [10,85] [10,85]       |</span></span>\n<span class=\"line\"><span style=\"\">//                    LS |       [31,56] [31,56]       | RS</span></span>\n<span class=\"line\"><span style=\"\">//                       |       [36,54] [36,54]       |</span></span>\n<span class=\"line\"><span style=\"\">//                       |       [39,50] [39,50]       |</span></span>\n<span class=\"line\"><span style=\"\">//                       |       [43,43] [43,43]       |</span></span>\n<span class=\"line\"><span style=\"\">//                       V                             V</span></span>\n<span class=\"line\"><span style=\"\">//        +------------MP:25------------+            MP:61------------+</span></span>\n<span class=\"line\"><span style=\"\">//        |            IL IR            |            IL IR            |</span></span>\n<span class=\"line\"><span style=\"\">//        |       [15,40] [25,41]       |       [49,65] [50,75]       |</span></span>\n<span class=\"line\"><span style=\"\">//     LS |       [20,30] [15,40]       | RS    [50,75] [60,70]       | RS</span></span>\n<span class=\"line\"><span style=\"\">//        |       [25,41] [20,30]       |       [55,61] [49,65]       |</span></span>\n<span class=\"line\"><span style=\"\">//        |                             |       [60,70] [55,61]       |</span></span>\n<span class=\"line\"><span style=\"\">//        V                             V                             V</span></span>\n<span class=\"line\"><span style=\"\">//      MP:15                 +-------MP:36                         MP:74</span></span>\n<span class=\"line\"><span style=\"\">//      IL IR                 |       IL IR                         IL IR</span></span>\n<span class=\"line\"><span style=\"\">// [11,16] [12,21]         LS |       [] []                    [71,79] [74,80]</span></span>\n<span class=\"line\"><span style=\"\">// [12,21] [11,16]            |                                [74,80] [71,79]</span></span>\n<span class=\"line\"><span style=\"\">//                            V</span></span>\n<span class=\"line\"><span style=\"\">//                          MP:31</span></span>\n<span class=\"line\"><span style=\"\">//                          IL IR</span></span>\n<span class=\"line\"><span style=\"\">//                     [30,35] [30,35]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The creation of an interval tree is done in 2 steps:</span></span>\n<span class=\"line\"><span style=\"\">// 1) Insert the interval items by calling</span></span>\n<span class=\"line\"><span style=\"\">//    void insert(PointT Left, PointT Right, ValueT Value);</span></span>\n<span class=\"line\"><span style=\"\">//    Left, Right: the interval left and right limits.</span></span>\n<span class=\"line\"><span style=\"\">//    Value: the data associated with that specific interval.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 2) Create the interval tree by calling</span></span>\n<span class=\"line\"><span style=\"\">//    void create();</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Once the tree is created, it is switched to query mode.</span></span>\n<span class=\"line\"><span style=\"\">// Query the tree by using iterators or container.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// a) Iterators over intervals overlapping the given point with very weak</span></span>\n<span class=\"line\"><span style=\"\">//    ordering guarantees.</span></span>\n<span class=\"line\"><span style=\"\">//    find_iterator begin(PointType Point) const;</span></span>\n<span class=\"line\"><span style=\"\">//    find_iterator end() const;</span></span>\n<span class=\"line\"><span style=\"\">//    Point: a target point to be tested for inclusion in any interval.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// b) Container:</span></span>\n<span class=\"line\"><span style=\"\">//    IntervalReferences getContaining(PointT Point);</span></span>\n<span class=\"line\"><span style=\"\">//    Point: a target point to be tested for inclusion in any interval.</span></span>\n<span class=\"line\"><span style=\"\">//    Returns vector with all the intervals containing the target point.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The returned intervals are in their natural tree location. They can</span></span>\n<span class=\"line\"><span style=\"\">// be sorted:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// static void sortIntervals(IntervalReferences &#x26;Intervals, Sorting Sort);</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Ability to print the constructed interval tree:</span></span>\n<span class=\"line\"><span style=\"\">//   void print(raw_ostream &#x26;OS, bool HexFormat = true);</span></span>\n<span class=\"line\"><span style=\"\">// Display the associated data in hexadecimal format.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/include/llvm/ADT/IntervalTree.h#L28-L188",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/include/llvm/ADT/IntervalTree.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//===--- SyncDependenceAnalysis.cpp - Compute Control Divergence Effects --===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span></span>\n<span class=\"line\"><span style=\"\">// See https://llvm.org/LICENSE.txt for license information.</span></span>\n<span class=\"line\"><span style=\"\">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This file implements an algorithm that returns for a divergent branch</span></span>\n<span class=\"line\"><span style=\"\">// the set of basic blocks whose phi nodes become divergent due to divergent</span></span>\n<span class=\"line\"><span style=\"\">// control. These are the blocks that are reachable by two disjoint paths from</span></span>\n<span class=\"line\"><span style=\"\">// the branch or loop exits that have a reaching path that is disjoint from a</span></span>\n<span class=\"line\"><span style=\"\">// path to the loop latch.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The SyncDependenceAnalysis is used in the DivergenceAnalysis to model</span></span>\n<span class=\"line\"><span style=\"\">// control-induced divergence in phi nodes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// -- Reference --</span></span>\n<span class=\"line\"><span style=\"\">// The algorithm is presented in Section 5 of </span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   An abstract interpretation for SPMD divergence</span></span>\n<span class=\"line\"><span style=\"\">//       on reducible control flow graphs.</span></span>\n<span class=\"line\"><span style=\"\">//   Julian Rosemann, Simon Moll and Sebastian Hack</span></span>\n<span class=\"line\"><span style=\"\">//   POPL '21</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// -- Sync dependence --</span></span>\n<span class=\"line\"><span style=\"\">// Sync dependence characterizes the control flow aspect of the</span></span>\n<span class=\"line\"><span style=\"\">// propagation of branch divergence. For example,</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   %cond = icmp slt i32 %tid, 10</span></span>\n<span class=\"line\"><span style=\"\">//   br i1 %cond, label %then, label %else</span></span>\n<span class=\"line\"><span style=\"\">// then:</span></span>\n<span class=\"line\"><span style=\"\">//   br label %merge</span></span>\n<span class=\"line\"><span style=\"\">// else:</span></span>\n<span class=\"line\"><span style=\"\">//   br label %merge</span></span>\n<span class=\"line\"><span style=\"\">// merge:</span></span>\n<span class=\"line\"><span style=\"\">//   %a = phi i32 [ 0, %then ], [ 1, %else ]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Suppose %tid holds the thread ID. Although %a is not data dependent on %tid</span></span>\n<span class=\"line\"><span style=\"\">// because %tid is not on its use-def chains, %a is sync dependent on %tid</span></span>\n<span class=\"line\"><span style=\"\">// because the branch \"br i1 %cond\" depends on %tid and affects which value %a</span></span>\n<span class=\"line\"><span style=\"\">// is assigned to.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// -- Reduction to SSA construction --</span></span>\n<span class=\"line\"><span style=\"\">// There are two disjoint paths from A to X, if a certain variant of SSA</span></span>\n<span class=\"line\"><span style=\"\">// construction places a phi node in X under the following set-up scheme.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This variant of SSA construction ignores incoming undef values.</span></span>\n<span class=\"line\"><span style=\"\">// That is paths from the entry without a definition do not result in</span></span>\n<span class=\"line\"><span style=\"\">// phi nodes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//       entry</span></span>\n<span class=\"line\"><span style=\"\">//     /      \\</span></span>\n<span class=\"line\"><span style=\"\">//    A        \\</span></span>\n<span class=\"line\"><span style=\"\">//  /   \\       Y</span></span>\n<span class=\"line\"><span style=\"\">// B     C     /</span></span>\n<span class=\"line\"><span style=\"\">//  \\   /  \\  /</span></span>\n<span class=\"line\"><span style=\"\">//    D     E</span></span>\n<span class=\"line\"><span style=\"\">//     \\   /</span></span>\n<span class=\"line\"><span style=\"\">//       F</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Assume that A contains a divergent branch. We are interested</span></span>\n<span class=\"line\"><span style=\"\">// in the set of all blocks where each block is reachable from A</span></span>\n<span class=\"line\"><span style=\"\">// via two disjoint paths. This would be the set {D, F} in this</span></span>\n<span class=\"line\"><span style=\"\">// case.</span></span>\n<span class=\"line\"><span style=\"\">// To generally reduce this query to SSA construction we introduce</span></span>\n<span class=\"line\"><span style=\"\">// a virtual variable x and assign to x different values in each</span></span>\n<span class=\"line\"><span style=\"\">// successor block of A.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//           entry</span></span>\n<span class=\"line\"><span style=\"\">//         /      \\</span></span>\n<span class=\"line\"><span style=\"\">//        A        \\</span></span>\n<span class=\"line\"><span style=\"\">//      /   \\       Y</span></span>\n<span class=\"line\"><span style=\"\">// x = 0   x = 1   /</span></span>\n<span class=\"line\"><span style=\"\">//      \\  /   \\  /</span></span>\n<span class=\"line\"><span style=\"\">//        D     E</span></span>\n<span class=\"line\"><span style=\"\">//         \\   /</span></span>\n<span class=\"line\"><span style=\"\">//           F</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Our flavor of SSA construction for x will construct the following</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//            entry</span></span>\n<span class=\"line\"><span style=\"\">//          /      \\</span></span>\n<span class=\"line\"><span style=\"\">//         A        \\</span></span>\n<span class=\"line\"><span style=\"\">//       /   \\       Y</span></span>\n<span class=\"line\"><span style=\"\">// x0 = 0   x1 = 1  /</span></span>\n<span class=\"line\"><span style=\"\">//       \\   /   \\ /</span></span>\n<span class=\"line\"><span style=\"\">//     x2 = phi   E</span></span>\n<span class=\"line\"><span style=\"\">//         \\     /</span></span>\n<span class=\"line\"><span style=\"\">//         x3 = phi</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The blocks D and F contain phi nodes and are thus each reachable</span></span>\n<span class=\"line\"><span style=\"\">// by two disjoins paths from A.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// -- Remarks --</span></span>\n<span class=\"line\"><span style=\"\">// * In case of loop exits we need to check the disjoint path criterion for loops.</span></span>\n<span class=\"line\"><span style=\"\">//   To this end, we check whether the definition of x differs between the</span></span>\n<span class=\"line\"><span style=\"\">//   loop exit and the loop header (_after_ SSA construction).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// -- Known Limitations &#x26; Future Work --</span></span>\n<span class=\"line\"><span style=\"\">// * The algorithm requires reducible loops because the implementation</span></span>\n<span class=\"line\"><span style=\"\">//   implicitly performs a single iteration of the underlying data flow analysis.</span></span>\n<span class=\"line\"><span style=\"\">//   This was done for pragmatism, simplicity and speed.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   Relevant related work for extending the algorithm to irreducible control:</span></span>\n<span class=\"line\"><span style=\"\">//     A simple algorithm for global data flow analysis problems.</span></span>\n<span class=\"line\"><span style=\"\">//     Matthew S. Hecht and Jeffrey D. Ullman.</span></span>\n<span class=\"line\"><span style=\"\">//     SIAM Journal on Computing, 4(4):519–532, December 1975.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// * Another reason for requiring reducible loops is that points of</span></span>\n<span class=\"line\"><span style=\"\">//   synchronization in irreducible loops aren't 'obvious' - there is no unique</span></span>\n<span class=\"line\"><span style=\"\">//   header where threads 'should' synchronize when entering or coming back</span></span>\n<span class=\"line\"><span style=\"\">//   around from the latch.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Analysis/SyncDependenceAnalysis.cpp#L1-L118",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Analysis/SyncDependenceAnalysis.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//                                 SSAIfConv</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The SSAIfConv class performs if-conversion on SSA form machine code after</span></span>\n<span class=\"line\"><span style=\"\">// determining if it is possible. The class contains no heuristics; external</span></span>\n<span class=\"line\"><span style=\"\">// code should be used to determine when if-conversion is a good idea.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// SSAIfConv can convert both triangles and diamonds:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   Triangle: Head              Diamond: Head</span></span>\n<span class=\"line\"><span style=\"\">//              | \\                       /  \\_</span></span>\n<span class=\"line\"><span style=\"\">//              |  \\                     /    |</span></span>\n<span class=\"line\"><span style=\"\">//              |  [TF]BB              FBB    TBB</span></span>\n<span class=\"line\"><span style=\"\">//              |  /                     \\    /</span></span>\n<span class=\"line\"><span style=\"\">//              | /                       \\  /</span></span>\n<span class=\"line\"><span style=\"\">//             Tail                       Tail</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Instructions in the conditional blocks TBB and/or FBB are spliced into the</span></span>\n<span class=\"line\"><span style=\"\">// Head block, and phis in the Tail block are converted to select instructions.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/CodeGen/EarlyIfConversion.cpp#L60-L80",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/// ValidForkedDiamond - Returns true if the 'true' and 'false' blocks (along</span></span>\n<span class=\"line\"><span style=\"\">/// with their common predecessor) form a diamond if a common tail block is</span></span>\n<span class=\"line\"><span style=\"\">/// extracted.</span></span>\n<span class=\"line\"><span style=\"\">/// While not strictly a diamond, this pattern would form a diamond if</span></span>\n<span class=\"line\"><span style=\"\">/// tail-merging had merged the shared tails.</span></span>\n<span class=\"line\"><span style=\"\">///           EBB</span></span>\n<span class=\"line\"><span style=\"\">///         _/   \\_</span></span>\n<span class=\"line\"><span style=\"\">///         |     |</span></span>\n<span class=\"line\"><span style=\"\">///        TBB   FBB</span></span>\n<span class=\"line\"><span style=\"\">///        /  \\ /   \\</span></span>\n<span class=\"line\"><span style=\"\">///  FalseBB TrueBB FalseBB</span></span>\n<span class=\"line\"><span style=\"\">/// Currently only handles analyzable branches.</span></span>\n<span class=\"line\"><span style=\"\">/// Specifically excludes actual diamonds to avoid overlap.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/CodeGen/IfConversion.cpp#L864-L876",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/CodeGen/IfConversion.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// If bottom of block BB has only one successor OldTop, in most cases it is</span></span>\n<span class=\"line\"><span style=\"\">// profitable to move it before OldTop, except the following case:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     -->OldTop&#x3C;-</span></span>\n<span class=\"line\"><span style=\"\">//     |    .    |</span></span>\n<span class=\"line\"><span style=\"\">//     |    .    |</span></span>\n<span class=\"line\"><span style=\"\">//     |    .    |</span></span>\n<span class=\"line\"><span style=\"\">//     ---Pred   |</span></span>\n<span class=\"line\"><span style=\"\">//          |    |</span></span>\n<span class=\"line\"><span style=\"\">//         BB-----</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If BB is moved before OldTop, Pred needs a taken branch to BB, and it can't</span></span>\n<span class=\"line\"><span style=\"\">// layout the other successor below it, so it can't reduce taken branch.</span></span>\n<span class=\"line\"><span style=\"\">// In this case we keep its original layout.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/CodeGen/MachineBlockPlacement.cpp#L1893-L1906",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//                           StackColoring Pass</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Stack Coloring reduces stack usage by merging stack slots when they</span></span>\n<span class=\"line\"><span style=\"\">// can't be used together. For example, consider the following C program:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     void bar(char *, int);</span></span>\n<span class=\"line\"><span style=\"\">//     void foo(bool var) {</span></span>\n<span class=\"line\"><span style=\"\">//         A: {</span></span>\n<span class=\"line\"><span style=\"\">//             char z[4096];</span></span>\n<span class=\"line\"><span style=\"\">//             bar(z, 0);</span></span>\n<span class=\"line\"><span style=\"\">//         }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         char *p;</span></span>\n<span class=\"line\"><span style=\"\">//         char x[4096];</span></span>\n<span class=\"line\"><span style=\"\">//         char y[4096];</span></span>\n<span class=\"line\"><span style=\"\">//         if (var) {</span></span>\n<span class=\"line\"><span style=\"\">//             p = x;</span></span>\n<span class=\"line\"><span style=\"\">//         } else {</span></span>\n<span class=\"line\"><span style=\"\">//             bar(y, 1);</span></span>\n<span class=\"line\"><span style=\"\">//             p = y + 1024;</span></span>\n<span class=\"line\"><span style=\"\">//         }</span></span>\n<span class=\"line\"><span style=\"\">//     B:</span></span>\n<span class=\"line\"><span style=\"\">//         bar(p, 2);</span></span>\n<span class=\"line\"><span style=\"\">//     }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Naively-compiled, this program would use 12k of stack space. However, the</span></span>\n<span class=\"line\"><span style=\"\">// stack slot corresponding to `z` is always destroyed before either of the</span></span>\n<span class=\"line\"><span style=\"\">// stack slots for `x` or `y` are used, and then `x` is only used if `var`</span></span>\n<span class=\"line\"><span style=\"\">// is true, while `y` is only used if `var` is false. So in no time are 2</span></span>\n<span class=\"line\"><span style=\"\">// of the stack slots used together, and therefore we can merge them,</span></span>\n<span class=\"line\"><span style=\"\">// compiling the function using only a single 4k alloca:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     void foo(bool var) { // equivalent</span></span>\n<span class=\"line\"><span style=\"\">//         char x[4096];</span></span>\n<span class=\"line\"><span style=\"\">//         char *p;</span></span>\n<span class=\"line\"><span style=\"\">//         bar(x, 0);</span></span>\n<span class=\"line\"><span style=\"\">//         if (var) {</span></span>\n<span class=\"line\"><span style=\"\">//             p = x;</span></span>\n<span class=\"line\"><span style=\"\">//         } else {</span></span>\n<span class=\"line\"><span style=\"\">//             bar(x, 1);</span></span>\n<span class=\"line\"><span style=\"\">//             p = x + 1024;</span></span>\n<span class=\"line\"><span style=\"\">//         }</span></span>\n<span class=\"line\"><span style=\"\">//         bar(p, 2);</span></span>\n<span class=\"line\"><span style=\"\">//     }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This is an important optimization if we want stack space to be under</span></span>\n<span class=\"line\"><span style=\"\">// control in large functions, both open-coded ones and ones created by</span></span>\n<span class=\"line\"><span style=\"\">// inlining.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Implementation Notes:</span></span>\n<span class=\"line\"><span style=\"\">// ---------------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// An important part of the above reasoning is that `z` can't be accessed</span></span>\n<span class=\"line\"><span style=\"\">// while the latter 2 calls to `bar` are running. This is justified because</span></span>\n<span class=\"line\"><span style=\"\">// `z`'s lifetime is over after we exit from block `A:`, so any further</span></span>\n<span class=\"line\"><span style=\"\">// accesses to it would be UB. The way we represent this information</span></span>\n<span class=\"line\"><span style=\"\">// in LLVM is by having frontends delimit blocks with `lifetime.start`</span></span>\n<span class=\"line\"><span style=\"\">// and `lifetime.end` intrinsics.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The effect of these intrinsics seems to be as follows (maybe I should</span></span>\n<span class=\"line\"><span style=\"\">// specify this in the reference?):</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   L1) at start, each stack-slot is marked as *out-of-scope*, unless no</span></span>\n<span class=\"line\"><span style=\"\">//   lifetime intrinsic refers to that stack slot, in which case</span></span>\n<span class=\"line\"><span style=\"\">//   it is marked as *in-scope*.</span></span>\n<span class=\"line\"><span style=\"\">//   L2) on a `lifetime.start`, a stack slot is marked as *in-scope* and</span></span>\n<span class=\"line\"><span style=\"\">//   the stack slot is overwritten with `undef`.</span></span>\n<span class=\"line\"><span style=\"\">//   L3) on a `lifetime.end`, a stack slot is marked as *out-of-scope*.</span></span>\n<span class=\"line\"><span style=\"\">//   L4) on function exit, all stack slots are marked as *out-of-scope*.</span></span>\n<span class=\"line\"><span style=\"\">//   L5) `lifetime.end` is a no-op when called on a slot that is already</span></span>\n<span class=\"line\"><span style=\"\">//   *out-of-scope*.</span></span>\n<span class=\"line\"><span style=\"\">//   L6) memory accesses to *out-of-scope* stack slots are UB.</span></span>\n<span class=\"line\"><span style=\"\">//   L7) when a stack-slot is marked as *out-of-scope*, all pointers to it</span></span>\n<span class=\"line\"><span style=\"\">//   are invalidated, unless the slot is \"degenerate\". This is used to</span></span>\n<span class=\"line\"><span style=\"\">//   justify not marking slots as in-use until the pointer to them is</span></span>\n<span class=\"line\"><span style=\"\">//   used, but feels a bit hacky in the presence of things like LICM. See</span></span>\n<span class=\"line\"><span style=\"\">//   the \"Degenerate Slots\" section for more details.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Now, let's ground stack coloring on these rules. We'll define a slot</span></span>\n<span class=\"line\"><span style=\"\">// as *in-use* at a (dynamic) point in execution if it either can be</span></span>\n<span class=\"line\"><span style=\"\">// written to at that point, or if it has a live and non-undef content</span></span>\n<span class=\"line\"><span style=\"\">// at that point.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Obviously, slots that are never *in-use* together can be merged, and</span></span>\n<span class=\"line\"><span style=\"\">// in our example `foo`, the slots for `x`, `y` and `z` are never</span></span>\n<span class=\"line\"><span style=\"\">// in-use together (of course, sometimes slots that *are* in-use together</span></span>\n<span class=\"line\"><span style=\"\">// might still be mergable, but we don't care about that here).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In this implementation, we successively merge pairs of slots that are</span></span>\n<span class=\"line\"><span style=\"\">// not *in-use* together. We could be smarter - for example, we could merge</span></span>\n<span class=\"line\"><span style=\"\">// a single large slot with 2 small slots, or we could construct the</span></span>\n<span class=\"line\"><span style=\"\">// interference graph and run a \"smart\" graph coloring algorithm, but with</span></span>\n<span class=\"line\"><span style=\"\">// that aside, how do we find out whether a pair of slots might be *in-use*</span></span>\n<span class=\"line\"><span style=\"\">// together?</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// From our rules, we see that *out-of-scope* slots are never *in-use*,</span></span>\n<span class=\"line\"><span style=\"\">// and from (L7) we see that \"non-degenerate\" slots remain non-*in-use*</span></span>\n<span class=\"line\"><span style=\"\">// until their address is taken. Therefore, we can approximate slot activity</span></span>\n<span class=\"line\"><span style=\"\">// using dataflow.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// A subtle point: naively, we might try to figure out which pairs of</span></span>\n<span class=\"line\"><span style=\"\">// stack-slots interfere by propagating `S in-use` through the CFG for every</span></span>\n<span class=\"line\"><span style=\"\">// stack-slot `S`, and having `S` and `T` interfere if there is a CFG point in</span></span>\n<span class=\"line\"><span style=\"\">// which they are both *in-use*.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// That is sound, but overly conservative in some cases: in our (artificial)</span></span>\n<span class=\"line\"><span style=\"\">// example `foo`, either `x` or `y` might be in use at the label `B:`, but</span></span>\n<span class=\"line\"><span style=\"\">// as `x` is only in use if we came in from the `var` edge and `y` only</span></span>\n<span class=\"line\"><span style=\"\">// if we came from the `!var` edge, they still can't be in use together.</span></span>\n<span class=\"line\"><span style=\"\">// See PR32488 for an important real-life case.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If we wanted to find all points of interference precisely, we could</span></span>\n<span class=\"line\"><span style=\"\">// propagate `S in-use` and `S&#x26;T in-use` predicates through the CFG. That</span></span>\n<span class=\"line\"><span style=\"\">// would be precise, but requires propagating `O(n^2)` dataflow facts.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// However, we aren't interested in the *set* of points of interference</span></span>\n<span class=\"line\"><span style=\"\">// between 2 stack slots, only *whether* there *is* such a point. So we</span></span>\n<span class=\"line\"><span style=\"\">// can rely on a little trick: for `S` and `T` to be in-use together,</span></span>\n<span class=\"line\"><span style=\"\">// one of them needs to become in-use while the other is in-use (or</span></span>\n<span class=\"line\"><span style=\"\">// they might both become in use simultaneously). We can check this</span></span>\n<span class=\"line\"><span style=\"\">// by also keeping track of the points at which a stack slot might *start*</span></span>\n<span class=\"line\"><span style=\"\">// being in-use.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Exact first use:</span></span>\n<span class=\"line\"><span style=\"\">// ----------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Consider the following motivating example:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     int foo() {</span></span>\n<span class=\"line\"><span style=\"\">//       char b1[1024], b2[1024];</span></span>\n<span class=\"line\"><span style=\"\">//       if (...) {</span></span>\n<span class=\"line\"><span style=\"\">//         char b3[1024];</span></span>\n<span class=\"line\"><span style=\"\">//         &#x3C;uses of b1, b3>;</span></span>\n<span class=\"line\"><span style=\"\">//         return x;</span></span>\n<span class=\"line\"><span style=\"\">//       } else {</span></span>\n<span class=\"line\"><span style=\"\">//         char b4[1024], b5[1024];</span></span>\n<span class=\"line\"><span style=\"\">//         &#x3C;uses of b2, b4, b5>;</span></span>\n<span class=\"line\"><span style=\"\">//         return y;</span></span>\n<span class=\"line\"><span style=\"\">//       }</span></span>\n<span class=\"line\"><span style=\"\">//     }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In the code above, \"b3\" and \"b4\" are declared in distinct lexical</span></span>\n<span class=\"line\"><span style=\"\">// scopes, meaning that it is easy to prove that they can share the</span></span>\n<span class=\"line\"><span style=\"\">// same stack slot. Variables \"b1\" and \"b2\" are declared in the same</span></span>\n<span class=\"line\"><span style=\"\">// scope, meaning that from a lexical point of view, their lifetimes</span></span>\n<span class=\"line\"><span style=\"\">// overlap. From a control flow pointer of view, however, the two</span></span>\n<span class=\"line\"><span style=\"\">// variables are accessed in disjoint regions of the CFG, thus it</span></span>\n<span class=\"line\"><span style=\"\">// should be possible for them to share the same stack slot. An ideal</span></span>\n<span class=\"line\"><span style=\"\">// stack allocation for the function above would look like:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     slot 0: b1, b2</span></span>\n<span class=\"line\"><span style=\"\">//     slot 1: b3, b4</span></span>\n<span class=\"line\"><span style=\"\">//     slot 2: b5</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Achieving this allocation is tricky, however, due to the way</span></span>\n<span class=\"line\"><span style=\"\">// lifetime markers are inserted. Here is a simplified view of the</span></span>\n<span class=\"line\"><span style=\"\">// control flow graph for the code above:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                +------  block 0 -------+</span></span>\n<span class=\"line\"><span style=\"\">//               0| LIFETIME_START b1, b2 |</span></span>\n<span class=\"line\"><span style=\"\">//               1| &#x3C;test 'if' condition> |</span></span>\n<span class=\"line\"><span style=\"\">//                +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                   ./              \\.</span></span>\n<span class=\"line\"><span style=\"\">//   +------  block 1 -------+   +------  block 2 -------+</span></span>\n<span class=\"line\"><span style=\"\">//  2| LIFETIME_START b3     |  5| LIFETIME_START b4, b5 |</span></span>\n<span class=\"line\"><span style=\"\">//  3| &#x3C;uses of b1, b3>      |  6| &#x3C;uses of b2, b4, b5>  |</span></span>\n<span class=\"line\"><span style=\"\">//  4| LIFETIME_END b3       |  7| LIFETIME_END b4, b5   |</span></span>\n<span class=\"line\"><span style=\"\">//   +-----------------------+   +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                   \\.              /.</span></span>\n<span class=\"line\"><span style=\"\">//                +------  block 3 -------+</span></span>\n<span class=\"line\"><span style=\"\">//               8| &#x3C;cleanupcode>         |</span></span>\n<span class=\"line\"><span style=\"\">//               9| LIFETIME_END b1, b2   |</span></span>\n<span class=\"line\"><span style=\"\">//              10| return                |</span></span>\n<span class=\"line\"><span style=\"\">//                +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If we create live intervals for the variables above strictly based</span></span>\n<span class=\"line\"><span style=\"\">// on the lifetime markers, we'll get the set of intervals on the</span></span>\n<span class=\"line\"><span style=\"\">// left. If we ignore the lifetime start markers and instead treat a</span></span>\n<span class=\"line\"><span style=\"\">// variable's lifetime as beginning with the first reference to the</span></span>\n<span class=\"line\"><span style=\"\">// var, then we get the intervals on the right.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//            LIFETIME_START      First Use</span></span>\n<span class=\"line\"><span style=\"\">//     b1:    [0,9]               [3,4] [8,9]</span></span>\n<span class=\"line\"><span style=\"\">//     b2:    [0,9]               [6,9]</span></span>\n<span class=\"line\"><span style=\"\">//     b3:    [2,4]               [3,4]</span></span>\n<span class=\"line\"><span style=\"\">//     b4:    [5,7]               [6,7]</span></span>\n<span class=\"line\"><span style=\"\">//     b5:    [5,7]               [6,7]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For the intervals on the left, the best we can do is overlap two</span></span>\n<span class=\"line\"><span style=\"\">// variables (b3 and b4, for example); this gives us a stack size of</span></span>\n<span class=\"line\"><span style=\"\">// 4*1024 bytes, not ideal. When treating first-use as the start of a</span></span>\n<span class=\"line\"><span style=\"\">// lifetime, we can additionally overlap b1 and b5, giving us a 3*1024</span></span>\n<span class=\"line\"><span style=\"\">// byte stack (better).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Degenerate Slots:</span></span>\n<span class=\"line\"><span style=\"\">// -----------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Relying entirely on first-use of stack slots is problematic,</span></span>\n<span class=\"line\"><span style=\"\">// however, due to the fact that optimizations can sometimes migrate</span></span>\n<span class=\"line\"><span style=\"\">// uses of a variable outside of its lifetime start/end region. Here</span></span>\n<span class=\"line\"><span style=\"\">// is an example:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     int bar() {</span></span>\n<span class=\"line\"><span style=\"\">//       char b1[1024], b2[1024];</span></span>\n<span class=\"line\"><span style=\"\">//       if (...) {</span></span>\n<span class=\"line\"><span style=\"\">//         &#x3C;uses of b2></span></span>\n<span class=\"line\"><span style=\"\">//         return y;</span></span>\n<span class=\"line\"><span style=\"\">//       } else {</span></span>\n<span class=\"line\"><span style=\"\">//         &#x3C;uses of b1></span></span>\n<span class=\"line\"><span style=\"\">//         while (...) {</span></span>\n<span class=\"line\"><span style=\"\">//           char b3[1024];</span></span>\n<span class=\"line\"><span style=\"\">//           &#x3C;uses of b3></span></span>\n<span class=\"line\"><span style=\"\">//         }</span></span>\n<span class=\"line\"><span style=\"\">//       }</span></span>\n<span class=\"line\"><span style=\"\">//     }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Before optimization, the control flow graph for the code above</span></span>\n<span class=\"line\"><span style=\"\">// might look like the following:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                +------  block 0 -------+</span></span>\n<span class=\"line\"><span style=\"\">//               0| LIFETIME_START b1, b2 |</span></span>\n<span class=\"line\"><span style=\"\">//               1| &#x3C;test 'if' condition> |</span></span>\n<span class=\"line\"><span style=\"\">//                +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                   ./              \\.</span></span>\n<span class=\"line\"><span style=\"\">//   +------  block 1 -------+    +------- block 2 -------+</span></span>\n<span class=\"line\"><span style=\"\">//  2| &#x3C;uses of b2>          |   3| &#x3C;uses of b1>          |</span></span>\n<span class=\"line\"><span style=\"\">//   +-----------------------+    +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">//              |                            |</span></span>\n<span class=\"line\"><span style=\"\">//              |                 +------- block 3 -------+ &#x3C;-\\.</span></span>\n<span class=\"line\"><span style=\"\">//              |                4| &#x3C;while condition>     |    |</span></span>\n<span class=\"line\"><span style=\"\">//              |                 +-----------------------+    |</span></span>\n<span class=\"line\"><span style=\"\">//              |               /          |                   |</span></span>\n<span class=\"line\"><span style=\"\">//              |              /  +------- block 4 -------+</span></span>\n<span class=\"line\"><span style=\"\">//              \\             /  5| LIFETIME_START b3     |    |</span></span>\n<span class=\"line\"><span style=\"\">//               \\           /   6| &#x3C;uses of b3>          |    |</span></span>\n<span class=\"line\"><span style=\"\">//                \\         /    7| LIFETIME_END b3       |    |</span></span>\n<span class=\"line\"><span style=\"\">//                 \\        |    +------------------------+    |</span></span>\n<span class=\"line\"><span style=\"\">//                  \\       |                 \\                /</span></span>\n<span class=\"line\"><span style=\"\">//                +------  block 5 -----+      \\---------------</span></span>\n<span class=\"line\"><span style=\"\">//               8| &#x3C;cleanupcode>       |</span></span>\n<span class=\"line\"><span style=\"\">//               9| LIFETIME_END b1, b2 |</span></span>\n<span class=\"line\"><span style=\"\">//              10| return              |</span></span>\n<span class=\"line\"><span style=\"\">//                +---------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// During optimization, however, it can happen that an instruction</span></span>\n<span class=\"line\"><span style=\"\">// computing an address in \"b3\" (for example, a loop-invariant GEP) is</span></span>\n<span class=\"line\"><span style=\"\">// hoisted up out of the loop from block 4 to block 2.  [Note that</span></span>\n<span class=\"line\"><span style=\"\">// this is not an actual load from the stack, only an instruction that</span></span>\n<span class=\"line\"><span style=\"\">// computes the address to be loaded]. If this happens, there is now a</span></span>\n<span class=\"line\"><span style=\"\">// path leading from the first use of b3 to the return instruction</span></span>\n<span class=\"line\"><span style=\"\">// that does not encounter the b3 LIFETIME_END, hence b3's lifetime is</span></span>\n<span class=\"line\"><span style=\"\">// now larger than if we were computing live intervals strictly based</span></span>\n<span class=\"line\"><span style=\"\">// on lifetime markers. In the example above, this lengthened lifetime</span></span>\n<span class=\"line\"><span style=\"\">// would mean that it would appear illegal to overlap b3 with b2.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// To deal with this such cases, the code in ::collectMarkers() below</span></span>\n<span class=\"line\"><span style=\"\">// tries to identify \"degenerate\" slots -- those slots where on a single</span></span>\n<span class=\"line\"><span style=\"\">// forward pass through the CFG we encounter a first reference to slot</span></span>\n<span class=\"line\"><span style=\"\">// K before we hit the slot K lifetime start marker. For such slots,</span></span>\n<span class=\"line\"><span style=\"\">// we fall back on using the lifetime start marker as the beginning of</span></span>\n<span class=\"line\"><span style=\"\">// the variable's lifetime.  NB: with this implementation, slots can</span></span>\n<span class=\"line\"><span style=\"\">// appear degenerate in cases where there is unstructured control flow:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    if (q) goto mid;</span></span>\n<span class=\"line\"><span style=\"\">//    if (x > 9) {</span></span>\n<span class=\"line\"><span style=\"\">//         int b[100];</span></span>\n<span class=\"line\"><span style=\"\">//         memcpy(&#x26;b[0], ...);</span></span>\n<span class=\"line\"><span style=\"\">//    mid: b[k] = ...;</span></span>\n<span class=\"line\"><span style=\"\">//         abc(&#x26;b);</span></span>\n<span class=\"line\"><span style=\"\">//    }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If in RPO ordering chosen to walk the CFG  we happen to visit the b[k]</span></span>\n<span class=\"line\"><span style=\"\">// before visiting the memcpy block (which will contain the lifetime start</span></span>\n<span class=\"line\"><span style=\"\">// for \"b\" then it will appear that 'b' has a degenerate lifetime.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Handle Windows Exception with LifetimeStartOnFirstUse:</span></span>\n<span class=\"line\"><span style=\"\">// -----------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// There was a bug for using LifetimeStartOnFirstUse in win32.</span></span>\n<span class=\"line\"><span style=\"\">// class Type1 {</span></span>\n<span class=\"line\"><span style=\"\">// ...</span></span>\n<span class=\"line\"><span style=\"\">// ~Type1(){ write memory;}</span></span>\n<span class=\"line\"><span style=\"\">// }</span></span>\n<span class=\"line\"><span style=\"\">// ...</span></span>\n<span class=\"line\"><span style=\"\">// try{</span></span>\n<span class=\"line\"><span style=\"\">// Type1 V</span></span>\n<span class=\"line\"><span style=\"\">// ...</span></span>\n<span class=\"line\"><span style=\"\">// } catch (Type2 X){</span></span>\n<span class=\"line\"><span style=\"\">// ...</span></span>\n<span class=\"line\"><span style=\"\">// }</span></span>\n<span class=\"line\"><span style=\"\">// For variable X in catch(X), we put point pX=&#x26;(&#x26;X) into ConservativeSlots</span></span>\n<span class=\"line\"><span style=\"\">// to prevent using LifetimeStartOnFirstUse. Because pX may merged with</span></span>\n<span class=\"line\"><span style=\"\">// object V which may call destructor after implicitly writing pX. All these</span></span>\n<span class=\"line\"><span style=\"\">// are done in C++ EH runtime libs (through CxxThrowException), and can't</span></span>\n<span class=\"line\"><span style=\"\">// obviously check it in IR level.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The loader of pX, without obvious writing IR, is usually the first LOAD MI</span></span>\n<span class=\"line\"><span style=\"\">// in EHPad, Some like:</span></span>\n<span class=\"line\"><span style=\"\">// bb.x.catch.i (landing-pad, ehfunclet-entry):</span></span>\n<span class=\"line\"><span style=\"\">// ; predecessors: %bb...</span></span>\n<span class=\"line\"><span style=\"\">//   successors: %bb...</span></span>\n<span class=\"line\"><span style=\"\">//  %n:gr32 = MOV32rm %stack.pX ...</span></span>\n<span class=\"line\"><span style=\"\">//  ...</span></span>\n<span class=\"line\"><span style=\"\">// The Type2** %stack.pX will only be written in EH runtime libs, so we</span></span>\n<span class=\"line\"><span style=\"\">// check the StoreSlots to screen it out.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/CodeGen/StackColoring.cpp#L97-L403",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/CodeGen/StackColoring.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/// Tracker for what values are in machine locations. Listens to the Things</span></span>\n<span class=\"line\"><span style=\"\">/// being Done by various instructions, and maintains a table of what machine</span></span>\n<span class=\"line\"><span style=\"\">/// locations have what values (as defined by a ValueIDNum).</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// There are potentially a much larger number of machine locations on the</span></span>\n<span class=\"line\"><span style=\"\">/// target machine than the actual working-set size of the function. On x86 for</span></span>\n<span class=\"line\"><span style=\"\">/// example, we're extremely unlikely to want to track values through control</span></span>\n<span class=\"line\"><span style=\"\">/// or debug registers. To avoid doing so, MLocTracker has several layers of</span></span>\n<span class=\"line\"><span style=\"\">/// indirection going on, described below, to avoid unnecessarily tracking</span></span>\n<span class=\"line\"><span style=\"\">/// any location.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// Here's a sort of diagram of the indexes, read from the bottom up:</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">///           Size on stack   Offset on stack</span></span>\n<span class=\"line\"><span style=\"\">///                 \\              /</span></span>\n<span class=\"line\"><span style=\"\">///          Stack Idx (Where in slot is this?)</span></span>\n<span class=\"line\"><span style=\"\">///                         /</span></span>\n<span class=\"line\"><span style=\"\">///                        /</span></span>\n<span class=\"line\"><span style=\"\">/// Slot Num (%stack.0)   /</span></span>\n<span class=\"line\"><span style=\"\">/// FrameIdx => SpillNum /</span></span>\n<span class=\"line\"><span style=\"\">///              \\      /</span></span>\n<span class=\"line\"><span style=\"\">///           SpillID (int)              Register number (int)</span></span>\n<span class=\"line\"><span style=\"\">///                      \\                  /</span></span>\n<span class=\"line\"><span style=\"\">///                      LocationID => LocIdx</span></span>\n<span class=\"line\"><span style=\"\">///                                |</span></span>\n<span class=\"line\"><span style=\"\">///                       LocIdx => ValueIDNum</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// The aim here is that the LocIdx => ValueIDNum vector is just an array of</span></span>\n<span class=\"line\"><span style=\"\">/// values in numbered locations, so that later analyses can ignore whether the</span></span>\n<span class=\"line\"><span style=\"\">/// location is a register or otherwise. To map a register / spill location to</span></span>\n<span class=\"line\"><span style=\"\">/// a LocIdx, you have to use the (sparse) LocationID => LocIdx map. And to</span></span>\n<span class=\"line\"><span style=\"\">/// build a LocationID for a stack slot, you need to combine identifiers for</span></span>\n<span class=\"line\"><span style=\"\">/// which stack slot it is and where within that slot is being described.</span></span>\n<span class=\"line\"><span style=\"\">///</span></span>\n<span class=\"line\"><span style=\"\">/// Register mask operands cause trouble by technically defining every register;</span></span>\n<span class=\"line\"><span style=\"\">/// various hacks are used to avoid tracking registers that are never read and</span></span>\n<span class=\"line\"><span style=\"\">/// only written by regmasks.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h#L584-L620",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//                                 SSACCmpConv</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The SSACCmpConv class performs ccmp-conversion on SSA form machine code</span></span>\n<span class=\"line\"><span style=\"\">// after determining if it is possible. The class contains no heuristics;</span></span>\n<span class=\"line\"><span style=\"\">// external code should be used to determine when ccmp-conversion is a good</span></span>\n<span class=\"line\"><span style=\"\">// idea.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// CCmp-formation works on a CFG representing chained conditions, typically</span></span>\n<span class=\"line\"><span style=\"\">// from C's short-circuit || and &#x26;&#x26; operators:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   From:         Head            To:         Head</span></span>\n<span class=\"line\"><span style=\"\">//                 / |                         CmpBB</span></span>\n<span class=\"line\"><span style=\"\">//                /  |                         / |</span></span>\n<span class=\"line\"><span style=\"\">//               |  CmpBB                     /  |</span></span>\n<span class=\"line\"><span style=\"\">//               |  / |                    Tail  |</span></span>\n<span class=\"line\"><span style=\"\">//               | /  |                      |   |</span></span>\n<span class=\"line\"><span style=\"\">//              Tail  |                      |   |</span></span>\n<span class=\"line\"><span style=\"\">//                |   |                      |   |</span></span>\n<span class=\"line\"><span style=\"\">//               ... ...                    ... ...</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The Head block is terminated by a br.cond instruction, and the CmpBB block</span></span>\n<span class=\"line\"><span style=\"\">// contains compare + br.cond. Tail must be a successor of both.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The cmp-conversion turns the compare instruction in CmpBB into a conditional</span></span>\n<span class=\"line\"><span style=\"\">// compare, and merges CmpBB into Head, speculatively executing its</span></span>\n<span class=\"line\"><span style=\"\">// instructions. The AArch64 conditional compare instructions have an immediate</span></span>\n<span class=\"line\"><span style=\"\">// operand that specifies the NZCV flag values when the condition is false and</span></span>\n<span class=\"line\"><span style=\"\">// the compare isn't executed. This makes it possible to chain compares with</span></span>\n<span class=\"line\"><span style=\"\">// different condition codes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Example:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    if (a == 5 || b == 17)</span></span>\n<span class=\"line\"><span style=\"\">//      foo();</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    Head:</span></span>\n<span class=\"line\"><span style=\"\">//       cmp  w0, #5</span></span>\n<span class=\"line\"><span style=\"\">//       b.eq Tail</span></span>\n<span class=\"line\"><span style=\"\">//    CmpBB:</span></span>\n<span class=\"line\"><span style=\"\">//       cmp  w1, #17</span></span>\n<span class=\"line\"><span style=\"\">//       b.eq Tail</span></span>\n<span class=\"line\"><span style=\"\">//    ...</span></span>\n<span class=\"line\"><span style=\"\">//    Tail:</span></span>\n<span class=\"line\"><span style=\"\">//      bl _foo</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  Becomes:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    Head:</span></span>\n<span class=\"line\"><span style=\"\">//       cmp  w0, #5</span></span>\n<span class=\"line\"><span style=\"\">//       ccmp w1, #17, 4, ne  ; 4 = nZcv</span></span>\n<span class=\"line\"><span style=\"\">//       b.eq Tail</span></span>\n<span class=\"line\"><span style=\"\">//    ...</span></span>\n<span class=\"line\"><span style=\"\">//    Tail:</span></span>\n<span class=\"line\"><span style=\"\">//      bl _foo</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The ccmp condition code is the one that would cause the Head terminator to</span></span>\n<span class=\"line\"><span style=\"\">// branch to CmpBB.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// FIXME: It should also be possible to speculate a block on the critical edge</span></span>\n<span class=\"line\"><span style=\"\">// between Head and Tail, just like if-converting a diamond.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// FIXME: Handle PHIs in Tail by turning them into selects (if-conversion).</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp#L71-L134",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": true,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//=- AArch64ConditionOptimizer.cpp - Remove useless comparisons for AArch64 -=//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.</span></span>\n<span class=\"line\"><span style=\"\">// See https://llvm.org/LICENSE.txt for license information.</span></span>\n<span class=\"line\"><span style=\"\">// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This pass tries to make consecutive compares of values use same operands to</span></span>\n<span class=\"line\"><span style=\"\">// allow CSE pass to remove duplicated instructions.  For this it analyzes</span></span>\n<span class=\"line\"><span style=\"\">// branches and adjusts comparisons with immediate values by converting:</span></span>\n<span class=\"line\"><span style=\"\">//  * GE -> GT</span></span>\n<span class=\"line\"><span style=\"\">//  * GT -> GE</span></span>\n<span class=\"line\"><span style=\"\">//  * LT -> LE</span></span>\n<span class=\"line\"><span style=\"\">//  * LE -> LT</span></span>\n<span class=\"line\"><span style=\"\">// and adjusting immediate values appropriately.  It basically corrects two</span></span>\n<span class=\"line\"><span style=\"\">// immediate values towards each other to make them equal.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Consider the following example in C:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   if ((a &#x3C; 5 &#x26;&#x26; ...) || (a > 5 &#x26;&#x26; ...)) {</span></span>\n<span class=\"line\"><span style=\"\">//        ~~~~~             ~~~~~</span></span>\n<span class=\"line\"><span style=\"\">//          ^                 ^</span></span>\n<span class=\"line\"><span style=\"\">//          x                 y</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Here both \"x\" and \"y\" expressions compare \"a\" with \"5\".  When \"x\" evaluates</span></span>\n<span class=\"line\"><span style=\"\">// to \"false\", \"y\" can just check flags set by the first comparison.  As a</span></span>\n<span class=\"line\"><span style=\"\">// result of the canonicalization employed by</span></span>\n<span class=\"line\"><span style=\"\">// SelectionDAGBuilder::visitSwitchCase, DAGCombine, and other target-specific</span></span>\n<span class=\"line\"><span style=\"\">// code, assembly ends up in the form that is not CSE friendly:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     ...</span></span>\n<span class=\"line\"><span style=\"\">//     cmp      w8, #4</span></span>\n<span class=\"line\"><span style=\"\">//     b.gt     .LBB0_3</span></span>\n<span class=\"line\"><span style=\"\">//     ...</span></span>\n<span class=\"line\"><span style=\"\">//   .LBB0_3:</span></span>\n<span class=\"line\"><span style=\"\">//     cmp      w8, #6</span></span>\n<span class=\"line\"><span style=\"\">//     b.lt     .LBB0_6</span></span>\n<span class=\"line\"><span style=\"\">//     ...</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Same assembly after the pass:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     ...</span></span>\n<span class=\"line\"><span style=\"\">//     cmp      w8, #5</span></span>\n<span class=\"line\"><span style=\"\">//     b.ge     .LBB0_3</span></span>\n<span class=\"line\"><span style=\"\">//     ...</span></span>\n<span class=\"line\"><span style=\"\">//   .LBB0_3:</span></span>\n<span class=\"line\"><span style=\"\">//     cmp      w8, #5     // &#x3C;-- CSE pass removes this instruction</span></span>\n<span class=\"line\"><span style=\"\">//     b.le     .LBB0_6</span></span>\n<span class=\"line\"><span style=\"\">//     ...</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Currently only SUBS and ADDS followed by b.?? are supported.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// TODO: maybe handle TBNZ/TBZ the same way as CMP when used instead for \"a &#x3C; 0\"</span></span>\n<span class=\"line\"><span style=\"\">// TODO: handle other conditional instructions (e.g. CSET)</span></span>\n<span class=\"line\"><span style=\"\">// TODO: allow second branching to be anything if it doesn't require adjusting</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//===----------------------------------------------------------------------===//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp#L1-L58",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": true,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This function does a whole lot of voodoo to determine if the tests are</span></span>\n<span class=\"line\"><span style=\"\">// equivalent without and with a mask. Essentially what happens is that given a</span></span>\n<span class=\"line\"><span style=\"\">// DAG resembling:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  +-------------+ +-------------+ +-------------+ +-------------+</span></span>\n<span class=\"line\"><span style=\"\">//  |    Input    | | AddConstant | | CompConstant| |     CC      |</span></span>\n<span class=\"line\"><span style=\"\">//  +-------------+ +-------------+ +-------------+ +-------------+</span></span>\n<span class=\"line\"><span style=\"\">//           |           |           |               |</span></span>\n<span class=\"line\"><span style=\"\">//           V           V           |    +----------+</span></span>\n<span class=\"line\"><span style=\"\">//          +-------------+  +----+  |    |</span></span>\n<span class=\"line\"><span style=\"\">//          |     ADD     |  |0xff|  |    |</span></span>\n<span class=\"line\"><span style=\"\">//          +-------------+  +----+  |    |</span></span>\n<span class=\"line\"><span style=\"\">//                  |           |    |    |</span></span>\n<span class=\"line\"><span style=\"\">//                  V           V    |    |</span></span>\n<span class=\"line\"><span style=\"\">//                 +-------------+   |    |</span></span>\n<span class=\"line\"><span style=\"\">//                 |     AND     |   |    |</span></span>\n<span class=\"line\"><span style=\"\">//                 +-------------+   |    |</span></span>\n<span class=\"line\"><span style=\"\">//                      |            |    |</span></span>\n<span class=\"line\"><span style=\"\">//                      +-----+      |    |</span></span>\n<span class=\"line\"><span style=\"\">//                            |      |    |</span></span>\n<span class=\"line\"><span style=\"\">//                            V      V    V</span></span>\n<span class=\"line\"><span style=\"\">//                           +-------------+</span></span>\n<span class=\"line\"><span style=\"\">//                           |     CMP     |</span></span>\n<span class=\"line\"><span style=\"\">//                           +-------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The AND node may be safely removed for some combinations of inputs. In</span></span>\n<span class=\"line\"><span style=\"\">// particular we need to take into account the extension type of the Input,</span></span>\n<span class=\"line\"><span style=\"\">// the exact values of AddConstant, CompConstant, and CC, along with the nominal</span></span>\n<span class=\"line\"><span style=\"\">// width of the input (this can work for any width inputs, the above graph is</span></span>\n<span class=\"line\"><span style=\"\">// specific to 8 bits.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The specific equations were worked out by generating output tables for each</span></span>\n<span class=\"line\"><span style=\"\">// AArch64CC value in terms of and AddConstant (w1), CompConstant(w2). The</span></span>\n<span class=\"line\"><span style=\"\">// problem was simplified by working with 4 bit inputs, which means we only</span></span>\n<span class=\"line\"><span style=\"\">// needed to reason about 24 distinct bit patterns: 8 patterns unique to zero</span></span>\n<span class=\"line\"><span style=\"\">// extension (8,15), 8 patterns unique to sign extensions (-8,-1), and 8</span></span>\n<span class=\"line\"><span style=\"\">// patterns present in both extensions (0,7). For every distinct set of</span></span>\n<span class=\"line\"><span style=\"\">// AddConstant and CompConstants bit patterns we can consider the masked and</span></span>\n<span class=\"line\"><span style=\"\">// unmasked versions to be equivalent if the result of this function is true for</span></span>\n<span class=\"line\"><span style=\"\">// all 16 distinct bit patterns of for the current extension type of Input (w0).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   sub      w8, w0, w1</span></span>\n<span class=\"line\"><span style=\"\">//   and      w10, w8, #0x0f</span></span>\n<span class=\"line\"><span style=\"\">//   cmp      w8, w2</span></span>\n<span class=\"line\"><span style=\"\">//   cset     w9, AArch64CC</span></span>\n<span class=\"line\"><span style=\"\">//   cmp      w10, w2</span></span>\n<span class=\"line\"><span style=\"\">//   cset     w11, AArch64CC</span></span>\n<span class=\"line\"><span style=\"\">//   cmp      w9, w11</span></span>\n<span class=\"line\"><span style=\"\">//   cset     w0, eq</span></span>\n<span class=\"line\"><span style=\"\">//   ret</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Since the above function shows when the outputs are equivalent it defines</span></span>\n<span class=\"line\"><span style=\"\">// when it is safe to remove the AND. Unfortunately it only runs on AArch64 and</span></span>\n<span class=\"line\"><span style=\"\">// would be expensive to run during compiles. The equations below were written</span></span>\n<span class=\"line\"><span style=\"\">// in a test harness that confirmed they gave equivalent outputs to the above</span></span>\n<span class=\"line\"><span style=\"\">// for all inputs function, so they can be used determine if the removal is</span></span>\n<span class=\"line\"><span style=\"\">// legal instead.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// isEquivalentMaskless() is the code for testing if the AND can be removed</span></span>\n<span class=\"line\"><span style=\"\">// factored out of the DAG recognition as the DAG can take several forms.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/d6e0ff60740e2297392a4bed3e5e43eff8e2713f/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp#L19825-L19884",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// For predicated nodes where the entire operation is controlled by a governing</span></span>\n<span class=\"line\"><span style=\"\">// predicate, please stick to a similar naming convention as used for the</span></span>\n<span class=\"line\"><span style=\"\">// ISD nodes:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    SDNode      &#x3C;=>     AArch64ISD</span></span>\n<span class=\"line\"><span style=\"\">//    -------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//    _m&#x3C;n>       &#x3C;=>     _MERGE_OP&#x3C;n></span></span>\n<span class=\"line\"><span style=\"\">//    _mt         &#x3C;=>     _MERGE_PASSTHRU</span></span>\n<span class=\"line\"><span style=\"\">//    _z          &#x3C;=>     _MERGE_ZERO</span></span>\n<span class=\"line\"><span style=\"\">//    _p          &#x3C;=>     _PRED</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  Given the context of this file, it is not strictly necessary to use _p to</span></span>\n<span class=\"line\"><span style=\"\">//  distinguish predicated from unpredicated nodes given that most SVE</span></span>\n<span class=\"line\"><span style=\"\">//  instructions are predicated.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/AArch64/AArch64SVEInstrInfo.td#L13-L26",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": true
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/AArch64/AArch64SVEInstrInfo.td"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// The diagram below shows the steps involved in the conversion of a predicated</span></span>\n<span class=\"line\"><span style=\"\">// store instruction to its .new predicated new-value form.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note: It doesn't include conditional new-value stores as they can't be</span></span>\n<span class=\"line\"><span style=\"\">// converted to .new predicate.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//               p.new NV store [ if(p0.new)memw(R0+#0)=R2.new ]</span></span>\n<span class=\"line\"><span style=\"\">//                ^           ^</span></span>\n<span class=\"line\"><span style=\"\">//               /             \\ (not OK. it will cause new-value store to be</span></span>\n<span class=\"line\"><span style=\"\">//              /               X conditional on p0.new while R2 producer is</span></span>\n<span class=\"line\"><span style=\"\">//             /                 \\ on p0)</span></span>\n<span class=\"line\"><span style=\"\">//            /                   \\.</span></span>\n<span class=\"line\"><span style=\"\">//     p.new store                 p.old NV store</span></span>\n<span class=\"line\"><span style=\"\">// [if(p0.new)memw(R0+#0)=R2]    [if(p0)memw(R0+#0)=R2.new]</span></span>\n<span class=\"line\"><span style=\"\">//            ^                  ^</span></span>\n<span class=\"line\"><span style=\"\">//             \\                /</span></span>\n<span class=\"line\"><span style=\"\">//              \\              /</span></span>\n<span class=\"line\"><span style=\"\">//               \\            /</span></span>\n<span class=\"line\"><span style=\"\">//                 p.old store</span></span>\n<span class=\"line\"><span style=\"\">//             [if (p0)memw(R0+#0)=R2]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The following set of instructions further explains the scenario where</span></span>\n<span class=\"line\"><span style=\"\">// conditional new-value store becomes invalid when promoted to .new predicate</span></span>\n<span class=\"line\"><span style=\"\">// form.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// { 1) if (p0) r0 = add(r1, r2)</span></span>\n<span class=\"line\"><span style=\"\">//   2) p0 = cmp.eq(r3, #0) }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   3) if (p0) memb(r1+#0) = r0  --> this instruction can't be grouped with</span></span>\n<span class=\"line\"><span style=\"\">// the first two instructions because in instr 1, r0 is conditional on old value</span></span>\n<span class=\"line\"><span style=\"\">// of p0 but its use in instr 3 is conditional on p0 modified by instr 2 which</span></span>\n<span class=\"line\"><span style=\"\">// is not valid for new-value stores.</span></span>\n<span class=\"line\"><span style=\"\">// Predicated new value stores (i.e. if (p0) memw(..)=r0.new) are excluded</span></span>\n<span class=\"line\"><span style=\"\">// from the \"Conditional Store\" list. Because a predicated new value store</span></span>\n<span class=\"line\"><span style=\"\">// would NOT be promoted to a double dot new store. See diagram below:</span></span>\n<span class=\"line\"><span style=\"\">// This function returns yes for those stores that are predicated but not</span></span>\n<span class=\"line\"><span style=\"\">// yet promoted to predicate dot new instructions.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                          +---------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                    /-----| if (p0) memw(..)=r0 |---------\\~</span></span>\n<span class=\"line\"><span style=\"\">//                   ||     +---------------------+         ||</span></span>\n<span class=\"line\"><span style=\"\">//          promote  ||       /\\       /\\                   ||  promote</span></span>\n<span class=\"line\"><span style=\"\">//                   ||      /||\\     /||\\                  ||</span></span>\n<span class=\"line\"><span style=\"\">//                  \\||/    demote     ||                  \\||/</span></span>\n<span class=\"line\"><span style=\"\">//                   \\/       ||       ||                   \\/</span></span>\n<span class=\"line\"><span style=\"\">//       +-------------------------+   ||   +-------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//       | if (p0.new) memw(..)=r0 |   ||   | if (p0) memw(..)=r0.new |</span></span>\n<span class=\"line\"><span style=\"\">//       +-------------------------+   ||   +-------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                        ||           ||         ||</span></span>\n<span class=\"line\"><span style=\"\">//                        ||         demote      \\||/</span></span>\n<span class=\"line\"><span style=\"\">//                      promote        ||         \\/ NOT possible</span></span>\n<span class=\"line\"><span style=\"\">//                        ||           ||         /\\~</span></span>\n<span class=\"line\"><span style=\"\">//                       \\||/          ||        /||\\~</span></span>\n<span class=\"line\"><span style=\"\">//                        \\/           ||         ||</span></span>\n<span class=\"line\"><span style=\"\">//                      +-----------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                      | if (p0.new) memw(..)=r0.new |</span></span>\n<span class=\"line\"><span style=\"\">//                      +-----------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                           Double Dot New Store</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Returns the most basic instruction for the .new predicated instructions and</span></span>\n<span class=\"line\"><span style=\"\">// new-value stores.</span></span>\n<span class=\"line\"><span style=\"\">// For example, all of the following instructions will be converted back to the</span></span>\n<span class=\"line\"><span style=\"\">// same instruction:</span></span>\n<span class=\"line\"><span style=\"\">// 1) if (p0.new) memw(R0+#0) = R1.new  ---></span></span>\n<span class=\"line\"><span style=\"\">// 2) if (p0) memw(R0+#0)= R1.new      -------> if (p0) memw(R0+#0) = R1</span></span>\n<span class=\"line\"><span style=\"\">// 3) if (p0.new) memw(R0+#0) = R1      ---></span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// To understand the translation of instruction 1 to its original form, consider</span></span>\n<span class=\"line\"><span style=\"\">// a packet with 3 instructions.</span></span>\n<span class=\"line\"><span style=\"\">// { p0 = cmp.eq(R0,R1)</span></span>\n<span class=\"line\"><span style=\"\">//   if (p0.new) R2 = add(R3, R4)</span></span>\n<span class=\"line\"><span style=\"\">//   R5 = add (R3, R1)</span></span>\n<span class=\"line\"><span style=\"\">// }</span></span>\n<span class=\"line\"><span style=\"\">// if (p0) memw(R5+#0) = R2 &#x3C;--- trying to include it in the previous packet</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This instruction can be part of the previous packet only if both p0 and R2</span></span>\n<span class=\"line\"><span style=\"\">// are promoted to .new values. This promotion happens in steps, first</span></span>\n<span class=\"line\"><span style=\"\">// predicate register is promoted to .new and in the next iteration R2 is</span></span>\n<span class=\"line\"><span style=\"\">// promoted. Therefore, in case of dependence check failure (due to R5) during</span></span>\n<span class=\"line\"><span style=\"\">// next iteration, it should be converted back to its most basic form.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp#L3616-L3695",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": true
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Here's a delta network for 8 inputs, only the switching routes are</span></span>\n<span class=\"line\"><span style=\"\">// shown:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         Steps:</span></span>\n<span class=\"line\"><span style=\"\">//         |- 1 ---------------|- 2 -----|- 3 -|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Inp[0] ***                 ***       ***   *** Out[0]</span></span>\n<span class=\"line\"><span style=\"\">//           \\               /   \\     /   \\ /</span></span>\n<span class=\"line\"><span style=\"\">//            \\             /     \\   /     X</span></span>\n<span class=\"line\"><span style=\"\">//             \\           /       \\ /     / \\</span></span>\n<span class=\"line\"><span style=\"\">// Inp[1] ***   \\         /   ***   X   ***   *** Out[1]</span></span>\n<span class=\"line\"><span style=\"\">//           \\   \\       /   /   \\ / \\ /</span></span>\n<span class=\"line\"><span style=\"\">//            \\   \\     /   /     X   X</span></span>\n<span class=\"line\"><span style=\"\">//             \\   \\   /   /     / \\ / \\</span></span>\n<span class=\"line\"><span style=\"\">// Inp[2] ***   \\   \\ /   /   ***   X   ***   *** Out[2]</span></span>\n<span class=\"line\"><span style=\"\">//           \\   \\   X   /   /     / \\     \\ /</span></span>\n<span class=\"line\"><span style=\"\">//            \\   \\ / \\ /   /     /   \\     X</span></span>\n<span class=\"line\"><span style=\"\">//             \\   X   X   /     /     \\   / \\</span></span>\n<span class=\"line\"><span style=\"\">// Inp[3] ***   \\ / \\ / \\ /   ***       ***   *** Out[3]</span></span>\n<span class=\"line\"><span style=\"\">//           \\   X   X   X   /</span></span>\n<span class=\"line\"><span style=\"\">//            \\ / \\ / \\ / \\ /</span></span>\n<span class=\"line\"><span style=\"\">//             X   X   X   X</span></span>\n<span class=\"line\"><span style=\"\">//            / \\ / \\ / \\ / \\</span></span>\n<span class=\"line\"><span style=\"\">//           /   X   X   X   \\</span></span>\n<span class=\"line\"><span style=\"\">// Inp[4] ***   / \\ / \\ / \\   ***       ***   *** Out[4]</span></span>\n<span class=\"line\"><span style=\"\">//             /   X   X   \\     \\     /   \\ /</span></span>\n<span class=\"line\"><span style=\"\">//            /   / \\ / \\   \\     \\   /     X</span></span>\n<span class=\"line\"><span style=\"\">//           /   /   X   \\   \\     \\ /     / \\</span></span>\n<span class=\"line\"><span style=\"\">// Inp[5] ***   /   / \\   \\   ***   X   ***   *** Out[5]</span></span>\n<span class=\"line\"><span style=\"\">//             /   /   \\   \\     \\ / \\ /</span></span>\n<span class=\"line\"><span style=\"\">//            /   /     \\   \\     X   X</span></span>\n<span class=\"line\"><span style=\"\">//           /   /       \\   \\   / \\ / \\</span></span>\n<span class=\"line\"><span style=\"\">// Inp[6] ***   /         \\   ***   X   ***   *** Out[6]</span></span>\n<span class=\"line\"><span style=\"\">//             /           \\       / \\     \\ /</span></span>\n<span class=\"line\"><span style=\"\">//            /             \\     /   \\     X</span></span>\n<span class=\"line\"><span style=\"\">//           /               \\   /     \\   / \\</span></span>\n<span class=\"line\"><span style=\"\">// Inp[7] ***                 ***       ***   *** Out[7]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Reverse delta network is same as delta network, with the steps in</span></span>\n<span class=\"line\"><span style=\"\">// the opposite order.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Benes network is a forward delta network immediately followed by</span></span>\n<span class=\"line\"><span style=\"\">// a reverse delta network.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp#L58-L102",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// There are four SLOTS (four parallel pipelines) in Hexagon V60 machine.</span></span>\n<span class=\"line\"><span style=\"\">// This file describes that machine information.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    |===========|==================================================|</span></span>\n<span class=\"line\"><span style=\"\">//    | PIPELINE  |              Instruction Classes                 |</span></span>\n<span class=\"line\"><span style=\"\">//    |===========|==================================================|</span></span>\n<span class=\"line\"><span style=\"\">//    | SLOT0     |  LD       ST    ALU32     MEMOP     NV    SYSTEM |</span></span>\n<span class=\"line\"><span style=\"\">//    |-----------|--------------------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//    | SLOT1     |  LD       ST    ALU32                            |</span></span>\n<span class=\"line\"><span style=\"\">//    |-----------|--------------------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//    | SLOT2     |  XTYPE          ALU32     J         JR           |</span></span>\n<span class=\"line\"><span style=\"\">//    |-----------|--------------------------------------------------|</span></span>\n<span class=\"line\"><span style=\"\">//    | SLOT3     |  XTYPE          ALU32     J         CR           |</span></span>\n<span class=\"line\"><span style=\"\">//    |===========|==================================================|</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In addition to using the above SLOTS, there are also six vector pipelines</span></span>\n<span class=\"line\"><span style=\"\">// in the CVI co-processor in the Hexagon V60 machine.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      |=========| |=========| |=========| |=========| |=========| |=========|</span></span>\n<span class=\"line\"><span style=\"\">// SLOT | CVI_LD  | |CVI_MPY3 | |CVI_MPY2 | |CVI_SHIFT| |CVI_XLANE| | CVI_ST  |</span></span>\n<span class=\"line\"><span style=\"\">// ==== |=========| |=========| |=========| |=========| |=========| |=========|</span></span>\n<span class=\"line\"><span style=\"\">// S0-3 |         | | CVI_VA  | | CVI_VA  | | CVI_VA  | | CVI_VA  | |         |</span></span>\n<span class=\"line\"><span style=\"\">// S2-3 |         | | CVI_VX  | | CVI_VX  | |         | |         | |         |</span></span>\n<span class=\"line\"><span style=\"\">// S0-3 |         | |         | |         | |         | | CVI_VP  | |         |</span></span>\n<span class=\"line\"><span style=\"\">// S0-3 |         | |         | |         | | CVI_VS  | |         | |         |</span></span>\n<span class=\"line\"><span style=\"\">// S0-1 |(CVI_LD) | | CVI_LD  | | CVI_LD  | | CVI_LD  | | CVI_LD  | |         |</span></span>\n<span class=\"line\"><span style=\"\">// S0-1 |(C*TMP_LD) |         | |         | |         | |         | |         |</span></span>\n<span class=\"line\"><span style=\"\">// S01  |(C*_LDU) | |         | |         | |         | | C*_LDU  | |         |</span></span>\n<span class=\"line\"><span style=\"\">// S0   |         | | CVI_ST  | | CVI_ST  | | CVI_ST  | | CVI_ST  | |(CVI_ST) |</span></span>\n<span class=\"line\"><span style=\"\">// S0   |         | |         | |         | |         | |         | |(C*TMP_ST)</span></span>\n<span class=\"line\"><span style=\"\">// S01  |         | |         | |         | |         | | VSTU    | |(C*_STU) |</span></span>\n<span class=\"line\"><span style=\"\">//      |=========| |=========| |=========| |=========| |=========| |=========|</span></span>\n<span class=\"line\"><span style=\"\">//                  |=====================| |=====================|</span></span>\n<span class=\"line\"><span style=\"\">//                  | CVI_MPY2 &#x26; CVI_MPY3 | |CVI_XLANE &#x26; CVI_SHIFT|</span></span>\n<span class=\"line\"><span style=\"\">//                  |=====================| |=====================|</span></span>\n<span class=\"line\"><span style=\"\">// S0-3             | CVI_VA_DV           | | CVI_VA_DV           |</span></span>\n<span class=\"line\"><span style=\"\">// S0-3             |                     | | CVI_VP_DV           |</span></span>\n<span class=\"line\"><span style=\"\">// S2-3             | CVI_VX_DV           | |                     |</span></span>\n<span class=\"line\"><span style=\"\">//                  |=====================| |=====================|</span></span>\n<span class=\"line\"><span style=\"\">//      |=====================================================================|</span></span>\n<span class=\"line\"><span style=\"\">// S0-3 | CVI_HIST   Histogram                                                |</span></span>\n<span class=\"line\"><span style=\"\">// S0123| CVI_VA_EXT Extract                                                  |</span></span>\n<span class=\"line\"><span style=\"\">//      |=====================================================================|</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/Hexagon/HexagonScheduleV60.td#L10-L53",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": true,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": true,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/Hexagon/HexagonScheduleV60.td"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">/// ------------+---------+---------+---------+---------</span></span>\n<span class=\"line\"><span style=\"\">///  F  E  D  C | B  A  9 | 8  7  6 | 5  4  3 | 2  1  0</span></span>\n<span class=\"line\"><span style=\"\">/// ------------+---------+---------+---------+---------</span></span>\n<span class=\"line\"><span style=\"\">///  0  0  0  0 |   REG   | 1  0  0 |   MODE  |   REG</span></span>\n<span class=\"line\"><span style=\"\">/// ------------+---------+---------+---------+---------</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/llvm/llvm-project/blob/95e49f5a74c9e79778a62cc58b15875613cf9e59/llvm/lib/Target/M68k/M68kInstrBits.td#L30-L34",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": true,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "llvm-project/llvm/lib/Target/M68k/M68kInstrBits.td"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Example:</span></span>\n<span class=\"line\"><span style=\"\">//      ^             ^</span></span>\n<span class=\"line\"><span style=\"\">//    dy|           dx|        (MatMul Gradient Graph)</span></span>\n<span class=\"line\"><span style=\"\">//      |             |</span></span>\n<span class=\"line\"><span style=\"\">//   MatMul_1      MatMul_2</span></span>\n<span class=\"line\"><span style=\"\">//   ^   ^          ^    ^</span></span>\n<span class=\"line\"><span style=\"\">//   |   |----------|    |</span></span>\n<span class=\"line\"><span style=\"\">//   |        ^          |</span></span>\n<span class=\"line\"><span style=\"\">//   |      dz|          |</span></span>\n<span class=\"line\"><span style=\"\">//   |        |          |</span></span>\n<span class=\"line\"><span style=\"\">//   |     Const_3       |</span></span>\n<span class=\"line\"><span style=\"\">//   |                   |</span></span>\n<span class=\"line\"><span style=\"\">//   |        ^          |</span></span>\n<span class=\"line\"><span style=\"\">//   |       z|          |     (MatMul Forward Graph)</span></span>\n<span class=\"line\"><span style=\"\">//   |        |          |</span></span>\n<span class=\"line\"><span style=\"\">//   |      MatMul_0     |</span></span>\n<span class=\"line\"><span style=\"\">//   |     /        \\    |</span></span>\n<span class=\"line\"><span style=\"\">//   |    ^          ^   |</span></span>\n<span class=\"line\"><span style=\"\">//   |    |          |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |---x|         y|---|</span></span>\n<span class=\"line\"><span style=\"\">//        |          |</span></span>\n<span class=\"line\"><span style=\"\">//        |          |</span></span>\n<span class=\"line\"><span style=\"\">//      Const_0   Const_1</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/cc/framework/gradients_test.cc#L62-L85",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/cc/framework/gradients_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//     input1</span></span>\n<span class=\"line\"><span style=\"\">//       |</span></span>\n<span class=\"line\"><span style=\"\">//     slice</span></span>\n<span class=\"line\"><span style=\"\">//       |</span></span>\n<span class=\"line\"><span style=\"\">//      cast</span></span>\n<span class=\"line\"><span style=\"\">//       |</span></span>\n<span class=\"line\"><span style=\"\">//     output</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/delegates/gpu/common/gpu_model_test_util.h#L162-L168",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/gpu/common/gpu_model_test_util.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Basic LSTM Cell:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  1name = name is at input  index 1</span></span>\n<span class=\"line\"><span style=\"\">//  name1 = name is at output index 1</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    0input     1prev_activ</span></span>\n<span class=\"line\"><span style=\"\">//       \\        /</span></span>\n<span class=\"line\"><span style=\"\">//        [[concat]]</span></span>\n<span class=\"line\"><span style=\"\">//             \\</span></span>\n<span class=\"line\"><span style=\"\">//       concat_temp2  2weights  3biases</span></span>\n<span class=\"line\"><span style=\"\">//              \\      /        /</span></span>\n<span class=\"line\"><span style=\"\">//             [[fully-connected]]</span></span>\n<span class=\"line\"><span style=\"\">//               \\</span></span>\n<span class=\"line\"><span style=\"\">//         activ_temp3    4prev_state</span></span>\n<span class=\"line\"><span style=\"\">//                 \\      /</span></span>\n<span class=\"line\"><span style=\"\">//                 [[LSTM]]</span></span>\n<span class=\"line\"><span style=\"\">//                 /      \\</span></span>\n<span class=\"line\"><span style=\"\">//           new_state1    activation0</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For full LSTM cells, see this blog post:</span></span>\n<span class=\"line\"><span style=\"\">// https://colah.github.io/posts/2015-08-Understanding-LSTMs/</span></span>\n<span class=\"line\"><span style=\"\">// In addition to Peephole connections and Combined Input Forget Gates (CIFG)</span></span>\n<span class=\"line\"><span style=\"\">// described in that post, this code also adds the following optional features:</span></span>\n<span class=\"line\"><span style=\"\">// - Configurable activations (sigmoid or TANH)</span></span>\n<span class=\"line\"><span style=\"\">// - L2 Normalization of gates: https://arxiv.org/abs/1607.06450</span></span>\n<span class=\"line\"><span style=\"\">// - Output projection:</span></span>\n<span class=\"line\"><span style=\"\">//     https://www.isca-speech.org/archive/interspeech_2014/i14_0338.html</span></span>\n<span class=\"line\"><span style=\"\">// - Configurable clipping of cell state and output state.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5df523bc6c46c59b28ffda506ede94f14660997a/tensorflow/lite/delegates/gpu/common/model_builder.cc#L1350-L1377",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/gpu/common/model_builder.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Fuses nodes that have auto output with auto input node using the following</span></span>\n<span class=\"line\"><span style=\"\">// rules.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Source graph:</span></span>\n<span class=\"line\"><span style=\"\">//   A B C</span></span>\n<span class=\"line\"><span style=\"\">//   \\ | /</span></span>\n<span class=\"line\"><span style=\"\">//     D</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// - A, B and C each have a single output marked as AUTO</span></span>\n<span class=\"line\"><span style=\"\">// - Each output is used only by D</span></span>\n<span class=\"line\"><span style=\"\">// - D has all inputs marked as AUTO</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Result: in the best case a single node that does (A,B,C)+D operations.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/delegates/gpu/gl/compiler/fuse_auto_input.h#L26-L39",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/gpu/gl/compiler/fuse_auto_input.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Basic LSTMCell gates.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  inputs:  0             1</span></span>\n<span class=\"line\"><span style=\"\">//           activ_temp    prev_state</span></span>\n<span class=\"line\"><span style=\"\">//                  \\      /</span></span>\n<span class=\"line\"><span style=\"\">//               [[LSTM gates]]</span></span>\n<span class=\"line\"><span style=\"\">//                  /      \\</span></span>\n<span class=\"line\"><span style=\"\">//            new_state    activation</span></span>\n<span class=\"line\"><span style=\"\">//  outputs:  0            1</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The size of activ_temp should be 4x size of new_state.</span></span>\n<span class=\"line\"><span style=\"\">// The size of prev_state == new_state == activation.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/delegates/gpu/gl/kernels/lstm.cc#L32-L44",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/gpu/gl/kernels/lstm.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This is a model with two ops:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  input1 ----></span></span>\n<span class=\"line\"><span style=\"\">//                ADD --</span></span>\n<span class=\"line\"><span style=\"\">//  input2   -->        |</span></span>\n<span class=\"line\"><span style=\"\">//                       --></span></span>\n<span class=\"line\"><span style=\"\">//                          SUB --> output</span></span>\n<span class=\"line\"><span style=\"\">//  input3 ----------------></span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/delegates/nnapi/nnapi_delegate_device_selection_test.cc#L364-L372",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": true
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/nnapi/nnapi_delegate_device_selection_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Create a model with custom validation graph.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 'validation model' (new subgraph)</span></span>\n<span class=\"line\"><span style=\"\">// input (batch_size)</span></span>\n<span class=\"line\"><span style=\"\">//           |</span></span>\n<span class=\"line\"><span style=\"\">// +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |'main_model' (0)       |</span></span>\n<span class=\"line\"><span style=\"\">// | +---------------+     |</span></span>\n<span class=\"line\"><span style=\"\">// | |input          +---+ |</span></span>\n<span class=\"line\"><span style=\"\">// | +---------------+   | |</span></span>\n<span class=\"line\"><span style=\"\">// |                     ~ |</span></span>\n<span class=\"line\"><span style=\"\">// | +---------------+   | |</span></span>\n<span class=\"line\"><span style=\"\">// | |outputs        +&#x3C;--+ |</span></span>\n<span class=\"line\"><span style=\"\">// | +---------------+     |</span></span>\n<span class=\"line\"><span style=\"\">// |                       |</span></span>\n<span class=\"line\"><span style=\"\">// +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">//           |</span></span>\n<span class=\"line\"><span style=\"\">// output (batch_size)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The new model contains all the information from main_model, with an extra</span></span>\n<span class=\"line\"><span style=\"\">// subgraph for validation purposes. The validation graph calls the primary</span></span>\n<span class=\"line\"><span style=\"\">// subgraph with batch_size. The input data is embedded to the validation graph.</span></span>\n<span class=\"line\"><span style=\"\">// custom_input should have the same order as the input in the main_model. E.g.</span></span>\n<span class=\"line\"><span style=\"\">// custom_input[i] will be mapped to main_model.input[i].</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/experimental/acceleration/mini_benchmark/model_modifier/custom_validation_embedder.h#L29-L52",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/experimental/acceleration/mini_benchmark/model_modifier/custom_validation_embedder.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Class for building the validation entry-point graph that calls into the main</span></span>\n<span class=\"line\"><span style=\"\">// graph and a metrics graph. Like this (boxes are tensors with plural names</span></span>\n<span class=\"line\"><span style=\"\">// meaning possibly multiple tensors, arrows are ops and numbers in parentheses</span></span>\n<span class=\"line\"><span style=\"\">// are subgraph indices):</span></span>\n<span class=\"line\"><span style=\"\">// +--------------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">// | Graph created by this class (1)      |</span></span>\n<span class=\"line\"><span style=\"\">// |                                      |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----------input-+                  |</span></span>\n<span class=\"line\"><span style=\"\">// | |jpeg input       |                  |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----+-----------+                  |</span></span>\n<span class=\"line\"><span style=\"\">// |       |                              |</span></span>\n<span class=\"line\"><span style=\"\">// |       | decode                       |</span></span>\n<span class=\"line\"><span style=\"\">// |       v                              |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----+-----------+                  |</span></span>\n<span class=\"line\"><span style=\"\">// | |quantized image  |                  |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----+-----------+                  |  +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |       |                              |  |'main_model' (0)       |</span></span>\n<span class=\"line\"><span style=\"\">// |       | dequantize (optional)        |  | +---------------+     |</span></span>\n<span class=\"line\"><span style=\"\">// |       v                              |  | |input          +---+ |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----+-----------+                  |  | +---------------+   | |</span></span>\n<span class=\"line\"><span style=\"\">// | |float image      |                  |  |                     ~ |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----+-----------+                  |  | +---------------+   | |</span></span>\n<span class=\"line\"><span style=\"\">// |       |  call                        |  | |outputs        +&#x3C;--+ |</span></span>\n<span class=\"line\"><span style=\"\">// |       +&#x3C;------------------------------->+ +---------------+     |</span></span>\n<span class=\"line\"><span style=\"\">// |       v                              |  |                       |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----+-----output+ +---------input+ |  +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">// | |actual outputs   | |golden outputs| |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----+-----------+ +-----------+--+ |</span></span>\n<span class=\"line\"><span style=\"\">// |       |                         |    |</span></span>\n<span class=\"line\"><span style=\"\">// |       | dequantize (optional)   |    |</span></span>\n<span class=\"line\"><span style=\"\">// |       |                         |    |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----+-------------------------+-+  |</span></span>\n<span class=\"line\"><span style=\"\">// | | dequantized actual and golden   |  |</span></span>\n<span class=\"line\"><span style=\"\">// | | outputs (validation inputs)     |  |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----+---------------------------+  |  +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">// |       |  call                        |  |'validation model' (2) |</span></span>\n<span class=\"line\"><span style=\"\">// |       +&#x3C;------------------------------->+                       |</span></span>\n<span class=\"line\"><span style=\"\">// |       v                              |  | +---------------+     |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----+-----output+                  |  | |inputs         +---+ |</span></span>\n<span class=\"line\"><span style=\"\">// | |results          |                  |  | +---------------+   | |</span></span>\n<span class=\"line\"><span style=\"\">// | +-----------------+                  |  |                     ~ |</span></span>\n<span class=\"line\"><span style=\"\">// |                                      |  | +---------------+   | |</span></span>\n<span class=\"line\"><span style=\"\">// |                                      |  | |outputs        +&#x3C;--+ |</span></span>\n<span class=\"line\"><span style=\"\">// |                                      |  | +---------------+     |</span></span>\n<span class=\"line\"><span style=\"\">// |                                      |  |                       |</span></span>\n<span class=\"line\"><span style=\"\">// +--------------------------------------+  +-----------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// It's important the 'main_model' has subgraph index 0 so that it is used as</span></span>\n<span class=\"line\"><span style=\"\">// the primary subgraph by the TFLite interpreter. The other indices are</span></span>\n<span class=\"line\"><span style=\"\">// arbitrary.</span></span>\n<span class=\"line\"><span style=\"\">// TODO(b/172541832): Handle a main model with more than one subgraph.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that the jpeg input is marked as an input in this graph, as TFLite</span></span>\n<span class=\"line\"><span style=\"\">// graphs must have inputs. However, it will be pre-filled from the jpeg_data</span></span>\n<span class=\"line\"><span style=\"\">// and doesn't need to be filled by the user of the model.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/experimental/acceleration/mini_benchmark/model_modifier/validation_graph_builder.h#L36-L90",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": true,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/experimental/acceleration/mini_benchmark/model_modifier/validation_graph_builder.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Matches %iota generated from the following mlir codes (rank 2 example):</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// %iota = mhlo.constant dense&#x3C;[[0, 1, 2, ..., L],</span></span>\n<span class=\"line\"><span style=\"\">//                              [0, 1, 2, ..., L]</span></span>\n<span class=\"line\"><span style=\"\">//                              ...</span></span>\n<span class=\"line\"><span style=\"\">//                              [0, 1, 2, ..., L]]>,</span></span>\n<span class=\"line\"><span style=\"\">// where $dimensions is of size 1.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// StridedArrayViews are used to check the iota property across the constant</span></span>\n<span class=\"line\"><span style=\"\">// data so that the iota dimension does not need to be the (inner) z-dimension.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/mlir/tensorflow/transforms/legalize_hlo.cc#L1501-L1510",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/mlir/tensorflow/transforms/legalize_hlo.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Converts a dag of HLOs representing floor_div to tf.FloorDiv.</span></span>\n<span class=\"line\"><span style=\"\">// The pattern matched executes the following computation:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// rem = remainder(arg0, arg1)</span></span>\n<span class=\"line\"><span style=\"\">// for i in 0 to len(arg1):</span></span>\n<span class=\"line\"><span style=\"\">//    rem[i] = arg0[i] - rem[i] / arg1[i]</span></span>\n<span class=\"line\"><span style=\"\">//    if (rem[i] != 0 &#x26;&#x26; sign(arg1[i]) != sign(rem[i]))</span></span>\n<span class=\"line\"><span style=\"\">//       rem[i] -= 1.0</span></span>\n<span class=\"line\"><span style=\"\">// return round_nearest_afz(rem)</span></span>\n<span class=\"line\"><span style=\"\">// As a dag this looks like the following:</span></span>\n<span class=\"line\"><span style=\"\">//                       round</span></span>\n<span class=\"line\"><span style=\"\">//                         |</span></span>\n<span class=\"line\"><span style=\"\">//              -------- select</span></span>\n<span class=\"line\"><span style=\"\">//              |          |    \\</span></span>\n<span class=\"line\"><span style=\"\">//             &#x26;&#x26;          +    div</span></span>\n<span class=\"line\"><span style=\"\">//           /   |        / \\</span></span>\n<span class=\"line\"><span style=\"\">//        !=    !=       div -1</span></span>\n<span class=\"line\"><span style=\"\">//       / |   / |      / |</span></span>\n<span class=\"line\"><span style=\"\">//    rem 0.0 sn sn1    -  $1</span></span>\n<span class=\"line\"><span style=\"\">//   / |      |  |    / |</span></span>\n<span class=\"line\"><span style=\"\">// $0 $1     $1 rem  $0 rem</span></span>\n<span class=\"line\"><span style=\"\">// Note that named operators like 'sn' and 'sn1' are different values produced by</span></span>\n<span class=\"line\"><span style=\"\">// the same function in this case the sign function. Named values like 'div'</span></span>\n<span class=\"line\"><span style=\"\">// refer to the same value produced by the same function, in this case division.</span></span>\n<span class=\"line\"><span style=\"\">// Mathematical symbols do not indicate a re-use of the value.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/mlir/tensorflow/transforms/legalize_hlo_patterns.td#L422-L446",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/mlir/tensorflow/transforms/legalize_hlo_patterns.td"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Lowers AddN op to a sequence of AddV2 ops to accumulate operands.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that to improve the parallelism, AddN op uses tree-based reduction.</span></span>\n<span class=\"line\"><span style=\"\">// For example, tf.AddN([0, 1, 2, 3, 4]) behaves as follows:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                 0     1     2     3     4</span></span>\n<span class=\"line\"><span style=\"\">//                 |     |     |     |     |</span></span>\n<span class=\"line\"><span style=\"\">//                 -------     -------     |</span></span>\n<span class=\"line\"><span style=\"\">//                    |           |        |</span></span>\n<span class=\"line\"><span style=\"\">//                    5           6        |</span></span>\n<span class=\"line\"><span style=\"\">//                    |           |        |</span></span>\n<span class=\"line\"><span style=\"\">//                    -------------        |</span></span>\n<span class=\"line\"><span style=\"\">//                          |              |</span></span>\n<span class=\"line\"><span style=\"\">//                          7              |</span></span>\n<span class=\"line\"><span style=\"\">//                          |              |</span></span>\n<span class=\"line\"><span style=\"\">//                          ----------------</span></span>\n<span class=\"line\"><span style=\"\">//                                 |</span></span>\n<span class=\"line\"><span style=\"\">//                                 8</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Example:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   %result = \"tf.AddN\"(%0, %1, %2)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// is lowered to:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   %sum0 = \"tf.AddV2\"(%0, %1)</span></span>\n<span class=\"line\"><span style=\"\">//   %result = \"tf.AddV2\"(%sum0, %2)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// While</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   %result = \"tf.AddN\"(%0, %1, %2, %3, %4)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// is lowered to:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   %sum0 = \"tf.AddV2\"(%0, %1)</span></span>\n<span class=\"line\"><span style=\"\">//   %sum1 = \"tf.AddV2\"(%2, %3)</span></span>\n<span class=\"line\"><span style=\"\">//   %sum2 = \"tf.AddV2\"(%sum0, %sum1)</span></span>\n<span class=\"line\"><span style=\"\">//   %result = \"tf.AddV2\"(%sum2, %4)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/mlir/tensorflow/transforms/lower_tf.cc#L210-L248",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/mlir/tensorflow/transforms/lower_tf.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Return the iterator of the IfRegion Op. This is the last IfRegion</span></span>\n<span class=\"line\"><span style=\"\">// in the segment.</span></span>\n<span class=\"line\"><span style=\"\">// For example, we have the following sequence of IfRegions</span></span>\n<span class=\"line\"><span style=\"\">// `````</span></span>\n<span class=\"line\"><span style=\"\">//      1          2          3         4           5</span></span>\n<span class=\"line\"><span style=\"\">// IfRegionA, IfRegionA, IfRegionA, IfRegionA, IfRegionA</span></span>\n<span class=\"line\"><span style=\"\">// `````</span></span>\n<span class=\"line\"><span style=\"\">// The first three IfRegionA are in one group and the last two are in another</span></span>\n<span class=\"line\"><span style=\"\">// group. Then when we call FindLastIfInSegment for the first segment, it</span></span>\n<span class=\"line\"><span style=\"\">// will return iterator of the 3rd IfRegionA.</span></span>\n<span class=\"line\"><span style=\"\">// In the same way, when we call it for the second segment, it will return</span></span>\n<span class=\"line\"><span style=\"\">// iterator of the 5th IfRegionA.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/mlir/tensorflow/transforms/merge_control_flow.cc#L218-L229",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/mlir/tensorflow/transforms/merge_control_flow.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// We implement bilinear interpolation by upsampling followed by convolution.</span></span>\n<span class=\"line\"><span style=\"\">// The basic idea is as follows. To scale from NxN to RxR:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    1. S := (N - 1) /  gcd(N-1, R-1)</span></span>\n<span class=\"line\"><span style=\"\">//    2. k := (R - 1) /  gcd(N-1, R-1)</span></span>\n<span class=\"line\"><span style=\"\">//    3. Convolution((2k-1)x(2k-1), stride=S, lhs_dilation=k, padding=k-1)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For example, to Scale from 7x7 -> 15x15:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    1. S := (7-1) / gcd(7-1, 15-1) = 6 / gcd(6, 14) = 6 / 2 = 3</span></span>\n<span class=\"line\"><span style=\"\">//    2. k := (15 - 1) / gcd(7-1, 15-1) = 14 / gcd(6, 14) = 14 / 2 = 7</span></span>\n<span class=\"line\"><span style=\"\">//    3. Convolution(15x15, stride=3, lhs_dilation=7, padding=2)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The 7x7 -> 15x15 case is much too large to write out in full as an</span></span>\n<span class=\"line\"><span style=\"\">// example. The smallest interesting example is 3x3 -> 4x4.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// S := 2</span></span>\n<span class=\"line\"><span style=\"\">// k := 3</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 00 03 06    00 00 00 00 00 00 00 00 00 00 00      00 02 04 06</span></span>\n<span class=\"line\"><span style=\"\">// 09 12 15 -> 00 00 00 00 00 00 00 00 00 00 00   -> 06 08 10 12</span></span>\n<span class=\"line\"><span style=\"\">// 18 21 24    00 00 00 00 00 03 00 00 06 00 00      12 14 16 18</span></span>\n<span class=\"line\"><span style=\"\">//             00 00 00 00 00 00 00 00 00 00 00      18 20 22 24</span></span>\n<span class=\"line\"><span style=\"\">//             00 00 00 00 00 00 00 00 00 00 00</span></span>\n<span class=\"line\"><span style=\"\">//             00 00 09 00 00 12 00 00 15 00 00</span></span>\n<span class=\"line\"><span style=\"\">//             00 00 00 00 00 00 00 00 00 00 00</span></span>\n<span class=\"line\"><span style=\"\">//             00 00 00 00 00 00 00 00 00 00 00</span></span>\n<span class=\"line\"><span style=\"\">//             00 00 18 00 00 21 00 00 24 00 00</span></span>\n<span class=\"line\"><span style=\"\">//             00 00 00 00 00 00 00 00 00 00 00</span></span>\n<span class=\"line\"><span style=\"\">//             00 00 00 00 00 00 00 00 00 00 00</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// with the following convolutional kernel, with stride [2, 2]:</span></span>\n<span class=\"line\"><span style=\"\">//       1 2 3 2 1</span></span>\n<span class=\"line\"><span style=\"\">//       2 4 6 4 2</span></span>\n<span class=\"line\"><span style=\"\">// 1/9 * 3 6 9 6 3</span></span>\n<span class=\"line\"><span style=\"\">//       2 4 6 4 2</span></span>\n<span class=\"line\"><span style=\"\">//       1 2 3 2 1</span></span>\n<span class=\"line\"><span style=\"\">// Note that the convolution kernel matrix is separable and thus we can instead</span></span>\n<span class=\"line\"><span style=\"\">// use 2 consecutive 1D kernel of the dimension 2k-1, along each axis.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/tf2xla/kernels/image_resize_ops.cc#L41-L80",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": true,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/tf2xla/kernels/image_resize_ops.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// ALGORITHM OVERVIEW</span></span>\n<span class=\"line\"><span style=\"\">// ==================</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// We map every output produced by each node in the TensorFlow graph (including</span></span>\n<span class=\"line\"><span style=\"\">// control dependence) into an instance of the Predicate class.  Instances of</span></span>\n<span class=\"line\"><span style=\"\">// Predicate denote logical formulas and mapping a node `n` to a predicate</span></span>\n<span class=\"line\"><span style=\"\">// `pred` implies that `n` is live whenever `pred` is true.  Then we can deduce</span></span>\n<span class=\"line\"><span style=\"\">// mismatching liveness in the inputs to node by comparing the predicate those</span></span>\n<span class=\"line\"><span style=\"\">// inputs are mapped to.  The core logic of this pass resides in creating the</span></span>\n<span class=\"line\"><span style=\"\">// map from TensorFlow nodes to predicates.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// MAPPING NODES TO PREDICATES, MODULO CYCLES</span></span>\n<span class=\"line\"><span style=\"\">// ------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If we ignore cycles for a moment, computing predicates is fairly</span></span>\n<span class=\"line\"><span style=\"\">// straightforward.  We traverse the graph in a topological order, mapping each</span></span>\n<span class=\"line\"><span style=\"\">// node to a predicate based on the predicates its inputs are mapped to.  For</span></span>\n<span class=\"line\"><span style=\"\">// instance a Merge(X, Y) node will be mapped to OR(PredicateFor(X),</span></span>\n<span class=\"line\"><span style=\"\">// PredicateFor(Y)).  Roughtly speaking, we abstractly interpret each node on</span></span>\n<span class=\"line\"><span style=\"\">// the \"liveness\" domain, where values in the domain represent if a tensor</span></span>\n<span class=\"line\"><span style=\"\">// carries a dead signal or not.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// DEALING WITH CYCLES</span></span>\n<span class=\"line\"><span style=\"\">// -------------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// We map Merge nodes that are the target of a backedge to AndRecurrence</span></span>\n<span class=\"line\"><span style=\"\">// instances.  An AndRecurrence with start() = S and step() = X, printed as</span></span>\n<span class=\"line\"><span style=\"\">// {S,&#x26;,X}, *roughly* represents the infinite list of predicates</span></span>\n<span class=\"line\"><span style=\"\">// [S,S&#x26;X,S&#x26;X&#x26;X,S&#x26;X&#x26;X, ...].  So {S,&#x26;,X} can be used to represent the predicate</span></span>\n<span class=\"line\"><span style=\"\">// for Merge in a graph like:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//     Init</span></span>\n<span class=\"line\"><span style=\"\">//       |</span></span>\n<span class=\"line\"><span style=\"\">//       v</span></span>\n<span class=\"line\"><span style=\"\">//     Merge &#x3C;-----------+</span></span>\n<span class=\"line\"><span style=\"\">//       |               |</span></span>\n<span class=\"line\"><span style=\"\">//       v               |</span></span>\n<span class=\"line\"><span style=\"\">//      Incr             |</span></span>\n<span class=\"line\"><span style=\"\">//       |               |</span></span>\n<span class=\"line\"><span style=\"\">//       v               |</span></span>\n<span class=\"line\"><span style=\"\">//      Switch &#x3C;- Cond   |</span></span>\n<span class=\"line\"><span style=\"\">//       |               |</span></span>\n<span class=\"line\"><span style=\"\">//       v (oidx: 1)     |</span></span>\n<span class=\"line\"><span style=\"\">//       |               |</span></span>\n<span class=\"line\"><span style=\"\">//       +---------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Where S is the predicate for Init and X is the predicate that asserts that</span></span>\n<span class=\"line\"><span style=\"\">// Cond is true.  {S,&#x26;,X} states that Merge is live on the first \"iteration\" iff</span></span>\n<span class=\"line\"><span style=\"\">// S is true, live on the second iteration iff \"S&#x26;X\" is true, live on the third</span></span>\n<span class=\"line\"><span style=\"\">// iteration iff \"S&#x26;X&#x26;X\" is true etc.  There is a subtlety here, S&#x26;X&#x26;X would</span></span>\n<span class=\"line\"><span style=\"\">// normally be equivalent to S&#x26;X which isn't quite what we want to represent.</span></span>\n<span class=\"line\"><span style=\"\">// Instead we want {S,&#x26;,X} to denote the infinite list [S, S&#x26;X,</span></span>\n<span class=\"line\"><span style=\"\">// S&#x26;X&#x26;X',S&#x26;X&#x26;X'&#x26;X'', ...] where X, X', X'' are predicates that assert Cond is</span></span>\n<span class=\"line\"><span style=\"\">// true on iteration 0, 1, 2 respectively.  This is made more precise in the</span></span>\n<span class=\"line\"><span style=\"\">// comment on the AndRecurrence class.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The general algorithm that deals with cycles does two topological-order</span></span>\n<span class=\"line\"><span style=\"\">// iterations over the graph.  On the first iteration it assigns a symbolic</span></span>\n<span class=\"line\"><span style=\"\">// predicate to merge nodes with backedges.  On the second iteration it tries</span></span>\n<span class=\"line\"><span style=\"\">// to pattern match the predicates for the backedges of these merges and infer</span></span>\n<span class=\"line\"><span style=\"\">// an AndRecurrence for the merge.  In other words, we do a data flow analysis</span></span>\n<span class=\"line\"><span style=\"\">// where the data-flow lattice has two elements, Symbolic and NonSymbolic with</span></span>\n<span class=\"line\"><span style=\"\">// Symbolic > NonSymbolic.  The lattice has height = 2 so two iterations are</span></span>\n<span class=\"line\"><span style=\"\">// sufficient to converge.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// We first do an optimistic analysis and, if it does not converge, we then fall</span></span>\n<span class=\"line\"><span style=\"\">// back to a pessimistic analysis.  The optimistic analysis assigns the same</span></span>\n<span class=\"line\"><span style=\"\">// symbolic predicate to all the merge nodes whose preceding enter nodes have</span></span>\n<span class=\"line\"><span style=\"\">// the same frame name on the first iteration.  On the second iteration, if all</span></span>\n<span class=\"line\"><span style=\"\">// the merge nodes are pattern matched into the same AndRecurrence predicate</span></span>\n<span class=\"line\"><span style=\"\">// instance, the optimistic assignment of the same symbolic predicate is correct</span></span>\n<span class=\"line\"><span style=\"\">// and the analyzed result is taken.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Otherwise, if the optimistic analysis fails to converge, we then obtain the</span></span>\n<span class=\"line\"><span style=\"\">// result by falling back to the pessimistic analysis which assigns a unique</span></span>\n<span class=\"line\"><span style=\"\">// symbolic predicate to each merge on the first iteration.  We still use</span></span>\n<span class=\"line\"><span style=\"\">// symbolic predicates for merges for which we can't pattern match on the</span></span>\n<span class=\"line\"><span style=\"\">// backedge predicate.  This is conservatively correct.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/jit/deadness_analysis.cc#L33-L112",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/jit/deadness_analysis.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// TensorList is represented by a tuple.</span></span>\n<span class=\"line\"><span style=\"\">// - The first part of the tuple is a buffer containing all the tensors,</span></span>\n<span class=\"line\"><span style=\"\">// - The following parts are push indices for all nested levels of</span></span>\n<span class=\"line\"><span style=\"\">//   TensorLists. The last part is push index for the outermost TensorList.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// TensorList, as it name suggests, is conceptually a list of tensors. In actual</span></span>\n<span class=\"line\"><span style=\"\">// representation of a non-nested TensorList, the buffer shape is</span></span>\n<span class=\"line\"><span style=\"\">// [element_shape, tensor_list_size]. We will call tensor_list_size \"leading</span></span>\n<span class=\"line\"><span style=\"\">// dimension\" below. Notice that the leading dimension must be a compile time</span></span>\n<span class=\"line\"><span style=\"\">// constant, since it's part of the buffer shape.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Example: consider a 3-level nested TensorList whose element type is scalar.</span></span>\n<span class=\"line\"><span style=\"\">// Assume inner TensorList has leading dimension 4, middle TensorList has 3,</span></span>\n<span class=\"line\"><span style=\"\">// and outer TensorList has 3.</span></span>\n<span class=\"line\"><span style=\"\">// Assume that lower cased letter means there is data in that position, and \".\"</span></span>\n<span class=\"line\"><span style=\"\">// means there is no data in that position.</span></span>\n<span class=\"line\"><span style=\"\">// First element of outer TensorList:</span></span>\n<span class=\"line\"><span style=\"\">// [ a . . . ]</span></span>\n<span class=\"line\"><span style=\"\">// [ b c . . ]</span></span>\n<span class=\"line\"><span style=\"\">// [ d e f . ]</span></span>\n<span class=\"line\"><span style=\"\">// Second element of outer TensorList:</span></span>\n<span class=\"line\"><span style=\"\">// [ g h i . ]</span></span>\n<span class=\"line\"><span style=\"\">// [ j k . . ]</span></span>\n<span class=\"line\"><span style=\"\">// [ . . . . ]</span></span>\n<span class=\"line\"><span style=\"\">// Third element: not pushed yet.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The first part of the tuple is an array of shape [3, 3, 4] containing data.</span></span>\n<span class=\"line\"><span style=\"\">// The second part is an array of shape [3, 3], each element is push index</span></span>\n<span class=\"line\"><span style=\"\">// for the inner TensorList. In this case, its values are:</span></span>\n<span class=\"line\"><span style=\"\">// [ 1 2 3 ]</span></span>\n<span class=\"line\"><span style=\"\">// [ 3 2 . ]</span></span>\n<span class=\"line\"><span style=\"\">// [ . . . ]</span></span>\n<span class=\"line\"><span style=\"\">// The third part is an array of shape [3], each element is push index for</span></span>\n<span class=\"line\"><span style=\"\">// the middle TensorList. In this case, its values are:</span></span>\n<span class=\"line\"><span style=\"\">// [ 3 ]</span></span>\n<span class=\"line\"><span style=\"\">// [ 2 ]</span></span>\n<span class=\"line\"><span style=\"\">// [ . ]</span></span>\n<span class=\"line\"><span style=\"\">// The forth (and last) part is a scalar. It's the push index for the outer</span></span>\n<span class=\"line\"><span style=\"\">// TensorList. In this case, its values is 2.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Now imagine we need to push the following element to the outer TensorList:</span></span>\n<span class=\"line\"><span style=\"\">// [ l . . . ]</span></span>\n<span class=\"line\"><span style=\"\">// [ m n . . ]</span></span>\n<span class=\"line\"><span style=\"\">// [ . . . . ]</span></span>\n<span class=\"line\"><span style=\"\">// This element is represented by a tuple of 3 parts:</span></span>\n<span class=\"line\"><span style=\"\">// First part is all data.</span></span>\n<span class=\"line\"><span style=\"\">// Second part is push indices for the inner TensorList, which is [ 1 2 . ].</span></span>\n<span class=\"line\"><span style=\"\">// Third part is push index for the middle TensorList, which is 2.</span></span>\n<span class=\"line\"><span style=\"\">// Now let's do the push.</span></span>\n<span class=\"line\"><span style=\"\">// First, we append its data to outer TensorList's data.</span></span>\n<span class=\"line\"><span style=\"\">// Then we start to deal with push indices. Similar to data, we append push</span></span>\n<span class=\"line\"><span style=\"\">// indices for each level of TensorList.</span></span>\n<span class=\"line\"><span style=\"\">// For the inner TensorList: append push indices for the pushed element.</span></span>\n<span class=\"line\"><span style=\"\">// [ 1 2 3 ]               [ 1 2 3 ]</span></span>\n<span class=\"line\"><span style=\"\">// [ 3 2 . ] +           = [ 3 2 . ]</span></span>\n<span class=\"line\"><span style=\"\">// [ . . . ]   [ 1 2 . ]   [ 1 2 . ]</span></span>\n<span class=\"line\"><span style=\"\">// For the middle TensorList: append push indices for the pushed element.</span></span>\n<span class=\"line\"><span style=\"\">// [ 3 ]           [ 3 ]</span></span>\n<span class=\"line\"><span style=\"\">// [ 2 ] +       = [ 2 ]</span></span>\n<span class=\"line\"><span style=\"\">// [ . ]   [ 2 ]   [ 2 ]</span></span>\n<span class=\"line\"><span style=\"\">// For the outer TensorList: just add 1.</span></span>\n<span class=\"line\"><span style=\"\">// 2 + 1 = 3</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Popping an element from the outer TensorList also follows a similar process.</span></span>\n<span class=\"line\"><span style=\"\">// First part is data. We get data by slicing data with push index for outer</span></span>\n<span class=\"line\"><span style=\"\">// TensorList (which is 3).</span></span>\n<span class=\"line\"><span style=\"\">// Second part is push indices for inner TensorList. We get it by slicing</span></span>\n<span class=\"line\"><span style=\"\">// push indices for inner TensorList with push index for outer TensorList (which</span></span>\n<span class=\"line\"><span style=\"\">// is 3).</span></span>\n<span class=\"line\"><span style=\"\">// [ 1 2 3 ]</span></span>\n<span class=\"line\"><span style=\"\">// [ 3 2 . ]</span></span>\n<span class=\"line\"><span style=\"\">// [ 1 2 . ] ===> This is what we want</span></span>\n<span class=\"line\"><span style=\"\">// Third part is push index for middle TensorList. We get it by slicing</span></span>\n<span class=\"line\"><span style=\"\">// push indices for middle TensorList with push index for outer TensorList</span></span>\n<span class=\"line\"><span style=\"\">// (which is 3).</span></span>\n<span class=\"line\"><span style=\"\">// [ 3 ]</span></span>\n<span class=\"line\"><span style=\"\">// [ 2 ]</span></span>\n<span class=\"line\"><span style=\"\">// [ 2 ] ===> This is what we want</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/tf2xla/kernels/tensor_list_utils.cc#L30-L107",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": true
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/tf2xla/kernels/tensor_list_utils.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Match on variadic reduce which computes and returns (min, arg_min).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                   p0   p2    p1    p3</span></span>\n<span class=\"line\"><span style=\"\">//                  /|\\ \\/ |\\    |\\   /|</span></span>\n<span class=\"line\"><span style=\"\">//                 / | \\/\\ | \\   | \\ / |</span></span>\n<span class=\"line\"><span style=\"\">//                /  | /\\ \\|  |  |  /\\ |</span></span>\n<span class=\"line\"><span style=\"\">//               Ne  Lt |  \\  |  | |  ||</span></span>\n<span class=\"line\"><span style=\"\">//                 \\ /  |  |\\ |  | /  ||</span></span>\n<span class=\"line\"><span style=\"\">//                  Or /  /  Eq  Lt   ||</span></span>\n<span class=\"line\"><span style=\"\">//                  | /  /    \\  /    //</span></span>\n<span class=\"line\"><span style=\"\">//                  | |  |     And   //</span></span>\n<span class=\"line\"><span style=\"\">//                  | |  |      |  //</span></span>\n<span class=\"line\"><span style=\"\">//                  select     select</span></span>\n<span class=\"line\"><span style=\"\">//                      \\     /</span></span>\n<span class=\"line\"><span style=\"\">//                       tuple</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/70167ab277e1f2d6d62ff10df79d8af699d5ecaf/tensorflow/compiler/xla/service/algebraic_simplifier.cc#L5551-L5566",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/algebraic_simplifier.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Create a mask for grouped convolution that will make a normal convolution</span></span>\n<span class=\"line\"><span style=\"\">// produce the same results as a grouped convolution. For a [2, 1, 6]</span></span>\n<span class=\"line\"><span style=\"\">// filter this returns a [2, 3, 6] mask</span></span>\n<span class=\"line\"><span style=\"\">//   1 1 0 0 0 0</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 1 1 0 0</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 0 0 1 1</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   1 1 0 0 0 0</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 1 1 0 0</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 0 0 1 1</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The first step is to create a rank 1 constant:</span></span>\n<span class=\"line\"><span style=\"\">//   0 1 2</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This is broadcasted to</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 0 0 0 0</span></span>\n<span class=\"line\"><span style=\"\">//   1 1 1 1 1 1</span></span>\n<span class=\"line\"><span style=\"\">//   2 2 2 2 2 2</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 0 0 0 0</span></span>\n<span class=\"line\"><span style=\"\">//   1 1 1 1 1 1</span></span>\n<span class=\"line\"><span style=\"\">//   2 2 2 2 2 2</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Then we create another rank 1 constant</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 1 1 2 2</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This is broadcasted to</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 1 1 2 2</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 1 1 2 2</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 1 1 2 2</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 1 1 2 2</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 1 1 2 2</span></span>\n<span class=\"line\"><span style=\"\">//   0 0 1 1 2 2</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Finally we use the Eq op of these two broadcasted constants and get the</span></span>\n<span class=\"line\"><span style=\"\">// desired mask.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/convolution_group_converter.cc#L129-L165",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/convolution_group_converter.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Deep copy the given instructions 'from' and 'to' at the ShapeIndexes given in</span></span>\n<span class=\"line\"><span style=\"\">// 'indices_to_copy'. Add control edges from the respective kCopy instructions</span></span>\n<span class=\"line\"><span style=\"\">// in deep copy of 'from' to the respective kCopy instruction in the deep copy</span></span>\n<span class=\"line\"><span style=\"\">// of 'to'.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Requirements: 'from' and 'to' must have compatible shapes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// For example, suppose 'from' and 'to' are two-element tuples where index 0 is</span></span>\n<span class=\"line\"><span style=\"\">// the only index to copy. Prior to deep-copying we have:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      'from'</span></span>\n<span class=\"line\"><span style=\"\">//         |</span></span>\n<span class=\"line\"><span style=\"\">//        ...</span></span>\n<span class=\"line\"><span style=\"\">//         |</span></span>\n<span class=\"line\"><span style=\"\">//       'to'</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// DeepCopyAndAddControlEdges produces:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//       'from'</span></span>\n<span class=\"line\"><span style=\"\">//        /   \\</span></span>\n<span class=\"line\"><span style=\"\">//      GTE   GTE</span></span>\n<span class=\"line\"><span style=\"\">//       |     |</span></span>\n<span class=\"line\"><span style=\"\">//     Copy    |</span></span>\n<span class=\"line\"><span style=\"\">//    /   \\   /</span></span>\n<span class=\"line\"><span style=\"\">//   |    Tuple</span></span>\n<span class=\"line\"><span style=\"\">//   |      |</span></span>\n<span class=\"line\"><span style=\"\">//  ctrl   ...</span></span>\n<span class=\"line\"><span style=\"\">//  edge    |</span></span>\n<span class=\"line\"><span style=\"\">//   |      |</span></span>\n<span class=\"line\"><span style=\"\">//   |    'to'</span></span>\n<span class=\"line\"><span style=\"\">//   |    /   \\</span></span>\n<span class=\"line\"><span style=\"\">//   |  GTE   GTE</span></span>\n<span class=\"line\"><span style=\"\">//    \\  |     |</span></span>\n<span class=\"line\"><span style=\"\">//     Copy    |</span></span>\n<span class=\"line\"><span style=\"\">//        \\   /</span></span>\n<span class=\"line\"><span style=\"\">//        Tuple</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/copy_insertion.cc#L101-L138",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/copy_insertion.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Tests Copy Insertion when a while feeds another while</span></span>\n<span class=\"line\"><span style=\"\">//                         PARAMETER</span></span>\n<span class=\"line\"><span style=\"\">//                        |        |</span></span>\n<span class=\"line\"><span style=\"\">//                        GTE(0)   GTE(1)</span></span>\n<span class=\"line\"><span style=\"\">//                        |        |</span></span>\n<span class=\"line\"><span style=\"\">//                        X = CreateTuple(GTE(0), GTE(1))</span></span>\n<span class=\"line\"><span style=\"\">//                                 |</span></span>\n<span class=\"line\"><span style=\"\">//                        WHILE(X) (root)</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/copy_insertion_test.cc#L722-L729",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/copy_insertion_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Test flattening of a nested calling computations.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   Entry</span></span>\n<span class=\"line\"><span style=\"\">//    / \\</span></span>\n<span class=\"line\"><span style=\"\">//    \\ /</span></span>\n<span class=\"line\"><span style=\"\">//     B</span></span>\n<span class=\"line\"><span style=\"\">//    / \\</span></span>\n<span class=\"line\"><span style=\"\">//    \\ /</span></span>\n<span class=\"line\"><span style=\"\">//     C</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/flatten_call_graph_test.cc#L194-L203",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": true,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/flatten_call_graph_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Class implementing a list scheduler of HLO instructions which produces a</span></span>\n<span class=\"line\"><span style=\"\">// sequence which minimizes memory usage by preferring to schedule the node that</span></span>\n<span class=\"line\"><span style=\"\">// frees bigger buffer and defines smaller outputs.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that list scheduler is a greedy algorithm which cannot guarantee a</span></span>\n<span class=\"line\"><span style=\"\">// global optimal solution. As a counterexample, considering the following</span></span>\n<span class=\"line\"><span style=\"\">// graph:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      +--> B ===> C -------+</span></span>\n<span class=\"line\"><span style=\"\">// A -> |                    |</span></span>\n<span class=\"line\"><span style=\"\">//      |                    v</span></span>\n<span class=\"line\"><span style=\"\">//      +--> D ---> F=======>G</span></span>\n<span class=\"line\"><span style=\"\">//      |           ^</span></span>\n<span class=\"line\"><span style=\"\">//      |           |</span></span>\n<span class=\"line\"><span style=\"\">//      +--> E -----+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  --> : Buffer with size 1</span></span>\n<span class=\"line\"><span style=\"\">//  ==> : Buffer with size 2</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The list scheduler will always try to defer scheduling B in a greedy way</span></span>\n<span class=\"line\"><span style=\"\">// since its output buffer is bigger than input. The sequence it creates will</span></span>\n<span class=\"line\"><span style=\"\">// be:</span></span>\n<span class=\"line\"><span style=\"\">//   A D E F B C G</span></span>\n<span class=\"line\"><span style=\"\">// , which has a maximum memory usage of 6 (B is alive while F is executing).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// An optimal way to schedule the previous graph is:</span></span>\n<span class=\"line\"><span style=\"\">//   A B C D E F G</span></span>\n<span class=\"line\"><span style=\"\">// , which has a maximum memory usage of 5 (when F is executing).</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/hlo_memory_scheduler.cc#L47-L75",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/hlo_memory_scheduler.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Class which maintains an ordered list of instructions with fast insertion</span></span>\n<span class=\"line\"><span style=\"\">// before arbitrary elements.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This is a skip list structure that has two lanes: express lane and slow lane.</span></span>\n<span class=\"line\"><span style=\"\">// All nodes are presented on the slow lane but a node can be promoted into</span></span>\n<span class=\"line\"><span style=\"\">// express lane for fast iteration.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In the following case, node 2 and node + 1 are connected via an express lane.</span></span>\n<span class=\"line\"><span style=\"\">//                    +--------------------------+----------->: Express lane</span></span>\n<span class=\"line\"><span style=\"\">//                    |                          |</span></span>\n<span class=\"line\"><span style=\"\">//       node1&#x3C;-> node 2 &#x3C;-> .. &#x3C;-> node n &#x3C;-> node n+1 &#x3C;->...: Slow lane</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/hlo_rematerialization.cc#L194-L205",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": true,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": true,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": true,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/hlo_rematerialization.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Tree looks like this:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// add1</span></span>\n<span class=\"line\"><span style=\"\">// |</span></span>\n<span class=\"line\"><span style=\"\">// +- reshape2 - param2</span></span>\n<span class=\"line\"><span style=\"\">// |</span></span>\n<span class=\"line\"><span style=\"\">// +- reshape3 - add0</span></span>\n<span class=\"line\"><span style=\"\">//               |</span></span>\n<span class=\"line\"><span style=\"\">//               + reshape0 - param0</span></span>\n<span class=\"line\"><span style=\"\">//               |</span></span>\n<span class=\"line\"><span style=\"\">//               + reshape1 - param1</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// We expect reshape{0,1} AND reshape{2,3} to be lifted.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/reshape_mover_test.cc#L479-L491",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/reshape_mover_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Computes a dot product between \"[M,K]{0,1} lhs\" with a [K,1] vector (the</span></span>\n<span class=\"line\"><span style=\"\">// layout of the vector does not matter).  This implementation uses a tiling</span></span>\n<span class=\"line\"><span style=\"\">// scheme to improve performance.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// We logically separate the LHS matrix into four segments:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   +----------------------+---+</span></span>\n<span class=\"line\"><span style=\"\">//   |                      |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |                      |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |         A            | B |</span></span>\n<span class=\"line\"><span style=\"\">//   |                      |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |                      |   |</span></span>\n<span class=\"line\"><span style=\"\">//   |                      |   |</span></span>\n<span class=\"line\"><span style=\"\">//   +----------------------+---+</span></span>\n<span class=\"line\"><span style=\"\">//   |         C            | D |</span></span>\n<span class=\"line\"><span style=\"\">//   +----------------------+---+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// where A is the largest submatrix of the LHS that can be evenly divided into</span></span>\n<span class=\"line\"><span style=\"\">// tiles.  For each tile in A, assuming tile_rows_ == tile_cols_ == 4, we have:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   +---+---+---+---+       +--+--+--+--+</span></span>\n<span class=\"line\"><span style=\"\">//   |M00|M10|M20|M30|       |V0|V1|V2|V3|</span></span>\n<span class=\"line\"><span style=\"\">//   +---+---+---+---+       +--+--+--+--+</span></span>\n<span class=\"line\"><span style=\"\">//   |M01|M11|M21|M31| and   |V0|V1|V2|V3|</span></span>\n<span class=\"line\"><span style=\"\">//   +---+---+---+---+       +--+--+--+--+</span></span>\n<span class=\"line\"><span style=\"\">//   |M02|M12|M22|M32|       |V0|V1|V2|V3|</span></span>\n<span class=\"line\"><span style=\"\">//   +---+---+---+---+       +--+--+--+--+</span></span>\n<span class=\"line\"><span style=\"\">//   |M03|M13|M23|M33|       |V0|V1|V2|V3|</span></span>\n<span class=\"line\"><span style=\"\">//   +---+---+---+---+       +--+--+--+--+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// (Legend: rows are horizontal and columns are vertical; and each column is one</span></span>\n<span class=\"line\"><span style=\"\">// llvm::Value of a vector type)</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// where:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   a. The left tile is from the column major left matrix.</span></span>\n<span class=\"line\"><span style=\"\">//   b. The right tile is an elementwise broadcast of a [V0, V1, V2, V3]</span></span>\n<span class=\"line\"><span style=\"\">//      vector loaded from the RHS vector.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// As we iterate through the column dimension, we compute the change to the</span></span>\n<span class=\"line\"><span style=\"\">// result vector by an elementwise multiplication between the two tiles above</span></span>\n<span class=\"line\"><span style=\"\">// followed by a reduction along the major dimension:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                     +-----------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                     | M00*V0 + M10*V1 + M20*V2 + M30*V3 |</span></span>\n<span class=\"line\"><span style=\"\">//                     +-----------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                     | M01*V0 + M11*V1 + M21*V2 + M31*V3 |</span></span>\n<span class=\"line\"><span style=\"\">// Result[R:R+4] +=    +-----------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                     | M02*V0 + M12*V1 + M22*V2 + M32*V3 |</span></span>\n<span class=\"line\"><span style=\"\">//                     +-----------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//                     | M03*V0 + M13*V1 + M23*V2 + M33*V3 |</span></span>\n<span class=\"line\"><span style=\"\">//                     +-----------------------------------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Where R is the starting row for the tile.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// We have an inner epilogue loop to deal with the \"C\" submatrix and an outer</span></span>\n<span class=\"line\"><span style=\"\">// epilogue loop to deal with the B,D submatrix.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// TODO(sanjoy): We should investigate if using gather loads and scatter stores</span></span>\n<span class=\"line\"><span style=\"\">// can be used here have the same inner loop for both column-major and row-major</span></span>\n<span class=\"line\"><span style=\"\">// matrix-vector products.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/cpu/tiled_dot_emitter.cc#L160-L220",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": true,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": true
        },
        "math notation": true,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/cpu/tiled_dot_emitter.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// An HLO pass that attempts to merge fusion instructions to reduce memory</span></span>\n<span class=\"line\"><span style=\"\">// bandwidth requirements and kernel launch overhead.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Consider the example below. On the left-hand side, op A is the producer and</span></span>\n<span class=\"line\"><span style=\"\">// ops B and C are its consumers. FusionMerger duplicates producer ops and fuses</span></span>\n<span class=\"line\"><span style=\"\">// them into all consumers. The result is depicted on the right-hand side below.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//        p                    p</span></span>\n<span class=\"line\"><span style=\"\">//        |                  /   \\</span></span>\n<span class=\"line\"><span style=\"\">//        v                 /     \\</span></span>\n<span class=\"line\"><span style=\"\">//        A            +fusion+  +fusion+</span></span>\n<span class=\"line\"><span style=\"\">//      /   \\          |  A'  |  |  A\"  |</span></span>\n<span class=\"line\"><span style=\"\">//     |     |         |  |   |  |  |   |</span></span>\n<span class=\"line\"><span style=\"\">//     v     v         |  v   |  |  v   |</span></span>\n<span class=\"line\"><span style=\"\">//     B     C         |  B   |  |  C   |</span></span>\n<span class=\"line\"><span style=\"\">//                     +------+  +------+</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Op A has been cloned twice and fused with B and C. The kernel launch overhead</span></span>\n<span class=\"line\"><span style=\"\">// is reduced from 3 to 2. The memory bandwidth requirements may be reduced.</span></span>\n<span class=\"line\"><span style=\"\">// We trade 1 read of input(A) + 1 write and 2 reads of output(A) for 2 reads of</span></span>\n<span class=\"line\"><span style=\"\">// input(A). In general the achieveable savings in memory bandwidth depend on</span></span>\n<span class=\"line\"><span style=\"\">// the differences in memory read and written and the number of consumers. The</span></span>\n<span class=\"line\"><span style=\"\">// FusionMeger pass takes this into account when making fusion decisions.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The pass traverses the HLO module in reverse post-order (defs before uses).</span></span>\n<span class=\"line\"><span style=\"\">// Fusion instructions are merged into their users if some conditions are met:</span></span>\n<span class=\"line\"><span style=\"\">// * The result of merging the fusion instruction into its users would not</span></span>\n<span class=\"line\"><span style=\"\">//   increase bytes transferred.</span></span>\n<span class=\"line\"><span style=\"\">// * Producer ops are fusible with _all_ consumers. If they are not fusible with</span></span>\n<span class=\"line\"><span style=\"\">//   at least one consumers, they won't be fused at all.</span></span>\n<span class=\"line\"><span style=\"\">// * Producers are kLoop fusion ops.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// None of these restrictions are necessary for correctness. In fact, lifting</span></span>\n<span class=\"line\"><span style=\"\">// the latter two could be beneficial.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/gpu/fusion_merger.h#L27-L60",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": true,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/gpu/fusion_merger.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// This optimization pass horizontally fuses computations for reducing kernel</span></span>\n<span class=\"line\"><span style=\"\">// launch overhead while increasing kernel launch dims on GPU. The initial</span></span>\n<span class=\"line\"><span style=\"\">// motivation of this horizontal fusion is due to the observation that the</span></span>\n<span class=\"line\"><span style=\"\">// training optimizer phase (e.g., AdamOptimizer and L2Loss, etc.) typically</span></span>\n<span class=\"line\"><span style=\"\">// has many small kernels as a result of applying the same formula on many</span></span>\n<span class=\"line\"><span style=\"\">// training parameters (or variables in Tensorflow). Fusing these small</span></span>\n<span class=\"line\"><span style=\"\">// kernels, hence, provides performance gain.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Theoretically speaking, we may implement a cycle detection algorithm to make</span></span>\n<span class=\"line\"><span style=\"\">// sure no cycles are created after fusion. However, cycle detection check is</span></span>\n<span class=\"line\"><span style=\"\">// somewhat cumbersome; also, we observe that naive horizontal fusion of</span></span>\n<span class=\"line\"><span style=\"\">// arbitrary kernels may not be profitable due to control divergence and</span></span>\n<span class=\"line\"><span style=\"\">// possible increase of memory bandwidth pressure due to uncoalesced memory</span></span>\n<span class=\"line\"><span style=\"\">// accesses (note that horizontal fusion does not change the amount of memory</span></span>\n<span class=\"line\"><span style=\"\">// read+written at all). In practice, a simple yet effective heuristic is used</span></span>\n<span class=\"line\"><span style=\"\">// to avoid these issues while addressing the known beneficial cases. That is,</span></span>\n<span class=\"line\"><span style=\"\">// we simply search for fusion candidates by looking for instructions whose</span></span>\n<span class=\"line\"><span style=\"\">// outputs are all consumed by the same instruction. This catches the cases in</span></span>\n<span class=\"line\"><span style=\"\">// the training optimizer phase, as the candidate instructions are typically</span></span>\n<span class=\"line\"><span style=\"\">// consumed only by the ROOT tuple of the entry computation.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The following illustrates the mechanism of the horizontal fusion. Before</span></span>\n<span class=\"line\"><span style=\"\">// fusion, there are two trivial kernels in the illustrating example. One has</span></span>\n<span class=\"line\"><span style=\"\">// only a Mul op, while the other consists of only an Add op. Since they are</span></span>\n<span class=\"line\"><span style=\"\">// only consumed by the same (ROOT) tuple instruction, horizontal fusion is</span></span>\n<span class=\"line\"><span style=\"\">// triggered.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// i0 i1   i2 i3</span></span>\n<span class=\"line\"><span style=\"\">//  | |     | |</span></span>\n<span class=\"line\"><span style=\"\">//  v v     v v</span></span>\n<span class=\"line\"><span style=\"\">//  Mul     Add</span></span>\n<span class=\"line\"><span style=\"\">//   |       |</span></span>\n<span class=\"line\"><span style=\"\">//   v       v</span></span>\n<span class=\"line\"><span style=\"\">//  (ROOT) tuple</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// We fuse into one of two possible patterns, depending on whether all the</span></span>\n<span class=\"line\"><span style=\"\">// fused operations have the same shape or not.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// case 1: if Mul and Add's output shape and type are the same, then we fuse</span></span>\n<span class=\"line\"><span style=\"\">// them into the below pattern: i0 i1   i2 i3</span></span>\n<span class=\"line\"><span style=\"\">//  | |     | |</span></span>\n<span class=\"line\"><span style=\"\">//  v v     v v</span></span>\n<span class=\"line\"><span style=\"\">//  Mul     Add</span></span>\n<span class=\"line\"><span style=\"\">//   |       |</span></span>\n<span class=\"line\"><span style=\"\">//   v       v</span></span>\n<span class=\"line\"><span style=\"\">//  (ROOT) tuple</span></span>\n<span class=\"line\"><span style=\"\">// the fused kernel will be kLoop type, i.e, GPU code is emitted through</span></span>\n<span class=\"line\"><span style=\"\">// IrEmitterUnnested::EmitLoopFusion</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// case 2: if Mul and Add's output shape are diffent, then we fuse them into</span></span>\n<span class=\"line\"><span style=\"\">// the below pattern that adds extra indexing:</span></span>\n<span class=\"line\"><span style=\"\">// i0 i1   i2 i3       +++ (Slice) Input Fusion</span></span>\n<span class=\"line\"><span style=\"\">//  | |     | |          +</span></span>\n<span class=\"line\"><span style=\"\">//  v v     v v          +</span></span>\n<span class=\"line\"><span style=\"\">//  Mul     Add          +</span></span>\n<span class=\"line\"><span style=\"\">//   |       |           +</span></span>\n<span class=\"line\"><span style=\"\">//   v       v           +</span></span>\n<span class=\"line\"><span style=\"\">// Reshape0  Reshape1    +</span></span>\n<span class=\"line\"><span style=\"\">//   |       |           +</span></span>\n<span class=\"line\"><span style=\"\">//   v       v           +</span></span>\n<span class=\"line\"><span style=\"\">//  Concatenate          +</span></span>\n<span class=\"line\"><span style=\"\">//   |       |           +</span></span>\n<span class=\"line\"><span style=\"\">//   v       v           +</span></span>\n<span class=\"line\"><span style=\"\">//  Slice0  Slice1     +++</span></span>\n<span class=\"line\"><span style=\"\">//   |       |</span></span>\n<span class=\"line\"><span style=\"\">//   v       v</span></span>\n<span class=\"line\"><span style=\"\">// Reshape2  Reshape3</span></span>\n<span class=\"line\"><span style=\"\">//   |       |</span></span>\n<span class=\"line\"><span style=\"\">//   v       v</span></span>\n<span class=\"line\"><span style=\"\">//  (ROOT) tuple</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// the fused kernel will be kInput type, and, the GPU code is emitted through</span></span>\n<span class=\"line\"><span style=\"\">// IrEmitterUnnested::EmitInputFusibleNonStridedSlices</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In theory, the pattern in case 1 could also be fused into the case2 target</span></span>\n<span class=\"line\"><span style=\"\">// graph, but we prefer to fuse into kLoop type, because the codegen for it does</span></span>\n<span class=\"line\"><span style=\"\">// not have the slicing range check cost introduced by case 2 pattern.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that the fusion style by case 2 provides an important advantage that</span></span>\n<span class=\"line\"><span style=\"\">// kernels of different shapes can be horizontally fused. The first pair of</span></span>\n<span class=\"line\"><span style=\"\">// reshapes (i.e., Reshape0 and Reshape1) reshape the dims to 1 dimension, so</span></span>\n<span class=\"line\"><span style=\"\">// that the outputs of the fused kernels can (always) be concatenated. The</span></span>\n<span class=\"line\"><span style=\"\">// second pair of reshapes (Reshape2 and Reshape3) restore the original shapes</span></span>\n<span class=\"line\"><span style=\"\">// to the output tensors.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// No extra copies are introduced by the horizontal fusion. Besides Reshape2</span></span>\n<span class=\"line\"><span style=\"\">// and Reshape3, the other instructions are fused into an input fusion; the</span></span>\n<span class=\"line\"><span style=\"\">// output dims of the concatenate will be used as the kernel launch dims.</span></span>\n<span class=\"line\"><span style=\"\">// Instruction bitcasts can be used for Reshape2 and Reshape3 as long as the</span></span>\n<span class=\"line\"><span style=\"\">// outputs of Mul and Add are row-major.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note, reshapes are added only if the tensors isn't already a vector.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/gpu/horizontal_loop_fusion.h#L27-L118",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/gpu/horizontal_loop_fusion.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Multi-output fusion of sibling and producer-consumer instructions for the</span></span>\n<span class=\"line\"><span style=\"\">// GPU backend to reduce memory bandwidth requirements.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//   0) Before multi-    1) Sibling multi-    2) Producer-consumer</span></span>\n<span class=\"line\"><span style=\"\">//      output fusion       output fusion        multi-output fusion</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//          p                    p                    p</span></span>\n<span class=\"line\"><span style=\"\">//          |                    |                    |</span></span>\n<span class=\"line\"><span style=\"\">//          v                    v                    v</span></span>\n<span class=\"line\"><span style=\"\">//          A                    A               +-fusion--+</span></span>\n<span class=\"line\"><span style=\"\">//        /   \\                  |               |    A    |</span></span>\n<span class=\"line\"><span style=\"\">//       |     |            +-fusion--+          |   / \\   |</span></span>\n<span class=\"line\"><span style=\"\">//       v     v            |   / \\   |          |  B   |  |</span></span>\n<span class=\"line\"><span style=\"\">//       B     C            |  B   C  |          |  |   |  |</span></span>\n<span class=\"line\"><span style=\"\">//        \\   /             |  |   |  |          |  v   v  |</span></span>\n<span class=\"line\"><span style=\"\">//         v v              |  v   v  |          |  tuple  |</span></span>\n<span class=\"line\"><span style=\"\">//        ROOT              |  tuple  |          +---------+</span></span>\n<span class=\"line\"><span style=\"\">//                          +---------+            /    \\</span></span>\n<span class=\"line\"><span style=\"\">//                            /    \\            gte_b  gte_a</span></span>\n<span class=\"line\"><span style=\"\">//                         gte_b  gte_c           |      |</span></span>\n<span class=\"line\"><span style=\"\">//                           |      |             |      v</span></span>\n<span class=\"line\"><span style=\"\">//                            \\    /              |      C</span></span>\n<span class=\"line\"><span style=\"\">//                             v  v                \\    /</span></span>\n<span class=\"line\"><span style=\"\">//                             ROOT                 v  v</span></span>\n<span class=\"line\"><span style=\"\">//                                                  ROOT</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Multi-output fusion ops have a tuple op at their root containing multiple</span></span>\n<span class=\"line\"><span style=\"\">// elements as outputs. GetTupleElement ops (depicted as gte_* above) are</span></span>\n<span class=\"line\"><span style=\"\">// inserted to extract tuple elements for consumers.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The two different flavors of multi-output fusion this pass performs are</span></span>\n<span class=\"line\"><span style=\"\">// depicted above.</span></span>\n<span class=\"line\"><span style=\"\">// 1) Fusion of sibling ops reduces memory bandwidth requirements, because</span></span>\n<span class=\"line\"><span style=\"\">//    common input parameters have to be read only once.</span></span>\n<span class=\"line\"><span style=\"\">// 2) Fusion of producer-consumer ops reduces memory bandwidth requirements by</span></span>\n<span class=\"line\"><span style=\"\">//    saving one read from memory. In the example above, B does not need to read</span></span>\n<span class=\"line\"><span style=\"\">//    the output of A from memory, while C still does (using gte_a).</span></span>\n<span class=\"line\"><span style=\"\">// Note that sibling (1) and producer-consumer (2) multi-output fusion can be</span></span>\n<span class=\"line\"><span style=\"\">// combined.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The GpuMultiOutputFusion pass modifies the HLO in reverse post-order (defs</span></span>\n<span class=\"line\"><span style=\"\">// before uses). First, it attempts to fuse the consumer ops of the current op,</span></span>\n<span class=\"line\"><span style=\"\">// which are siblings (1). Hereafter, it attempts to fuse the current op with</span></span>\n<span class=\"line\"><span style=\"\">// one of its consumers (2). This order avoids a phase ordering issue (described</span></span>\n<span class=\"line\"><span style=\"\">// in go/fusionfusion). It ensures that all GetTupleElement ops inserted as a</span></span>\n<span class=\"line\"><span style=\"\">// by-product of multi-output fusion will occur before the current op in the</span></span>\n<span class=\"line\"><span style=\"\">// order of traversal, and hence, not get into the way of subsequent fusion</span></span>\n<span class=\"line\"><span style=\"\">// attempts.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The GpuMultiOutputFusion pass ensures several conditions are met for fusion.</span></span>\n<span class=\"line\"><span style=\"\">// Some of them are relevant for correctness. In particular, no cycles must be</span></span>\n<span class=\"line\"><span style=\"\">// introduced into the HLO module. Moreover, the code emitters for multi-output</span></span>\n<span class=\"line\"><span style=\"\">// fusion must support the combination of ops and their shapes. Other</span></span>\n<span class=\"line\"><span style=\"\">// restrictions are rather arbitrary and lifting them could be beneficial.</span></span>\n<span class=\"line\"><span style=\"\">// * Sibling fusion (1) requires at least one op to be a kFusion.</span></span>\n<span class=\"line\"><span style=\"\">// * Sibling fusion (1) does not fuse kInput fusions with kLoop fusions, i.e.</span></span>\n<span class=\"line\"><span style=\"\">//   the fusion kinds must match.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/gpu/multi_output_fusion.h#L36-L92",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": true,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/gpu/multi_output_fusion.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Moves a cluster of memory-reducing nodes into the windowed dot-general loop</span></span>\n<span class=\"line\"><span style=\"\">// on contracting dimensions. Such a loop has a dynamic slice on the</span></span>\n<span class=\"line\"><span style=\"\">// non-windowed operand. If we move the input nodes into the loop, the</span></span>\n<span class=\"line\"><span style=\"\">// dynamic-slice could be merged with them by later optimization passes, which</span></span>\n<span class=\"line\"><span style=\"\">// reduces memory.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// small_operands             small_operands</span></span>\n<span class=\"line\"><span style=\"\">//        |                          |</span></span>\n<span class=\"line\"><span style=\"\">// input_nodes                loop { |</span></span>\n<span class=\"line\"><span style=\"\">//        |          =>         input_nodes</span></span>\n<span class=\"line\"><span style=\"\">// loop { |                          |</span></span>\n<span class=\"line\"><span style=\"\">//    dynamic-slice             dynamic-slice</span></span>\n<span class=\"line\"><span style=\"\">//    ...                       ...</span></span>\n<span class=\"line\"><span style=\"\">// }                          }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Later optimization passes (TpuPadSliceMover) will merge the dynamic slice</span></span>\n<span class=\"line\"><span style=\"\">// with the input nodes.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/service/spmd/dot_handler.cc#L3973-L3989",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/service/spmd/dot_handler.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Regression test for b/31944287. x*y is used (at the same index) by all</span></span>\n<span class=\"line\"><span style=\"\">// operands of the concat. We should emit x*y in three incoming basic blocks of</span></span>\n<span class=\"line\"><span style=\"\">// the concat because these basic blocks are not control-equivalent.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//      x*y</span></span>\n<span class=\"line\"><span style=\"\">//    /  |   \\</span></span>\n<span class=\"line\"><span style=\"\">// add1 add2 add3</span></span>\n<span class=\"line\"><span style=\"\">//    \\  |   /</span></span>\n<span class=\"line\"><span style=\"\">//     concat</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/xla/tests/concat_test.cc#L798-L806",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": true,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/xla/tests/concat_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Add a restore subgraph for each variable and connect to the restore_all op.</span></span>\n<span class=\"line\"><span style=\"\">// For each variable we add the following subgraph:</span></span>\n<span class=\"line\"><span style=\"\">//           Assign----restore_all</span></span>\n<span class=\"line\"><span style=\"\">//          |      |</span></span>\n<span class=\"line\"><span style=\"\">//   RestoreV2    Variable</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/core/common_runtime/quantize_training.cc#L243-L247",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/core/common_runtime/quantize_training.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Clones nodes to outside their cluster to avoid device-to-host copies.  For</span></span>\n<span class=\"line\"><span style=\"\">// instance, converts this:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         .....</span></span>\n<span class=\"line\"><span style=\"\">//           |</span></span>\n<span class=\"line\"><span style=\"\">//           v</span></span>\n<span class=\"line\"><span style=\"\">//      A_Clustered ====> C_Unclustered</span></span>\n<span class=\"line\"><span style=\"\">//           |</span></span>\n<span class=\"line\"><span style=\"\">//           v</span></span>\n<span class=\"line\"><span style=\"\">//      B_Clustered</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// to:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         .....</span></span>\n<span class=\"line\"><span style=\"\">//          | |</span></span>\n<span class=\"line\"><span style=\"\">//          | +-------------+</span></span>\n<span class=\"line\"><span style=\"\">//          |               |</span></span>\n<span class=\"line\"><span style=\"\">//          v               v</span></span>\n<span class=\"line\"><span style=\"\">//      A_Clustered   A_Unclustered ====> C_Unclustered</span></span>\n<span class=\"line\"><span style=\"\">//           |</span></span>\n<span class=\"line\"><span style=\"\">//           v</span></span>\n<span class=\"line\"><span style=\"\">//      B_Clustered</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// where the ===> arrow has a hostmem source and destination and would entail a</span></span>\n<span class=\"line\"><span style=\"\">// device to host copy if the source and destination were not in the same XLA</span></span>\n<span class=\"line\"><span style=\"\">// cluster.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/jit/partially_decluster_pass.cc#L162-L187",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": true
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/jit/partially_decluster_pass.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Rewrite a tree of Add/AddN with a single AddN operation, consuming all the</span></span>\n<span class=\"line\"><span style=\"\">// original inputs of absorbed nodes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 1) All nodes must have the same device placement.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 2) If All nodes in a Add/AddN subgraph have symbolically equal shape, tree is</span></span>\n<span class=\"line\"><span style=\"\">//    optimized to a single AddN node.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                AddN_1</span></span>\n<span class=\"line\"><span style=\"\">//             /    |    \\</span></span>\n<span class=\"line\"><span style=\"\">//          Add_1   z   Add_2       -> AddN(x, y, z, w, q, e)</span></span>\n<span class=\"line\"><span style=\"\">//          /  \\        /  \\</span></span>\n<span class=\"line\"><span style=\"\">//         x    y      w    Add_3</span></span>\n<span class=\"line\"><span style=\"\">//                          / \\</span></span>\n<span class=\"line\"><span style=\"\">//                         q   e</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 3) If some nodes have different shape (it needs to be broadcastable to the</span></span>\n<span class=\"line\"><span style=\"\">//    shape of a \"root), tree is optimized to AddNs for symbolically equal</span></span>\n<span class=\"line\"><span style=\"\">//    shapes, and a tree of Add ops, that minimize broadcasts.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//                AddN_1                                 Add</span></span>\n<span class=\"line\"><span style=\"\">//             /    |    \\                              /  \\</span></span>\n<span class=\"line\"><span style=\"\">//          Add_1   z   Add_2       ->               Add    w</span></span>\n<span class=\"line\"><span style=\"\">//          /  \\        /  \\                        /   \\</span></span>\n<span class=\"line\"><span style=\"\">//         x    y      w    Add_3      AddN(x, y, q, e)  z</span></span>\n<span class=\"line\"><span style=\"\">//                          / \\</span></span>\n<span class=\"line\"><span style=\"\">//                         q   e</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc#L517-L543",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": true,
          "graph": {
            "directed": false,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/core/grappler/optimizers/arithmetic_optimizer.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// TODO(b/157615690): clean up function implementation swap code.</span></span>\n<span class=\"line\"><span style=\"\">// The overall idea for the function swap is like below:</span></span>\n<span class=\"line\"><span style=\"\">//          -----------                            -----------</span></span>\n<span class=\"line\"><span style=\"\">//  inp_1 ->|  P_C    | -> out_1         g_inp_1 ->|  P_C    | -> g_out_1</span></span>\n<span class=\"line\"><span style=\"\">//  inp_2 ->| forward | -> out_2         g_inp_2 ->| backward| -> g_out_2</span></span>\n<span class=\"line\"><span style=\"\">//          | FUNC_1  | -> out_3         g_inp_3 ->| FUNC_1  |</span></span>\n<span class=\"line\"><span style=\"\">//          -----------                            -----------</span></span>\n<span class=\"line\"><span style=\"\">//           |  |  |                                 ^  ^  ^</span></span>\n<span class=\"line\"><span style=\"\">//           v  v  v                                 |  |  |</span></span>\n<span class=\"line\"><span style=\"\">//           s1 s2 s3                                s1 s2 s3</span></span>\n<span class=\"line\"><span style=\"\">//           |                                       ^</span></span>\n<span class=\"line\"><span style=\"\">//           |                                       |</span></span>\n<span class=\"line\"><span style=\"\">//           |             --------------            |</span></span>\n<span class=\"line\"><span style=\"\">//           |-----------> | Identity_1 | ---------->|</span></span>\n<span class=\"line\"><span style=\"\">//                         --------------</span></span>\n<span class=\"line\"><span style=\"\">// P_C: op Partitioned_call or stateful_partitioned_call</span></span>\n<span class=\"line\"><span style=\"\">// FUNC1 (forward): TF function generated for the forward path.</span></span>\n<span class=\"line\"><span style=\"\">// FUNC1 (backward): TF function generated for the backward path.</span></span>\n<span class=\"line\"><span style=\"\">// inp_x: input tensors for the forward path.</span></span>\n<span class=\"line\"><span style=\"\">// out_x: output tensors for the forward path.</span></span>\n<span class=\"line\"><span style=\"\">// g_inp_x: gradient input tensors for the backward path.</span></span>\n<span class=\"line\"><span style=\"\">// g_out_x: gradient output tensors for the backward path.</span></span>\n<span class=\"line\"><span style=\"\">// s_x: intermediate result generated by forward tf function, which will be</span></span>\n<span class=\"line\"><span style=\"\">//      consumed by backward function for gradient calculation.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// In the example above, the FUNC_1 takes 2 inputs, and return 3 outputs, in the</span></span>\n<span class=\"line\"><span style=\"\">// meantime, generate 3 intermediate results for gradient calculation.</span></span>\n<span class=\"line\"><span style=\"\">// The backward function will take 6 inputs, 3 for the gradient value for out_x,</span></span>\n<span class=\"line\"><span style=\"\">// and 3 for the intermediate results s1/2/3. It returns 2 outputs for gradient</span></span>\n<span class=\"line\"><span style=\"\">// value wrt inp_x.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Given the graph, especially after the device placement is done, we could</span></span>\n<span class=\"line\"><span style=\"\">// check if there is an alternative FUNC_2 that is better for the assigned</span></span>\n<span class=\"line\"><span style=\"\">// device type. Note that FUNC_2 (both forward and backward) should have same</span></span>\n<span class=\"line\"><span style=\"\">// amount of input output tensor with same dtype. However, it can generate</span></span>\n<span class=\"line\"><span style=\"\">// different intermediate state tensor, both number wise and type wise, since it</span></span>\n<span class=\"line\"><span style=\"\">// depends on the implementation detail.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Also note that there might be some Identity op being added to the output of</span></span>\n<span class=\"line\"><span style=\"\">// the forward function by IsolatePlacerInspectionRequiredOps for device</span></span>\n<span class=\"line\"><span style=\"\">// placement. When the output DTYPE changes when switching from FUNC_1 to</span></span>\n<span class=\"line\"><span style=\"\">// FUNC_2, the Identity node down the stream also need to be updated with new</span></span>\n<span class=\"line\"><span style=\"\">// DTYPE.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Based on this, the rewrite need to happen for following items:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// 1. P_C forward/backward need to use FUNC_2 instead of FUNC_1.</span></span>\n<span class=\"line\"><span style=\"\">// 2. The T_IN for P_C backward need to be updated since the s_x can be</span></span>\n<span class=\"line\"><span style=\"\">//    different between FUNC_1 and FUNC_2.</span></span>\n<span class=\"line\"><span style=\"\">// 3. The T_OUT for P_C forward need to be updated since the s_x can be</span></span>\n<span class=\"line\"><span style=\"\">//    different between FUNC_1 and FUNC_2.</span></span>\n<span class=\"line\"><span style=\"\">// 4. The input edge for P_C backward need to be updated since the amount of</span></span>\n<span class=\"line\"><span style=\"\">//    intermediate result can be different between FUNC_1 and FUNC_2.</span></span>\n<span class=\"line\"><span style=\"\">// 5. DTYPE of the Identity node after s_1/2/3 need to be updated if they exist.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/core/grappler/optimizers/implementation_selector.cc#L47-L100",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/core/grappler/optimizers/implementation_selector.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// In certain cases, we would like to insert an identity op between `input` and</span></span>\n<span class=\"line\"><span style=\"\">// `op` to ensure correctness.  We currently do this in 2 cases: when `input` is</span></span>\n<span class=\"line\"><span style=\"\">// Exit node, or when `input` is already marked for allocation with another</span></span>\n<span class=\"line\"><span style=\"\">// scoped allocator op.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If `input` is an Exit node, we add an identity to avoid the case when Exit</span></span>\n<span class=\"line\"><span style=\"\">// has inputs from different frames.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If `input` is in `sa_opti->repeated_outputs()`, this means that it will be</span></span>\n<span class=\"line\"><span style=\"\">// potentially used by multiple scope ids.  Since there can be only one scope id</span></span>\n<span class=\"line\"><span style=\"\">// per output, we insert an identity between the input and op.  This will ensure</span></span>\n<span class=\"line\"><span style=\"\">// that the identity becomes the new input to op, and this identity can be</span></span>\n<span class=\"line\"><span style=\"\">// marked with a new scope id different from `input`.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// If the graph is rewritten, this function will perform the following change:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  input                                  input</span></span>\n<span class=\"line\"><span style=\"\">//   |                                      |</span></span>\n<span class=\"line\"><span style=\"\">//   op                                  Identity</span></span>\n<span class=\"line\"><span style=\"\">//                                          |</span></span>\n<span class=\"line\"><span style=\"\">//                                          op</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// This function returns the input to op in `new_input`, and the output index</span></span>\n<span class=\"line\"><span style=\"\">// from input to op in `new_output_index`.</span></span>\n<span class=\"line\"><span style=\"\">// `edge_name` gives the name of the edge from `input` to `op`, and</span></span>\n<span class=\"line\"><span style=\"\">// `output_index` is the output index of this edge on `input`.</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/core/grappler/optimizers/scoped_allocator_optimizer.cc#L189-L214",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/core/grappler/optimizers/scoped_allocator_optimizer.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//------------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\">// A pattern can be defined by the following grammar. Here, op_type is any valid</span></span>\n<span class=\"line\"><span style=\"\">// op name in the TensorFlow.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    leaf_pattern ::= `{` op_type `}`</span></span>\n<span class=\"line\"><span style=\"\">//    pattern ::= leaf_pattern |</span></span>\n<span class=\"line\"><span style=\"\">//                `{` op_type `,` `{` pattern `,` ... `,` pattern `}` `}`</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// (1) For example, the following pattern syntax describes a pattern for</span></span>\n<span class=\"line\"><span style=\"\">// _FusedConv2D (Conv2D + BiasAdd + Relu). Note that \"*\" means any type of op.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  {\"Relu\",</span></span>\n<span class=\"line\"><span style=\"\">//    {</span></span>\n<span class=\"line\"><span style=\"\">//      \"BiasAdd\",</span></span>\n<span class=\"line\"><span style=\"\">//      {</span></span>\n<span class=\"line\"><span style=\"\">//        {\"Conv2D\"},</span></span>\n<span class=\"line\"><span style=\"\">//        {\"*\"}</span></span>\n<span class=\"line\"><span style=\"\">//      }</span></span>\n<span class=\"line\"><span style=\"\">//    }</span></span>\n<span class=\"line\"><span style=\"\">//  }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The syntax above has a root (\"Relu\") and children (inputs), where each child</span></span>\n<span class=\"line\"><span style=\"\">// is a sub-pattern. Graph pattern matcher finds a match for the given pattern</span></span>\n<span class=\"line\"><span style=\"\">// syntax in a graph and returns a set of matched nodes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// (2) In order to match a DAG with a given root, we extend pattern syntax with</span></span>\n<span class=\"line\"><span style=\"\">// labels. For example, a frequently found pattern in Deep Learning models is a</span></span>\n<span class=\"line\"><span style=\"\">// residual block like below.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//    Placeholder  Const</span></span>\n<span class=\"line\"><span style=\"\">//          |        |</span></span>\n<span class=\"line\"><span style=\"\">//    +-----+-----+  |</span></span>\n<span class=\"line\"><span style=\"\">//    |           |  |</span></span>\n<span class=\"line\"><span style=\"\">//    |           v  v</span></span>\n<span class=\"line\"><span style=\"\">//    |          Conv2D   Const</span></span>\n<span class=\"line\"><span style=\"\">//    |            |        |</span></span>\n<span class=\"line\"><span style=\"\">//    |            v  v-----+</span></span>\n<span class=\"line\"><span style=\"\">//    |          BiasAdd</span></span>\n<span class=\"line\"><span style=\"\">//    |            |</span></span>\n<span class=\"line\"><span style=\"\">//    v v----------+</span></span>\n<span class=\"line\"><span style=\"\">//   AddV2</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// As shown above, it is the same input node (Placeholder) consumed by both</span></span>\n<span class=\"line\"><span style=\"\">// AddV2 and and Conv2D. This constrained can be put as labels in the following</span></span>\n<span class=\"line\"><span style=\"\">// augmented pattern syntax.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  {\"AddV2\", \"my_add\",</span></span>\n<span class=\"line\"><span style=\"\">//    {</span></span>\n<span class=\"line\"><span style=\"\">//      {\"*\", \"my_residual_input\"},</span></span>\n<span class=\"line\"><span style=\"\">//      {\"BiasAdd\", \"my_bias_add\",</span></span>\n<span class=\"line\"><span style=\"\">//        {</span></span>\n<span class=\"line\"><span style=\"\">//          {\"Conv2D\", \"my_conv\",</span></span>\n<span class=\"line\"><span style=\"\">//            {</span></span>\n<span class=\"line\"><span style=\"\">//              {\"*\", \"my_residual_input\"},</span></span>\n<span class=\"line\"><span style=\"\">//              {\"*\", \"my_filter\"}</span></span>\n<span class=\"line\"><span style=\"\">//            }</span></span>\n<span class=\"line\"><span style=\"\">//          },</span></span>\n<span class=\"line\"><span style=\"\">//          {\"*\", my_bias\"}</span></span>\n<span class=\"line\"><span style=\"\">//        }</span></span>\n<span class=\"line\"><span style=\"\">//      }</span></span>\n<span class=\"line\"><span style=\"\">//    }</span></span>\n<span class=\"line\"><span style=\"\">//  }</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Note that the same label \"my_residual_input\" is used to tell that it is a</span></span>\n<span class=\"line\"><span style=\"\">// child of both \"AddV2\" and \"Conv2D\". Labels are arbitrary strings to associate</span></span>\n<span class=\"line\"><span style=\"\">// with the nodes to be matched as well as to uniquely identify those nodes.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// (3) The motivatation for a grammar based pattern matching in grappler is to</span></span>\n<span class=\"line\"><span style=\"\">// make easy for finding fusion pattern in the remapper. A subgraph that</span></span>\n<span class=\"line\"><span style=\"\">// matches a given pattern, however, is not fusable if any of the matched node,</span></span>\n<span class=\"line\"><span style=\"\">// that will be removed as a part of fusion, has a consumer outside the matched</span></span>\n<span class=\"line\"><span style=\"\">// subgraph. In order to check for such type of external dependencies, we</span></span>\n<span class=\"line\"><span style=\"\">// further extend pattern syntax by prospective action (NodeStatus) on the</span></span>\n<span class=\"line\"><span style=\"\">// matched nodes as shown below. This helps cross checking the nodes to be</span></span>\n<span class=\"line\"><span style=\"\">// removed with the nodes matched intially.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//  {\"AddV2\", \"my_add\", NodeStatus::kReplace,</span></span>\n<span class=\"line\"><span style=\"\">//    {</span></span>\n<span class=\"line\"><span style=\"\">//      {\"*\", \"my_residual_input\", NodeStatus::kRemain},</span></span>\n<span class=\"line\"><span style=\"\">//      {\"BiasAdd\", \"my_bias_add\", NodeStatus::kRemove,</span></span>\n<span class=\"line\"><span style=\"\">//        {</span></span>\n<span class=\"line\"><span style=\"\">//          {\"Conv2D\", \"my_conv\", NodeStatus::kRemove,</span></span>\n<span class=\"line\"><span style=\"\">//            {</span></span>\n<span class=\"line\"><span style=\"\">//              {\"*\", \"my_residual_input\", NodeStatus::kRemain},</span></span>\n<span class=\"line\"><span style=\"\">//              {\"*\", \"my_filter\", NodeStatus::Remain}</span></span>\n<span class=\"line\"><span style=\"\">//            }</span></span>\n<span class=\"line\"><span style=\"\">//          },</span></span>\n<span class=\"line\"><span style=\"\">//          {\"*\", my_bias\", NodeStatus::kRemain}</span></span>\n<span class=\"line\"><span style=\"\">//        }</span></span>\n<span class=\"line\"><span style=\"\">//      }</span></span>\n<span class=\"line\"><span style=\"\">//    }</span></span>\n<span class=\"line\"><span style=\"\">//  }</span></span>\n<span class=\"line\"><span style=\"\">//------------------------------------------------------------------------------</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/core/grappler/utils/pattern_utils.h#L25-L117",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": true
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": true,
        "multiple scenarios": {
          "over time": false,
          "other": true
        }
      },
      "scope": {
        "file": true,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": true,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/core/grappler/utils/pattern_utils.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">//                                         ________________</span></span>\n<span class=\"line\"><span style=\"\">// A more complex case: [tensor], (node), (partitioned node)</span></span>\n<span class=\"line\"><span style=\"\">//        _           _           _           _</span></span>\n<span class=\"line\"><span style=\"\">// [0]-->(0)-->[1]-->(1)-->[5]-->(4)-->[6]-->(5)-->[7]</span></span>\n<span class=\"line\"><span style=\"\">//                     \\</span></span>\n<span class=\"line\"><span style=\"\">//                      \\</span></span>\n<span class=\"line\"><span style=\"\">//                       \\>[2]-->(2)-->[3]-->(3)-->[4]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Greedy partitioning;</span></span>\n<span class=\"line\"><span style=\"\">//         ____</span></span>\n<span class=\"line\"><span style=\"\">//  [0]-->(0145)-->[7]</span></span>\n<span class=\"line\"><span style=\"\">//            \\</span></span>\n<span class=\"line\"><span style=\"\">//             \\-->[2]-->(23)-->[4]</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/graph_info_test.cc#L606-L619",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": false,
        "not whole file": {
          "multiple functions": false,
          "function": true,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": true,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": true,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/graph_info_test.cc"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// Tests scenarios involving a single delegate and control edges.</span></span>\n<span class=\"line\"><span style=\"\">// Subgraph 0 has the form</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         /---OP2---\\</span></span>\n<span class=\"line\"><span style=\"\">//        /           \\</span></span>\n<span class=\"line\"><span style=\"\">// >---OP0             OP3---></span></span>\n<span class=\"line\"><span style=\"\">//        \\           /</span></span>\n<span class=\"line\"><span style=\"\">//         \\---OP1---/</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// Delegating OP0, OP2 will generate an execution graph with a \"super-node\"</span></span>\n<span class=\"line\"><span style=\"\">// {OP0->OP2}, which can be disabled by adding (in metadata) a control edge</span></span>\n<span class=\"line\"><span style=\"\">// between OP1 and OP2:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         /->-OP2---\\</span></span>\n<span class=\"line\"><span style=\"\">//        /     ^     \\</span></span>\n<span class=\"line\"><span style=\"\">// >---OP0      ^      OP3---></span></span>\n<span class=\"line\"><span style=\"\">//        \\     ^     /</span></span>\n<span class=\"line\"><span style=\"\">//         \\---OP1---/</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/lite/delegates/delegate_test_util.h#L137-L155",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": true,
            "undirected": false
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": false,
        "multi-point": false,
        "range": false,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": false
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": true,
          "other": false
        }
      },
      "scope": {
        "file": false,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": true,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": true
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": false,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/lite/delegates/delegate_test_util.h"
  },
  {
    "html": "<pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"\">// We will caculate the total compute cost for each Func Op.</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The compute cost is simply an add-up of the costs of all the operations</span></span>\n<span class=\"line\"><span style=\"\">// within the FuncOp. (Excluding const ops since they're just \"data\".)</span></span>\n<span class=\"line\"><span style=\"\">// We will ignore quant/dequant/requant costs within the Func Op as well,</span></span>\n<span class=\"line\"><span style=\"\">// intuition:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// The assumpution is that quant/dequant/requant will only happen at the begin</span></span>\n<span class=\"line\"><span style=\"\">// and the end of the FuncOp (basically the \"boundaries\" of the subgraph).</span></span>\n<span class=\"line\"><span style=\"\">// So we can imagine if multiple \"same-inference-typed\" graph are presented at</span></span>\n<span class=\"line\"><span style=\"\">// the same time, the quant/dequant ops pair can be squashed:</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">//         dequant         ------------</span></span>\n<span class=\"line\"><span style=\"\">//            |</span></span>\n<span class=\"line\"><span style=\"\">//          ops...             FuncOp1</span></span>\n<span class=\"line\"><span style=\"\">//            |</span></span>\n<span class=\"line\"><span style=\"\">//         quant           -------------</span></span>\n<span class=\"line\"><span style=\"\">//           |         &#x3C;--- can be squashed</span></span>\n<span class=\"line\"><span style=\"\">//         dequant         -------------</span></span>\n<span class=\"line\"><span style=\"\">//            |</span></span>\n<span class=\"line\"><span style=\"\">//        ops...               FuncOp2</span></span>\n<span class=\"line\"><span style=\"\">//           |</span></span>\n<span class=\"line\"><span style=\"\">//         quant          ---------------</span></span>\n<span class=\"line\"><span style=\"\">//</span></span>\n<span class=\"line\"><span style=\"\">// But it's true quant &#x26; dequant ops can happen \"within\" the FuncOp as well,</span></span>\n<span class=\"line\"><span style=\"\">// normally as \"quantization params\" adjust. We should check more careful to</span></span>\n<span class=\"line\"><span style=\"\">// include those as those ops wouldn't be \"squashed\".</span></span>\n<span class=\"line\"><span style=\"\"></span></span></code></pre>",
    "url": "https://github.com/tensorflow/tensorflow/blob/5f3b48c8283266df2e17cfc2f1868397405cb5d0/tensorflow/compiler/mlir/lite/experimental/tac/transforms/compute_cost.cc#L44-L70",
    "codes": {
      "visual encoding": {
        "connection": {
          "linear": false,
          "tree": false,
          "graph": {
            "directed": false,
            "undirected": true
          }
        },
        "geometric layout (schematic)": false,
        "table": false,
        "nested": false,
        "sequential": {
          "single": false,
          "aligned": false
        },
        "math notation": false,
        "code annotation": false,
        "pictorial": false
      },
      "annotation": {
        "point": true,
        "multi-point": false,
        "range": true,
        "legend": false
      },
      "abstraction": {
        "unpatterned elision": {
          "fragment of bigger thing": false,
          "other": true
        },
        "patterned elision": {
          "enumerative": false,
          "other": false
        }
      },
      "multiples": {
        "multiple representations": false,
        "multiple scenarios": {
          "over time": false,
          "other": false
        }
      },
      "scope": {
        "file": true,
        "class": true,
        "not whole file": {
          "multiple functions": false,
          "function": false,
          "multiple statements": false,
          "statement": false
        }
      },
      "references": {
        "identifiers": false,
        "constants": false,
        "expressions": false
      },
      "concept": {
        "hardware": false,
        "data": {
          "data format": {
            "bit interpretation": false,
            "other": false
          },
          "data structure": false,
          "memory layout": false,
          "other": false
        },
        "resource management": {
          "memory": false,
          "other": false
        },
        "geometry / graphics": {
          "user interface sketch": false,
          "other": false
        },
        "algorithm / data processing": {
          "math formulas / calculation": false,
          "other": false
        },
        "test case": false,
        "synchronization": {
          "threads": false,
          "hardware signal timing": false,
          "queuing / scheduling": false,
          "other": false
        },
        "layout / architecture / ownership": {
          "actor interactions": false,
          "class diagrams": false,
          "other": false
        },
        "information flow / instructions": {
          "conditional control flow": {
            "state machines": false,
            "other": false
          },
          "data flow": false,
          "programs": true,
          "other": false
        }
      }
    },
    "path": "tensorflow/tensorflow/compiler/mlir/lite/experimental/tac/transforms/compute_cost.cc"
  }
]